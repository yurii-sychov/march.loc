(function () {
  'use strict';

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _assertClassBrand(e, t, n) {
    if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;
    throw new TypeError("Private element is not present on this object");
  }
  function asyncGeneratorStep(n, t, e, r, o, a, c) {
    try {
      var i = n[a](c),
        u = i.value;
    } catch (n) {
      return void e(n);
    }
    i.done ? t(u) : Promise.resolve(u).then(r, o);
  }
  function _asyncToGenerator(n) {
    return function () {
      var t = this,
        e = arguments;
      return new Promise(function (r, o) {
        var a = n.apply(t, e);
        function _next(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
        }
        function _throw(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
        }
        _next(void 0);
      });
    };
  }
  function _checkPrivateRedeclaration(e, t) {
    if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }
  function _classPrivateFieldGet2(s, a) {
    return s.get(_assertClassBrand(s, a));
  }
  function _classPrivateFieldInitSpec(e, t, a) {
    _checkPrivateRedeclaration(e, t), t.set(e, a);
  }
  function _classPrivateFieldSet2(s, a, r) {
    return s.set(_assertClassBrand(s, a), r), r;
  }
  function _classPrivateMethodInitSpec(e, a) {
    _checkPrivateRedeclaration(e, a), a.add(e);
  }
  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: !1
    }), e;
  }
  function _createForOfIteratorHelper(r, e) {
    var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (!t) {
      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {
        t && (r = t);
        var n = 0,
          F = function () {};
        return {
          s: F,
          n: function () {
            return n >= r.length ? {
              done: !0
            } : {
              done: !1,
              value: r[n++]
            };
          },
          e: function (r) {
            throw r;
          },
          f: F
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o,
      a = !0,
      u = !1;
    return {
      s: function () {
        t = t.call(r);
      },
      n: function () {
        var r = t.next();
        return a = r.done, r;
      },
      e: function (r) {
        u = !0, o = r;
      },
      f: function () {
        try {
          a || null == t.return || t.return();
        } finally {
          if (u) throw o;
        }
      }
    };
  }
  function _defineProperty(e, r, t) {
    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[r] = t, e;
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = !0,
        o = !1;
      try {
        if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = !0, n = r;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function (r) {
        return Object.getOwnPropertyDescriptor(e, r).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
        _defineProperty(e, r, t[r]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
      });
    }
    return e;
  }
  function _regeneratorRuntime() {
    _regeneratorRuntime = function () {
      return e;
    };
    var t,
      e = {},
      r = Object.prototype,
      n = r.hasOwnProperty,
      o = Object.defineProperty || function (t, e, r) {
        t[e] = r.value;
      },
      i = "function" == typeof Symbol ? Symbol : {},
      a = i.iterator || "@@iterator",
      c = i.asyncIterator || "@@asyncIterator",
      u = i.toStringTag || "@@toStringTag";
    function define(t, e, r) {
      return Object.defineProperty(t, e, {
        value: r,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), t[e];
    }
    try {
      define({}, "");
    } catch (t) {
      define = function (t, e, r) {
        return t[e] = r;
      };
    }
    function wrap(t, e, r, n) {
      var i = e && e.prototype instanceof Generator ? e : Generator,
        a = Object.create(i.prototype),
        c = new Context(n || []);
      return o(a, "_invoke", {
        value: makeInvokeMethod(t, r, c)
      }), a;
    }
    function tryCatch(t, e, r) {
      try {
        return {
          type: "normal",
          arg: t.call(e, r)
        };
      } catch (t) {
        return {
          type: "throw",
          arg: t
        };
      }
    }
    e.wrap = wrap;
    var h = "suspendedStart",
      l = "suspendedYield",
      f = "executing",
      s = "completed",
      y = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var p = {};
    define(p, a, function () {
      return this;
    });
    var d = Object.getPrototypeOf,
      v = d && d(d(values([])));
    v && v !== r && n.call(v, a) && (p = v);
    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
    function defineIteratorMethods(t) {
      ["next", "throw", "return"].forEach(function (e) {
        define(t, e, function (t) {
          return this._invoke(e, t);
        });
      });
    }
    function AsyncIterator(t, e) {
      function invoke(r, o, i, a) {
        var c = tryCatch(t[r], t, o);
        if ("throw" !== c.type) {
          var u = c.arg,
            h = u.value;
          return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
            invoke("next", t, i, a);
          }, function (t) {
            invoke("throw", t, i, a);
          }) : e.resolve(h).then(function (t) {
            u.value = t, i(u);
          }, function (t) {
            return invoke("throw", t, i, a);
          });
        }
        a(c.arg);
      }
      var r;
      o(this, "_invoke", {
        value: function (t, n) {
          function callInvokeWithMethodAndArg() {
            return new e(function (e, r) {
              invoke(t, n, e, r);
            });
          }
          return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(e, r, n) {
      var o = h;
      return function (i, a) {
        if (o === f) throw Error("Generator is already running");
        if (o === s) {
          if ("throw" === i) throw a;
          return {
            value: t,
            done: !0
          };
        }
        for (n.method = i, n.arg = a;;) {
          var c = n.delegate;
          if (c) {
            var u = maybeInvokeDelegate(c, n);
            if (u) {
              if (u === y) continue;
              return u;
            }
          }
          if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
            if (o === h) throw o = s, n.arg;
            n.dispatchException(n.arg);
          } else "return" === n.method && n.abrupt("return", n.arg);
          o = f;
          var p = tryCatch(e, r, n);
          if ("normal" === p.type) {
            if (o = n.done ? s : l, p.arg === y) continue;
            return {
              value: p.arg,
              done: n.done
            };
          }
          "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
        }
      };
    }
    function maybeInvokeDelegate(e, r) {
      var n = r.method,
        o = e.iterator[n];
      if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
      var i = tryCatch(o, e.iterator, r.arg);
      if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
      var a = i.arg;
      return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
    }
    function pushTryEntry(t) {
      var e = {
        tryLoc: t[0]
      };
      1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
    }
    function resetTryEntry(t) {
      var e = t.completion || {};
      e.type = "normal", delete e.arg, t.completion = e;
    }
    function Context(t) {
      this.tryEntries = [{
        tryLoc: "root"
      }], t.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(e) {
      if (e || "" === e) {
        var r = e[a];
        if (r) return r.call(e);
        if ("function" == typeof e.next) return e;
        if (!isNaN(e.length)) {
          var o = -1,
            i = function next() {
              for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
              return next.value = t, next.done = !0, next;
            };
          return i.next = i;
        }
      }
      throw new TypeError(typeof e + " is not iterable");
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), o(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
      var e = "function" == typeof t && t.constructor;
      return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
    }, e.mark = function (t) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
    }, e.awrap = function (t) {
      return {
        __await: t
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
      return this;
    }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
      void 0 === i && (i = Promise);
      var a = new AsyncIterator(wrap(t, r, n, o), i);
      return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
        return t.done ? t.value : a.next();
      });
    }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
      return this;
    }), define(g, "toString", function () {
      return "[object Generator]";
    }), e.keys = function (t) {
      var e = Object(t),
        r = [];
      for (var n in e) r.push(n);
      return r.reverse(), function next() {
        for (; r.length;) {
          var t = r.pop();
          if (t in e) return next.value = t, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, e.values = values, Context.prototype = {
      constructor: Context,
      reset: function (e) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
      },
      stop: function () {
        this.done = !0;
        var t = this.tryEntries[0].completion;
        if ("throw" === t.type) throw t.arg;
        return this.rval;
      },
      dispatchException: function (e) {
        if (this.done) throw e;
        var r = this;
        function handle(n, o) {
          return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
        }
        for (var o = this.tryEntries.length - 1; o >= 0; --o) {
          var i = this.tryEntries[o],
            a = i.completion;
          if ("root" === i.tryLoc) return handle("end");
          if (i.tryLoc <= this.prev) {
            var c = n.call(i, "catchLoc"),
              u = n.call(i, "finallyLoc");
            if (c && u) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            } else if (c) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            } else {
              if (!u) throw Error("try statement without catch or finally");
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            }
          }
        }
      },
      abrupt: function (t, e) {
        for (var r = this.tryEntries.length - 1; r >= 0; --r) {
          var o = this.tryEntries[r];
          if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
            var i = o;
            break;
          }
        }
        i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
        var a = i ? i.completion : {};
        return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
      },
      complete: function (t, e) {
        if ("throw" === t.type) throw t.arg;
        return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
      },
      finish: function (t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
        }
      },
      catch: function (t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.tryLoc === t) {
            var n = r.completion;
            if ("throw" === n.type) {
              var o = n.arg;
              resetTryEntry(r);
            }
            return o;
          }
        }
        throw Error("illegal catch attempt");
      },
      delegateYield: function (e, r, n) {
        return this.delegate = {
          iterator: values(e),
          resultName: r,
          nextLoc: n
        }, "next" === this.method && (this.arg = t), y;
      }
    }, e;
  }
  function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }

  /**
   * SSR Window 4.0.2
   * Better handling for window object in SSR environment
   * https://github.com/nolimits4web/ssr-window
   *
   * Copyright 2021, Vladimir Kharlampidi
   *
   * Licensed under MIT
   *
   * Released on: December 13, 2021
   */
  /* eslint-disable no-param-reassign */
  function isObject$1(obj) {
    return obj !== null && _typeof(obj) === 'object' && 'constructor' in obj && obj.constructor === Object;
  }
  function extend$1(target, src) {
    if (target === void 0) {
      target = {};
    }
    if (src === void 0) {
      src = {};
    }
    Object.keys(src).forEach(function (key) {
      if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject$1(src[key]) && isObject$1(target[key]) && Object.keys(src[key]).length > 0) {
        extend$1(target[key], src[key]);
      }
    });
  }
  var ssrDocument = {
    body: {},
    addEventListener: function addEventListener() {},
    removeEventListener: function removeEventListener() {},
    activeElement: {
      blur: function blur() {},
      nodeName: ''
    },
    querySelector: function querySelector() {
      return null;
    },
    querySelectorAll: function querySelectorAll() {
      return [];
    },
    getElementById: function getElementById() {
      return null;
    },
    createEvent: function createEvent() {
      return {
        initEvent: function initEvent() {}
      };
    },
    createElement: function createElement() {
      return {
        children: [],
        childNodes: [],
        style: {},
        setAttribute: function setAttribute() {},
        getElementsByTagName: function getElementsByTagName() {
          return [];
        }
      };
    },
    createElementNS: function createElementNS() {
      return {};
    },
    importNode: function importNode() {
      return null;
    },
    location: {
      hash: '',
      host: '',
      hostname: '',
      href: '',
      origin: '',
      pathname: '',
      protocol: '',
      search: ''
    }
  };
  function getDocument() {
    var doc = typeof document !== 'undefined' ? document : {};
    extend$1(doc, ssrDocument);
    return doc;
  }
  var ssrWindow = {
    document: ssrDocument,
    navigator: {
      userAgent: ''
    },
    location: {
      hash: '',
      host: '',
      hostname: '',
      href: '',
      origin: '',
      pathname: '',
      protocol: '',
      search: ''
    },
    history: {
      replaceState: function replaceState() {},
      pushState: function pushState() {},
      go: function go() {},
      back: function back() {}
    },
    CustomEvent: function CustomEvent() {
      return this;
    },
    addEventListener: function addEventListener() {},
    removeEventListener: function removeEventListener() {},
    getComputedStyle: function getComputedStyle() {
      return {
        getPropertyValue: function getPropertyValue() {
          return '';
        }
      };
    },
    Image: function Image() {},
    Date: function Date() {},
    screen: {},
    setTimeout: function setTimeout() {},
    clearTimeout: function clearTimeout() {},
    matchMedia: function matchMedia() {
      return {};
    },
    requestAnimationFrame: function requestAnimationFrame(callback) {
      if (typeof setTimeout === 'undefined') {
        callback();
        return null;
      }
      return setTimeout(callback, 0);
    },
    cancelAnimationFrame: function cancelAnimationFrame(id) {
      if (typeof setTimeout === 'undefined') {
        return;
      }
      clearTimeout(id);
    }
  };
  function getWindow() {
    var win = typeof window !== 'undefined' ? window : {};
    extend$1(win, ssrWindow);
    return win;
  }

  function classesToTokens(classes) {
    if (classes === void 0) {
      classes = '';
    }
    return classes.trim().split(' ').filter(function (c) {
      return !!c.trim();
    });
  }
  function deleteProps(obj) {
    var object = obj;
    Object.keys(object).forEach(function (key) {
      try {
        object[key] = null;
      } catch (e) {
        // no getter for object
      }
      try {
        delete object[key];
      } catch (e) {
        // something got wrong
      }
    });
  }
  function nextTick(callback, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return setTimeout(callback, delay);
  }
  function now() {
    return Date.now();
  }
  function getComputedStyle$1(el) {
    var window = getWindow();
    var style;
    if (window.getComputedStyle) {
      style = window.getComputedStyle(el, null);
    }
    if (!style && el.currentStyle) {
      style = el.currentStyle;
    }
    if (!style) {
      style = el.style;
    }
    return style;
  }
  function getTranslate(el, axis) {
    if (axis === void 0) {
      axis = 'x';
    }
    var window = getWindow();
    var matrix;
    var curTransform;
    var transformMatrix;
    var curStyle = getComputedStyle$1(el);
    if (window.WebKitCSSMatrix) {
      curTransform = curStyle.transform || curStyle.webkitTransform;
      if (curTransform.split(',').length > 6) {
        curTransform = curTransform.split(', ').map(function (a) {
          return a.replace(',', '.');
        }).join(', ');
      }
      // Some old versions of Webkit choke when 'none' is passed; pass
      // empty string instead in this case
      transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
    } else {
      transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
      matrix = transformMatrix.toString().split(',');
    }
    if (axis === 'x') {
      // Latest Chrome and webkits Fix
      if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41;
      // Crazy IE10 Matrix
      else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);
      // Normal Browsers
      else curTransform = parseFloat(matrix[4]);
    }
    if (axis === 'y') {
      // Latest Chrome and webkits Fix
      if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42;
      // Crazy IE10 Matrix
      else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);
      // Normal Browsers
      else curTransform = parseFloat(matrix[5]);
    }
    return curTransform || 0;
  }
  function isObject(o) {
    return _typeof(o) === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';
  }
  function isNode(node) {
    // eslint-disable-next-line
    if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {
      return node instanceof HTMLElement;
    }
    return node && (node.nodeType === 1 || node.nodeType === 11);
  }
  function extend() {
    var to = Object(arguments.length <= 0 ? undefined : arguments[0]);
    var noExtend = ['__proto__', 'constructor', 'prototype'];
    for (var i = 1; i < arguments.length; i += 1) {
      var nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];
      if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {
        var keysArray = Object.keys(Object(nextSource)).filter(function (key) {
          return noExtend.indexOf(key) < 0;
        });
        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
          var nextKey = keysArray[nextIndex];
          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
          if (desc !== undefined && desc.enumerable) {
            if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
              if (nextSource[nextKey].__swiper__) {
                to[nextKey] = nextSource[nextKey];
              } else {
                extend(to[nextKey], nextSource[nextKey]);
              }
            } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
              to[nextKey] = {};
              if (nextSource[nextKey].__swiper__) {
                to[nextKey] = nextSource[nextKey];
              } else {
                extend(to[nextKey], nextSource[nextKey]);
              }
            } else {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
    }
    return to;
  }
  function setCSSProperty(el, varName, varValue) {
    el.style.setProperty(varName, varValue);
  }
  function animateCSSModeScroll(_ref) {
    var swiper = _ref.swiper,
      targetPosition = _ref.targetPosition,
      side = _ref.side;
    var window = getWindow();
    var startPosition = -swiper.translate;
    var startTime = null;
    var time;
    var duration = swiper.params.speed;
    swiper.wrapperEl.style.scrollSnapType = 'none';
    window.cancelAnimationFrame(swiper.cssModeFrameID);
    var dir = targetPosition > startPosition ? 'next' : 'prev';
    var isOutOfBound = function isOutOfBound(current, target) {
      return dir === 'next' && current >= target || dir === 'prev' && current <= target;
    };
    var _animate = function animate() {
      time = new Date().getTime();
      if (startTime === null) {
        startTime = time;
      }
      var progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
      var easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;
      var currentPosition = startPosition + easeProgress * (targetPosition - startPosition);
      if (isOutOfBound(currentPosition, targetPosition)) {
        currentPosition = targetPosition;
      }
      swiper.wrapperEl.scrollTo(_defineProperty({}, side, currentPosition));
      if (isOutOfBound(currentPosition, targetPosition)) {
        swiper.wrapperEl.style.overflow = 'hidden';
        swiper.wrapperEl.style.scrollSnapType = '';
        setTimeout(function () {
          swiper.wrapperEl.style.overflow = '';
          swiper.wrapperEl.scrollTo(_defineProperty({}, side, currentPosition));
        });
        window.cancelAnimationFrame(swiper.cssModeFrameID);
        return;
      }
      swiper.cssModeFrameID = window.requestAnimationFrame(_animate);
    };
    _animate();
  }
  function elementChildren(element, selector) {
    if (selector === void 0) {
      selector = '';
    }
    var children = _toConsumableArray(element.children);
    if (element instanceof HTMLSlotElement) {
      children.push.apply(children, _toConsumableArray(element.assignedElements()));
    }
    if (!selector) {
      return children;
    }
    return children.filter(function (el) {
      return el.matches(selector);
    });
  }
  function elementIsChildOf(el, parent) {
    var isChild = parent.contains(el);
    if (!isChild && parent instanceof HTMLSlotElement) {
      var children = _toConsumableArray(parent.assignedElements());
      return children.includes(el);
    }
    return isChild;
  }
  function showWarning(text) {
    try {
      console.warn(text);
      return;
    } catch (err) {
      // err
    }
  }
  function createElement(tag, classes) {
    var _el$classList;
    if (classes === void 0) {
      classes = [];
    }
    var el = document.createElement(tag);
    (_el$classList = el.classList).add.apply(_el$classList, _toConsumableArray(Array.isArray(classes) ? classes : classesToTokens(classes)));
    return el;
  }
  function elementPrevAll(el, selector) {
    var prevEls = [];
    while (el.previousElementSibling) {
      var prev = el.previousElementSibling; // eslint-disable-line
      if (selector) {
        if (prev.matches(selector)) prevEls.push(prev);
      } else prevEls.push(prev);
      el = prev;
    }
    return prevEls;
  }
  function elementNextAll(el, selector) {
    var nextEls = [];
    while (el.nextElementSibling) {
      var next = el.nextElementSibling; // eslint-disable-line
      if (selector) {
        if (next.matches(selector)) nextEls.push(next);
      } else nextEls.push(next);
      el = next;
    }
    return nextEls;
  }
  function elementStyle(el, prop) {
    var window = getWindow();
    return window.getComputedStyle(el, null).getPropertyValue(prop);
  }
  function elementIndex(el) {
    var child = el;
    var i;
    if (child) {
      i = 0;
      // eslint-disable-next-line
      while ((child = child.previousSibling) !== null) {
        if (child.nodeType === 1) i += 1;
      }
      return i;
    }
    return undefined;
  }
  function elementParents(el, selector) {
    var parents = []; // eslint-disable-line
    var parent = el.parentElement; // eslint-disable-line
    while (parent) {
      {
        parents.push(parent);
      }
      parent = parent.parentElement;
    }
    return parents;
  }
  function elementOuterSize(el, size, includeMargins) {
    var window = getWindow();
    {
      return el[size === 'width' ? 'offsetWidth' : 'offsetHeight'] + parseFloat(window.getComputedStyle(el, null).getPropertyValue(size === 'width' ? 'margin-right' : 'margin-top')) + parseFloat(window.getComputedStyle(el, null).getPropertyValue(size === 'width' ? 'margin-left' : 'margin-bottom'));
    }
  }
  function makeElementsArray(el) {
    return (Array.isArray(el) ? el : [el]).filter(function (e) {
      return !!e;
    });
  }

  var support;
  function calcSupport() {
    var window = getWindow();
    var document = getDocument();
    return {
      smoothScroll: document.documentElement && document.documentElement.style && 'scrollBehavior' in document.documentElement.style,
      touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch)
    };
  }
  function getSupport() {
    if (!support) {
      support = calcSupport();
    }
    return support;
  }
  var deviceCached;
  function calcDevice(_temp) {
    var _ref3 = _temp === void 0 ? {} : _temp,
      userAgent = _ref3.userAgent;
    var support = getSupport();
    var window = getWindow();
    var platform = window.navigator.platform;
    var ua = userAgent || window.navigator.userAgent;
    var device = {
      ios: false,
      android: false
    };
    var screenWidth = window.screen.width;
    var screenHeight = window.screen.height;
    var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line
    var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
    var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
    var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
    var windows = platform === 'Win32';
    var macos = platform === 'MacIntel';

    // iPadOs 13 fix
    var iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];
    if (!ipad && macos && support.touch && iPadScreens.indexOf("".concat(screenWidth, "x").concat(screenHeight)) >= 0) {
      ipad = ua.match(/(Version)\/([\d.]+)/);
      if (!ipad) ipad = [0, 1, '13_0_0'];
      macos = false;
    }

    // Android
    if (android && !windows) {
      device.os = 'android';
      device.android = true;
    }
    if (ipad || iphone || ipod) {
      device.os = 'ios';
      device.ios = true;
    }

    // Export object
    return device;
  }
  function getDevice(overrides) {
    if (overrides === void 0) {
      overrides = {};
    }
    if (!deviceCached) {
      deviceCached = calcDevice(overrides);
    }
    return deviceCached;
  }
  var browser;
  function calcBrowser() {
    var window = getWindow();
    var device = getDevice();
    var needPerspectiveFix = false;
    function isSafari() {
      var ua = window.navigator.userAgent.toLowerCase();
      return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;
    }
    if (isSafari()) {
      var ua = String(window.navigator.userAgent);
      if (ua.includes('Version/')) {
        var _ua$split$1$split$0$s = ua.split('Version/')[1].split(' ')[0].split('.').map(function (num) {
            return Number(num);
          }),
          _ua$split$1$split$0$s2 = _slicedToArray(_ua$split$1$split$0$s, 2),
          major = _ua$split$1$split$0$s2[0],
          minor = _ua$split$1$split$0$s2[1];
        needPerspectiveFix = major < 16 || major === 16 && minor < 2;
      }
    }
    var isWebView = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent);
    var isSafariBrowser = isSafari();
    var need3dFix = isSafariBrowser || isWebView && device.ios;
    return {
      isSafari: needPerspectiveFix || isSafariBrowser,
      needPerspectiveFix: needPerspectiveFix,
      need3dFix: need3dFix,
      isWebView: isWebView
    };
  }
  function getBrowser() {
    if (!browser) {
      browser = calcBrowser();
    }
    return browser;
  }
  function Resize(_ref) {
    var swiper = _ref.swiper,
      on = _ref.on,
      emit = _ref.emit;
    var window = getWindow();
    var observer = null;
    var animationFrame = null;
    var resizeHandler = function resizeHandler() {
      if (!swiper || swiper.destroyed || !swiper.initialized) return;
      emit('beforeResize');
      emit('resize');
    };
    var createObserver = function createObserver() {
      if (!swiper || swiper.destroyed || !swiper.initialized) return;
      observer = new ResizeObserver(function (entries) {
        animationFrame = window.requestAnimationFrame(function () {
          var width = swiper.width,
            height = swiper.height;
          var newWidth = width;
          var newHeight = height;
          entries.forEach(function (_ref2) {
            var contentBoxSize = _ref2.contentBoxSize,
              contentRect = _ref2.contentRect,
              target = _ref2.target;
            if (target && target !== swiper.el) return;
            newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;
            newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;
          });
          if (newWidth !== width || newHeight !== height) {
            resizeHandler();
          }
        });
      });
      observer.observe(swiper.el);
    };
    var removeObserver = function removeObserver() {
      if (animationFrame) {
        window.cancelAnimationFrame(animationFrame);
      }
      if (observer && observer.unobserve && swiper.el) {
        observer.unobserve(swiper.el);
        observer = null;
      }
    };
    var orientationChangeHandler = function orientationChangeHandler() {
      if (!swiper || swiper.destroyed || !swiper.initialized) return;
      emit('orientationchange');
    };
    on('init', function () {
      if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {
        createObserver();
        return;
      }
      window.addEventListener('resize', resizeHandler);
      window.addEventListener('orientationchange', orientationChangeHandler);
    });
    on('destroy', function () {
      removeObserver();
      window.removeEventListener('resize', resizeHandler);
      window.removeEventListener('orientationchange', orientationChangeHandler);
    });
  }
  function Observer(_ref) {
    var swiper = _ref.swiper,
      extendParams = _ref.extendParams,
      on = _ref.on,
      emit = _ref.emit;
    var observers = [];
    var window = getWindow();
    var attach = function attach(target, options) {
      if (options === void 0) {
        options = {};
      }
      var ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;
      var observer = new ObserverFunc(function (mutations) {
        // The observerUpdate event should only be triggered
        // once despite the number of mutations.  Additional
        // triggers are redundant and are very costly
        if (swiper.__preventObserver__) return;
        if (mutations.length === 1) {
          emit('observerUpdate', mutations[0]);
          return;
        }
        var observerUpdate = function observerUpdate() {
          emit('observerUpdate', mutations[0]);
        };
        if (window.requestAnimationFrame) {
          window.requestAnimationFrame(observerUpdate);
        } else {
          window.setTimeout(observerUpdate, 0);
        }
      });
      observer.observe(target, {
        attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
        childList: swiper.isElement || (typeof options.childList === 'undefined' ? true : options).childList,
        characterData: typeof options.characterData === 'undefined' ? true : options.characterData
      });
      observers.push(observer);
    };
    var init = function init() {
      if (!swiper.params.observer) return;
      if (swiper.params.observeParents) {
        var containerParents = elementParents(swiper.hostEl);
        for (var i = 0; i < containerParents.length; i += 1) {
          attach(containerParents[i]);
        }
      }
      // Observe container
      attach(swiper.hostEl, {
        childList: swiper.params.observeSlideChildren
      });

      // Observe wrapper
      attach(swiper.wrapperEl, {
        attributes: false
      });
    };
    var destroy = function destroy() {
      observers.forEach(function (observer) {
        observer.disconnect();
      });
      observers.splice(0, observers.length);
    };
    extendParams({
      observer: false,
      observeParents: false,
      observeSlideChildren: false
    });
    on('init', init);
    on('destroy', destroy);
  }

  /* eslint-disable no-underscore-dangle */

  var eventsEmitter = {
    on: function on(events, handler, priority) {
      var self = this;
      if (!self.eventsListeners || self.destroyed) return self;
      if (typeof handler !== 'function') return self;
      var method = priority ? 'unshift' : 'push';
      events.split(' ').forEach(function (event) {
        if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
        self.eventsListeners[event][method](handler);
      });
      return self;
    },
    once: function once(events, handler, priority) {
      var self = this;
      if (!self.eventsListeners || self.destroyed) return self;
      if (typeof handler !== 'function') return self;
      function onceHandler() {
        self.off(events, onceHandler);
        if (onceHandler.__emitterProxy) {
          delete onceHandler.__emitterProxy;
        }
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        handler.apply(self, args);
      }
      onceHandler.__emitterProxy = handler;
      return self.on(events, onceHandler, priority);
    },
    onAny: function onAny(handler, priority) {
      var self = this;
      if (!self.eventsListeners || self.destroyed) return self;
      if (typeof handler !== 'function') return self;
      var method = priority ? 'unshift' : 'push';
      if (self.eventsAnyListeners.indexOf(handler) < 0) {
        self.eventsAnyListeners[method](handler);
      }
      return self;
    },
    offAny: function offAny(handler) {
      var self = this;
      if (!self.eventsListeners || self.destroyed) return self;
      if (!self.eventsAnyListeners) return self;
      var index = self.eventsAnyListeners.indexOf(handler);
      if (index >= 0) {
        self.eventsAnyListeners.splice(index, 1);
      }
      return self;
    },
    off: function off(events, handler) {
      var self = this;
      if (!self.eventsListeners || self.destroyed) return self;
      if (!self.eventsListeners) return self;
      events.split(' ').forEach(function (event) {
        if (typeof handler === 'undefined') {
          self.eventsListeners[event] = [];
        } else if (self.eventsListeners[event]) {
          self.eventsListeners[event].forEach(function (eventHandler, index) {
            if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {
              self.eventsListeners[event].splice(index, 1);
            }
          });
        }
      });
      return self;
    },
    emit: function emit() {
      var self = this;
      if (!self.eventsListeners || self.destroyed) return self;
      if (!self.eventsListeners) return self;
      var events;
      var data;
      var context;
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      if (typeof args[0] === 'string' || Array.isArray(args[0])) {
        events = args[0];
        data = args.slice(1, args.length);
        context = self;
      } else {
        events = args[0].events;
        data = args[0].data;
        context = args[0].context || self;
      }
      data.unshift(context);
      var eventsArray = Array.isArray(events) ? events : events.split(' ');
      eventsArray.forEach(function (event) {
        if (self.eventsAnyListeners && self.eventsAnyListeners.length) {
          self.eventsAnyListeners.forEach(function (eventHandler) {
            eventHandler.apply(context, [event].concat(_toConsumableArray(data)));
          });
        }
        if (self.eventsListeners && self.eventsListeners[event]) {
          self.eventsListeners[event].forEach(function (eventHandler) {
            eventHandler.apply(context, data);
          });
        }
      });
      return self;
    }
  };
  function updateSize() {
    var swiper = this;
    var width;
    var height;
    var el = swiper.el;
    if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {
      width = swiper.params.width;
    } else {
      width = el.clientWidth;
    }
    if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {
      height = swiper.params.height;
    } else {
      height = el.clientHeight;
    }
    if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {
      return;
    }

    // Subtract paddings
    width = width - parseInt(elementStyle(el, 'padding-left') || 0, 10) - parseInt(elementStyle(el, 'padding-right') || 0, 10);
    height = height - parseInt(elementStyle(el, 'padding-top') || 0, 10) - parseInt(elementStyle(el, 'padding-bottom') || 0, 10);
    if (Number.isNaN(width)) width = 0;
    if (Number.isNaN(height)) height = 0;
    Object.assign(swiper, {
      width: width,
      height: height,
      size: swiper.isHorizontal() ? width : height
    });
  }
  function updateSlides() {
    var swiper = this;
    function getDirectionPropertyValue(node, label) {
      return parseFloat(node.getPropertyValue(swiper.getDirectionLabel(label)) || 0);
    }
    var params = swiper.params;
    var wrapperEl = swiper.wrapperEl,
      slidesEl = swiper.slidesEl,
      swiperSize = swiper.size,
      rtl = swiper.rtlTranslate,
      wrongRTL = swiper.wrongRTL;
    var isVirtual = swiper.virtual && params.virtual.enabled;
    var previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
    var slides = elementChildren(slidesEl, ".".concat(swiper.params.slideClass, ", swiper-slide"));
    var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
    var snapGrid = [];
    var slidesGrid = [];
    var slidesSizesGrid = [];
    var offsetBefore = params.slidesOffsetBefore;
    if (typeof offsetBefore === 'function') {
      offsetBefore = params.slidesOffsetBefore.call(swiper);
    }
    var offsetAfter = params.slidesOffsetAfter;
    if (typeof offsetAfter === 'function') {
      offsetAfter = params.slidesOffsetAfter.call(swiper);
    }
    var previousSnapGridLength = swiper.snapGrid.length;
    var previousSlidesGridLength = swiper.slidesGrid.length;
    var spaceBetween = params.spaceBetween;
    var slidePosition = -offsetBefore;
    var prevSlideSize = 0;
    var index = 0;
    if (typeof swiperSize === 'undefined') {
      return;
    }
    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;
    } else if (typeof spaceBetween === 'string') {
      spaceBetween = parseFloat(spaceBetween);
    }
    swiper.virtualSize = -spaceBetween;

    // reset margins
    slides.forEach(function (slideEl) {
      if (rtl) {
        slideEl.style.marginLeft = '';
      } else {
        slideEl.style.marginRight = '';
      }
      slideEl.style.marginBottom = '';
      slideEl.style.marginTop = '';
    });

    // reset cssMode offsets
    if (params.centeredSlides && params.cssMode) {
      setCSSProperty(wrapperEl, '--swiper-centered-offset-before', '');
      setCSSProperty(wrapperEl, '--swiper-centered-offset-after', '');
    }
    var gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;
    if (gridEnabled) {
      swiper.grid.initSlides(slides);
    } else if (swiper.grid) {
      swiper.grid.unsetSlides();
    }

    // Calc slides
    var slideSize;
    var shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(function (key) {
      return typeof params.breakpoints[key].slidesPerView !== 'undefined';
    }).length > 0;
    for (var i = 0; i < slidesLength; i += 1) {
      slideSize = 0;
      var _slide = void 0;
      if (slides[i]) _slide = slides[i];
      if (gridEnabled) {
        swiper.grid.updateSlide(i, _slide, slides);
      }
      if (slides[i] && elementStyle(_slide, 'display') === 'none') continue; // eslint-disable-line

      if (params.slidesPerView === 'auto') {
        if (shouldResetSlideSize) {
          slides[i].style[swiper.getDirectionLabel('width')] = "";
        }
        var slideStyles = getComputedStyle(_slide);
        var currentTransform = _slide.style.transform;
        var currentWebKitTransform = _slide.style.webkitTransform;
        if (currentTransform) {
          _slide.style.transform = 'none';
        }
        if (currentWebKitTransform) {
          _slide.style.webkitTransform = 'none';
        }
        if (params.roundLengths) {
          slideSize = swiper.isHorizontal() ? elementOuterSize(_slide, 'width') : elementOuterSize(_slide, 'height');
        } else {
          // eslint-disable-next-line
          var width = getDirectionPropertyValue(slideStyles, 'width');
          var paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');
          var paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');
          var marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');
          var marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');
          var boxSizing = slideStyles.getPropertyValue('box-sizing');
          if (boxSizing && boxSizing === 'border-box') {
            slideSize = width + marginLeft + marginRight;
          } else {
            var _slide2 = _slide,
              clientWidth = _slide2.clientWidth,
              offsetWidth = _slide2.offsetWidth;
            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);
          }
        }
        if (currentTransform) {
          _slide.style.transform = currentTransform;
        }
        if (currentWebKitTransform) {
          _slide.style.webkitTransform = currentWebKitTransform;
        }
        if (params.roundLengths) slideSize = Math.floor(slideSize);
      } else {
        slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;
        if (params.roundLengths) slideSize = Math.floor(slideSize);
        if (slides[i]) {
          slides[i].style[swiper.getDirectionLabel('width')] = "".concat(slideSize, "px");
        }
      }
      if (slides[i]) {
        slides[i].swiperSlideSize = slideSize;
      }
      slidesSizesGrid.push(slideSize);
      if (params.centeredSlides) {
        slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
        if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
        if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
        if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
        if (params.roundLengths) slidePosition = Math.floor(slidePosition);
        if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
        slidesGrid.push(slidePosition);
      } else {
        if (params.roundLengths) slidePosition = Math.floor(slidePosition);
        if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);
        slidesGrid.push(slidePosition);
        slidePosition = slidePosition + slideSize + spaceBetween;
      }
      swiper.virtualSize += slideSize + spaceBetween;
      prevSlideSize = slideSize;
      index += 1;
    }
    swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
    if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
      wrapperEl.style.width = "".concat(swiper.virtualSize + spaceBetween, "px");
    }
    if (params.setWrapperSize) {
      wrapperEl.style[swiper.getDirectionLabel('width')] = "".concat(swiper.virtualSize + spaceBetween, "px");
    }
    if (gridEnabled) {
      swiper.grid.updateWrapperSize(slideSize, snapGrid);
    }

    // Remove last grid elements depending on width
    if (!params.centeredSlides) {
      var newSlidesGrid = [];
      for (var _i = 0; _i < snapGrid.length; _i += 1) {
        var slidesGridItem = snapGrid[_i];
        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
        if (snapGrid[_i] <= swiper.virtualSize - swiperSize) {
          newSlidesGrid.push(slidesGridItem);
        }
      }
      snapGrid = newSlidesGrid;
      if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
        snapGrid.push(swiper.virtualSize - swiperSize);
      }
    }
    if (isVirtual && params.loop) {
      var size = slidesSizesGrid[0] + spaceBetween;
      if (params.slidesPerGroup > 1) {
        var groups = Math.ceil((swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) / params.slidesPerGroup);
        var groupSize = size * params.slidesPerGroup;
        for (var _i2 = 0; _i2 < groups; _i2 += 1) {
          snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);
        }
      }
      for (var _i3 = 0; _i3 < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter; _i3 += 1) {
        if (params.slidesPerGroup === 1) {
          snapGrid.push(snapGrid[snapGrid.length - 1] + size);
        }
        slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);
        swiper.virtualSize += size;
      }
    }
    if (snapGrid.length === 0) snapGrid = [0];
    if (spaceBetween !== 0) {
      var key = swiper.isHorizontal() && rtl ? 'marginLeft' : swiper.getDirectionLabel('marginRight');
      slides.filter(function (_, slideIndex) {
        if (!params.cssMode || params.loop) return true;
        if (slideIndex === slides.length - 1) {
          return false;
        }
        return true;
      }).forEach(function (slideEl) {
        slideEl.style[key] = "".concat(spaceBetween, "px");
      });
    }
    if (params.centeredSlides && params.centeredSlidesBounds) {
      var allSlidesSize = 0;
      slidesSizesGrid.forEach(function (slideSizeValue) {
        allSlidesSize += slideSizeValue + (spaceBetween || 0);
      });
      allSlidesSize -= spaceBetween;
      var maxSnap = allSlidesSize > swiperSize ? allSlidesSize - swiperSize : 0;
      snapGrid = snapGrid.map(function (snap) {
        if (snap <= 0) return -offsetBefore;
        if (snap > maxSnap) return maxSnap + offsetAfter;
        return snap;
      });
    }
    if (params.centerInsufficientSlides) {
      var _allSlidesSize = 0;
      slidesSizesGrid.forEach(function (slideSizeValue) {
        _allSlidesSize += slideSizeValue + (spaceBetween || 0);
      });
      _allSlidesSize -= spaceBetween;
      var offsetSize = (params.slidesOffsetBefore || 0) + (params.slidesOffsetAfter || 0);
      if (_allSlidesSize + offsetSize < swiperSize) {
        var allSlidesOffset = (swiperSize - _allSlidesSize - offsetSize) / 2;
        snapGrid.forEach(function (snap, snapIndex) {
          snapGrid[snapIndex] = snap - allSlidesOffset;
        });
        slidesGrid.forEach(function (snap, snapIndex) {
          slidesGrid[snapIndex] = snap + allSlidesOffset;
        });
      }
    }
    Object.assign(swiper, {
      slides: slides,
      snapGrid: snapGrid,
      slidesGrid: slidesGrid,
      slidesSizesGrid: slidesSizesGrid
    });
    if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {
      setCSSProperty(wrapperEl, '--swiper-centered-offset-before', "".concat(-snapGrid[0], "px"));
      setCSSProperty(wrapperEl, '--swiper-centered-offset-after', "".concat(swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2, "px"));
      var addToSnapGrid = -swiper.snapGrid[0];
      var addToSlidesGrid = -swiper.slidesGrid[0];
      swiper.snapGrid = swiper.snapGrid.map(function (v) {
        return v + addToSnapGrid;
      });
      swiper.slidesGrid = swiper.slidesGrid.map(function (v) {
        return v + addToSlidesGrid;
      });
    }
    if (slidesLength !== previousSlidesLength) {
      swiper.emit('slidesLengthChange');
    }
    if (snapGrid.length !== previousSnapGridLength) {
      if (swiper.params.watchOverflow) swiper.checkOverflow();
      swiper.emit('snapGridLengthChange');
    }
    if (slidesGrid.length !== previousSlidesGridLength) {
      swiper.emit('slidesGridLengthChange');
    }
    if (params.watchSlidesProgress) {
      swiper.updateSlidesOffset();
    }
    swiper.emit('slidesUpdated');
    if (!isVirtual && !params.cssMode && (params.effect === 'slide' || params.effect === 'fade')) {
      var backFaceHiddenClass = "".concat(params.containerModifierClass, "backface-hidden");
      var hasClassBackfaceClassAdded = swiper.el.classList.contains(backFaceHiddenClass);
      if (slidesLength <= params.maxBackfaceHiddenSlides) {
        if (!hasClassBackfaceClassAdded) swiper.el.classList.add(backFaceHiddenClass);
      } else if (hasClassBackfaceClassAdded) {
        swiper.el.classList.remove(backFaceHiddenClass);
      }
    }
  }
  function updateAutoHeight(speed) {
    var swiper = this;
    var activeSlides = [];
    var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    var newHeight = 0;
    var i;
    if (typeof speed === 'number') {
      swiper.setTransition(speed);
    } else if (speed === true) {
      swiper.setTransition(swiper.params.speed);
    }
    var getSlideByIndex = function getSlideByIndex(index) {
      if (isVirtual) {
        return swiper.slides[swiper.getSlideIndexByData(index)];
      }
      return swiper.slides[index];
    };
    // Find slides currently in view
    if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
      if (swiper.params.centeredSlides) {
        (swiper.visibleSlides || []).forEach(function (slide) {
          activeSlides.push(slide);
        });
      } else {
        for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
          var index = swiper.activeIndex + i;
          if (index > swiper.slides.length && !isVirtual) break;
          activeSlides.push(getSlideByIndex(index));
        }
      }
    } else {
      activeSlides.push(getSlideByIndex(swiper.activeIndex));
    }

    // Find new height from highest slide in view
    for (i = 0; i < activeSlides.length; i += 1) {
      if (typeof activeSlides[i] !== 'undefined') {
        var height = activeSlides[i].offsetHeight;
        newHeight = height > newHeight ? height : newHeight;
      }
    }

    // Update Height
    if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = "".concat(newHeight, "px");
  }
  function updateSlidesOffset() {
    var swiper = this;
    var slides = swiper.slides;
    // eslint-disable-next-line
    var minusOffset = swiper.isElement ? swiper.isHorizontal() ? swiper.wrapperEl.offsetLeft : swiper.wrapperEl.offsetTop : 0;
    for (var i = 0; i < slides.length; i += 1) {
      slides[i].swiperSlideOffset = (swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop) - minusOffset - swiper.cssOverflowAdjustment();
    }
  }
  var toggleSlideClasses$1 = function toggleSlideClasses$1(slideEl, condition, className) {
    if (condition && !slideEl.classList.contains(className)) {
      slideEl.classList.add(className);
    } else if (!condition && slideEl.classList.contains(className)) {
      slideEl.classList.remove(className);
    }
  };
  function updateSlidesProgress(translate) {
    if (translate === void 0) {
      translate = this && this.translate || 0;
    }
    var swiper = this;
    var params = swiper.params;
    var slides = swiper.slides,
      rtl = swiper.rtlTranslate,
      snapGrid = swiper.snapGrid;
    if (slides.length === 0) return;
    if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();
    var offsetCenter = -translate;
    if (rtl) offsetCenter = translate;
    swiper.visibleSlidesIndexes = [];
    swiper.visibleSlides = [];
    var spaceBetween = params.spaceBetween;
    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;
    } else if (typeof spaceBetween === 'string') {
      spaceBetween = parseFloat(spaceBetween);
    }
    for (var i = 0; i < slides.length; i += 1) {
      var _slide3 = slides[i];
      var slideOffset = _slide3.swiperSlideOffset;
      if (params.cssMode && params.centeredSlides) {
        slideOffset -= slides[0].swiperSlideOffset;
      }
      var slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (_slide3.swiperSlideSize + spaceBetween);
      var originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (_slide3.swiperSlideSize + spaceBetween);
      var slideBefore = -(offsetCenter - slideOffset);
      var slideAfter = slideBefore + swiper.slidesSizesGrid[i];
      var isFullyVisible = slideBefore >= 0 && slideBefore <= swiper.size - swiper.slidesSizesGrid[i];
      var isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;
      if (isVisible) {
        swiper.visibleSlides.push(_slide3);
        swiper.visibleSlidesIndexes.push(i);
      }
      toggleSlideClasses$1(_slide3, isVisible, params.slideVisibleClass);
      toggleSlideClasses$1(_slide3, isFullyVisible, params.slideFullyVisibleClass);
      _slide3.progress = rtl ? -slideProgress : slideProgress;
      _slide3.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;
    }
  }
  function updateProgress(translate) {
    var swiper = this;
    if (typeof translate === 'undefined') {
      var multiplier = swiper.rtlTranslate ? -1 : 1;
      // eslint-disable-next-line
      translate = swiper && swiper.translate && swiper.translate * multiplier || 0;
    }
    var params = swiper.params;
    var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
    var progress = swiper.progress,
      isBeginning = swiper.isBeginning,
      isEnd = swiper.isEnd,
      progressLoop = swiper.progressLoop;
    var wasBeginning = isBeginning;
    var wasEnd = isEnd;
    if (translatesDiff === 0) {
      progress = 0;
      isBeginning = true;
      isEnd = true;
    } else {
      progress = (translate - swiper.minTranslate()) / translatesDiff;
      var isBeginningRounded = Math.abs(translate - swiper.minTranslate()) < 1;
      var isEndRounded = Math.abs(translate - swiper.maxTranslate()) < 1;
      isBeginning = isBeginningRounded || progress <= 0;
      isEnd = isEndRounded || progress >= 1;
      if (isBeginningRounded) progress = 0;
      if (isEndRounded) progress = 1;
    }
    if (params.loop) {
      var firstSlideIndex = swiper.getSlideIndexByData(0);
      var lastSlideIndex = swiper.getSlideIndexByData(swiper.slides.length - 1);
      var firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];
      var lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];
      var translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1];
      var translateAbs = Math.abs(translate);
      if (translateAbs >= firstSlideTranslate) {
        progressLoop = (translateAbs - firstSlideTranslate) / translateMax;
      } else {
        progressLoop = (translateAbs + translateMax - lastSlideTranslate) / translateMax;
      }
      if (progressLoop > 1) progressLoop -= 1;
    }
    Object.assign(swiper, {
      progress: progress,
      progressLoop: progressLoop,
      isBeginning: isBeginning,
      isEnd: isEnd
    });
    if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);
    if (isBeginning && !wasBeginning) {
      swiper.emit('reachBeginning toEdge');
    }
    if (isEnd && !wasEnd) {
      swiper.emit('reachEnd toEdge');
    }
    if (wasBeginning && !isBeginning || wasEnd && !isEnd) {
      swiper.emit('fromEdge');
    }
    swiper.emit('progress', progress);
  }
  var toggleSlideClasses = function toggleSlideClasses(slideEl, condition, className) {
    if (condition && !slideEl.classList.contains(className)) {
      slideEl.classList.add(className);
    } else if (!condition && slideEl.classList.contains(className)) {
      slideEl.classList.remove(className);
    }
  };
  function updateSlidesClasses() {
    var swiper = this;
    var slides = swiper.slides,
      params = swiper.params,
      slidesEl = swiper.slidesEl,
      activeIndex = swiper.activeIndex;
    var isVirtual = swiper.virtual && params.virtual.enabled;
    var gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;
    var getFilteredSlide = function getFilteredSlide(selector) {
      return elementChildren(slidesEl, ".".concat(params.slideClass).concat(selector, ", swiper-slide").concat(selector))[0];
    };
    var activeSlide;
    var prevSlide;
    var nextSlide;
    if (isVirtual) {
      if (params.loop) {
        var slideIndex = activeIndex - swiper.virtual.slidesBefore;
        if (slideIndex < 0) slideIndex = swiper.virtual.slides.length + slideIndex;
        if (slideIndex >= swiper.virtual.slides.length) slideIndex -= swiper.virtual.slides.length;
        activeSlide = getFilteredSlide("[data-swiper-slide-index=\"".concat(slideIndex, "\"]"));
      } else {
        activeSlide = getFilteredSlide("[data-swiper-slide-index=\"".concat(activeIndex, "\"]"));
      }
    } else {
      if (gridEnabled) {
        activeSlide = slides.filter(function (slideEl) {
          return slideEl.column === activeIndex;
        })[0];
        nextSlide = slides.filter(function (slideEl) {
          return slideEl.column === activeIndex + 1;
        })[0];
        prevSlide = slides.filter(function (slideEl) {
          return slideEl.column === activeIndex - 1;
        })[0];
      } else {
        activeSlide = slides[activeIndex];
      }
    }
    if (activeSlide) {
      if (!gridEnabled) {
        // Next Slide
        nextSlide = elementNextAll(activeSlide, ".".concat(params.slideClass, ", swiper-slide"))[0];
        if (params.loop && !nextSlide) {
          nextSlide = slides[0];
        }

        // Prev Slide
        prevSlide = elementPrevAll(activeSlide, ".".concat(params.slideClass, ", swiper-slide"))[0];
        if (params.loop && !prevSlide === 0) {
          prevSlide = slides[slides.length - 1];
        }
      }
    }
    slides.forEach(function (slideEl) {
      toggleSlideClasses(slideEl, slideEl === activeSlide, params.slideActiveClass);
      toggleSlideClasses(slideEl, slideEl === nextSlide, params.slideNextClass);
      toggleSlideClasses(slideEl, slideEl === prevSlide, params.slidePrevClass);
    });
    swiper.emitSlidesClasses();
  }
  var processLazyPreloader = function processLazyPreloader(swiper, imageEl) {
    if (!swiper || swiper.destroyed || !swiper.params) return;
    var slideSelector = function slideSelector() {
      return swiper.isElement ? "swiper-slide" : ".".concat(swiper.params.slideClass);
    };
    var slideEl = imageEl.closest(slideSelector());
    if (slideEl) {
      var lazyEl = slideEl.querySelector(".".concat(swiper.params.lazyPreloaderClass));
      if (!lazyEl && swiper.isElement) {
        if (slideEl.shadowRoot) {
          lazyEl = slideEl.shadowRoot.querySelector(".".concat(swiper.params.lazyPreloaderClass));
        } else {
          // init later
          requestAnimationFrame(function () {
            if (slideEl.shadowRoot) {
              lazyEl = slideEl.shadowRoot.querySelector(".".concat(swiper.params.lazyPreloaderClass));
              if (lazyEl) lazyEl.remove();
            }
          });
        }
      }
      if (lazyEl) lazyEl.remove();
    }
  };
  var unlazy = function unlazy(swiper, index) {
    if (!swiper.slides[index]) return;
    var imageEl = swiper.slides[index].querySelector('[loading="lazy"]');
    if (imageEl) imageEl.removeAttribute('loading');
  };
  var preload = function preload(swiper) {
    if (!swiper || swiper.destroyed || !swiper.params) return;
    var amount = swiper.params.lazyPreloadPrevNext;
    var len = swiper.slides.length;
    if (!len || !amount || amount < 0) return;
    amount = Math.min(amount, len);
    var slidesPerView = swiper.params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);
    var activeIndex = swiper.activeIndex;
    if (swiper.params.grid && swiper.params.grid.rows > 1) {
      var activeColumn = activeIndex;
      var preloadColumns = [activeColumn - amount];
      preloadColumns.push.apply(preloadColumns, _toConsumableArray(Array.from({
        length: amount
      }).map(function (_, i) {
        return activeColumn + slidesPerView + i;
      })));
      swiper.slides.forEach(function (slideEl, i) {
        if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);
      });
      return;
    }
    var slideIndexLastInView = activeIndex + slidesPerView - 1;
    if (swiper.params.rewind || swiper.params.loop) {
      for (var i = activeIndex - amount; i <= slideIndexLastInView + amount; i += 1) {
        var realIndex = (i % len + len) % len;
        if (realIndex < activeIndex || realIndex > slideIndexLastInView) unlazy(swiper, realIndex);
      }
    } else {
      for (var _i4 = Math.max(activeIndex - amount, 0); _i4 <= Math.min(slideIndexLastInView + amount, len - 1); _i4 += 1) {
        if (_i4 !== activeIndex && (_i4 > slideIndexLastInView || _i4 < activeIndex)) {
          unlazy(swiper, _i4);
        }
      }
    }
  };
  function getActiveIndexByTranslate(swiper) {
    var slidesGrid = swiper.slidesGrid,
      params = swiper.params;
    var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
    var activeIndex;
    for (var i = 0; i < slidesGrid.length; i += 1) {
      if (typeof slidesGrid[i + 1] !== 'undefined') {
        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {
          activeIndex = i;
        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
          activeIndex = i + 1;
        }
      } else if (translate >= slidesGrid[i]) {
        activeIndex = i;
      }
    }
    // Normalize slideIndex
    if (params.normalizeSlideIndex) {
      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;
    }
    return activeIndex;
  }
  function updateActiveIndex(newActiveIndex) {
    var swiper = this;
    var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
    var snapGrid = swiper.snapGrid,
      params = swiper.params,
      previousIndex = swiper.activeIndex,
      previousRealIndex = swiper.realIndex,
      previousSnapIndex = swiper.snapIndex;
    var activeIndex = newActiveIndex;
    var snapIndex;
    var getVirtualRealIndex = function getVirtualRealIndex(aIndex) {
      var realIndex = aIndex - swiper.virtual.slidesBefore;
      if (realIndex < 0) {
        realIndex = swiper.virtual.slides.length + realIndex;
      }
      if (realIndex >= swiper.virtual.slides.length) {
        realIndex -= swiper.virtual.slides.length;
      }
      return realIndex;
    };
    if (typeof activeIndex === 'undefined') {
      activeIndex = getActiveIndexByTranslate(swiper);
    }
    if (snapGrid.indexOf(translate) >= 0) {
      snapIndex = snapGrid.indexOf(translate);
    } else {
      var skip = Math.min(params.slidesPerGroupSkip, activeIndex);
      snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
    }
    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
    if (activeIndex === previousIndex && !swiper.params.loop) {
      if (snapIndex !== previousSnapIndex) {
        swiper.snapIndex = snapIndex;
        swiper.emit('snapIndexChange');
      }
      return;
    }
    if (activeIndex === previousIndex && swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {
      swiper.realIndex = getVirtualRealIndex(activeIndex);
      return;
    }
    var gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;

    // Get real index
    var realIndex;
    if (swiper.virtual && params.virtual.enabled && params.loop) {
      realIndex = getVirtualRealIndex(activeIndex);
    } else if (gridEnabled) {
      var firstSlideInColumn = swiper.slides.filter(function (slideEl) {
        return slideEl.column === activeIndex;
      })[0];
      var activeSlideIndex = parseInt(firstSlideInColumn.getAttribute('data-swiper-slide-index'), 10);
      if (Number.isNaN(activeSlideIndex)) {
        activeSlideIndex = Math.max(swiper.slides.indexOf(firstSlideInColumn), 0);
      }
      realIndex = Math.floor(activeSlideIndex / params.grid.rows);
    } else if (swiper.slides[activeIndex]) {
      var slideIndex = swiper.slides[activeIndex].getAttribute('data-swiper-slide-index');
      if (slideIndex) {
        realIndex = parseInt(slideIndex, 10);
      } else {
        realIndex = activeIndex;
      }
    } else {
      realIndex = activeIndex;
    }
    Object.assign(swiper, {
      previousSnapIndex: previousSnapIndex,
      snapIndex: snapIndex,
      previousRealIndex: previousRealIndex,
      realIndex: realIndex,
      previousIndex: previousIndex,
      activeIndex: activeIndex
    });
    if (swiper.initialized) {
      preload(swiper);
    }
    swiper.emit('activeIndexChange');
    swiper.emit('snapIndexChange');
    if (swiper.initialized || swiper.params.runCallbacksOnInit) {
      if (previousRealIndex !== realIndex) {
        swiper.emit('realIndexChange');
      }
      swiper.emit('slideChange');
    }
  }
  function updateClickedSlide(el, path) {
    var swiper = this;
    var params = swiper.params;
    var slide = el.closest(".".concat(params.slideClass, ", swiper-slide"));
    if (!slide && swiper.isElement && path && path.length > 1 && path.includes(el)) {
      _toConsumableArray(path.slice(path.indexOf(el) + 1, path.length)).forEach(function (pathEl) {
        if (!slide && pathEl.matches && pathEl.matches(".".concat(params.slideClass, ", swiper-slide"))) {
          slide = pathEl;
        }
      });
    }
    var slideFound = false;
    var slideIndex;
    if (slide) {
      for (var i = 0; i < swiper.slides.length; i += 1) {
        if (swiper.slides[i] === slide) {
          slideFound = true;
          slideIndex = i;
          break;
        }
      }
    }
    if (slide && slideFound) {
      swiper.clickedSlide = slide;
      if (swiper.virtual && swiper.params.virtual.enabled) {
        swiper.clickedIndex = parseInt(slide.getAttribute('data-swiper-slide-index'), 10);
      } else {
        swiper.clickedIndex = slideIndex;
      }
    } else {
      swiper.clickedSlide = undefined;
      swiper.clickedIndex = undefined;
      return;
    }
    if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
      swiper.slideToClickedSlide();
    }
  }
  var update = {
    updateSize: updateSize,
    updateSlides: updateSlides,
    updateAutoHeight: updateAutoHeight,
    updateSlidesOffset: updateSlidesOffset,
    updateSlidesProgress: updateSlidesProgress,
    updateProgress: updateProgress,
    updateSlidesClasses: updateSlidesClasses,
    updateActiveIndex: updateActiveIndex,
    updateClickedSlide: updateClickedSlide
  };
  function getSwiperTranslate(axis) {
    if (axis === void 0) {
      axis = this.isHorizontal() ? 'x' : 'y';
    }
    var swiper = this;
    var params = swiper.params,
      rtl = swiper.rtlTranslate,
      translate = swiper.translate,
      wrapperEl = swiper.wrapperEl;
    if (params.virtualTranslate) {
      return rtl ? -translate : translate;
    }
    if (params.cssMode) {
      return translate;
    }
    var currentTranslate = getTranslate(wrapperEl, axis);
    currentTranslate += swiper.cssOverflowAdjustment();
    if (rtl) currentTranslate = -currentTranslate;
    return currentTranslate || 0;
  }
  function setTranslate(translate, byController) {
    var swiper = this;
    var rtl = swiper.rtlTranslate,
      params = swiper.params,
      wrapperEl = swiper.wrapperEl,
      progress = swiper.progress;
    var x = 0;
    var y = 0;
    var z = 0;
    if (swiper.isHorizontal()) {
      x = rtl ? -translate : translate;
    } else {
      y = translate;
    }
    if (params.roundLengths) {
      x = Math.floor(x);
      y = Math.floor(y);
    }
    swiper.previousTranslate = swiper.translate;
    swiper.translate = swiper.isHorizontal() ? x : y;
    if (params.cssMode) {
      wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;
    } else if (!params.virtualTranslate) {
      if (swiper.isHorizontal()) {
        x -= swiper.cssOverflowAdjustment();
      } else {
        y -= swiper.cssOverflowAdjustment();
      }
      wrapperEl.style.transform = "translate3d(".concat(x, "px, ").concat(y, "px, ").concat(z, "px)");
    }

    // Check if we need to update progress
    var newProgress;
    var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
    if (translatesDiff === 0) {
      newProgress = 0;
    } else {
      newProgress = (translate - swiper.minTranslate()) / translatesDiff;
    }
    if (newProgress !== progress) {
      swiper.updateProgress(translate);
    }
    swiper.emit('setTranslate', swiper.translate, byController);
  }
  function minTranslate() {
    return -this.snapGrid[0];
  }
  function maxTranslate() {
    return -this.snapGrid[this.snapGrid.length - 1];
  }
  function translateTo(translate, speed, runCallbacks, translateBounds, internal) {
    if (translate === void 0) {
      translate = 0;
    }
    if (speed === void 0) {
      speed = this.params.speed;
    }
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    if (translateBounds === void 0) {
      translateBounds = true;
    }
    var swiper = this;
    var params = swiper.params,
      wrapperEl = swiper.wrapperEl;
    if (swiper.animating && params.preventInteractionOnTransition) {
      return false;
    }
    var minTranslate = swiper.minTranslate();
    var maxTranslate = swiper.maxTranslate();
    var newTranslate;
    if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate;

    // Update progress
    swiper.updateProgress(newTranslate);
    if (params.cssMode) {
      var isH = swiper.isHorizontal();
      if (speed === 0) {
        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
      } else {
        if (!swiper.support.smoothScroll) {
          animateCSSModeScroll({
            swiper: swiper,
            targetPosition: -newTranslate,
            side: isH ? 'left' : 'top'
          });
          return true;
        }
        wrapperEl.scrollTo(_defineProperty(_defineProperty({}, isH ? 'left' : 'top', -newTranslate), "behavior", 'smooth'));
      }
      return true;
    }
    if (speed === 0) {
      swiper.setTransition(0);
      swiper.setTranslate(newTranslate);
      if (runCallbacks) {
        swiper.emit('beforeTransitionStart', speed, internal);
        swiper.emit('transitionEnd');
      }
    } else {
      swiper.setTransition(speed);
      swiper.setTranslate(newTranslate);
      if (runCallbacks) {
        swiper.emit('beforeTransitionStart', speed, internal);
        swiper.emit('transitionStart');
      }
      if (!swiper.animating) {
        swiper.animating = true;
        if (!swiper.onTranslateToWrapperTransitionEnd) {
          swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {
            if (!swiper || swiper.destroyed) return;
            if (e.target !== this) return;
            swiper.wrapperEl.removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
            swiper.onTranslateToWrapperTransitionEnd = null;
            delete swiper.onTranslateToWrapperTransitionEnd;
            swiper.animating = false;
            if (runCallbacks) {
              swiper.emit('transitionEnd');
            }
          };
        }
        swiper.wrapperEl.addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
      }
    }
    return true;
  }
  var translate = {
    getTranslate: getSwiperTranslate,
    setTranslate: setTranslate,
    minTranslate: minTranslate,
    maxTranslate: maxTranslate,
    translateTo: translateTo
  };
  function setTransition(duration, byController) {
    var swiper = this;
    if (!swiper.params.cssMode) {
      swiper.wrapperEl.style.transitionDuration = "".concat(duration, "ms");
      swiper.wrapperEl.style.transitionDelay = duration === 0 ? "0ms" : '';
    }
    swiper.emit('setTransition', duration, byController);
  }
  function transitionEmit(_ref) {
    var swiper = _ref.swiper,
      runCallbacks = _ref.runCallbacks,
      direction = _ref.direction,
      step = _ref.step;
    var activeIndex = swiper.activeIndex,
      previousIndex = swiper.previousIndex;
    var dir = direction;
    if (!dir) {
      if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
    }
    swiper.emit("transition".concat(step));
    if (runCallbacks && activeIndex !== previousIndex) {
      if (dir === 'reset') {
        swiper.emit("slideResetTransition".concat(step));
        return;
      }
      swiper.emit("slideChangeTransition".concat(step));
      if (dir === 'next') {
        swiper.emit("slideNextTransition".concat(step));
      } else {
        swiper.emit("slidePrevTransition".concat(step));
      }
    }
  }
  function transitionStart(runCallbacks, direction) {
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    var swiper = this;
    var params = swiper.params;
    if (params.cssMode) return;
    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }
    transitionEmit({
      swiper: swiper,
      runCallbacks: runCallbacks,
      direction: direction,
      step: 'Start'
    });
  }
  function transitionEnd(runCallbacks, direction) {
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    var swiper = this;
    var params = swiper.params;
    swiper.animating = false;
    if (params.cssMode) return;
    swiper.setTransition(0);
    transitionEmit({
      swiper: swiper,
      runCallbacks: runCallbacks,
      direction: direction,
      step: 'End'
    });
  }
  var transition = {
    setTransition: setTransition,
    transitionStart: transitionStart,
    transitionEnd: transitionEnd
  };
  function slideTo(index, speed, runCallbacks, internal, initial) {
    if (index === void 0) {
      index = 0;
    }
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    if (typeof index === 'string') {
      index = parseInt(index, 10);
    }
    var swiper = this;
    var slideIndex = index;
    if (slideIndex < 0) slideIndex = 0;
    var params = swiper.params,
      snapGrid = swiper.snapGrid,
      slidesGrid = swiper.slidesGrid,
      previousIndex = swiper.previousIndex,
      activeIndex = swiper.activeIndex,
      rtl = swiper.rtlTranslate,
      wrapperEl = swiper.wrapperEl,
      enabled = swiper.enabled;
    if (!enabled && !internal && !initial || swiper.destroyed || swiper.animating && params.preventInteractionOnTransition) {
      return false;
    }
    if (typeof speed === 'undefined') {
      speed = swiper.params.speed;
    }
    var skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
    var snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
    var translate = -snapGrid[snapIndex];
    // Normalize slideIndex
    if (params.normalizeSlideIndex) {
      for (var i = 0; i < slidesGrid.length; i += 1) {
        var normalizedTranslate = -Math.floor(translate * 100);
        var normalizedGrid = Math.floor(slidesGrid[i] * 100);
        var normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);
        if (typeof slidesGrid[i + 1] !== 'undefined') {
          if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {
            slideIndex = i;
          } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {
            slideIndex = i + 1;
          }
        } else if (normalizedTranslate >= normalizedGrid) {
          slideIndex = i;
        }
      }
    }
    // Directions locks
    if (swiper.initialized && slideIndex !== activeIndex) {
      if (!swiper.allowSlideNext && (rtl ? translate > swiper.translate && translate > swiper.minTranslate() : translate < swiper.translate && translate < swiper.minTranslate())) {
        return false;
      }
      if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
        if ((activeIndex || 0) !== slideIndex) {
          return false;
        }
      }
    }
    if (slideIndex !== (previousIndex || 0) && runCallbacks) {
      swiper.emit('beforeSlideChangeStart');
    }

    // Update progress
    swiper.updateProgress(translate);
    var direction;
    if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset';

    // initial virtual
    var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    var isInitialVirtual = isVirtual && initial;
    // Update Index
    if (!isInitialVirtual && (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate)) {
      swiper.updateActiveIndex(slideIndex);
      // Update Height
      if (params.autoHeight) {
        swiper.updateAutoHeight();
      }
      swiper.updateSlidesClasses();
      if (params.effect !== 'slide') {
        swiper.setTranslate(translate);
      }
      if (direction !== 'reset') {
        swiper.transitionStart(runCallbacks, direction);
        swiper.transitionEnd(runCallbacks, direction);
      }
      return false;
    }
    if (params.cssMode) {
      var isH = swiper.isHorizontal();
      var t = rtl ? translate : -translate;
      if (speed === 0) {
        if (isVirtual) {
          swiper.wrapperEl.style.scrollSnapType = 'none';
          swiper._immediateVirtual = true;
        }
        if (isVirtual && !swiper._cssModeVirtualInitialSet && swiper.params.initialSlide > 0) {
          swiper._cssModeVirtualInitialSet = true;
          requestAnimationFrame(function () {
            wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
          });
        } else {
          wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
        }
        if (isVirtual) {
          requestAnimationFrame(function () {
            swiper.wrapperEl.style.scrollSnapType = '';
            swiper._immediateVirtual = false;
          });
        }
      } else {
        if (!swiper.support.smoothScroll) {
          animateCSSModeScroll({
            swiper: swiper,
            targetPosition: t,
            side: isH ? 'left' : 'top'
          });
          return true;
        }
        wrapperEl.scrollTo(_defineProperty(_defineProperty({}, isH ? 'left' : 'top', t), "behavior", 'smooth'));
      }
      return true;
    }
    swiper.setTransition(speed);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);
    if (speed === 0) {
      swiper.transitionEnd(runCallbacks, direction);
    } else if (!swiper.animating) {
      swiper.animating = true;
      if (!swiper.onSlideToWrapperTransitionEnd) {
        swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.wrapperEl.removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
          swiper.onSlideToWrapperTransitionEnd = null;
          delete swiper.onSlideToWrapperTransitionEnd;
          swiper.transitionEnd(runCallbacks, direction);
        };
      }
      swiper.wrapperEl.addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
    }
    return true;
  }
  function slideToLoop(index, speed, runCallbacks, internal) {
    if (index === void 0) {
      index = 0;
    }
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    if (typeof index === 'string') {
      var indexAsNumber = parseInt(index, 10);
      index = indexAsNumber;
    }
    var swiper = this;
    if (swiper.destroyed) return;
    if (typeof speed === 'undefined') {
      speed = swiper.params.speed;
    }
    var gridEnabled = swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;
    var newIndex = index;
    if (swiper.params.loop) {
      if (swiper.virtual && swiper.params.virtual.enabled) {
        // eslint-disable-next-line
        newIndex = newIndex + swiper.virtual.slidesBefore;
      } else {
        var targetSlideIndex;
        if (gridEnabled) {
          var slideIndex = newIndex * swiper.params.grid.rows;
          targetSlideIndex = swiper.slides.filter(function (slideEl) {
            return slideEl.getAttribute('data-swiper-slide-index') * 1 === slideIndex;
          })[0].column;
        } else {
          targetSlideIndex = swiper.getSlideIndexByData(newIndex);
        }
        var cols = gridEnabled ? Math.ceil(swiper.slides.length / swiper.params.grid.rows) : swiper.slides.length;
        var centeredSlides = swiper.params.centeredSlides;
        var slidesPerView = swiper.params.slidesPerView;
        if (slidesPerView === 'auto') {
          slidesPerView = swiper.slidesPerViewDynamic();
        } else {
          slidesPerView = Math.ceil(parseFloat(swiper.params.slidesPerView, 10));
          if (centeredSlides && slidesPerView % 2 === 0) {
            slidesPerView = slidesPerView + 1;
          }
        }
        var needLoopFix = cols - targetSlideIndex < slidesPerView;
        if (centeredSlides) {
          needLoopFix = needLoopFix || targetSlideIndex < Math.ceil(slidesPerView / 2);
        }
        if (internal && centeredSlides && swiper.params.slidesPerView !== 'auto' && !gridEnabled) {
          needLoopFix = false;
        }
        if (needLoopFix) {
          var direction = centeredSlides ? targetSlideIndex < swiper.activeIndex ? 'prev' : 'next' : targetSlideIndex - swiper.activeIndex - 1 < swiper.params.slidesPerView ? 'next' : 'prev';
          swiper.loopFix({
            direction: direction,
            slideTo: true,
            activeSlideIndex: direction === 'next' ? targetSlideIndex + 1 : targetSlideIndex - cols + 1,
            slideRealIndex: direction === 'next' ? swiper.realIndex : undefined
          });
        }
        if (gridEnabled) {
          var _slideIndex = newIndex * swiper.params.grid.rows;
          newIndex = swiper.slides.filter(function (slideEl) {
            return slideEl.getAttribute('data-swiper-slide-index') * 1 === _slideIndex;
          })[0].column;
        } else {
          newIndex = swiper.getSlideIndexByData(newIndex);
        }
      }
    }
    requestAnimationFrame(function () {
      swiper.slideTo(newIndex, speed, runCallbacks, internal);
    });
    return swiper;
  }

  /* eslint no-unused-vars: "off" */
  function slideNext(speed, runCallbacks, internal) {
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    var swiper = this;
    var enabled = swiper.enabled,
      params = swiper.params,
      animating = swiper.animating;
    if (!enabled || swiper.destroyed) return swiper;
    if (typeof speed === 'undefined') {
      speed = swiper.params.speed;
    }
    var perGroup = params.slidesPerGroup;
    if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {
      perGroup = Math.max(swiper.slidesPerViewDynamic('current', true), 1);
    }
    var increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;
    var isVirtual = swiper.virtual && params.virtual.enabled;
    if (params.loop) {
      if (animating && !isVirtual && params.loopPreventsSliding) return false;
      swiper.loopFix({
        direction: 'next'
      });
      // eslint-disable-next-line
      swiper._clientLeft = swiper.wrapperEl.clientLeft;
      if (swiper.activeIndex === swiper.slides.length - 1 && params.cssMode) {
        requestAnimationFrame(function () {
          swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
        });
        return true;
      }
    }
    if (params.rewind && swiper.isEnd) {
      return swiper.slideTo(0, speed, runCallbacks, internal);
    }
    return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
  }

  /* eslint no-unused-vars: "off" */
  function slidePrev(speed, runCallbacks, internal) {
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    var swiper = this;
    var params = swiper.params,
      snapGrid = swiper.snapGrid,
      slidesGrid = swiper.slidesGrid,
      rtlTranslate = swiper.rtlTranslate,
      enabled = swiper.enabled,
      animating = swiper.animating;
    if (!enabled || swiper.destroyed) return swiper;
    if (typeof speed === 'undefined') {
      speed = swiper.params.speed;
    }
    var isVirtual = swiper.virtual && params.virtual.enabled;
    if (params.loop) {
      if (animating && !isVirtual && params.loopPreventsSliding) return false;
      swiper.loopFix({
        direction: 'prev'
      });
      // eslint-disable-next-line
      swiper._clientLeft = swiper.wrapperEl.clientLeft;
    }
    var translate = rtlTranslate ? swiper.translate : -swiper.translate;
    function normalize(val) {
      if (val < 0) return -Math.floor(Math.abs(val));
      return Math.floor(val);
    }
    var normalizedTranslate = normalize(translate);
    var normalizedSnapGrid = snapGrid.map(function (val) {
      return normalize(val);
    });
    var prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
    if (typeof prevSnap === 'undefined' && params.cssMode) {
      var prevSnapIndex;
      snapGrid.forEach(function (snap, snapIndex) {
        if (normalizedTranslate >= snap) {
          // prevSnap = snap;
          prevSnapIndex = snapIndex;
        }
      });
      if (typeof prevSnapIndex !== 'undefined') {
        prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];
      }
    }
    var prevIndex = 0;
    if (typeof prevSnap !== 'undefined') {
      prevIndex = slidesGrid.indexOf(prevSnap);
      if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
      if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {
        prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;
        prevIndex = Math.max(prevIndex, 0);
      }
    }
    if (params.rewind && swiper.isBeginning) {
      var lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;
      return swiper.slideTo(lastIndex, speed, runCallbacks, internal);
    } else if (params.loop && swiper.activeIndex === 0 && params.cssMode) {
      requestAnimationFrame(function () {
        swiper.slideTo(prevIndex, speed, runCallbacks, internal);
      });
      return true;
    }
    return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
  }

  /* eslint no-unused-vars: "off" */
  function slideReset(speed, runCallbacks, internal) {
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    var swiper = this;
    if (swiper.destroyed) return;
    if (typeof speed === 'undefined') {
      speed = swiper.params.speed;
    }
    return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
  }

  /* eslint no-unused-vars: "off" */
  function slideToClosest(speed, runCallbacks, internal, threshold) {
    if (runCallbacks === void 0) {
      runCallbacks = true;
    }
    if (threshold === void 0) {
      threshold = 0.5;
    }
    var swiper = this;
    if (swiper.destroyed) return;
    if (typeof speed === 'undefined') {
      speed = swiper.params.speed;
    }
    var index = swiper.activeIndex;
    var skip = Math.min(swiper.params.slidesPerGroupSkip, index);
    var snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
    var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
    if (translate >= swiper.snapGrid[snapIndex]) {
      // The current translate is on or after the current snap index, so the choice
      // is between the current index and the one after it.
      var currentSnap = swiper.snapGrid[snapIndex];
      var nextSnap = swiper.snapGrid[snapIndex + 1];
      if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {
        index += swiper.params.slidesPerGroup;
      }
    } else {
      // The current translate is before the current snap index, so the choice
      // is between the current index and the one before it.
      var prevSnap = swiper.snapGrid[snapIndex - 1];
      var _currentSnap = swiper.snapGrid[snapIndex];
      if (translate - prevSnap <= (_currentSnap - prevSnap) * threshold) {
        index -= swiper.params.slidesPerGroup;
      }
    }
    index = Math.max(index, 0);
    index = Math.min(index, swiper.slidesGrid.length - 1);
    return swiper.slideTo(index, speed, runCallbacks, internal);
  }
  function slideToClickedSlide() {
    var swiper = this;
    if (swiper.destroyed) return;
    var params = swiper.params,
      slidesEl = swiper.slidesEl;
    var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
    var slideToIndex = swiper.clickedIndex;
    var realIndex;
    var slideSelector = swiper.isElement ? "swiper-slide" : ".".concat(params.slideClass);
    if (params.loop) {
      if (swiper.animating) return;
      realIndex = parseInt(swiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);
      if (params.centeredSlides) {
        if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {
          swiper.loopFix();
          slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, "".concat(slideSelector, "[data-swiper-slide-index=\"").concat(realIndex, "\"]"))[0]);
          nextTick(function () {
            swiper.slideTo(slideToIndex);
          });
        } else {
          swiper.slideTo(slideToIndex);
        }
      } else if (slideToIndex > swiper.slides.length - slidesPerView) {
        swiper.loopFix();
        slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, "".concat(slideSelector, "[data-swiper-slide-index=\"").concat(realIndex, "\"]"))[0]);
        nextTick(function () {
          swiper.slideTo(slideToIndex);
        });
      } else {
        swiper.slideTo(slideToIndex);
      }
    } else {
      swiper.slideTo(slideToIndex);
    }
  }
  var slide = {
    slideTo: slideTo,
    slideToLoop: slideToLoop,
    slideNext: slideNext,
    slidePrev: slidePrev,
    slideReset: slideReset,
    slideToClosest: slideToClosest,
    slideToClickedSlide: slideToClickedSlide
  };
  function loopCreate(slideRealIndex) {
    var swiper = this;
    var params = swiper.params,
      slidesEl = swiper.slidesEl;
    if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;
    var initSlides = function initSlides() {
      var slides = elementChildren(slidesEl, ".".concat(params.slideClass, ", swiper-slide"));
      slides.forEach(function (el, index) {
        el.setAttribute('data-swiper-slide-index', index);
      });
    };
    var gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;
    var slidesPerGroup = params.slidesPerGroup * (gridEnabled ? params.grid.rows : 1);
    var shouldFillGroup = swiper.slides.length % slidesPerGroup !== 0;
    var shouldFillGrid = gridEnabled && swiper.slides.length % params.grid.rows !== 0;
    var addBlankSlides = function addBlankSlides(amountOfSlides) {
      for (var i = 0; i < amountOfSlides; i += 1) {
        var slideEl = swiper.isElement ? createElement('swiper-slide', [params.slideBlankClass]) : createElement('div', [params.slideClass, params.slideBlankClass]);
        swiper.slidesEl.append(slideEl);
      }
    };
    if (shouldFillGroup) {
      if (params.loopAddBlankSlides) {
        var slidesToAdd = slidesPerGroup - swiper.slides.length % slidesPerGroup;
        addBlankSlides(slidesToAdd);
        swiper.recalcSlides();
        swiper.updateSlides();
      } else {
        showWarning('Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)');
      }
      initSlides();
    } else if (shouldFillGrid) {
      if (params.loopAddBlankSlides) {
        var _slidesToAdd = params.grid.rows - swiper.slides.length % params.grid.rows;
        addBlankSlides(_slidesToAdd);
        swiper.recalcSlides();
        swiper.updateSlides();
      } else {
        showWarning('Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)');
      }
      initSlides();
    } else {
      initSlides();
    }
    swiper.loopFix({
      slideRealIndex: slideRealIndex,
      direction: params.centeredSlides ? undefined : 'next'
    });
  }
  function loopFix(_temp) {
    var _ref4 = _temp === void 0 ? {} : _temp,
      slideRealIndex = _ref4.slideRealIndex,
      _ref4$slideTo = _ref4.slideTo,
      slideTo = _ref4$slideTo === void 0 ? true : _ref4$slideTo,
      direction = _ref4.direction,
      setTranslate = _ref4.setTranslate,
      activeSlideIndex = _ref4.activeSlideIndex,
      byController = _ref4.byController,
      byMousewheel = _ref4.byMousewheel;
    var swiper = this;
    if (!swiper.params.loop) return;
    swiper.emit('beforeLoopFix');
    var slides = swiper.slides,
      allowSlidePrev = swiper.allowSlidePrev,
      allowSlideNext = swiper.allowSlideNext,
      slidesEl = swiper.slidesEl,
      params = swiper.params;
    var centeredSlides = params.centeredSlides;
    swiper.allowSlidePrev = true;
    swiper.allowSlideNext = true;
    if (swiper.virtual && params.virtual.enabled) {
      if (slideTo) {
        if (!params.centeredSlides && swiper.snapIndex === 0) {
          swiper.slideTo(swiper.virtual.slides.length, 0, false, true);
        } else if (params.centeredSlides && swiper.snapIndex < params.slidesPerView) {
          swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, false, true);
        } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {
          swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);
        }
      }
      swiper.allowSlidePrev = allowSlidePrev;
      swiper.allowSlideNext = allowSlideNext;
      swiper.emit('loopFix');
      return;
    }
    var slidesPerView = params.slidesPerView;
    if (slidesPerView === 'auto') {
      slidesPerView = swiper.slidesPerViewDynamic();
    } else {
      slidesPerView = Math.ceil(parseFloat(params.slidesPerView, 10));
      if (centeredSlides && slidesPerView % 2 === 0) {
        slidesPerView = slidesPerView + 1;
      }
    }
    var slidesPerGroup = params.slidesPerGroupAuto ? slidesPerView : params.slidesPerGroup;
    var loopedSlides = slidesPerGroup;
    if (loopedSlides % slidesPerGroup !== 0) {
      loopedSlides += slidesPerGroup - loopedSlides % slidesPerGroup;
    }
    loopedSlides += params.loopAdditionalSlides;
    swiper.loopedSlides = loopedSlides;
    var gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;
    if (slides.length < slidesPerView + loopedSlides) {
      showWarning('Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters');
    } else if (gridEnabled && params.grid.fill === 'row') {
      showWarning('Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`');
    }
    var prependSlidesIndexes = [];
    var appendSlidesIndexes = [];
    var activeIndex = swiper.activeIndex;
    if (typeof activeSlideIndex === 'undefined') {
      activeSlideIndex = swiper.getSlideIndex(slides.filter(function (el) {
        return el.classList.contains(params.slideActiveClass);
      })[0]);
    } else {
      activeIndex = activeSlideIndex;
    }
    var isNext = direction === 'next' || !direction;
    var isPrev = direction === 'prev' || !direction;
    var slidesPrepended = 0;
    var slidesAppended = 0;
    var cols = gridEnabled ? Math.ceil(slides.length / params.grid.rows) : slides.length;
    var activeColIndex = gridEnabled ? slides[activeSlideIndex].column : activeSlideIndex;
    var activeColIndexWithShift = activeColIndex + (centeredSlides && typeof setTranslate === 'undefined' ? -slidesPerView / 2 + 0.5 : 0);
    // prepend last slides before start
    if (activeColIndexWithShift < loopedSlides) {
      slidesPrepended = Math.max(loopedSlides - activeColIndexWithShift, slidesPerGroup);
      for (var i = 0; i < loopedSlides - activeColIndexWithShift; i += 1) {
        var index = i - Math.floor(i / cols) * cols;
        if (gridEnabled) {
          var colIndexToPrepend = cols - index - 1;
          for (var _i5 = slides.length - 1; _i5 >= 0; _i5 -= 1) {
            if (slides[_i5].column === colIndexToPrepend) prependSlidesIndexes.push(_i5);
          }
          // slides.forEach((slide, slideIndex) => {
          //   if (slide.column === colIndexToPrepend) prependSlidesIndexes.push(slideIndex);
          // });
        } else {
          prependSlidesIndexes.push(cols - index - 1);
        }
      }
    } else if (activeColIndexWithShift + slidesPerView > cols - loopedSlides) {
      slidesAppended = Math.max(activeColIndexWithShift - (cols - loopedSlides * 2), slidesPerGroup);
      var _loop = function _loop() {
        var index = _i6 - Math.floor(_i6 / cols) * cols;
        if (gridEnabled) {
          slides.forEach(function (slide, slideIndex) {
            if (slide.column === index) appendSlidesIndexes.push(slideIndex);
          });
        } else {
          appendSlidesIndexes.push(index);
        }
      };
      for (var _i6 = 0; _i6 < slidesAppended; _i6 += 1) {
        _loop();
      }
    }
    swiper.__preventObserver__ = true;
    requestAnimationFrame(function () {
      swiper.__preventObserver__ = false;
    });
    if (isPrev) {
      prependSlidesIndexes.forEach(function (index) {
        slides[index].swiperLoopMoveDOM = true;
        slidesEl.prepend(slides[index]);
        slides[index].swiperLoopMoveDOM = false;
      });
    }
    if (isNext) {
      appendSlidesIndexes.forEach(function (index) {
        slides[index].swiperLoopMoveDOM = true;
        slidesEl.append(slides[index]);
        slides[index].swiperLoopMoveDOM = false;
      });
    }
    swiper.recalcSlides();
    if (params.slidesPerView === 'auto') {
      swiper.updateSlides();
    } else if (gridEnabled && (prependSlidesIndexes.length > 0 && isPrev || appendSlidesIndexes.length > 0 && isNext)) {
      swiper.slides.forEach(function (slide, slideIndex) {
        swiper.grid.updateSlide(slideIndex, slide, swiper.slides);
      });
    }
    if (params.watchSlidesProgress) {
      swiper.updateSlidesOffset();
    }
    if (slideTo) {
      if (prependSlidesIndexes.length > 0 && isPrev) {
        if (typeof slideRealIndex === 'undefined') {
          var currentSlideTranslate = swiper.slidesGrid[activeIndex];
          var newSlideTranslate = swiper.slidesGrid[activeIndex + slidesPrepended];
          var diff = newSlideTranslate - currentSlideTranslate;
          if (byMousewheel) {
            swiper.setTranslate(swiper.translate - diff);
          } else {
            swiper.slideTo(activeIndex + Math.ceil(slidesPrepended), 0, false, true);
            if (setTranslate) {
              swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;
              swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;
            }
          }
        } else {
          if (setTranslate) {
            var shift = gridEnabled ? prependSlidesIndexes.length / params.grid.rows : prependSlidesIndexes.length;
            swiper.slideTo(swiper.activeIndex + shift, 0, false, true);
            swiper.touchEventsData.currentTranslate = swiper.translate;
          }
        }
      } else if (appendSlidesIndexes.length > 0 && isNext) {
        if (typeof slideRealIndex === 'undefined') {
          var _currentSlideTranslate = swiper.slidesGrid[activeIndex];
          var _newSlideTranslate = swiper.slidesGrid[activeIndex - slidesAppended];
          var _diff = _newSlideTranslate - _currentSlideTranslate;
          if (byMousewheel) {
            swiper.setTranslate(swiper.translate - _diff);
          } else {
            swiper.slideTo(activeIndex - slidesAppended, 0, false, true);
            if (setTranslate) {
              swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - _diff;
              swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - _diff;
            }
          }
        } else {
          var _shift = gridEnabled ? appendSlidesIndexes.length / params.grid.rows : appendSlidesIndexes.length;
          swiper.slideTo(swiper.activeIndex - _shift, 0, false, true);
        }
      }
    }
    swiper.allowSlidePrev = allowSlidePrev;
    swiper.allowSlideNext = allowSlideNext;
    if (swiper.controller && swiper.controller.control && !byController) {
      var loopParams = {
        slideRealIndex: slideRealIndex,
        direction: direction,
        setTranslate: setTranslate,
        activeSlideIndex: activeSlideIndex,
        byController: true
      };
      if (Array.isArray(swiper.controller.control)) {
        swiper.controller.control.forEach(function (c) {
          if (!c.destroyed && c.params.loop) c.loopFix(_objectSpread2(_objectSpread2({}, loopParams), {}, {
            slideTo: c.params.slidesPerView === params.slidesPerView ? slideTo : false
          }));
        });
      } else if (swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop) {
        swiper.controller.control.loopFix(_objectSpread2(_objectSpread2({}, loopParams), {}, {
          slideTo: swiper.controller.control.params.slidesPerView === params.slidesPerView ? slideTo : false
        }));
      }
    }
    swiper.emit('loopFix');
  }
  function loopDestroy() {
    var swiper = this;
    var params = swiper.params,
      slidesEl = swiper.slidesEl;
    if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;
    swiper.recalcSlides();
    var newSlidesOrder = [];
    swiper.slides.forEach(function (slideEl) {
      var index = typeof slideEl.swiperSlideIndex === 'undefined' ? slideEl.getAttribute('data-swiper-slide-index') * 1 : slideEl.swiperSlideIndex;
      newSlidesOrder[index] = slideEl;
    });
    swiper.slides.forEach(function (slideEl) {
      slideEl.removeAttribute('data-swiper-slide-index');
    });
    newSlidesOrder.forEach(function (slideEl) {
      slidesEl.append(slideEl);
    });
    swiper.recalcSlides();
    swiper.slideTo(swiper.realIndex, 0);
  }
  var loop = {
    loopCreate: loopCreate,
    loopFix: loopFix,
    loopDestroy: loopDestroy
  };
  function setGrabCursor(moving) {
    var swiper = this;
    if (!swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;
    var el = swiper.params.touchEventsTarget === 'container' ? swiper.el : swiper.wrapperEl;
    if (swiper.isElement) {
      swiper.__preventObserver__ = true;
    }
    el.style.cursor = 'move';
    el.style.cursor = moving ? 'grabbing' : 'grab';
    if (swiper.isElement) {
      requestAnimationFrame(function () {
        swiper.__preventObserver__ = false;
      });
    }
  }
  function unsetGrabCursor() {
    var swiper = this;
    if (swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {
      return;
    }
    if (swiper.isElement) {
      swiper.__preventObserver__ = true;
    }
    swiper[swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'].style.cursor = '';
    if (swiper.isElement) {
      requestAnimationFrame(function () {
        swiper.__preventObserver__ = false;
      });
    }
  }
  var grabCursor = {
    setGrabCursor: setGrabCursor,
    unsetGrabCursor: unsetGrabCursor
  };

  // Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd
  function closestElement(selector, base) {
    if (base === void 0) {
      base = this;
    }
    function __closestFrom(el) {
      if (!el || el === getDocument() || el === getWindow()) return null;
      if (el.assignedSlot) el = el.assignedSlot;
      var found = el.closest(selector);
      if (!found && !el.getRootNode) {
        return null;
      }
      return found || __closestFrom(el.getRootNode().host);
    }
    return __closestFrom(base);
  }
  function preventEdgeSwipe(swiper, event, startX) {
    var window = getWindow();
    var params = swiper.params;
    var edgeSwipeDetection = params.edgeSwipeDetection;
    var edgeSwipeThreshold = params.edgeSwipeThreshold;
    if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {
      if (edgeSwipeDetection === 'prevent') {
        event.preventDefault();
        return true;
      }
      return false;
    }
    return true;
  }
  function onTouchStart(event) {
    var swiper = this;
    var document = getDocument();
    var e = event;
    if (e.originalEvent) e = e.originalEvent;
    var data = swiper.touchEventsData;
    if (e.type === 'pointerdown') {
      if (data.pointerId !== null && data.pointerId !== e.pointerId) {
        return;
      }
      data.pointerId = e.pointerId;
    } else if (e.type === 'touchstart' && e.targetTouches.length === 1) {
      data.touchId = e.targetTouches[0].identifier;
    }
    if (e.type === 'touchstart') {
      // don't proceed touch event
      preventEdgeSwipe(swiper, e, e.targetTouches[0].pageX);
      return;
    }
    var params = swiper.params,
      touches = swiper.touches,
      enabled = swiper.enabled;
    if (!enabled) return;
    if (!params.simulateTouch && e.pointerType === 'mouse') return;
    if (swiper.animating && params.preventInteractionOnTransition) {
      return;
    }
    if (!swiper.animating && params.cssMode && params.loop) {
      swiper.loopFix();
    }
    var targetEl = e.target;
    if (params.touchEventsTarget === 'wrapper') {
      if (!elementIsChildOf(targetEl, swiper.wrapperEl)) return;
    }
    if ('which' in e && e.which === 3) return;
    if ('button' in e && e.button > 0) return;
    if (data.isTouched && data.isMoved) return;

    // change target el for shadow root component
    var swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';
    // eslint-disable-next-line
    var eventPath = e.composedPath ? e.composedPath() : e.path;
    if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {
      targetEl = eventPath[0];
    }
    var noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : ".".concat(params.noSwipingClass);
    var isTargetShadow = !!(e.target && e.target.shadowRoot);

    // use closestElement for shadow root element to get the actual closest for nested shadow root element
    if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, targetEl) : targetEl.closest(noSwipingSelector))) {
      swiper.allowClick = true;
      return;
    }
    if (params.swipeHandler) {
      if (!targetEl.closest(params.swipeHandler)) return;
    }
    touches.currentX = e.pageX;
    touches.currentY = e.pageY;
    var startX = touches.currentX;
    var startY = touches.currentY;

    // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore

    if (!preventEdgeSwipe(swiper, e, startX)) {
      return;
    }
    Object.assign(data, {
      isTouched: true,
      isMoved: false,
      allowTouchCallbacks: true,
      isScrolling: undefined,
      startMoving: undefined
    });
    touches.startX = startX;
    touches.startY = startY;
    data.touchStartTime = now();
    swiper.allowClick = true;
    swiper.updateSize();
    swiper.swipeDirection = undefined;
    if (params.threshold > 0) data.allowThresholdMove = false;
    var preventDefault = true;
    if (targetEl.matches(data.focusableElements)) {
      preventDefault = false;
      if (targetEl.nodeName === 'SELECT') {
        data.isTouched = false;
      }
    }
    if (document.activeElement && document.activeElement.matches(data.focusableElements) && document.activeElement !== targetEl && (e.pointerType === 'mouse' || e.pointerType !== 'mouse' && !targetEl.matches(data.focusableElements))) {
      document.activeElement.blur();
    }
    var shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;
    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !targetEl.isContentEditable) {
      e.preventDefault();
    }
    if (params.freeMode && params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {
      swiper.freeMode.onTouchStart();
    }
    swiper.emit('touchStart', e);
  }
  function onTouchMove(event) {
    var document = getDocument();
    var swiper = this;
    var data = swiper.touchEventsData;
    var params = swiper.params,
      touches = swiper.touches,
      rtl = swiper.rtlTranslate,
      enabled = swiper.enabled;
    if (!enabled) return;
    if (!params.simulateTouch && event.pointerType === 'mouse') return;
    var e = event;
    if (e.originalEvent) e = e.originalEvent;
    if (e.type === 'pointermove') {
      if (data.touchId !== null) return; // return from pointer if we use touch
      var id = e.pointerId;
      if (id !== data.pointerId) return;
    }
    var targetTouch;
    if (e.type === 'touchmove') {
      targetTouch = _toConsumableArray(e.changedTouches).filter(function (t) {
        return t.identifier === data.touchId;
      })[0];
      if (!targetTouch || targetTouch.identifier !== data.touchId) return;
    } else {
      targetTouch = e;
    }
    if (!data.isTouched) {
      if (data.startMoving && data.isScrolling) {
        swiper.emit('touchMoveOpposite', e);
      }
      return;
    }
    var pageX = targetTouch.pageX;
    var pageY = targetTouch.pageY;
    if (e.preventedByNestedSwiper) {
      touches.startX = pageX;
      touches.startY = pageY;
      return;
    }
    if (!swiper.allowTouchMove) {
      if (!e.target.matches(data.focusableElements)) {
        swiper.allowClick = false;
      }
      if (data.isTouched) {
        Object.assign(touches, {
          startX: pageX,
          startY: pageY,
          currentX: pageX,
          currentY: pageY
        });
        data.touchStartTime = now();
      }
      return;
    }
    if (params.touchReleaseOnEdges && !params.loop) {
      if (swiper.isVertical()) {
        // Vertical
        if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
          data.isTouched = false;
          data.isMoved = false;
          return;
        }
      } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {
        return;
      }
    }
    if (document.activeElement && document.activeElement.matches(data.focusableElements) && document.activeElement !== e.target && e.pointerType !== 'mouse') {
      document.activeElement.blur();
    }
    if (document.activeElement) {
      if (e.target === document.activeElement && e.target.matches(data.focusableElements)) {
        data.isMoved = true;
        swiper.allowClick = false;
        return;
      }
    }
    if (data.allowTouchCallbacks) {
      swiper.emit('touchMove', e);
    }
    touches.previousX = touches.currentX;
    touches.previousY = touches.currentY;
    touches.currentX = pageX;
    touches.currentY = pageY;
    var diffX = touches.currentX - touches.startX;
    var diffY = touches.currentY - touches.startY;
    if (swiper.params.threshold && Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2)) < swiper.params.threshold) return;
    if (typeof data.isScrolling === 'undefined') {
      var touchAngle;
      if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {
        data.isScrolling = false;
      } else {
        // eslint-disable-next-line
        if (diffX * diffX + diffY * diffY >= 25) {
          touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;
          data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;
        }
      }
    }
    if (data.isScrolling) {
      swiper.emit('touchMoveOpposite', e);
    }
    if (typeof data.startMoving === 'undefined') {
      if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
        data.startMoving = true;
      }
    }
    if (data.isScrolling || e.type === 'touchmove' && data.preventTouchMoveFromPointerMove) {
      data.isTouched = false;
      return;
    }
    if (!data.startMoving) {
      return;
    }
    swiper.allowClick = false;
    if (!params.cssMode && e.cancelable) {
      e.preventDefault();
    }
    if (params.touchMoveStopPropagation && !params.nested) {
      e.stopPropagation();
    }
    var diff = swiper.isHorizontal() ? diffX : diffY;
    var touchesDiff = swiper.isHorizontal() ? touches.currentX - touches.previousX : touches.currentY - touches.previousY;
    if (params.oneWayMovement) {
      diff = Math.abs(diff) * (rtl ? 1 : -1);
      touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);
    }
    touches.diff = diff;
    diff *= params.touchRatio;
    if (rtl) {
      diff = -diff;
      touchesDiff = -touchesDiff;
    }
    var prevTouchesDirection = swiper.touchesDirection;
    swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
    swiper.touchesDirection = touchesDiff > 0 ? 'prev' : 'next';
    var isLoop = swiper.params.loop && !params.cssMode;
    var allowLoopFix = swiper.touchesDirection === 'next' && swiper.allowSlideNext || swiper.touchesDirection === 'prev' && swiper.allowSlidePrev;
    if (!data.isMoved) {
      if (isLoop && allowLoopFix) {
        swiper.loopFix({
          direction: swiper.swipeDirection
        });
      }
      data.startTranslate = swiper.getTranslate();
      swiper.setTransition(0);
      if (swiper.animating) {
        var evt = new window.CustomEvent('transitionend', {
          bubbles: true,
          cancelable: true,
          detail: {
            bySwiperTouchMove: true
          }
        });
        swiper.wrapperEl.dispatchEvent(evt);
      }
      data.allowMomentumBounce = false;
      // Grab Cursor
      if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
        swiper.setGrabCursor(true);
      }
      swiper.emit('sliderFirstMove', e);
    }
    var loopFixed;
    new Date().getTime();
    if (data.isMoved && data.allowThresholdMove && prevTouchesDirection !== swiper.touchesDirection && isLoop && allowLoopFix && Math.abs(diff) >= 1) {
      Object.assign(touches, {
        startX: pageX,
        startY: pageY,
        currentX: pageX,
        currentY: pageY,
        startTranslate: data.currentTranslate
      });
      data.loopSwapReset = true;
      data.startTranslate = data.currentTranslate;
      return;
    }
    swiper.emit('sliderMove', e);
    data.isMoved = true;
    data.currentTranslate = diff + data.startTranslate;
    var disableParentSwiper = true;
    var resistanceRatio = params.resistanceRatio;
    if (params.touchReleaseOnEdges) {
      resistanceRatio = 0;
    }
    if (diff > 0) {
      if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate > (params.centeredSlides ? swiper.minTranslate() - swiper.slidesSizesGrid[swiper.activeIndex + 1] - (params.slidesPerView !== 'auto' && swiper.slides.length - params.slidesPerView >= 2 ? swiper.slidesSizesGrid[swiper.activeIndex + 1] + swiper.params.spaceBetween : 0) - swiper.params.spaceBetween : swiper.minTranslate())) {
        swiper.loopFix({
          direction: 'prev',
          setTranslate: true,
          activeSlideIndex: 0
        });
      }
      if (data.currentTranslate > swiper.minTranslate()) {
        disableParentSwiper = false;
        if (params.resistance) {
          data.currentTranslate = swiper.minTranslate() - 1 + Math.pow(-swiper.minTranslate() + data.startTranslate + diff, resistanceRatio);
        }
      }
    } else if (diff < 0) {
      if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate < (params.centeredSlides ? swiper.maxTranslate() + swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] + swiper.params.spaceBetween + (params.slidesPerView !== 'auto' && swiper.slides.length - params.slidesPerView >= 2 ? swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] + swiper.params.spaceBetween : 0) : swiper.maxTranslate())) {
        swiper.loopFix({
          direction: 'next',
          setTranslate: true,
          activeSlideIndex: swiper.slides.length - (params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)))
        });
      }
      if (data.currentTranslate < swiper.maxTranslate()) {
        disableParentSwiper = false;
        if (params.resistance) {
          data.currentTranslate = swiper.maxTranslate() + 1 - Math.pow(swiper.maxTranslate() - data.startTranslate - diff, resistanceRatio);
        }
      }
    }
    if (disableParentSwiper) {
      e.preventedByNestedSwiper = true;
    }

    // Directions locks
    if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
      data.currentTranslate = data.startTranslate;
    }
    if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
      data.currentTranslate = data.startTranslate;
    }
    if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {
      data.currentTranslate = data.startTranslate;
    }

    // Threshold
    if (params.threshold > 0) {
      if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
        if (!data.allowThresholdMove) {
          data.allowThresholdMove = true;
          touches.startX = touches.currentX;
          touches.startY = touches.currentY;
          data.currentTranslate = data.startTranslate;
          touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
          return;
        }
      } else {
        data.currentTranslate = data.startTranslate;
        return;
      }
    }
    if (!params.followFinger || params.cssMode) return;

    // Update active index in free mode
    if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }
    if (params.freeMode && params.freeMode.enabled && swiper.freeMode) {
      swiper.freeMode.onTouchMove();
    }
    // Update progress
    swiper.updateProgress(data.currentTranslate);
    // Update translate
    swiper.setTranslate(data.currentTranslate);
  }
  function onTouchEnd(event) {
    var swiper = this;
    var data = swiper.touchEventsData;
    var e = event;
    if (e.originalEvent) e = e.originalEvent;
    var targetTouch;
    var isTouchEvent = e.type === 'touchend' || e.type === 'touchcancel';
    if (!isTouchEvent) {
      if (data.touchId !== null) return; // return from pointer if we use touch
      if (e.pointerId !== data.pointerId) return;
      targetTouch = e;
    } else {
      targetTouch = _toConsumableArray(e.changedTouches).filter(function (t) {
        return t.identifier === data.touchId;
      })[0];
      if (!targetTouch || targetTouch.identifier !== data.touchId) return;
    }
    if (['pointercancel', 'pointerout', 'pointerleave', 'contextmenu'].includes(e.type)) {
      var proceed = ['pointercancel', 'contextmenu'].includes(e.type) && (swiper.browser.isSafari || swiper.browser.isWebView);
      if (!proceed) {
        return;
      }
    }
    data.pointerId = null;
    data.touchId = null;
    var params = swiper.params,
      touches = swiper.touches,
      rtl = swiper.rtlTranslate,
      slidesGrid = swiper.slidesGrid,
      enabled = swiper.enabled;
    if (!enabled) return;
    if (!params.simulateTouch && e.pointerType === 'mouse') return;
    if (data.allowTouchCallbacks) {
      swiper.emit('touchEnd', e);
    }
    data.allowTouchCallbacks = false;
    if (!data.isTouched) {
      if (data.isMoved && params.grabCursor) {
        swiper.setGrabCursor(false);
      }
      data.isMoved = false;
      data.startMoving = false;
      return;
    }

    // Return Grab Cursor
    if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
      swiper.setGrabCursor(false);
    }

    // Time diff
    var touchEndTime = now();
    var timeDiff = touchEndTime - data.touchStartTime;

    // Tap, doubleTap, Click
    if (swiper.allowClick) {
      var pathTree = e.path || e.composedPath && e.composedPath();
      swiper.updateClickedSlide(pathTree && pathTree[0] || e.target, pathTree);
      swiper.emit('tap click', e);
      if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
        swiper.emit('doubleTap doubleClick', e);
      }
    }
    data.lastClickTime = now();
    nextTick(function () {
      if (!swiper.destroyed) swiper.allowClick = true;
    });
    if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 && !data.loopSwapReset || data.currentTranslate === data.startTranslate && !data.loopSwapReset) {
      data.isTouched = false;
      data.isMoved = false;
      data.startMoving = false;
      return;
    }
    data.isTouched = false;
    data.isMoved = false;
    data.startMoving = false;
    var currentPos;
    if (params.followFinger) {
      currentPos = rtl ? swiper.translate : -swiper.translate;
    } else {
      currentPos = -data.currentTranslate;
    }
    if (params.cssMode) {
      return;
    }
    if (params.freeMode && params.freeMode.enabled) {
      swiper.freeMode.onTouchEnd({
        currentPos: currentPos
      });
      return;
    }

    // Find current slide
    var swipeToLast = currentPos >= -swiper.maxTranslate() && !swiper.params.loop;
    var stopIndex = 0;
    var groupSize = swiper.slidesSizesGrid[0];
    for (var i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
      var _increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
      if (typeof slidesGrid[i + _increment] !== 'undefined') {
        if (swipeToLast || currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + _increment]) {
          stopIndex = i;
          groupSize = slidesGrid[i + _increment] - slidesGrid[i];
        }
      } else if (swipeToLast || currentPos >= slidesGrid[i]) {
        stopIndex = i;
        groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
      }
    }
    var rewindFirstIndex = null;
    var rewindLastIndex = null;
    if (params.rewind) {
      if (swiper.isBeginning) {
        rewindLastIndex = params.virtual && params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;
      } else if (swiper.isEnd) {
        rewindFirstIndex = 0;
      }
    }
    // Find current slide size
    var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
    var increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;
    if (timeDiff > params.longSwipesMs) {
      // Long touches
      if (!params.longSwipes) {
        swiper.slideTo(swiper.activeIndex);
        return;
      }
      if (swiper.swipeDirection === 'next') {
        if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);else swiper.slideTo(stopIndex);
      }
      if (swiper.swipeDirection === 'prev') {
        if (ratio > 1 - params.longSwipesRatio) {
          swiper.slideTo(stopIndex + increment);
        } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {
          swiper.slideTo(rewindLastIndex);
        } else {
          swiper.slideTo(stopIndex);
        }
      }
    } else {
      // Short swipes
      if (!params.shortSwipes) {
        swiper.slideTo(swiper.activeIndex);
        return;
      }
      var isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);
      if (!isNavButtonTarget) {
        if (swiper.swipeDirection === 'next') {
          swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);
        }
        if (swiper.swipeDirection === 'prev') {
          swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);
        }
      } else if (e.target === swiper.navigation.nextEl) {
        swiper.slideTo(stopIndex + increment);
      } else {
        swiper.slideTo(stopIndex);
      }
    }
  }
  function onResize() {
    var swiper = this;
    var params = swiper.params,
      el = swiper.el;
    if (el && el.offsetWidth === 0) return;

    // Breakpoints
    if (params.breakpoints) {
      swiper.setBreakpoint();
    }

    // Save locks
    var allowSlideNext = swiper.allowSlideNext,
      allowSlidePrev = swiper.allowSlidePrev,
      snapGrid = swiper.snapGrid;
    var isVirtual = swiper.virtual && swiper.params.virtual.enabled;

    // Disable locks on resize
    swiper.allowSlideNext = true;
    swiper.allowSlidePrev = true;
    swiper.updateSize();
    swiper.updateSlides();
    swiper.updateSlidesClasses();
    var isVirtualLoop = isVirtual && params.loop;
    if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides && !isVirtualLoop) {
      swiper.slideTo(swiper.slides.length - 1, 0, false, true);
    } else {
      if (swiper.params.loop && !isVirtual) {
        swiper.slideToLoop(swiper.realIndex, 0, false, true);
      } else {
        swiper.slideTo(swiper.activeIndex, 0, false, true);
      }
    }
    if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
      clearTimeout(swiper.autoplay.resizeTimeout);
      swiper.autoplay.resizeTimeout = setTimeout(function () {
        if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
          swiper.autoplay.resume();
        }
      }, 500);
    }
    // Return locks after resize
    swiper.allowSlidePrev = allowSlidePrev;
    swiper.allowSlideNext = allowSlideNext;
    if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
      swiper.checkOverflow();
    }
  }
  function onClick(e) {
    var swiper = this;
    if (!swiper.enabled) return;
    if (!swiper.allowClick) {
      if (swiper.params.preventClicks) e.preventDefault();
      if (swiper.params.preventClicksPropagation && swiper.animating) {
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
    }
  }
  function onScroll() {
    var swiper = this;
    var wrapperEl = swiper.wrapperEl,
      rtlTranslate = swiper.rtlTranslate,
      enabled = swiper.enabled;
    if (!enabled) return;
    swiper.previousTranslate = swiper.translate;
    if (swiper.isHorizontal()) {
      swiper.translate = -wrapperEl.scrollLeft;
    } else {
      swiper.translate = -wrapperEl.scrollTop;
    }
    // eslint-disable-next-line
    if (swiper.translate === 0) swiper.translate = 0;
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
    var newProgress;
    var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
    if (translatesDiff === 0) {
      newProgress = 0;
    } else {
      newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;
    }
    if (newProgress !== swiper.progress) {
      swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
    }
    swiper.emit('setTranslate', swiper.translate, false);
  }
  function onLoad(e) {
    var swiper = this;
    processLazyPreloader(swiper, e.target);
    if (swiper.params.cssMode || swiper.params.slidesPerView !== 'auto' && !swiper.params.autoHeight) {
      return;
    }
    swiper.update();
  }
  function onDocumentTouchStart() {
    var swiper = this;
    if (swiper.documentTouchHandlerProceeded) return;
    swiper.documentTouchHandlerProceeded = true;
    if (swiper.params.touchReleaseOnEdges) {
      swiper.el.style.touchAction = 'auto';
    }
  }
  var events = function events(swiper, method) {
    var document = getDocument();
    var params = swiper.params,
      el = swiper.el,
      wrapperEl = swiper.wrapperEl,
      device = swiper.device;
    var capture = !!params.nested;
    var domMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';
    var swiperMethod = method;
    if (!el || typeof el === 'string') return;

    // Touch Events
    document[domMethod]('touchstart', swiper.onDocumentTouchStart, {
      passive: false,
      capture: capture
    });
    el[domMethod]('touchstart', swiper.onTouchStart, {
      passive: false
    });
    el[domMethod]('pointerdown', swiper.onTouchStart, {
      passive: false
    });
    document[domMethod]('touchmove', swiper.onTouchMove, {
      passive: false,
      capture: capture
    });
    document[domMethod]('pointermove', swiper.onTouchMove, {
      passive: false,
      capture: capture
    });
    document[domMethod]('touchend', swiper.onTouchEnd, {
      passive: true
    });
    document[domMethod]('pointerup', swiper.onTouchEnd, {
      passive: true
    });
    document[domMethod]('pointercancel', swiper.onTouchEnd, {
      passive: true
    });
    document[domMethod]('touchcancel', swiper.onTouchEnd, {
      passive: true
    });
    document[domMethod]('pointerout', swiper.onTouchEnd, {
      passive: true
    });
    document[domMethod]('pointerleave', swiper.onTouchEnd, {
      passive: true
    });
    document[domMethod]('contextmenu', swiper.onTouchEnd, {
      passive: true
    });

    // Prevent Links Clicks
    if (params.preventClicks || params.preventClicksPropagation) {
      el[domMethod]('click', swiper.onClick, true);
    }
    if (params.cssMode) {
      wrapperEl[domMethod]('scroll', swiper.onScroll);
    }

    // Resize handler
    if (params.updateOnWindowResize) {
      swiper[swiperMethod](device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);
    } else {
      swiper[swiperMethod]('observerUpdate', onResize, true);
    }

    // Images loader
    el[domMethod]('load', swiper.onLoad, {
      capture: true
    });
  };
  function attachEvents() {
    var swiper = this;
    var params = swiper.params;
    swiper.onTouchStart = onTouchStart.bind(swiper);
    swiper.onTouchMove = onTouchMove.bind(swiper);
    swiper.onTouchEnd = onTouchEnd.bind(swiper);
    swiper.onDocumentTouchStart = onDocumentTouchStart.bind(swiper);
    if (params.cssMode) {
      swiper.onScroll = onScroll.bind(swiper);
    }
    swiper.onClick = onClick.bind(swiper);
    swiper.onLoad = onLoad.bind(swiper);
    events(swiper, 'on');
  }
  function detachEvents() {
    var swiper = this;
    events(swiper, 'off');
  }
  var events$1 = {
    attachEvents: attachEvents,
    detachEvents: detachEvents
  };
  var isGridEnabled = function isGridEnabled(swiper, params) {
    return swiper.grid && params.grid && params.grid.rows > 1;
  };
  function setBreakpoint() {
    var swiper = this;
    var realIndex = swiper.realIndex,
      initialized = swiper.initialized,
      params = swiper.params,
      el = swiper.el;
    var breakpoints = params.breakpoints;
    if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return;

    // Get breakpoint for window width and update parameters
    var breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);
    if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;
    var breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;
    var breakpointParams = breakpointOnlyParams || swiper.originalParams;
    var wasMultiRow = isGridEnabled(swiper, params);
    var isMultiRow = isGridEnabled(swiper, breakpointParams);
    var wasGrabCursor = swiper.params.grabCursor;
    var isGrabCursor = breakpointParams.grabCursor;
    var wasEnabled = params.enabled;
    if (wasMultiRow && !isMultiRow) {
      el.classList.remove("".concat(params.containerModifierClass, "grid"), "".concat(params.containerModifierClass, "grid-column"));
      swiper.emitContainerClasses();
    } else if (!wasMultiRow && isMultiRow) {
      el.classList.add("".concat(params.containerModifierClass, "grid"));
      if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {
        el.classList.add("".concat(params.containerModifierClass, "grid-column"));
      }
      swiper.emitContainerClasses();
    }
    if (wasGrabCursor && !isGrabCursor) {
      swiper.unsetGrabCursor();
    } else if (!wasGrabCursor && isGrabCursor) {
      swiper.setGrabCursor();
    }

    // Toggle navigation, pagination, scrollbar
    ['navigation', 'pagination', 'scrollbar'].forEach(function (prop) {
      if (typeof breakpointParams[prop] === 'undefined') return;
      var wasModuleEnabled = params[prop] && params[prop].enabled;
      var isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;
      if (wasModuleEnabled && !isModuleEnabled) {
        swiper[prop].disable();
      }
      if (!wasModuleEnabled && isModuleEnabled) {
        swiper[prop].enable();
      }
    });
    var directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
    var needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);
    var wasLoop = params.loop;
    if (directionChanged && initialized) {
      swiper.changeDirection();
    }
    extend(swiper.params, breakpointParams);
    var isEnabled = swiper.params.enabled;
    var hasLoop = swiper.params.loop;
    Object.assign(swiper, {
      allowTouchMove: swiper.params.allowTouchMove,
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev
    });
    if (wasEnabled && !isEnabled) {
      swiper.disable();
    } else if (!wasEnabled && isEnabled) {
      swiper.enable();
    }
    swiper.currentBreakpoint = breakpoint;
    swiper.emit('_beforeBreakpoint', breakpointParams);
    if (initialized) {
      if (needsReLoop) {
        swiper.loopDestroy();
        swiper.loopCreate(realIndex);
        swiper.updateSlides();
      } else if (!wasLoop && hasLoop) {
        swiper.loopCreate(realIndex);
        swiper.updateSlides();
      } else if (wasLoop && !hasLoop) {
        swiper.loopDestroy();
      }
    }
    swiper.emit('breakpoint', breakpointParams);
  }
  function getBreakpoint(breakpoints, base, containerEl) {
    if (base === void 0) {
      base = 'window';
    }
    if (!breakpoints || base === 'container' && !containerEl) return undefined;
    var breakpoint = false;
    var window = getWindow();
    var currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;
    var points = Object.keys(breakpoints).map(function (point) {
      if (typeof point === 'string' && point.indexOf('@') === 0) {
        var minRatio = parseFloat(point.substr(1));
        var value = currentHeight * minRatio;
        return {
          value: value,
          point: point
        };
      }
      return {
        value: point,
        point: point
      };
    });
    points.sort(function (a, b) {
      return parseInt(a.value, 10) - parseInt(b.value, 10);
    });
    for (var i = 0; i < points.length; i += 1) {
      var _points$i = points[i],
        point = _points$i.point,
        value = _points$i.value;
      if (base === 'window') {
        if (window.matchMedia("(min-width: ".concat(value, "px)")).matches) {
          breakpoint = point;
        }
      } else if (value <= containerEl.clientWidth) {
        breakpoint = point;
      }
    }
    return breakpoint || 'max';
  }
  var breakpoints = {
    setBreakpoint: setBreakpoint,
    getBreakpoint: getBreakpoint
  };
  function prepareClasses(entries, prefix) {
    var resultClasses = [];
    entries.forEach(function (item) {
      if (_typeof(item) === 'object') {
        Object.keys(item).forEach(function (classNames) {
          if (item[classNames]) {
            resultClasses.push(prefix + classNames);
          }
        });
      } else if (typeof item === 'string') {
        resultClasses.push(prefix + item);
      }
    });
    return resultClasses;
  }
  function addClasses() {
    var _el$classList;
    var swiper = this;
    var classNames = swiper.classNames,
      params = swiper.params,
      rtl = swiper.rtl,
      el = swiper.el,
      device = swiper.device;
    // prettier-ignore
    var suffixes = prepareClasses(['initialized', params.direction, {
      'free-mode': swiper.params.freeMode && params.freeMode.enabled
    }, {
      'autoheight': params.autoHeight
    }, {
      'rtl': rtl
    }, {
      'grid': params.grid && params.grid.rows > 1
    }, {
      'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'
    }, {
      'android': device.android
    }, {
      'ios': device.ios
    }, {
      'css-mode': params.cssMode
    }, {
      'centered': params.cssMode && params.centeredSlides
    }, {
      'watch-progress': params.watchSlidesProgress
    }], params.containerModifierClass);
    classNames.push.apply(classNames, _toConsumableArray(suffixes));
    (_el$classList = el.classList).add.apply(_el$classList, _toConsumableArray(classNames));
    swiper.emitContainerClasses();
  }
  function removeClasses() {
    var _el$classList2;
    var swiper = this;
    var el = swiper.el,
      classNames = swiper.classNames;
    if (!el || typeof el === 'string') return;
    (_el$classList2 = el.classList).remove.apply(_el$classList2, _toConsumableArray(classNames));
    swiper.emitContainerClasses();
  }
  var classes = {
    addClasses: addClasses,
    removeClasses: removeClasses
  };
  function checkOverflow() {
    var swiper = this;
    var wasLocked = swiper.isLocked,
      params = swiper.params;
    var slidesOffsetBefore = params.slidesOffsetBefore;
    if (slidesOffsetBefore) {
      var lastSlideIndex = swiper.slides.length - 1;
      var lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;
      swiper.isLocked = swiper.size > lastSlideRightEdge;
    } else {
      swiper.isLocked = swiper.snapGrid.length === 1;
    }
    if (params.allowSlideNext === true) {
      swiper.allowSlideNext = !swiper.isLocked;
    }
    if (params.allowSlidePrev === true) {
      swiper.allowSlidePrev = !swiper.isLocked;
    }
    if (wasLocked && wasLocked !== swiper.isLocked) {
      swiper.isEnd = false;
    }
    if (wasLocked !== swiper.isLocked) {
      swiper.emit(swiper.isLocked ? 'lock' : 'unlock');
    }
  }
  var checkOverflow$1 = {
    checkOverflow: checkOverflow
  };
  var defaults = {
    init: true,
    direction: 'horizontal',
    oneWayMovement: false,
    swiperElementNodeName: 'SWIPER-CONTAINER',
    touchEventsTarget: 'wrapper',
    initialSlide: 0,
    speed: 300,
    cssMode: false,
    updateOnWindowResize: true,
    resizeObserver: true,
    nested: false,
    createElements: false,
    eventsPrefix: 'swiper',
    enabled: true,
    focusableElements: 'input, select, option, textarea, button, video, label',
    // Overrides
    width: null,
    height: null,
    //
    preventInteractionOnTransition: false,
    // ssr
    userAgent: null,
    url: null,
    // To support iOS's swipe-to-go-back gesture (when being used in-app).
    edgeSwipeDetection: false,
    edgeSwipeThreshold: 20,
    // Autoheight
    autoHeight: false,
    // Set wrapper width
    setWrapperSize: false,
    // Virtual Translate
    virtualTranslate: false,
    // Effects
    effect: 'slide',
    // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

    // Breakpoints
    breakpoints: undefined,
    breakpointsBase: 'window',
    // Slides grid
    spaceBetween: 0,
    slidesPerView: 1,
    slidesPerGroup: 1,
    slidesPerGroupSkip: 0,
    slidesPerGroupAuto: false,
    centeredSlides: false,
    centeredSlidesBounds: false,
    slidesOffsetBefore: 0,
    // in px
    slidesOffsetAfter: 0,
    // in px
    normalizeSlideIndex: true,
    centerInsufficientSlides: false,
    // Disable swiper and hide navigation when container not overflow
    watchOverflow: true,
    // Round length
    roundLengths: false,
    // Touches
    touchRatio: 1,
    touchAngle: 45,
    simulateTouch: true,
    shortSwipes: true,
    longSwipes: true,
    longSwipesRatio: 0.5,
    longSwipesMs: 300,
    followFinger: true,
    allowTouchMove: true,
    threshold: 5,
    touchMoveStopPropagation: false,
    touchStartPreventDefault: true,
    touchStartForcePreventDefault: false,
    touchReleaseOnEdges: false,
    // Unique Navigation Elements
    uniqueNavElements: true,
    // Resistance
    resistance: true,
    resistanceRatio: 0.85,
    // Progress
    watchSlidesProgress: false,
    // Cursor
    grabCursor: false,
    // Clicks
    preventClicks: true,
    preventClicksPropagation: true,
    slideToClickedSlide: false,
    // loop
    loop: false,
    loopAddBlankSlides: true,
    loopAdditionalSlides: 0,
    loopPreventsSliding: true,
    // rewind
    rewind: false,
    // Swiping/no swiping
    allowSlidePrev: true,
    allowSlideNext: true,
    swipeHandler: null,
    // '.swipe-handler',
    noSwiping: true,
    noSwipingClass: 'swiper-no-swiping',
    noSwipingSelector: null,
    // Passive Listeners
    passiveListeners: true,
    maxBackfaceHiddenSlides: 10,
    // NS
    containerModifierClass: 'swiper-',
    // NEW
    slideClass: 'swiper-slide',
    slideBlankClass: 'swiper-slide-blank',
    slideActiveClass: 'swiper-slide-active',
    slideVisibleClass: 'swiper-slide-visible',
    slideFullyVisibleClass: 'swiper-slide-fully-visible',
    slideNextClass: 'swiper-slide-next',
    slidePrevClass: 'swiper-slide-prev',
    wrapperClass: 'swiper-wrapper',
    lazyPreloaderClass: 'swiper-lazy-preloader',
    lazyPreloadPrevNext: 0,
    // Callbacks
    runCallbacksOnInit: true,
    // Internals
    _emitClasses: false
  };
  function moduleExtendParams(params, allModulesParams) {
    return function extendParams(obj) {
      if (obj === void 0) {
        obj = {};
      }
      var moduleParamName = Object.keys(obj)[0];
      var moduleParams = obj[moduleParamName];
      if (_typeof(moduleParams) !== 'object' || moduleParams === null) {
        extend(allModulesParams, obj);
        return;
      }
      if (params[moduleParamName] === true) {
        params[moduleParamName] = {
          enabled: true
        };
      }
      if (moduleParamName === 'navigation' && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].prevEl && !params[moduleParamName].nextEl) {
        params[moduleParamName].auto = true;
      }
      if (['pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].el) {
        params[moduleParamName].auto = true;
      }
      if (!(moduleParamName in params && 'enabled' in moduleParams)) {
        extend(allModulesParams, obj);
        return;
      }
      if (_typeof(params[moduleParamName]) === 'object' && !('enabled' in params[moduleParamName])) {
        params[moduleParamName].enabled = true;
      }
      if (!params[moduleParamName]) params[moduleParamName] = {
        enabled: false
      };
      extend(allModulesParams, obj);
    };
  }

  /* eslint no-param-reassign: "off" */
  var prototypes = {
    eventsEmitter: eventsEmitter,
    update: update,
    translate: translate,
    transition: transition,
    slide: slide,
    loop: loop,
    grabCursor: grabCursor,
    events: events$1,
    breakpoints: breakpoints,
    checkOverflow: checkOverflow$1,
    classes: classes
  };
  var extendedDefaults = {};
  var Swiper = /*#__PURE__*/function () {
    function Swiper() {
      _classCallCheck(this, Swiper);
      var el;
      var params;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {
        params = args[0];
      } else {
        el = args[0];
        params = args[1];
      }
      if (!params) params = {};
      params = extend({}, params);
      if (el && !params.el) params.el = el;
      var document = getDocument();
      if (params.el && typeof params.el === 'string' && document.querySelectorAll(params.el).length > 1) {
        var swipers = [];
        document.querySelectorAll(params.el).forEach(function (containerEl) {
          var newParams = extend({}, params, {
            el: containerEl
          });
          swipers.push(new Swiper(newParams));
        });
        // eslint-disable-next-line no-constructor-return
        return swipers;
      }

      // Swiper Instance
      var swiper = this;
      swiper.__swiper__ = true;
      swiper.support = getSupport();
      swiper.device = getDevice({
        userAgent: params.userAgent
      });
      swiper.browser = getBrowser();
      swiper.eventsListeners = {};
      swiper.eventsAnyListeners = [];
      swiper.modules = _toConsumableArray(swiper.__modules__);
      if (params.modules && Array.isArray(params.modules)) {
        var _swiper$modules;
        (_swiper$modules = swiper.modules).push.apply(_swiper$modules, _toConsumableArray(params.modules));
      }
      var allModulesParams = {};
      swiper.modules.forEach(function (mod) {
        mod({
          params: params,
          swiper: swiper,
          extendParams: moduleExtendParams(params, allModulesParams),
          on: swiper.on.bind(swiper),
          once: swiper.once.bind(swiper),
          off: swiper.off.bind(swiper),
          emit: swiper.emit.bind(swiper)
        });
      });

      // Extend defaults with modules params
      var swiperParams = extend({}, defaults, allModulesParams);

      // Extend defaults with passed params
      swiper.params = extend({}, swiperParams, extendedDefaults, params);
      swiper.originalParams = extend({}, swiper.params);
      swiper.passedParams = extend({}, params);

      // add event listeners
      if (swiper.params && swiper.params.on) {
        Object.keys(swiper.params.on).forEach(function (eventName) {
          swiper.on(eventName, swiper.params.on[eventName]);
        });
      }
      if (swiper.params && swiper.params.onAny) {
        swiper.onAny(swiper.params.onAny);
      }

      // Extend Swiper
      Object.assign(swiper, {
        enabled: swiper.params.enabled,
        el: el,
        // Classes
        classNames: [],
        // Slides
        slides: [],
        slidesGrid: [],
        snapGrid: [],
        slidesSizesGrid: [],
        // isDirection
        isHorizontal: function isHorizontal() {
          return swiper.params.direction === 'horizontal';
        },
        isVertical: function isVertical() {
          return swiper.params.direction === 'vertical';
        },
        // Indexes
        activeIndex: 0,
        realIndex: 0,
        //
        isBeginning: true,
        isEnd: false,
        // Props
        translate: 0,
        previousTranslate: 0,
        progress: 0,
        velocity: 0,
        animating: false,
        cssOverflowAdjustment: function cssOverflowAdjustment() {
          // Returns 0 unless `translate` is > 2**23
          // Should be subtracted from css values to prevent overflow
          return Math.trunc(this.translate / Math.pow(2, 23)) * Math.pow(2, 23);
        },
        // Locks
        allowSlideNext: swiper.params.allowSlideNext,
        allowSlidePrev: swiper.params.allowSlidePrev,
        // Touch Events
        touchEventsData: {
          isTouched: undefined,
          isMoved: undefined,
          allowTouchCallbacks: undefined,
          touchStartTime: undefined,
          isScrolling: undefined,
          currentTranslate: undefined,
          startTranslate: undefined,
          allowThresholdMove: undefined,
          // Form elements to match
          focusableElements: swiper.params.focusableElements,
          // Last click time
          lastClickTime: 0,
          clickTimeout: undefined,
          // Velocities
          velocities: [],
          allowMomentumBounce: undefined,
          startMoving: undefined,
          pointerId: null,
          touchId: null
        },
        // Clicks
        allowClick: true,
        // Touches
        allowTouchMove: swiper.params.allowTouchMove,
        touches: {
          startX: 0,
          startY: 0,
          currentX: 0,
          currentY: 0,
          diff: 0
        },
        // Images
        imagesToLoad: [],
        imagesLoaded: 0
      });
      swiper.emit('_swiper');

      // Init
      if (swiper.params.init) {
        swiper.init();
      }

      // Return app instance
      // eslint-disable-next-line no-constructor-return
      return swiper;
    }
    return _createClass(Swiper, [{
      key: "getDirectionLabel",
      value: function getDirectionLabel(property) {
        if (this.isHorizontal()) {
          return property;
        }
        // prettier-ignore
        return {
          'width': 'height',
          'margin-top': 'margin-left',
          'margin-bottom ': 'margin-right',
          'margin-left': 'margin-top',
          'margin-right': 'margin-bottom',
          'padding-left': 'padding-top',
          'padding-right': 'padding-bottom',
          'marginRight': 'marginBottom'
        }[property];
      }
    }, {
      key: "getSlideIndex",
      value: function getSlideIndex(slideEl) {
        var slidesEl = this.slidesEl,
          params = this.params;
        var slides = elementChildren(slidesEl, ".".concat(params.slideClass, ", swiper-slide"));
        var firstSlideIndex = elementIndex(slides[0]);
        return elementIndex(slideEl) - firstSlideIndex;
      }
    }, {
      key: "getSlideIndexByData",
      value: function getSlideIndexByData(index) {
        return this.getSlideIndex(this.slides.filter(function (slideEl) {
          return slideEl.getAttribute('data-swiper-slide-index') * 1 === index;
        })[0]);
      }
    }, {
      key: "recalcSlides",
      value: function recalcSlides() {
        var swiper = this;
        var slidesEl = swiper.slidesEl,
          params = swiper.params;
        swiper.slides = elementChildren(slidesEl, ".".concat(params.slideClass, ", swiper-slide"));
      }
    }, {
      key: "enable",
      value: function enable() {
        var swiper = this;
        if (swiper.enabled) return;
        swiper.enabled = true;
        if (swiper.params.grabCursor) {
          swiper.setGrabCursor();
        }
        swiper.emit('enable');
      }
    }, {
      key: "disable",
      value: function disable() {
        var swiper = this;
        if (!swiper.enabled) return;
        swiper.enabled = false;
        if (swiper.params.grabCursor) {
          swiper.unsetGrabCursor();
        }
        swiper.emit('disable');
      }
    }, {
      key: "setProgress",
      value: function setProgress(progress, speed) {
        var swiper = this;
        progress = Math.min(Math.max(progress, 0), 1);
        var min = swiper.minTranslate();
        var max = swiper.maxTranslate();
        var current = (max - min) * progress + min;
        swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
      }
    }, {
      key: "emitContainerClasses",
      value: function emitContainerClasses() {
        var swiper = this;
        if (!swiper.params._emitClasses || !swiper.el) return;
        var cls = swiper.el.className.split(' ').filter(function (className) {
          return className.indexOf('swiper') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;
        });
        swiper.emit('_containerClasses', cls.join(' '));
      }
    }, {
      key: "getSlideClasses",
      value: function getSlideClasses(slideEl) {
        var swiper = this;
        if (swiper.destroyed) return '';
        return slideEl.className.split(' ').filter(function (className) {
          return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;
        }).join(' ');
      }
    }, {
      key: "emitSlidesClasses",
      value: function emitSlidesClasses() {
        var swiper = this;
        if (!swiper.params._emitClasses || !swiper.el) return;
        var updates = [];
        swiper.slides.forEach(function (slideEl) {
          var classNames = swiper.getSlideClasses(slideEl);
          updates.push({
            slideEl: slideEl,
            classNames: classNames
          });
          swiper.emit('_slideClass', slideEl, classNames);
        });
        swiper.emit('_slideClasses', updates);
      }
    }, {
      key: "slidesPerViewDynamic",
      value: function slidesPerViewDynamic(view, exact) {
        if (view === void 0) {
          view = 'current';
        }
        if (exact === void 0) {
          exact = false;
        }
        var swiper = this;
        var params = swiper.params,
          slides = swiper.slides,
          slidesGrid = swiper.slidesGrid,
          slidesSizesGrid = swiper.slidesSizesGrid,
          swiperSize = swiper.size,
          activeIndex = swiper.activeIndex;
        var spv = 1;
        if (typeof params.slidesPerView === 'number') return params.slidesPerView;
        if (params.centeredSlides) {
          var slideSize = slides[activeIndex] ? Math.ceil(slides[activeIndex].swiperSlideSize) : 0;
          var breakLoop;
          for (var i = activeIndex + 1; i < slides.length; i += 1) {
            if (slides[i] && !breakLoop) {
              slideSize += Math.ceil(slides[i].swiperSlideSize);
              spv += 1;
              if (slideSize > swiperSize) breakLoop = true;
            }
          }
          for (var _i7 = activeIndex - 1; _i7 >= 0; _i7 -= 1) {
            if (slides[_i7] && !breakLoop) {
              slideSize += slides[_i7].swiperSlideSize;
              spv += 1;
              if (slideSize > swiperSize) breakLoop = true;
            }
          }
        } else {
          // eslint-disable-next-line
          if (view === 'current') {
            for (var _i8 = activeIndex + 1; _i8 < slides.length; _i8 += 1) {
              var slideInView = exact ? slidesGrid[_i8] + slidesSizesGrid[_i8] - slidesGrid[activeIndex] < swiperSize : slidesGrid[_i8] - slidesGrid[activeIndex] < swiperSize;
              if (slideInView) {
                spv += 1;
              }
            }
          } else {
            // previous
            for (var _i9 = activeIndex - 1; _i9 >= 0; _i9 -= 1) {
              var _slideInView = slidesGrid[activeIndex] - slidesGrid[_i9] < swiperSize;
              if (_slideInView) {
                spv += 1;
              }
            }
          }
        }
        return spv;
      }
    }, {
      key: "update",
      value: function update() {
        var swiper = this;
        if (!swiper || swiper.destroyed) return;
        var snapGrid = swiper.snapGrid,
          params = swiper.params;
        // Breakpoints
        if (params.breakpoints) {
          swiper.setBreakpoint();
        }
        _toConsumableArray(swiper.el.querySelectorAll('[loading="lazy"]')).forEach(function (imageEl) {
          if (imageEl.complete) {
            processLazyPreloader(swiper, imageEl);
          }
        });
        swiper.updateSize();
        swiper.updateSlides();
        swiper.updateProgress();
        swiper.updateSlidesClasses();
        function setTranslate() {
          var translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
          var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
          swiper.setTranslate(newTranslate);
          swiper.updateActiveIndex();
          swiper.updateSlidesClasses();
        }
        var translated;
        if (params.freeMode && params.freeMode.enabled && !params.cssMode) {
          setTranslate();
          if (params.autoHeight) {
            swiper.updateAutoHeight();
          }
        } else {
          if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !params.centeredSlides) {
            var slides = swiper.virtual && params.virtual.enabled ? swiper.virtual.slides : swiper.slides;
            translated = swiper.slideTo(slides.length - 1, 0, false, true);
          } else {
            translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
          }
          if (!translated) {
            setTranslate();
          }
        }
        if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
          swiper.checkOverflow();
        }
        swiper.emit('update');
      }
    }, {
      key: "changeDirection",
      value: function changeDirection(newDirection, needUpdate) {
        if (needUpdate === void 0) {
          needUpdate = true;
        }
        var swiper = this;
        var currentDirection = swiper.params.direction;
        if (!newDirection) {
          // eslint-disable-next-line
          newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
        }
        if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {
          return swiper;
        }
        swiper.el.classList.remove("".concat(swiper.params.containerModifierClass).concat(currentDirection));
        swiper.el.classList.add("".concat(swiper.params.containerModifierClass).concat(newDirection));
        swiper.emitContainerClasses();
        swiper.params.direction = newDirection;
        swiper.slides.forEach(function (slideEl) {
          if (newDirection === 'vertical') {
            slideEl.style.width = '';
          } else {
            slideEl.style.height = '';
          }
        });
        swiper.emit('changeDirection');
        if (needUpdate) swiper.update();
        return swiper;
      }
    }, {
      key: "changeLanguageDirection",
      value: function changeLanguageDirection(direction) {
        var swiper = this;
        if (swiper.rtl && direction === 'rtl' || !swiper.rtl && direction === 'ltr') return;
        swiper.rtl = direction === 'rtl';
        swiper.rtlTranslate = swiper.params.direction === 'horizontal' && swiper.rtl;
        if (swiper.rtl) {
          swiper.el.classList.add("".concat(swiper.params.containerModifierClass, "rtl"));
          swiper.el.dir = 'rtl';
        } else {
          swiper.el.classList.remove("".concat(swiper.params.containerModifierClass, "rtl"));
          swiper.el.dir = 'ltr';
        }
        swiper.update();
      }
    }, {
      key: "mount",
      value: function mount(element) {
        var swiper = this;
        if (swiper.mounted) return true;

        // Find el
        var el = element || swiper.params.el;
        if (typeof el === 'string') {
          el = document.querySelector(el);
        }
        if (!el) {
          return false;
        }
        el.swiper = swiper;
        if (el.parentNode && el.parentNode.host && el.parentNode.host.nodeName === swiper.params.swiperElementNodeName.toUpperCase()) {
          swiper.isElement = true;
        }
        var getWrapperSelector = function getWrapperSelector() {
          return ".".concat((swiper.params.wrapperClass || '').trim().split(' ').join('.'));
        };
        var getWrapper = function getWrapper() {
          if (el && el.shadowRoot && el.shadowRoot.querySelector) {
            var res = el.shadowRoot.querySelector(getWrapperSelector());
            // Children needs to return slot items
            return res;
          }
          return elementChildren(el, getWrapperSelector())[0];
        };
        // Find Wrapper
        var wrapperEl = getWrapper();
        if (!wrapperEl && swiper.params.createElements) {
          wrapperEl = createElement('div', swiper.params.wrapperClass);
          el.append(wrapperEl);
          elementChildren(el, ".".concat(swiper.params.slideClass)).forEach(function (slideEl) {
            wrapperEl.append(slideEl);
          });
        }
        Object.assign(swiper, {
          el: el,
          wrapperEl: wrapperEl,
          slidesEl: swiper.isElement && !el.parentNode.host.slideSlots ? el.parentNode.host : wrapperEl,
          hostEl: swiper.isElement ? el.parentNode.host : el,
          mounted: true,
          // RTL
          rtl: el.dir.toLowerCase() === 'rtl' || elementStyle(el, 'direction') === 'rtl',
          rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || elementStyle(el, 'direction') === 'rtl'),
          wrongRTL: elementStyle(wrapperEl, 'display') === '-webkit-box'
        });
        return true;
      }
    }, {
      key: "init",
      value: function init(el) {
        var swiper = this;
        if (swiper.initialized) return swiper;
        var mounted = swiper.mount(el);
        if (mounted === false) return swiper;
        swiper.emit('beforeInit');

        // Set breakpoint
        if (swiper.params.breakpoints) {
          swiper.setBreakpoint();
        }

        // Add Classes
        swiper.addClasses();

        // Update size
        swiper.updateSize();

        // Update slides
        swiper.updateSlides();
        if (swiper.params.watchOverflow) {
          swiper.checkOverflow();
        }

        // Set Grab Cursor
        if (swiper.params.grabCursor && swiper.enabled) {
          swiper.setGrabCursor();
        }

        // Slide To Initial Slide
        if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {
          swiper.slideTo(swiper.params.initialSlide + swiper.virtual.slidesBefore, 0, swiper.params.runCallbacksOnInit, false, true);
        } else {
          swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);
        }

        // Create loop
        if (swiper.params.loop) {
          swiper.loopCreate();
        }

        // Attach events
        swiper.attachEvents();
        var lazyElements = _toConsumableArray(swiper.el.querySelectorAll('[loading="lazy"]'));
        if (swiper.isElement) {
          lazyElements.push.apply(lazyElements, _toConsumableArray(swiper.hostEl.querySelectorAll('[loading="lazy"]')));
        }
        lazyElements.forEach(function (imageEl) {
          if (imageEl.complete) {
            processLazyPreloader(swiper, imageEl);
          } else {
            imageEl.addEventListener('load', function (e) {
              processLazyPreloader(swiper, e.target);
            });
          }
        });
        preload(swiper);

        // Init Flag
        swiper.initialized = true;
        preload(swiper);

        // Emit
        swiper.emit('init');
        swiper.emit('afterInit');
        return swiper;
      }
    }, {
      key: "destroy",
      value: function destroy(deleteInstance, cleanStyles) {
        if (deleteInstance === void 0) {
          deleteInstance = true;
        }
        if (cleanStyles === void 0) {
          cleanStyles = true;
        }
        var swiper = this;
        var params = swiper.params,
          el = swiper.el,
          wrapperEl = swiper.wrapperEl,
          slides = swiper.slides;
        if (typeof swiper.params === 'undefined' || swiper.destroyed) {
          return null;
        }
        swiper.emit('beforeDestroy');

        // Init Flag
        swiper.initialized = false;

        // Detach events
        swiper.detachEvents();

        // Destroy loop
        if (params.loop) {
          swiper.loopDestroy();
        }

        // Cleanup styles
        if (cleanStyles) {
          swiper.removeClasses();
          if (el && typeof el !== 'string') {
            el.removeAttribute('style');
          }
          if (wrapperEl) {
            wrapperEl.removeAttribute('style');
          }
          if (slides && slides.length) {
            slides.forEach(function (slideEl) {
              slideEl.classList.remove(params.slideVisibleClass, params.slideFullyVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass);
              slideEl.removeAttribute('style');
              slideEl.removeAttribute('data-swiper-slide-index');
            });
          }
        }
        swiper.emit('destroy');

        // Detach emitter events
        Object.keys(swiper.eventsListeners).forEach(function (eventName) {
          swiper.off(eventName);
        });
        if (deleteInstance !== false) {
          if (swiper.el && typeof swiper.el !== 'string') {
            swiper.el.swiper = null;
          }
          deleteProps(swiper);
        }
        swiper.destroyed = true;
        return null;
      }
    }], [{
      key: "extendDefaults",
      value: function extendDefaults(newDefaults) {
        extend(extendedDefaults, newDefaults);
      }
    }, {
      key: "extendedDefaults",
      get: function get() {
        return extendedDefaults;
      }
    }, {
      key: "defaults",
      get: function get() {
        return defaults;
      }
    }, {
      key: "installModule",
      value: function installModule(mod) {
        if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];
        var modules = Swiper.prototype.__modules__;
        if (typeof mod === 'function' && modules.indexOf(mod) < 0) {
          modules.push(mod);
        }
      }
    }, {
      key: "use",
      value: function use(module) {
        if (Array.isArray(module)) {
          module.forEach(function (m) {
            return Swiper.installModule(m);
          });
          return Swiper;
        }
        Swiper.installModule(module);
        return Swiper;
      }
    }]);
  }();
  Object.keys(prototypes).forEach(function (prototypeGroup) {
    Object.keys(prototypes[prototypeGroup]).forEach(function (protoMethod) {
      Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
    });
  });
  Swiper.use([Resize, Observer]);

  function createElementIfNotDefined(swiper, originalParams, params, checkProps) {
    if (swiper.params.createElements) {
      Object.keys(checkProps).forEach(function (key) {
        if (!params[key] && params.auto === true) {
          var element = elementChildren(swiper.el, ".".concat(checkProps[key]))[0];
          if (!element) {
            element = createElement('div', checkProps[key]);
            element.className = checkProps[key];
            swiper.el.append(element);
          }
          params[key] = element;
          originalParams[key] = element;
        }
      });
    }
    return params;
  }

  function Navigation(_ref) {
    var swiper = _ref.swiper,
      extendParams = _ref.extendParams,
      on = _ref.on,
      emit = _ref.emit;
    extendParams({
      navigation: {
        nextEl: null,
        prevEl: null,
        hideOnClick: false,
        disabledClass: 'swiper-button-disabled',
        hiddenClass: 'swiper-button-hidden',
        lockClass: 'swiper-button-lock',
        navigationDisabledClass: 'swiper-navigation-disabled'
      }
    });
    swiper.navigation = {
      nextEl: null,
      prevEl: null
    };
    function getEl(el) {
      var res;
      if (el && typeof el === 'string' && swiper.isElement) {
        res = swiper.el.querySelector(el) || swiper.hostEl.querySelector(el);
        if (res) return res;
      }
      if (el) {
        if (typeof el === 'string') res = _toConsumableArray(document.querySelectorAll(el));
        if (swiper.params.uniqueNavElements && typeof el === 'string' && res && res.length > 1 && swiper.el.querySelectorAll(el).length === 1) {
          res = swiper.el.querySelector(el);
        } else if (res && res.length === 1) {
          res = res[0];
        }
      }
      if (el && !res) return el;
      // if (Array.isArray(res) && res.length === 1) res = res[0];
      return res;
    }
    function toggleEl(el, disabled) {
      var params = swiper.params.navigation;
      el = makeElementsArray(el);
      el.forEach(function (subEl) {
        if (subEl) {
          var _subEl$classList;
          (_subEl$classList = subEl.classList)[disabled ? 'add' : 'remove'].apply(_subEl$classList, _toConsumableArray(params.disabledClass.split(' ')));
          if (subEl.tagName === 'BUTTON') subEl.disabled = disabled;
          if (swiper.params.watchOverflow && swiper.enabled) {
            subEl.classList[swiper.isLocked ? 'add' : 'remove'](params.lockClass);
          }
        }
      });
    }
    function update() {
      // Update Navigation Buttons
      var _swiper$navigation = swiper.navigation,
        nextEl = _swiper$navigation.nextEl,
        prevEl = _swiper$navigation.prevEl;
      if (swiper.params.loop) {
        toggleEl(prevEl, false);
        toggleEl(nextEl, false);
        return;
      }
      toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);
      toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);
    }
    function onPrevClick(e) {
      e.preventDefault();
      if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;
      swiper.slidePrev();
      emit('navigationPrev');
    }
    function onNextClick(e) {
      e.preventDefault();
      if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;
      swiper.slideNext();
      emit('navigationNext');
    }
    function init() {
      var params = swiper.params.navigation;
      swiper.params.navigation = createElementIfNotDefined(swiper, swiper.originalParams.navigation, swiper.params.navigation, {
        nextEl: 'swiper-button-next',
        prevEl: 'swiper-button-prev'
      });
      if (!(params.nextEl || params.prevEl)) return;
      var nextEl = getEl(params.nextEl);
      var prevEl = getEl(params.prevEl);
      Object.assign(swiper.navigation, {
        nextEl: nextEl,
        prevEl: prevEl
      });
      nextEl = makeElementsArray(nextEl);
      prevEl = makeElementsArray(prevEl);
      var initButton = function initButton(el, dir) {
        if (el) {
          el.addEventListener('click', dir === 'next' ? onNextClick : onPrevClick);
        }
        if (!swiper.enabled && el) {
          var _el$classList;
          (_el$classList = el.classList).add.apply(_el$classList, _toConsumableArray(params.lockClass.split(' ')));
        }
      };
      nextEl.forEach(function (el) {
        return initButton(el, 'next');
      });
      prevEl.forEach(function (el) {
        return initButton(el, 'prev');
      });
    }
    function destroy() {
      var _swiper$navigation2 = swiper.navigation,
        nextEl = _swiper$navigation2.nextEl,
        prevEl = _swiper$navigation2.prevEl;
      nextEl = makeElementsArray(nextEl);
      prevEl = makeElementsArray(prevEl);
      var destroyButton = function destroyButton(el, dir) {
        var _el$classList2;
        el.removeEventListener('click', dir === 'next' ? onNextClick : onPrevClick);
        (_el$classList2 = el.classList).remove.apply(_el$classList2, _toConsumableArray(swiper.params.navigation.disabledClass.split(' ')));
      };
      nextEl.forEach(function (el) {
        return destroyButton(el, 'next');
      });
      prevEl.forEach(function (el) {
        return destroyButton(el, 'prev');
      });
    }
    on('init', function () {
      if (swiper.params.navigation.enabled === false) {
        // eslint-disable-next-line
        disable();
      } else {
        init();
        update();
      }
    });
    on('toEdge fromEdge lock unlock', function () {
      update();
    });
    on('destroy', function () {
      destroy();
    });
    on('enable disable', function () {
      var _swiper$navigation3 = swiper.navigation,
        nextEl = _swiper$navigation3.nextEl,
        prevEl = _swiper$navigation3.prevEl;
      nextEl = makeElementsArray(nextEl);
      prevEl = makeElementsArray(prevEl);
      if (swiper.enabled) {
        update();
        return;
      }
      [].concat(_toConsumableArray(nextEl), _toConsumableArray(prevEl)).filter(function (el) {
        return !!el;
      }).forEach(function (el) {
        return el.classList.add(swiper.params.navigation.lockClass);
      });
    });
    on('click', function (_s, e) {
      var _swiper$navigation4 = swiper.navigation,
        nextEl = _swiper$navigation4.nextEl,
        prevEl = _swiper$navigation4.prevEl;
      nextEl = makeElementsArray(nextEl);
      prevEl = makeElementsArray(prevEl);
      var targetEl = e.target;
      var targetIsButton = prevEl.includes(targetEl) || nextEl.includes(targetEl);
      if (swiper.isElement && !targetIsButton) {
        var path = e.path || e.composedPath && e.composedPath();
        if (path) {
          targetIsButton = path.find(function (pathEl) {
            return nextEl.includes(pathEl) || prevEl.includes(pathEl);
          });
        }
      }
      if (swiper.params.navigation.hideOnClick && !targetIsButton) {
        if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;
        var isHidden;
        if (nextEl.length) {
          isHidden = nextEl[0].classList.contains(swiper.params.navigation.hiddenClass);
        } else if (prevEl.length) {
          isHidden = prevEl[0].classList.contains(swiper.params.navigation.hiddenClass);
        }
        if (isHidden === true) {
          emit('navigationShow');
        } else {
          emit('navigationHide');
        }
        [].concat(_toConsumableArray(nextEl), _toConsumableArray(prevEl)).filter(function (el) {
          return !!el;
        }).forEach(function (el) {
          return el.classList.toggle(swiper.params.navigation.hiddenClass);
        });
      }
    });
    var enable = function enable() {
      var _swiper$el$classList;
      (_swiper$el$classList = swiper.el.classList).remove.apply(_swiper$el$classList, _toConsumableArray(swiper.params.navigation.navigationDisabledClass.split(' ')));
      init();
      update();
    };
    var disable = function disable() {
      var _swiper$el$classList2;
      (_swiper$el$classList2 = swiper.el.classList).add.apply(_swiper$el$classList2, _toConsumableArray(swiper.params.navigation.navigationDisabledClass.split(' ')));
      destroy();
    };
    Object.assign(swiper.navigation, {
      enable: enable,
      disable: disable,
      update: update,
      init: init,
      destroy: destroy
    });
  }

  var Header = /*#__PURE__*/function () {
    function Header() {
      var _this = this;
      _classCallCheck(this, Header);
      _defineProperty(this, "scrollHandle", function () {
        _this.toggleHeaderVisible();
      });
      _defineProperty(this, "resizeHandle", function () {
        _this.setCssVars();
      });
      /** @type { HTMLElement } */
      this.$header = document.querySelector(".landing-header");
      if (!this.$header) {
        return console.warn("Can not initialize header without header", this);
      }

      /** @type { string } */
      this.headerHeightCssVar = "--header-height";
      /** @type { string } */
      this.hiddenVisibleVlass = "_fixed";

      /** @type { number } */
      this.currentScrollPosition = window.scrollY;
      this.init();
    }
    return _createClass(Header, [{
      key: "init",
      value: function init() {
        this.setCssVars();
        this.toggleHeaderVisible();
        window.addEventListener("scroll", this.scrollHandle);
        window.addEventListener("resize", this.resizeHandle);
      }
    }, {
      key: "toggleHeaderVisible",
      value: function toggleHeaderVisible() {
        if (!window.scrollY) {
          this.$header.classList.remove(this.hiddenVisibleVlass);
        } else {
          this.$header.classList.add(this.hiddenVisibleVlass);
        }
        this.currentScrollPosition = window.scrollY;
      }
    }, {
      key: "setCssVars",
      value: function setCssVars() {
        document.documentElement.style.setProperty(this.headerHeightCssVar, "".concat(this.$header.offsetHeight, "px"));
      }
    }]);
  }();

  var _FAQAccordion_brand = /*#__PURE__*/new WeakSet();
  var FAQAccordion = /*#__PURE__*/_createClass(function FAQAccordion(wrap) {
    _classCallCheck(this, FAQAccordion);
    _classPrivateMethodInitSpec(this, _FAQAccordion_brand);
    _defineProperty(this, "handleBtnClick", function (event) {
      event.currentTarget.classList.toggle('active');
    });
    this.accordionBtns = wrap.querySelectorAll('.js-faq-section-accordion-item');
    _assertClassBrand(_FAQAccordion_brand, this, _init$5).call(this);
  });
  function _init$5() {
    var _this = this;
    this.accordionBtns.forEach(function (btn) {
      return btn.addEventListener('click', _this.handleBtnClick);
    });
  }

  var _FeedbackForm_brand = /*#__PURE__*/new WeakSet();
  var FeedbackForm = /*#__PURE__*/function () {
    function FeedbackForm(form) {
      var _this = this;
      _classCallCheck(this, FeedbackForm);
      _classPrivateMethodInitSpec(this, _FeedbackForm_brand);
      _defineProperty(this, "handleSubmit", function (event) {
        event.preventDefault();
        //console.log('Form submitted')
        _this.requiredInputs.forEach(function (input) {
          if (!input.value.length) {
            _this.isValid = false;
            input.classList.add('is-invalid');
          } else {
            input.classList.remove('is-invalid');
          }
        });
        if (_this.isValid) {
          var formData = _this.getFormData();
          $.ajax({
            url: _this.form.action,
            type: 'POST',
            headers: {
              'X-CSRF-TOKEN': $('meta[name="csrf_token"]').attr('content')
            },
            data: formData,
            dataType: 'json',
            success: function success(response) {
              console.log(response);
              // Clear the form fields
              _this.form.reset(); // Reset the form to its initial values
              _this.form.parentNode.classList.add("success");
              setTimeout(function () {
                return _this.form.parentNode.classList.remove("success");
              }, 5000);
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              console.error(textStatus, errorThrown);
            }
          });
        } else {
          _this.isValid = true;
        }
      });
      this.form = form;
      this.requiredInputs = form.querySelectorAll('.js-feedback-input[data-validation="true"]');
      this.radioGroup = form.querySelectorAll('input[name="topic_of_interest"]');
      this.isValid = true;
      _assertClassBrand(_FeedbackForm_brand, this, _init$4).call(this);
    }
    return _createClass(FeedbackForm, [{
      key: "getFormData",
      value: function getFormData() {
        var formData = {};
        this.requiredInputs.forEach(function (input) {
          formData[input.name] = input.value;
        });
        this.radioGroup.forEach(function (radio) {
          if (radio.checked) {
            formData[radio.name] = radio.value;
          }
        });
        return formData;
      }
    }]);
  }();
  function _init$4() {
    this.form.addEventListener("submit", this.handleSubmit);
  }

  var _FeedbackTarget_brand = /*#__PURE__*/new WeakSet();
  var FeedbackTarget = /*#__PURE__*/_createClass(function FeedbackTarget(trigger) {
    var _this = this;
    _classCallCheck(this, FeedbackTarget);
    _classPrivateMethodInitSpec(this, _FeedbackTarget_brand);
    _defineProperty(this, "handleTriggerClick", function () {
      _this.target.checked = true;
    });
    this.trigger = trigger;
    this.target = document.querySelector(".".concat(this.trigger.dataset.target));
    _assertClassBrand(_FeedbackTarget_brand, this, _init$3).call(this);
  });
  function _init$3() {
    this.trigger.addEventListener("click", this.handleTriggerClick);
  }

  var _HeaderLinksScroll_brand = /*#__PURE__*/new WeakSet();
  var HeaderLinksScroll = /*#__PURE__*/_createClass(function HeaderLinksScroll(page) {
    var _this = this;
    _classCallCheck(this, HeaderLinksScroll);
    _classPrivateMethodInitSpec(this, _HeaderLinksScroll_brand);
    _defineProperty(this, "handleLinkClick", function (event) {
      event.preventDefault();
      _this.links.forEach(function (link) {
        return link.parentNode.classList.remove("active");
      });
      event.currentTarget.parentNode.classList.add("active");
      if (event.currentTarget.closest(".js-header-overlap-menu")) {
        event.currentTarget.closest(".js-header-overlap-menu").classList.remove("active");
        document.body.classList.remove("_lock");
      }
      var target = event.currentTarget.dataset.target;
      var topPosition = 0;
      if (target === "home") {
        topPosition = 0;
      } else {
        var elementToScroll = _this.page.querySelector("#".concat(target));
        var headerHeight = parseInt(window.getComputedStyle(document.documentElement).getPropertyValue("--header-height"));
        topPosition = elementToScroll.offsetTop - headerHeight;
      }
      window.scrollTo({
        top: topPosition,
        behavior: "smooth"
      });
    });
    _defineProperty(this, "handleScroll", function () {
      _this.sections.forEach(function (section) {
        var _section$getBoundingC = section.getBoundingClientRect(),
          top = _section$getBoundingC.top,
          bottom = _section$getBoundingC.bottom;
        if (top <= 150 && bottom > 150) {
          var target = section.getAttribute("id");
          _this.links.forEach(function (link) {
            if (link.dataset.target === target) {
              link.parentNode.classList.add("active");
            } else {
              link.parentNode.classList.remove("active");
            }
          });
        }
      });
    });
    // console.log('constructor occurs');
    this.page = page;
    this.links = page.querySelectorAll(".js-header-nav-item-link");
    this.sections = Array.from(new Set(_toConsumableArray(this.links).map(function (_ref) {
      var target = _ref.dataset.target;
      return _this.page.querySelector("#".concat(target));
    })));
    _assertClassBrand(_HeaderLinksScroll_brand, this, _init$2).call(this);
  });
  function _init$2() {
    var _this2 = this;
    this.handleScroll();
    this.links.forEach(function (link) {
      link.addEventListener("click", _this2.handleLinkClick);
    });
    window.addEventListener("scroll", this.handleScroll);
  }

  var _HeaderNavigation_brand = /*#__PURE__*/new WeakSet();
  var HeaderNavigation = /*#__PURE__*/_createClass(function HeaderNavigation(trigger) {
    var _this = this;
    _classCallCheck(this, HeaderNavigation);
    _classPrivateMethodInitSpec(this, _HeaderNavigation_brand);
    _defineProperty(this, "handleTriggerClick", function () {
      _this.menu.classList.add('active');
      document.body.classList.add('_lock');
    });
    _defineProperty(this, "handleCloseClick", function () {
      _this.menu.classList.remove('active');
      document.body.classList.remove('_lock');
    });
    this.trigger = trigger;
    this.header = trigger.closest('.landing-header');
    this.menu = this.header.querySelector('.js-header-overlap-menu');
    this.closeTrigger = this.header.querySelector('.js-header-overlap-menu-close-trigger');
    _assertClassBrand(_HeaderNavigation_brand, this, _init$1).call(this);
  });
  function _init$1() {
    this.trigger.addEventListener('click', this.handleTriggerClick);
    this.closeTrigger.addEventListener('click', this.handleCloseClick);
  }

  function createUserData(user) {
    var _user$dataset = user.dataset,
      name = _user$dataset.name,
      id = _user$dataset.id,
      email = _user$dataset.email,
      position = _user$dataset.position;
    var initials = name.split(" ").map(function (word) {
      return word[0];
    }).join("");
    var userData = {
      id: id,
      initials: initials,
      name: name,
      email: email,
      position: position
    };
    return userData;
  }

  function selectedUserTemplate(user) {
    var id = user.id,
      initials = user.initials,
      name = user.name,
      email = user.email,
      position = user.position;
    return "\n    <li class=\"selected-user-item js-user-selected\" data-id=\"".concat(id, "\">\n      <p>\n        ").concat(name, "\n      </p>\n      <div class=\"user-search-item selected-user-item__info js-user-selected-info\"\n        data-name=\"").concat(name, "\"\n        data-id=\"").concat(id, "\"\n        data-email=\"").concat(email, "\"\n        data-position=\"").concat(position, "\">\n        <div class=\"user-search-item__first-col\">\n          <div class=\"user-search-item__initials\">\n            ").concat(initials, "\n          </div>\n          <div>\n            <p>\n              <b>").concat(name, "</b>\n            </p>\n            <p>\n              ").concat(email, "\n            </p>\n          </div>\n        </div>\n        <div class=\"user-search-item__second-col\">\n          <p>\n            <b>").concat(position, "</b>\n          </p>\n          <p>\n            <img src=\"./svg/flags/us.svg\" alt=\"USA flag\" with=\"21\" height=\"13\" />\n            The Salameh Law Group, P.A.\n          </p>\n        </div>\n      </div>\n      <button class=\"js-user-selected-remove\" type=\"button\">\n        <svg class=\"icon icon-close \">\n          <use href=\"./icon/icons/icons.svg#close\"></use>\n        </svg>\n      </button>\n    </li>");
  }

  var DEFAULT_OPTIONS = {
    autoClose: 4000,
    position: "body",
    type: "common",
    isCloseButton: false,
    side: null,
    class: null
  };
  var _toastElem = /*#__PURE__*/new WeakMap();
  var _autoCloseTimeout = /*#__PURE__*/new WeakMap();
  var _removeBtn = /*#__PURE__*/new WeakMap();
  var Toast$1 = /*#__PURE__*/function () {
    function Toast(options) {
      var _this = this;
      _classCallCheck(this, Toast);
      _classPrivateFieldInitSpec(this, _toastElem, void 0);
      _classPrivateFieldInitSpec(this, _autoCloseTimeout, void 0);
      _classPrivateFieldInitSpec(this, _removeBtn, void 0);
      this.checkAndRemoveExistingToast();
      _classPrivateFieldSet2(_toastElem, this, document.createElement("div"));
      _classPrivateFieldGet2(_toastElem, this).classList.add("toast");
      requestAnimationFrame(function () {
        _classPrivateFieldGet2(_toastElem, _this).classList.add("show");
      });
      Object.entries(_objectSpread2(_objectSpread2({}, DEFAULT_OPTIONS), options)).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];
        _this[key] = value;
      });
    }
    return _createClass(Toast, [{
      key: "autoClose",
      set: function set(value) {
        var _this2 = this;
        if (value === false) return;
        if (_classPrivateFieldGet2(_autoCloseTimeout, this) != null) clearTimeout(_classPrivateFieldGet2(_autoCloseTimeout, this));
        _classPrivateFieldSet2(_autoCloseTimeout, this, setTimeout(function () {
          return _this2.remove();
        }, value));
      }
    }, {
      key: "position",
      set: function set(value) {
        var container = document.querySelector(value);
        container.append(_classPrivateFieldGet2(_toastElem, this));
      }
    }, {
      key: "type",
      set: function set(value) {
        _classPrivateFieldGet2(_toastElem, this).classList.add(value);
      }
    }, {
      key: "class",
      set: function set(value) {
        _classPrivateFieldGet2(_toastElem, this).classList.add(value);
      }
    }, {
      key: "side",
      set: function set(value) {
        if (!value) return;
        _classPrivateFieldGet2(_toastElem, this).classList.add(value);
      }
    }, {
      key: "text",
      set: function set(value) {
        _classPrivateFieldGet2(_toastElem, this).textContent = value;
        if (this.isCloseButton) {
          this.addRemoveBtn();
        }
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this3 = this;
        _classPrivateFieldGet2(_toastElem, this).classList.remove("show");
        _classPrivateFieldGet2(_toastElem, this).addEventListener("transitionend", function () {
          _classPrivateFieldGet2(_toastElem, _this3).remove();
        });
      }
    }, {
      key: "checkAndRemoveExistingToast",
      value: function checkAndRemoveExistingToast() {
        var existingToast = document.querySelector(".toast");
        if (existingToast) {
          existingToast.remove();
        }
      }
    }, {
      key: "addRemoveBtn",
      value: function addRemoveBtn() {
        var _this4 = this;
        _classPrivateFieldSet2(_removeBtn, this, document.createElement("button"));
        _classPrivateFieldGet2(_removeBtn, this).classList.add("toast-remove-btn");
        _classPrivateFieldGet2(_removeBtn, this).addEventListener("click", function () {
          return _this4.remove();
        });
        _classPrivateFieldGet2(_toastElem, this).append(_classPrivateFieldGet2(_removeBtn, this));
      }
    }]);
  }();

  var SelectUserHandler = /*#__PURE__*/_createClass(function SelectUserHandler(context) {
    var _this = this;
    _classCallCheck(this, SelectUserHandler);
    _defineProperty(this, "init", function () {
      _this.resultsList.addEventListener("click", _this.handleUserItemClick);
      _this.selectUsersList.addEventListener("click", _this.handleSelectedUserClick);
      _this.removeAllBtn.addEventListener("click", _this.removeAllSelectedUsers);
      _this.submitButton.addEventListener("click", _this.handleSubmit);
      document.addEventListener("click", _this.handleDocumentClick);
    });
    _defineProperty(this, "handleUserItemClick", function (event) {
      var user = event.target.closest(".user-search-item");
      var userData = createUserData(user);
      var selectedUser = selectedUserTemplate(userData);
      _this.selectUsersList.insertAdjacentHTML("beforeend", selectedUser);
      user.classList.add("_selected");
      _this.resultsList.classList.add(_this.hiddenClass);
      _this.input.value = "";
      _this.updateSelectedUsersCount();
      _this.setUserInfoPopupTop();
    });
    _defineProperty(this, "handleSelectedUserClick", function (event) {
      var selectedUser = event.target.closest(".js-user-selected");
      var removeButton = event.target.closest(".js-user-selected-remove");
      if (removeButton && selectedUser) {
        var userId = selectedUser.dataset.id;
        _this.deselectUserItem(userId);
        selectedUser.remove();
      }
      _this.updateSelectedUsersCount();
      _this.setUserInfoPopupTop();
    });
    _defineProperty(this, "removeAllSelectedUsers", function () {
      var selectedUsers = _this.selectUsersList.querySelectorAll(".js-user-selected");
      selectedUsers.forEach(function (selectedUser) {
        var userId = selectedUser.dataset.id;
        _this.deselectUserItem(userId);
        selectedUser.remove();
      });
      _this.updateSelectedUsersCount();
      _this.setUserInfoPopupTop();
    });
    _defineProperty(this, "deselectUserItem", function (userId) {
      var correspondingItem = _this.resultsList.querySelector(".user-search-item[data-id=\"".concat(userId, "\"]"));
      if (correspondingItem) {
        correspondingItem.classList.remove("_selected");
      }
    });
    _defineProperty(this, "updateSelectedUsersCount", function () {
      var selectedCount = _this.selectUsersList.querySelectorAll(".js-user-selected").length;
      _this.selectedUsersQty.innerHTML = selectedCount === 1 ? "1 User Selected" : "".concat(selectedCount, " Users Selected");
      _this.selectUsersContainer.classList.toggle("_hidden", !selectedCount > 0);
      _this.removeAllBtn.querySelector("span").innerHTML = "Remove(".concat(selectedCount, ")");
    });
    _defineProperty(this, "setUserInfoPopupTop", function () {
      var items = _this.selectUsersList.querySelectorAll(".selected-user-item__info");
      items.forEach(function (item) {
        var itemParent = item.parentNode;
        var itemOffset = Number(getComputedStyle(item).getPropertyValue("--_item-offset"));
        var offsetTop = itemParent.offsetTop;
        var parentHeight = itemParent.offsetHeight;
        item.style.top = offsetTop + parentHeight + itemOffset + "px";
      });
    });
    _defineProperty(this, "handleSubmit", function () {
      var state = _this.sidebar.dataset.state;
      _this.selectUsersList.querySelectorAll(".js-user-selected-info");
      /*const assignees = document.querySelector(".js-assignees")
      const assigneesList = assignees.querySelector(".js-assignees-list")*/
      /*const listToggleInner = assignees.querySelector(".js-accordion-toggler span")*/

      if (state && state === "edit") {
        _this.selectUsersList.innerHTML = "";
        _this.selectUsersContainer.classList.add("_hidden");
        _this.sidebar.setAttribute("data-state", "default");
        new Toast$1({
          position: ".reports .offcanvas-header",
          type: "successful",
          text: "Report access email sent to assignees.",
          autoClose: 5000
        });
      } else {
        /*const hiddenElements = assignees.querySelectorAll("._hidden")
        const notification = assignees.querySelector(".js-notification")*/
        var selectedSearchUsers = document.querySelectorAll("._selected");

        /*hiddenElements.forEach((el) => el.classList.remove("_hidden"))
        notification.style.display = "none"*/
        new Toast$1({
          position: ".reports .offcanvas-header",
          type: "successful",
          text: "Report access email sent to assignees.",
          autoClose: 5000
        });
        selectedSearchUsers.forEach(function (user) {
          return user.remove();
        });
        _this.removeAllSelectedUsers();
      }

      // common logic
      /*assigneesList.innerHTML = ""
      selectedUsers.forEach((user) => {
        const userData = createUserData(user)
        assigneesArr.push(userData)
      })
      assigneesArr.forEach((user) => {
        const assignedUser = assignedUserTemplate(user)
        assigneesList.insertAdjacentHTML("beforeend", assignedUser)
      })
      listToggleInner.textContent = `View ${assigneesArr.length} ${
        assigneesArr.length > 1 ? "Assignees" : "Assignee"
      }`*/
      _this.sidebar.classList.remove("_active");
    });
    _defineProperty(this, "handleDocumentClick", function (event) {
      if (!_this.resultsList.contains(event.target) && !_this.input.contains(event.target)) {
        _this.resultsList.classList.add(_this.hiddenClass);
      }
    });
    this.context = context;
    this.container = context.container;
    this.sidebar = this.container.closest(".offcanvas.assignees");
    this.resultsList = context.resultsList;
    this.input = context.input;
    this.isSelectUser = this.container.classList.contains("js-select-user");
    this.selectUsersContainer = this.container.querySelector(".js-select-user-container");
    this.selectUsersList = this.container.querySelector(".js-select-user-list");
    this.removeAllBtn = this.container.querySelector(".js-user-selected-remove-all");
    this.selectedUsersQty = this.container.querySelector(".js-user-selected-quantity");
    this.submitButton = this.container.querySelector(".js-select-user-submit");
    this.hiddenClass = context.hiddenClass;
    this.init();
  });

  // container: js-search-filter
  // input: js-search-filter-input
  // list: js-search-filter-list
  // item: js-search-filter-item
  // clear button: js-search-filter-clear

  var SearchFilter = /*#__PURE__*/_createClass(function SearchFilter(container) {
    var _this = this;
    _classCallCheck(this, SearchFilter);
    _defineProperty(this, "init", function () {
      _this.input.addEventListener("input", _this.filterResults);
      if (_this.isSelect) {
        _this.resultsList.addEventListener("click", _this.clearInput);
      } else if (_this.isSelectUser) {
        new SelectUserHandler(_this);
      } else {
        _this.resultsList.addEventListener("click", _this.handleItemClick);
      }
      _this.clearBtn && _this.clearBtn.addEventListener("click", _this.clearInput);
    });
    _defineProperty(this, "filterResults", function () {
      var inputValue = _this.input.value.toLowerCase();
      var hasMatchingItems = false;
      _this.resultsItems.forEach(function (item) {
        var filterValue = item.querySelector(".js-search-filter-value");
        var itemValue = (filterValue ? filterValue.textContent : item.textContent).trim().toLowerCase();
        var isMatch = itemValue.includes(inputValue);
        if (isMatch) {
          hasMatchingItems = true;
        }
        item.classList.toggle("_hidden", !isMatch);
      });
      if (!_this.isSelect) {
        _this.resultsList.classList.toggle(_this.hiddenClass, !inputValue || !hasMatchingItems);
      }
    });
    _defineProperty(this, "handleItemClick", function (event) {
      var clickedItem = event.target.closest(".js-search-filter-item");
      if (!clickedItem) return;
      var itemValue = clickedItem.querySelector(".js-search-filter-value").textContent.trim();
      _this.input.value = itemValue;
      if (!_this.isSelect) {
        _this.resultsList.classList.add(_this.hiddenClass);
      }
    });
    _defineProperty(this, "clearInput", function () {
      _this.input.value = "";
      _this.filterResults();
    });
    this.container = container;
    this.isSelect = container.classList.contains("js-select-dropdown");
    this.isSelectUser = container.classList.contains("js-select-user");
    this.input = container.querySelector(".js-search-filter-input");
    this.resultsList = container.querySelector(".js-search-filter-list");
    this.clearBtn = container.querySelector(".js-search-filter-clear");
    this.resultsItems = this.resultsList.querySelectorAll(".js-search-filter-item");
    this.hiddenClass = "_hidden";
    this.init();
  });

  var ComponentDropdownSelect2 = function () {
    var selectCloseHandler = function selectCloseHandler(elem) {
      validateItem(elem, true);
    };
    var updateStyle = function updateStyle(elem) {
      var currentSelectWrap = elem.closest('.component__dropdown2');
      if (elem.val() !== '') {
        currentSelectWrap.addClass('has-value');
      } else {
        currentSelectWrap.removeClass('has-value');
      }
    };
    function formatState(state) {
      if (!state.id) {
        return state.text;
      }
      if (state.id == 'clear') {
        return $('<span class="option-clear-selection-btn">' + state.text + '</span>');
      }
      var color = $(state.element).data('color');
      if (color) {
        var $state = $('<span><span style="background-color:' + color + '; width: 10px; height: 10px; border-radius: 50%; display: inline-block; margin-right: 8px;"></span>' + state.text + '</span>');
        return $state;
      } else {
        return state.text;
      }
    }
    var init = function init(jqWrapElem, optionArr) {
      var currentSelect = jqWrapElem.find('.js__select2');
      currentSelect.each(function () {
        var currentSelectWrap = $(this).closest('.component__dropdown2');
        var hasSearch = currentSelectWrap.data('search');
        clearError($(this));
        var options = {
          theme: "bootstrap-5",
          width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',
          placeholder: $(this).data('placeholder'),
          templateResult: formatState,
          templateSelection: formatState
        };
        if (!hasSearch) {
          options = _objectSpread2(_objectSpread2({}, options), {}, {
            minimumResultsForSearch: Infinity
          });
        }
        $(this).select2(options);
        $(this).on('change', function () {
          validateItem($(this));
          updateStyle($(this));
        });
        $(this).on('select2:selecting', function (e) {
          if (e.params.args.data.id === "clear") {
            e.preventDefault();
            $(this).val(null).trigger('change');
            $(this).select2('close');
          }
        });
        $(this).on('select2:close', function () {
          selectCloseHandler($(this));
        });
      });
    };
    var showError = function showError(select, errorMessage) {
      var selectWrapper = select.closest('.component__dropdown2');
      var errorElem = selectWrapper.find('.js-field-error');
      select.addClass('is-invalid');
      errorElem.text(errorMessage);
    };
    var clearError = function clearError(select) {
      var selectWrapper = select.closest('.component__dropdown2');
      var errorElem = selectWrapper.find('.js-field-error');
      select.removeClass('is-invalid');
      errorElem.text('');
    };
    var validate = function validate(selectWrapper) {
      var errorArray = [];
      selectWrapper.each(function () {
        var errors = validateItem($(this).find('.js__select2'), true);
        errorArray = errorArray.concat(errors);
      });
      return errorArray;
    };
    var validateItem = function validateItem(select, isShowError) {
      var selectWrapper = select.closest('.component__dropdown2');
      var errorMessage = '';
      var errors = [];
      clearError(select);
      if (selectWrapper.hasClass('is-required') && !select.val()) {
        errorMessage = 'Required field';
        errors.push(errorMessage);
        if (isShowError) showError(select, errorMessage);
      }
      return errors;
    };
    return {
      init: init,
      validate: validate,
      showError: showError
    };
  }();

  var ComponentTermsCheckbox = function () {
    var termCheckboxWrapper = $('.form-terms-checkbox');
    var termCheckboxInput = termCheckboxWrapper.find('.js__terms-checkbox');
    var errorMessage = '';
    var errors = [];
    var inputClickHandler = function inputClickHandler(elem) {
      validate(elem);
    };
    var init = function init() {
      termCheckboxInput.on('click', function (e) {
        clearError($(this));
        inputClickHandler($(this));
      });
    };
    var showError = function showError() {
      termCheckboxInput.addClass('is-invalid');
    };
    var clearError = function clearError() {
      termCheckboxInput.removeClass('is-invalid');
    };
    var validate = function validate(input) {
      if (termCheckboxWrapper.hasClass('is-required') && !input.is(':checked')) {
        errorMessage = 'Required field';
        errors.push(errorMessage);
        showError();
      } else {
        clearError();
      }
      return errors;
    };
    return {
      init: init,
      validate: validate
    };
  }();

  function getCSRFToken() {
    var csrfTokenInput = document.querySelector('input[name="csrf_token"]');
    var csrfTokenMeta = document.querySelector('meta[name="csrf_token"]');
    return csrfTokenInput ? csrfTokenInput.value : csrfTokenMeta ? csrfTokenMeta.content : '';
  }
  function getGlobalEnvironment() {
    var CIEnvMeta = document.querySelector('meta[name="CI_ENV"]');
    return CIEnvMeta ? CIEnvMeta.content : '';
  }

  // Function to calculate total results and update the #total-results element
  function updateTotalResults() {
    var totalResults = 0;

    // Check if there are any elements with the class .pagination-total
    var $paginationTotals = $('.pagination-total');
    if ($paginationTotals.length > 0) {
      // Iterate over all elements with the class .pagination-total
      $paginationTotals.each(function () {
        // Parse the text of each element as an integer and add it to the total sum
        var result = parseInt($(this).text(), 10);
        totalResults += !isNaN(result) ? result : 0; // Ensure the result is a number
      });

      // Update the #total-results element with the total sum
      $('#total-results').text(totalResults);
    }
  }

  var ComponentSecurityCode = function () {
    // Elements
    var scWrapper = $('.component__scode');
    var scMainInput = scWrapper.find('.js__scode-main-input');
    var scLabel = scWrapper.find('.js__scode-label');
    var scInputs = scWrapper.find('.js__scode-input');
    var scBtnSubmit = scWrapper.find('.js__scode-btn-submit');
    var scBtnResend = scWrapper.find('.js__scode-btn-resend');
    var scBtnResend2FA = scWrapper.find('.js__resend-2fa-btn');
    var scTimerWrapper = scWrapper.find('.js__scode-timer-wrap');
    var scTimer = scTimerWrapper.find('.js__scode-timer');

    // Timers
    var resendTimer = {};
    var globalTimer = {};

    // Settings
    var timerTotalTime = parseInt(scWrapper.data('total-time'));
    var totalTimeout = parseInt(scWrapper.data('timeout'));
    var defaultText = scWrapper.data('default-text');
    var timeoutText = scWrapper.data('timeout-text');
    var resendUrl = scWrapper.data('resend-url');

    // Additional variables
    var fullCode = [];
    var enteredCallback = function enteredCallback() {
      scBtnSubmit.attr('disabled', false);
      scBtnSubmit.addClass('btn-primary');
      scBtnSubmit.removeClass('btn-secondary');
    };
    var backCallback = function backCallback() {
      scBtnSubmit.attr('disabled', true);
      scBtnSubmit.addClass('btn-secondary');
      scBtnSubmit.removeClass('btn-primary');
    };
    var clear = function clear() {
      scMainInput.val('');
      scInputs.val('');
      clearInterval(resendTimer);
      clearInterval(globalTimer);
    };
    var inputInputHandler = function inputInputHandler(input, index) {
      input.val(input.val().replace(/[^0-9]/g, ''));
      if (input.val().length === 1 && index < scInputs.length - 1) {
        scInputs.eq(index + 1).focus();
      }
      fullCode[index] = input.val();
      scMainInput.val(fullCode.join(''));
      if (index + 1 === scInputs.length && input.val() !== '') {
        enteredCallback();
      } else {
        backCallback();
      }
    };
    var inputKeydownHandler = function inputKeydownHandler(input, event, index) {
      if (event.key === 'Backspace' && input.val() === '' && index > 0) {
        scInputs.eq(index - 1).focus();
        scMainInput.val(fullCode.join(''));
      }
      fullCode[index] = input.val();
    };
    var setTimer = function setTimer() {
      scBtnResend.addClass('d-none');
      scTimerWrapper.removeClass('d-none');
      var totalTime = timerTotalTime;
      resendTimer = setInterval(function () {
        var seconds = totalTime;
        seconds = seconds < 10 ? '0' + seconds : seconds;
        scTimer.text(seconds);
        totalTime--;
        if (totalTime < 0) {
          clearInterval(resendTimer);
          scTimerWrapper.addClass('d-none');
          scBtnResend.removeClass('d-none');
        }
      }, 1000);
    };
    var setTotalTimeout = function setTotalTimeout() {
      scLabel.text(timeoutText);
      globalTimer = setInterval(function () {
        scLabel.text(defaultText);
      }, totalTimeout * 1000);
    };
    var init = function init() {
      backCallback();
      setTimer();
      setTotalTimeout();
      scInputs.each(function (index) {
        $(this).on('input', function () {
          inputInputHandler($(this), index);
        });
        $(this).on('keydown', function (e) {
          inputKeydownHandler($(this), e, index);
        });
      });
      scBtnResend2FA.on('click', function (e) {
        e.preventDefault();
        $.ajax({
          url: resendUrl,
          headers: {
            'X-CSRF-TOKEN': getCSRFToken()
          },
          method: 'POST',
          dataType: 'json',
          data: {
            action: "resend_code"
          },
          success: function success(data) {
            console.log('success: ' + data);
            $('.js-field-error').closest('div').addClass('d-none');
            $('.component__scode').removeClass('is-invalid');
            clear();
            backCallback();
            setTimer();
            setTotalTimeout();
          }
        });
      });
    };
    var reset = function reset() {
      backCallback();
      setTimer();
      setTotalTimeout();
      scInputs.each(function (index) {
        $(this).off('input');
        $(this).on('input', function () {
          inputInputHandler($(this), index);
        });
        $(this).off('keydown');
        $(this).on('keydown', function (e) {
          inputKeydownHandler($(this), e);
        });
      });
    };
    return {
      init: init,
      reset: reset
    };
  }();

  var ComponentTextInput = function () {
    var inputFocusoutHandler = function inputFocusoutHandler(elem) {
      validateItem(elem);
    };
    var inputFocusHandler = function inputFocusHandler(elem) {
      clearError(elem);
    };
    var init = function init(jqWrapElem, optionArr) {
      var currentInput = jqWrapElem.find('.js-field-input');
      currentInput.on('focusout', function (e) {
        e.preventDefault();
        inputFocusoutHandler($(this));
      });
      currentInput.on('focus', function (e) {
        e.preventDefault();
        inputFocusHandler($(this));
      });
    };
    var showError = function showError(input, errorMessage) {
      var inputWrapper = input.closest('.js__textinput');
      var errorElem = inputWrapper.find('.js-field-error');
      errorElem.text(errorMessage);
      inputWrapper.addClass('_invalid');
    };
    var clearError = function clearError(input) {
      var inputWrapper = input.closest('.js__textinput');
      var errorElem = inputWrapper.find('.js-field-error');
      inputWrapper.removeClass('_invalid');
      input.removeClass('is-invalid');
      errorElem.text('');
    };
    var validate = function validate(inputWrapper) {
      var errorArray = [];
      inputWrapper.each(function () {
        var errors = validateItem($(this).find('.js-field-input'));
        errorArray = errorArray.concat(errors);
      });
      return errorArray;
    };
    var validateItem = function validateItem(input, isShowError) {
      var inputWrapper = input.closest('.js__textinput');
      var errorMessage = '';
      var errors = [];
      if (inputWrapper.hasClass('is-required') && input.val() === "") {
        errorMessage = 'Required field';
        errors.push(errorMessage);
        {
          clearError(input);
          showError(input, errorMessage);
        }
      }
      return errors;
    };
    return {
      init: init,
      validate: validate,
      showError: showError
    };
  }();

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var intlTelInputWithUtils = {exports: {}};

  (function (module) {
    // UMD
    (function (factory) {
      if (module.exports) {
        module.exports = factory();
      } else {
        window.intlTelInput = factory();
      }
    })(function () {
      var factoryOutput = function () {
        var __defProp = Object.defineProperty;
        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
        var __getOwnPropNames = Object.getOwnPropertyNames;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __export = function __export(target, all) {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };
        var __copyProps = function __copyProps(to, from, except, desc) {
          if (from && _typeof(from) === "object" || typeof from === "function") {
            var _iterator = _createForOfIteratorHelper(__getOwnPropNames(from)),
              _step;
            try {
              var _loop = function _loop() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                  get: function get() {
                    return from[key];
                  },
                  enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
                });
              };
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                _loop();
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
          return to;
        };
        var __toCommonJS = function __toCommonJS(mod) {
          return __copyProps(__defProp({}, "__esModule", {
            value: true
          }), mod);
        };

        // src/js/intl-tel-input/intlTelInputWithUtils.ts
        var intlTelInputWithUtils_exports = {};
        __export(intlTelInputWithUtils_exports, {
          default: function _default() {
            return intlTelInputWithUtils_default;
          }
        });

        // src/js/intl-tel-input/data.ts
        var rawCountryData = [["af",
        // Afghanistan
        "93"], ["ax",
        // Åland Islands
        "358", 1, ["18"]], ["al",
        // Albania
        "355"], ["dz",
        // Algeria
        "213"], ["as",
        // American Samoa
        "1", 5, ["684"]], ["ad",
        // Andorra
        "376"], ["ao",
        // Angola
        "244"], ["ai",
        // Anguilla
        "1", 6, ["264"]], ["ag",
        // Antigua and Barbuda
        "1", 7, ["268"]], ["ar",
        // Argentina
        "54"], ["am",
        // Armenia
        "374"], ["aw",
        // Aruba
        "297"], ["ac",
        // Ascension Island
        "247"], ["au",
        // Australia
        "61", 0], ["at",
        // Austria
        "43"], ["az",
        // Azerbaijan
        "994"], ["bs",
        // Bahamas
        "1", 8, ["242"]], ["bh",
        // Bahrain
        "973"], ["bd",
        // Bangladesh
        "880"], ["bb",
        // Barbados
        "1", 9, ["246"]], ["by",
        // Belarus
        "375"], ["be",
        // Belgium
        "32"], ["bz",
        // Belize
        "501"], ["bj",
        // Benin
        "229"], ["bm",
        // Bermuda
        "1", 10, ["441"]], ["bt",
        // Bhutan
        "975"], ["bo",
        // Bolivia
        "591"], ["ba",
        // Bosnia and Herzegovina
        "387"], ["bw",
        // Botswana
        "267"], ["br",
        // Brazil
        "55"], ["io",
        // British Indian Ocean Territory
        "246"], ["vg",
        // British Virgin Islands
        "1", 11, ["284"]], ["bn",
        // Brunei
        "673"], ["bg",
        // Bulgaria
        "359"], ["bf",
        // Burkina Faso
        "226"], ["bi",
        // Burundi
        "257"], ["kh",
        // Cambodia
        "855"], ["cm",
        // Cameroon
        "237"], ["ca",
        // Canada
        "1", 1, ["204", "226", "236", "249", "250", "263", "289", "306", "343", "354", "365", "367", "368", "382", "387", "403", "416", "418", "428", "431", "437", "438", "450", "584", "468", "474", "506", "514", "519", "548", "579", "581", "584", "587", "604", "613", "639", "647", "672", "683", "705", "709", "742", "753", "778", "780", "782", "807", "819", "825", "867", "873", "879", "902", "905"]], ["cv",
        // Cape Verde
        "238"], ["bq",
        // Caribbean Netherlands
        "599", 1, ["3", "4", "7"]], ["ky",
        // Cayman Islands
        "1", 12, ["345"]], ["cf",
        // Central African Republic
        "236"], ["td",
        // Chad
        "235"], ["cl",
        // Chile
        "56"], ["cn",
        // China
        "86"], ["cx",
        // Christmas Island
        "61", 2, ["89164"]], ["cc",
        // Cocos (Keeling) Islands
        "61", 1, ["89162"]], ["co",
        // Colombia
        "57"], ["km",
        // Comoros
        "269"], ["cg",
        // Congo (Brazzaville)
        "242"], ["cd",
        // Congo (Kinshasa)
        "243"], ["ck",
        // Cook Islands
        "682"], ["cr",
        // Costa Rica
        "506"], ["ci",
        // Côte d'Ivoire
        "225"], ["hr",
        // Croatia
        "385"], ["cu",
        // Cuba
        "53"], ["cw",
        // Curaçao
        "599", 0], ["cy",
        // Cyprus
        "357"], ["cz",
        // Czech Republic
        "420"], ["dk",
        // Denmark
        "45"], ["dj",
        // Djibouti
        "253"], ["dm",
        // Dominica
        "1", 13, ["767"]], ["do",
        // Dominican Republic
        "1", 2, ["809", "829", "849"]], ["ec",
        // Ecuador
        "593"], ["eg",
        // Egypt
        "20"], ["sv",
        // El Salvador
        "503"], ["gq",
        // Equatorial Guinea
        "240"], ["er",
        // Eritrea
        "291"], ["ee",
        // Estonia
        "372"], ["sz",
        // Eswatini
        "268"], ["et",
        // Ethiopia
        "251"], ["fk",
        // Falkland Islands (Malvinas)
        "500"], ["fo",
        // Faroe Islands
        "298"], ["fj",
        // Fiji
        "679"], ["fi",
        // Finland
        "358", 0], ["fr",
        // France
        "33"], ["gf",
        // French Guiana
        "594"], ["pf",
        // French Polynesia
        "689"], ["ga",
        // Gabon
        "241"], ["gm",
        // Gambia
        "220"], ["ge",
        // Georgia
        "995"], ["de",
        // Germany
        "49"], ["gh",
        // Ghana
        "233"], ["gi",
        // Gibraltar
        "350"], ["gr",
        // Greece
        "30"], ["gl",
        // Greenland
        "299"], ["gd",
        // Grenada
        "1", 14, ["473"]], ["gp",
        // Guadeloupe
        "590", 0], ["gu",
        // Guam
        "1", 15, ["671"]], ["gt",
        // Guatemala
        "502"], ["gg",
        // Guernsey
        "44", 1, ["1481", "7781", "7839", "7911"]], ["gn",
        // Guinea
        "224"], ["gw",
        // Guinea-Bissau
        "245"], ["gy",
        // Guyana
        "592"], ["ht",
        // Haiti
        "509"], ["hn",
        // Honduras
        "504"], ["hk",
        // Hong Kong SAR China
        "852"], ["hu",
        // Hungary
        "36"], ["is",
        // Iceland
        "354"], ["in",
        // India
        "91"], ["id",
        // Indonesia
        "62"], ["ir",
        // Iran
        "98"], ["iq",
        // Iraq
        "964"], ["ie",
        // Ireland
        "353"], ["im",
        // Isle of Man
        "44", 2, ["1624", "74576", "7524", "7924", "7624"]], ["il",
        // Israel
        "972"], ["it",
        // Italy
        "39", 0], ["jm",
        // Jamaica
        "1", 4, ["876", "658"]], ["jp",
        // Japan
        "81"], ["je",
        // Jersey
        "44", 3, ["1534", "7509", "7700", "7797", "7829", "7937"]], ["jo",
        // Jordan
        "962"], ["kz",
        // Kazakhstan
        "7", 1, ["33", "7"]], ["ke",
        // Kenya
        "254"], ["ki",
        // Kiribati
        "686"], ["xk",
        // Kosovo
        "383"], ["kw",
        // Kuwait
        "965"], ["kg",
        // Kyrgyzstan
        "996"], ["la",
        // Laos
        "856"], ["lv",
        // Latvia
        "371"], ["lb",
        // Lebanon
        "961"], ["ls",
        // Lesotho
        "266"], ["lr",
        // Liberia
        "231"], ["ly",
        // Libya
        "218"], ["li",
        // Liechtenstein
        "423"], ["lt",
        // Lithuania
        "370"], ["lu",
        // Luxembourg
        "352"], ["mo",
        // Macao SAR China
        "853"], ["mg",
        // Madagascar
        "261"], ["mw",
        // Malawi
        "265"], ["my",
        // Malaysia
        "60"], ["mv",
        // Maldives
        "960"], ["ml",
        // Mali
        "223"], ["mt",
        // Malta
        "356"], ["mh",
        // Marshall Islands
        "692"], ["mq",
        // Martinique
        "596"], ["mr",
        // Mauritania
        "222"], ["mu",
        // Mauritius
        "230"], ["yt",
        // Mayotte
        "262", 1, ["269", "639"]], ["mx",
        // Mexico
        "52"], ["fm",
        // Micronesia
        "691"], ["md",
        // Moldova
        "373"], ["mc",
        // Monaco
        "377"], ["mn",
        // Mongolia
        "976"], ["me",
        // Montenegro
        "382"], ["ms",
        // Montserrat
        "1", 16, ["664"]], ["ma",
        // Morocco
        "212", 0], ["mz",
        // Mozambique
        "258"], ["mm",
        // Myanmar (Burma)
        "95"], ["na",
        // Namibia
        "264"], ["nr",
        // Nauru
        "674"], ["np",
        // Nepal
        "977"], ["nl",
        // Netherlands
        "31"], ["nc",
        // New Caledonia
        "687"], ["nz",
        // New Zealand
        "64"], ["ni",
        // Nicaragua
        "505"], ["ne",
        // Niger
        "227"], ["ng",
        // Nigeria
        "234"], ["nu",
        // Niue
        "683"], ["nf",
        // Norfolk Island
        "672"], ["kp",
        // North Korea
        "850"], ["mk",
        // North Macedonia
        "389"], ["mp",
        // Northern Mariana Islands
        "1", 17, ["670"]], ["no",
        // Norway
        "47", 0], ["om",
        // Oman
        "968"], ["pk",
        // Pakistan
        "92"], ["pw",
        // Palau
        "680"], ["ps",
        // Palestinian Territories
        "970"], ["pa",
        // Panama
        "507"], ["pg",
        // Papua New Guinea
        "675"], ["py",
        // Paraguay
        "595"], ["pe",
        // Peru
        "51"], ["ph",
        // Philippines
        "63"], ["pl",
        // Poland
        "48"], ["pt",
        // Portugal
        "351"], ["pr",
        // Puerto Rico
        "1", 3, ["787", "939"]], ["qa",
        // Qatar
        "974"], ["re",
        // Réunion
        "262", 0], ["ro",
        // Romania
        "40"], ["ru",
        // Russia
        "7", 0], ["rw",
        // Rwanda
        "250"], ["ws",
        // Samoa
        "685"], ["sm",
        // San Marino
        "378"], ["st",
        // São Tomé & Príncipe
        "239"], ["sa",
        // Saudi Arabia
        "966"], ["sn",
        // Senegal
        "221"], ["rs",
        // Serbia
        "381"], ["sc",
        // Seychelles
        "248"], ["sl",
        // Sierra Leone
        "232"], ["sg",
        // Singapore
        "65"], ["sx",
        // Sint Maarten
        "1", 21, ["721"]], ["sk",
        // Slovakia
        "421"], ["si",
        // Slovenia
        "386"], ["sb",
        // Solomon Islands
        "677"], ["so",
        // Somalia
        "252"], ["za",
        // South Africa
        "27"], ["kr",
        // South Korea
        "82"], ["ss",
        // South Sudan
        "211"], ["es",
        // Spain
        "34"], ["lk",
        // Sri Lanka
        "94"], ["bl",
        // St. Barthélemy
        "590", 1], ["sh",
        // St. Helena
        "290"], ["kn",
        // St. Kitts & Nevis
        "1", 18, ["869"]], ["lc",
        // St. Lucia
        "1", 19, ["758"]], ["mf",
        // St. Martin
        "590", 2], ["pm",
        // St. Pierre & Miquelon
        "508"], ["vc",
        // St. Vincent & Grenadines
        "1", 20, ["784"]], ["sd",
        // Sudan
        "249"], ["sr",
        // Suriname
        "597"], ["sj",
        // Svalbard & Jan Mayen
        "47", 1, ["79"]], ["se",
        // Sweden
        "46"], ["ch",
        // Switzerland
        "41"], ["sy",
        // Syria
        "963"], ["tw",
        // Taiwan
        "886"], ["tj",
        // Tajikistan
        "992"], ["tz",
        // Tanzania
        "255"], ["th",
        // Thailand
        "66"], ["tl",
        // Timor-Leste
        "670"], ["tg",
        // Togo
        "228"], ["tk",
        // Tokelau
        "690"], ["to",
        // Tonga
        "676"], ["tt",
        // Trinidad & Tobago
        "1", 22, ["868"]], ["tn",
        // Tunisia
        "216"], ["tr",
        // Turkey
        "90"], ["tm",
        // Turkmenistan
        "993"], ["tc",
        // Turks & Caicos Islands
        "1", 23, ["649"]], ["tv",
        // Tuvalu
        "688"], ["ug",
        // Uganda
        "256"], ["ua",
        // Ukraine
        "380"], ["ae",
        // United Arab Emirates
        "971"], ["gb",
        // United Kingdom
        "44", 0], ["us",
        // United States
        "1", 0], ["uy",
        // Uruguay
        "598"], ["vi",
        // U.S. Virgin Islands
        "1", 24, ["340"]], ["uz",
        // Uzbekistan
        "998"], ["vu",
        // Vanuatu
        "678"], ["va",
        // Vatican City
        "39", 1, ["06698"]], ["ve",
        // Venezuela
        "58"], ["vn",
        // Vietnam
        "84"], ["wf",
        // Wallis & Futuna
        "681"], ["eh",
        // Western Sahara
        "212", 1, ["5288", "5289"]], ["ye",
        // Yemen
        "967"], ["zm",
        // Zambia
        "260"], ["zw",
        // Zimbabwe
        "263"]];
        var allCountries = [];
        for (var i = 0; i < rawCountryData.length; i++) {
          var c = rawCountryData[i];
          allCountries[i] = {
            name: "",
            // this is now populated in the plugin
            iso2: c[0],
            dialCode: c[1],
            priority: c[2] || 0,
            areaCodes: c[3] || null,
            nodeById: {}
          };
        }
        var data_default = allCountries;

        // src/js/intl-tel-input/i18n/en/countries.ts
        var countryTranslations = {
          ad: "Andorra",
          ae: "United Arab Emirates",
          af: "Afghanistan",
          ag: "Antigua & Barbuda",
          ai: "Anguilla",
          al: "Albania",
          am: "Armenia",
          ao: "Angola",
          ar: "Argentina",
          as: "American Samoa",
          at: "Austria",
          au: "Australia",
          aw: "Aruba",
          ax: "\xC5land Islands",
          az: "Azerbaijan",
          ba: "Bosnia & Herzegovina",
          bb: "Barbados",
          bd: "Bangladesh",
          be: "Belgium",
          bf: "Burkina Faso",
          bg: "Bulgaria",
          bh: "Bahrain",
          bi: "Burundi",
          bj: "Benin",
          bl: "St. Barth\xE9lemy",
          bm: "Bermuda",
          bn: "Brunei",
          bo: "Bolivia",
          bq: "Caribbean Netherlands",
          br: "Brazil",
          bs: "Bahamas",
          bt: "Bhutan",
          bw: "Botswana",
          by: "Belarus",
          bz: "Belize",
          ca: "Canada",
          cc: "Cocos (Keeling) Islands",
          cd: "Congo - Kinshasa",
          cf: "Central African Republic",
          cg: "Congo - Brazzaville",
          ch: "Switzerland",
          ci: "C\xF4te d\u2019Ivoire",
          ck: "Cook Islands",
          cl: "Chile",
          cm: "Cameroon",
          cn: "China",
          co: "Colombia",
          cr: "Costa Rica",
          cu: "Cuba",
          cv: "Cape Verde",
          cw: "Cura\xE7ao",
          cx: "Christmas Island",
          cy: "Cyprus",
          cz: "Czechia",
          de: "Germany",
          dj: "Djibouti",
          dk: "Denmark",
          dm: "Dominica",
          do: "Dominican Republic",
          dz: "Algeria",
          ec: "Ecuador",
          ee: "Estonia",
          eg: "Egypt",
          eh: "Western Sahara",
          er: "Eritrea",
          es: "Spain",
          et: "Ethiopia",
          fi: "Finland",
          fj: "Fiji",
          fk: "Falkland Islands",
          fm: "Micronesia",
          fo: "Faroe Islands",
          fr: "France",
          ga: "Gabon",
          gb: "United Kingdom",
          gd: "Grenada",
          ge: "Georgia",
          gf: "French Guiana",
          gg: "Guernsey",
          gh: "Ghana",
          gi: "Gibraltar",
          gl: "Greenland",
          gm: "Gambia",
          gn: "Guinea",
          gp: "Guadeloupe",
          gq: "Equatorial Guinea",
          gr: "Greece",
          gt: "Guatemala",
          gu: "Guam",
          gw: "Guinea-Bissau",
          gy: "Guyana",
          hk: "Hong Kong SAR China",
          hn: "Honduras",
          hr: "Croatia",
          ht: "Haiti",
          hu: "Hungary",
          id: "Indonesia",
          ie: "Ireland",
          il: "Israel",
          im: "Isle of Man",
          in: "India",
          io: "British Indian Ocean Territory",
          iq: "Iraq",
          ir: "Iran",
          is: "Iceland",
          it: "Italy",
          je: "Jersey",
          jm: "Jamaica",
          jo: "Jordan",
          jp: "Japan",
          ke: "Kenya",
          kg: "Kyrgyzstan",
          kh: "Cambodia",
          ki: "Kiribati",
          km: "Comoros",
          kn: "St. Kitts & Nevis",
          kp: "North Korea",
          kr: "South Korea",
          kw: "Kuwait",
          ky: "Cayman Islands",
          kz: "Kazakhstan",
          la: "Laos",
          lb: "Lebanon",
          lc: "St. Lucia",
          li: "Liechtenstein",
          lk: "Sri Lanka",
          lr: "Liberia",
          ls: "Lesotho",
          lt: "Lithuania",
          lu: "Luxembourg",
          lv: "Latvia",
          ly: "Libya",
          ma: "Morocco",
          mc: "Monaco",
          md: "Moldova",
          me: "Montenegro",
          mf: "St. Martin",
          mg: "Madagascar",
          mh: "Marshall Islands",
          mk: "North Macedonia",
          ml: "Mali",
          mm: "Myanmar (Burma)",
          mn: "Mongolia",
          mo: "Macao SAR China",
          mp: "Northern Mariana Islands",
          mq: "Martinique",
          mr: "Mauritania",
          ms: "Montserrat",
          mt: "Malta",
          mu: "Mauritius",
          mv: "Maldives",
          mw: "Malawi",
          mx: "Mexico",
          my: "Malaysia",
          mz: "Mozambique",
          na: "Namibia",
          nc: "New Caledonia",
          ne: "Niger",
          nf: "Norfolk Island",
          ng: "Nigeria",
          ni: "Nicaragua",
          nl: "Netherlands",
          no: "Norway",
          np: "Nepal",
          nr: "Nauru",
          nu: "Niue",
          nz: "New Zealand",
          om: "Oman",
          pa: "Panama",
          pe: "Peru",
          pf: "French Polynesia",
          pg: "Papua New Guinea",
          ph: "Philippines",
          pk: "Pakistan",
          pl: "Poland",
          pm: "St. Pierre & Miquelon",
          pr: "Puerto Rico",
          ps: "Palestinian Territories",
          pt: "Portugal",
          pw: "Palau",
          py: "Paraguay",
          qa: "Qatar",
          re: "R\xE9union",
          ro: "Romania",
          rs: "Serbia",
          ru: "Russia",
          rw: "Rwanda",
          sa: "Saudi Arabia",
          sb: "Solomon Islands",
          sc: "Seychelles",
          sd: "Sudan",
          se: "Sweden",
          sg: "Singapore",
          sh: "St. Helena",
          si: "Slovenia",
          sj: "Svalbard & Jan Mayen",
          sk: "Slovakia",
          sl: "Sierra Leone",
          sm: "San Marino",
          sn: "Senegal",
          so: "Somalia",
          sr: "Suriname",
          ss: "South Sudan",
          st: "S\xE3o Tom\xE9 & Pr\xEDncipe",
          sv: "El Salvador",
          sx: "Sint Maarten",
          sy: "Syria",
          sz: "Eswatini",
          tc: "Turks & Caicos Islands",
          td: "Chad",
          tg: "Togo",
          th: "Thailand",
          tj: "Tajikistan",
          tk: "Tokelau",
          tl: "Timor-Leste",
          tm: "Turkmenistan",
          tn: "Tunisia",
          to: "Tonga",
          tr: "Turkey",
          tt: "Trinidad & Tobago",
          tv: "Tuvalu",
          tw: "Taiwan",
          tz: "Tanzania",
          ua: "Ukraine",
          ug: "Uganda",
          us: "United States",
          uy: "Uruguay",
          uz: "Uzbekistan",
          va: "Vatican City",
          vc: "St. Vincent & Grenadines",
          ve: "Venezuela",
          vg: "British Virgin Islands",
          vi: "U.S. Virgin Islands",
          vn: "Vietnam",
          vu: "Vanuatu",
          wf: "Wallis & Futuna",
          ws: "Samoa",
          ye: "Yemen",
          yt: "Mayotte",
          za: "South Africa",
          zm: "Zambia",
          zw: "Zimbabwe"
        };
        var countries_default = countryTranslations;

        // src/js/intl-tel-input/i18n/en/interface.ts
        var interfaceTranslations = {
          selectedCountryAriaLabel: "Selected country",
          noCountrySelected: "No country selected",
          countryListAriaLabel: "List of countries",
          searchPlaceholder: "Search",
          zeroSearchResults: "No results found",
          oneSearchResult: "1 result found",
          multipleSearchResults: "${count} results found",
          // additional countries (not supported by country-list library)
          ac: "Ascension Island",
          xk: "Kosovo"
        };
        var interface_default = interfaceTranslations;

        // src/js/intl-tel-input/i18n/en/index.ts
        var allTranslations = _objectSpread2(_objectSpread2({}, countries_default), interface_default);
        var en_default = allTranslations;

        // src/js/intl-tel-input.ts
        for (var _i = 0; _i < data_default.length; _i++) {
          data_default[_i].name = en_default[data_default[_i].iso2];
        }
        var id = 0;
        var defaults = {
          //* Whether or not to allow the dropdown.
          allowDropdown: true,
          //* Add a placeholder in the input with an example number for the selected country.
          autoPlaceholder: "polite",
          //* Modify the parentClass.
          containerClass: "",
          //* The order of the countries in the dropdown. Defaults to alphabetical.
          countryOrder: null,
          //* Add a country search input at the top of the dropdown.
          countrySearch: true,
          //* Modify the auto placeholder.
          customPlaceholder: null,
          //* Append menu to specified element.
          dropdownContainer: null,
          //* Don't display these countries.
          excludeCountries: [],
          //* Fix the dropdown width to the input width (rather than being as wide as the longest country name).
          fixDropdownWidth: true,
          //* Format the number as the user types
          formatAsYouType: true,
          //* Format the input value during initialisation and on setNumber.
          formatOnDisplay: true,
          //* geoIp lookup function.
          geoIpLookup: null,
          //* Inject a hidden input with the name returned from this function, and on submit, populate it with the result of getNumber.
          hiddenInput: null,
          //* Internationalise the plugin text e.g. search input placeholder, country names.
          i18n: {},
          //* Initial country.
          initialCountry: "",
          //* Specify the path to the libphonenumber script to enable validation/formatting.
          loadUtilsOnInit: "",
          //* National vs international formatting for numbers e.g. placeholders and displaying existing numbers.
          nationalMode: true,
          //* Display only these countries.
          onlyCountries: [],
          //* Number type to use for placeholders.
          placeholderNumberType: "MOBILE",
          //* Show flags - for both the selected country, and in the country dropdown
          showFlags: true,
          //* Display the international dial code next to the selected flag.
          separateDialCode: false,
          //* Only allow certain chars e.g. a plus followed by numeric digits, and cap at max valid length.
          strictMode: false,
          //* Use full screen popup instead of dropdown for country list.
          useFullscreenPopup: typeof navigator !== "undefined" && typeof window !== "undefined" ?
          //* We cannot just test screen size as some smartphones/website meta tags will report desktop resolutions.
          //* Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'
          /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 500 : false,
          //* Deprecated! Use `loadUtilsOnInit` instead.
          utilsScript: "",
          //* The number type to enforce during validation.
          validationNumberType: "MOBILE"
        };
        var regionlessNanpNumbers = ["800", "822", "833", "844", "855", "866", "877", "880", "881", "882", "883", "884", "885", "886", "887", "888", "889"];
        var getNumeric = function getNumeric(s) {
          return s.replace(/\D/g, "");
        };
        var normaliseString = function normaliseString() {
          var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
          return s.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
        };
        var isRegionlessNanp = function isRegionlessNanp(number) {
          var numeric = getNumeric(number);
          if (numeric.charAt(0) === "1") {
            var areaCode = numeric.substr(1, 3);
            return regionlessNanpNumbers.indexOf(areaCode) !== -1;
          }
          return false;
        };
        var translateCursorPosition = function translateCursorPosition(relevantChars, formattedValue, prevCaretPos, isDeleteForwards) {
          if (prevCaretPos === 0 && !isDeleteForwards) {
            return 0;
          }
          var count = 0;
          for (var _i2 = 0; _i2 < formattedValue.length; _i2++) {
            if (/[+0-9]/.test(formattedValue[_i2])) {
              count++;
            }
            if (count === relevantChars && !isDeleteForwards) {
              return _i2 + 1;
            }
            if (isDeleteForwards && count === relevantChars + 1) {
              return _i2;
            }
          }
          return formattedValue.length;
        };
        var createEl = function createEl(name, attrs, container) {
          var el = document.createElement(name);
          if (attrs) {
            Object.entries(attrs).forEach(function (_ref) {
              var _ref2 = _slicedToArray(_ref, 2),
                key = _ref2[0],
                value = _ref2[1];
              return el.setAttribute(key, value);
            });
          }
          if (container) {
            container.appendChild(el);
          }
          return el;
        };
        var forEachInstance = function forEachInstance(method) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var instances = intlTelInput.instances;
          Object.values(instances).forEach(function (instance) {
            return instance[method].apply(instance, args);
          });
        };
        var Iti = /*#__PURE__*/function () {
          function Iti(input) {
            var customOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            _classCallCheck(this, Iti);
            this.id = id++;
            this.telInput = input;
            this.highlightedItem = null;
            this.options = Object.assign({}, defaults, customOptions);
            this.hadInitialPlaceholder = Boolean(input.getAttribute("placeholder"));
          }
          //* Can't be private as it's called from intlTelInput convenience wrapper.
          return _createClass(Iti, [{
            key: "_init",
            value: function _init() {
              var _this = this;
              if (this.options.useFullscreenPopup) {
                this.options.fixDropdownWidth = false;
              }
              if (this.options.onlyCountries.length === 1) {
                this.options.initialCountry = this.options.onlyCountries[0];
              }
              if (this.options.separateDialCode) {
                this.options.nationalMode = false;
              }
              if (this.options.allowDropdown && !this.options.showFlags && !this.options.separateDialCode) {
                this.options.nationalMode = false;
              }
              if (this.options.useFullscreenPopup && !this.options.dropdownContainer) {
                this.options.dropdownContainer = document.body;
              }
              this.isAndroid = typeof navigator !== "undefined" ? /Android/i.test(navigator.userAgent) : false;
              this.isRTL = !!this.telInput.closest("[dir=rtl]");
              var showOnDefaultSide = this.options.allowDropdown || this.options.separateDialCode;
              this.showSelectedCountryOnLeft = this.isRTL ? !showOnDefaultSide : showOnDefaultSide;
              if (this.options.separateDialCode) {
                if (this.isRTL) {
                  this.originalPaddingRight = this.telInput.style.paddingRight;
                } else {
                  this.originalPaddingLeft = this.telInput.style.paddingLeft;
                }
              }
              this.options.i18n = _objectSpread2(_objectSpread2({}, en_default), this.options.i18n);
              var autoCountryPromise = new Promise(function (resolve, reject) {
                _this.resolveAutoCountryPromise = resolve;
                _this.rejectAutoCountryPromise = reject;
              });
              var utilsScriptPromise = new Promise(function (resolve, reject) {
                _this.resolveUtilsScriptPromise = resolve;
                _this.rejectUtilsScriptPromise = reject;
              });
              this.promise = Promise.all([autoCountryPromise, utilsScriptPromise]);
              this.selectedCountryData = {};
              this._processCountryData();
              this._generateMarkup();
              this._setInitialState();
              this._initListeners();
              this._initRequests();
            }
            //********************
            //*  PRIVATE METHODS
            //********************
            //* Prepare all of the country data, including onlyCountries, excludeCountries, countryOrder options.
          }, {
            key: "_processCountryData",
            value: function _processCountryData() {
              this._processAllCountries();
              this._processDialCodes();
              this._translateCountryNames();
              this._sortCountries();
            }
            //* Sort countries by countryOrder option (if present), then name.
          }, {
            key: "_sortCountries",
            value: function _sortCountries() {
              var _this2 = this;
              if (this.options.countryOrder) {
                this.options.countryOrder = this.options.countryOrder.map(function (country) {
                  return country.toLowerCase();
                });
              }
              this.countries.sort(function (a, b) {
                var countryOrder = _this2.options.countryOrder;
                if (countryOrder) {
                  var aIndex = countryOrder.indexOf(a.iso2);
                  var bIndex = countryOrder.indexOf(b.iso2);
                  var aIndexExists = aIndex > -1;
                  var bIndexExists = bIndex > -1;
                  if (aIndexExists || bIndexExists) {
                    if (aIndexExists && bIndexExists) {
                      return aIndex - bIndex;
                    }
                    return aIndexExists ? -1 : 1;
                  }
                }
                return a.name.localeCompare(b.name);
              });
            }
            //* Add a dial code to this.dialCodeToIso2Map.
          }, {
            key: "_addToDialCodeMap",
            value: function _addToDialCodeMap(iso2, dialCode, priority) {
              if (dialCode.length > this.dialCodeMaxLen) {
                this.dialCodeMaxLen = dialCode.length;
              }
              if (!this.dialCodeToIso2Map.hasOwnProperty(dialCode)) {
                this.dialCodeToIso2Map[dialCode] = [];
              }
              for (var _i3 = 0; _i3 < this.dialCodeToIso2Map[dialCode].length; _i3++) {
                if (this.dialCodeToIso2Map[dialCode][_i3] === iso2) {
                  return;
                }
              }
              var index = priority !== void 0 ? priority : this.dialCodeToIso2Map[dialCode].length;
              this.dialCodeToIso2Map[dialCode][index] = iso2;
            }
            //* Process onlyCountries or excludeCountries array if present.
          }, {
            key: "_processAllCountries",
            value: function _processAllCountries() {
              var _this$options = this.options,
                onlyCountries = _this$options.onlyCountries,
                excludeCountries = _this$options.excludeCountries;
              if (onlyCountries.length) {
                var lowerCaseOnlyCountries = onlyCountries.map(function (country) {
                  return country.toLowerCase();
                });
                this.countries = data_default.filter(function (country) {
                  return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;
                });
              } else if (excludeCountries.length) {
                var lowerCaseExcludeCountries = excludeCountries.map(function (country) {
                  return country.toLowerCase();
                });
                this.countries = data_default.filter(function (country) {
                  return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;
                });
              } else {
                this.countries = data_default;
              }
            }
            //* Translate Countries by object literal provided on config.
          }, {
            key: "_translateCountryNames",
            value: function _translateCountryNames() {
              for (var _i4 = 0; _i4 < this.countries.length; _i4++) {
                var iso2 = this.countries[_i4].iso2.toLowerCase();
                if (this.options.i18n.hasOwnProperty(iso2)) {
                  this.countries[_i4].name = this.options.i18n[iso2];
                }
              }
            }
            //* Generate this.dialCodes and this.dialCodeToIso2Map.
          }, {
            key: "_processDialCodes",
            value: function _processDialCodes() {
              this.dialCodes = {};
              this.dialCodeMaxLen = 0;
              this.dialCodeToIso2Map = {};
              for (var _i5 = 0; _i5 < this.countries.length; _i5++) {
                var _c = this.countries[_i5];
                if (!this.dialCodes[_c.dialCode]) {
                  this.dialCodes[_c.dialCode] = true;
                }
                this._addToDialCodeMap(_c.iso2, _c.dialCode, _c.priority);
              }
              for (var _i6 = 0; _i6 < this.countries.length; _i6++) {
                var _c2 = this.countries[_i6];
                if (_c2.areaCodes) {
                  var rootIso2Code = this.dialCodeToIso2Map[_c2.dialCode][0];
                  for (var j = 0; j < _c2.areaCodes.length; j++) {
                    var areaCode = _c2.areaCodes[j];
                    for (var k = 1; k < areaCode.length; k++) {
                      var partialDialCode = _c2.dialCode + areaCode.substr(0, k);
                      this._addToDialCodeMap(rootIso2Code, partialDialCode);
                      this._addToDialCodeMap(_c2.iso2, partialDialCode);
                    }
                    this._addToDialCodeMap(_c2.iso2, _c2.dialCode + areaCode);
                  }
                }
              }
            }
            //* Generate all of the markup for the plugin: the selected country overlay, and the dropdown.
          }, {
            key: "_generateMarkup",
            value: function _generateMarkup() {
              var _this$telInput$parent;
              this.telInput.classList.add("iti__tel-input");
              if (!this.telInput.hasAttribute("autocomplete") && !(this.telInput.form && this.telInput.form.hasAttribute("autocomplete"))) {
                this.telInput.setAttribute("autocomplete", "off");
              }
              var _this$options2 = this.options,
                allowDropdown = _this$options2.allowDropdown,
                separateDialCode = _this$options2.separateDialCode,
                showFlags = _this$options2.showFlags,
                containerClass = _this$options2.containerClass,
                hiddenInput = _this$options2.hiddenInput,
                dropdownContainer = _this$options2.dropdownContainer,
                fixDropdownWidth = _this$options2.fixDropdownWidth,
                useFullscreenPopup = _this$options2.useFullscreenPopup,
                countrySearch = _this$options2.countrySearch,
                i18n = _this$options2.i18n;
              var parentClass = "iti";
              if (allowDropdown) {
                parentClass += " iti--allow-dropdown";
              }
              if (showFlags) {
                parentClass += " iti--show-flags";
              }
              if (containerClass) {
                parentClass += " ".concat(containerClass);
              }
              if (!useFullscreenPopup) {
                parentClass += " iti--inline-dropdown";
              }
              var wrapper = createEl("div", {
                class: parentClass
              });
              (_this$telInput$parent = this.telInput.parentNode) === null || _this$telInput$parent === void 0 || _this$telInput$parent.insertBefore(wrapper, this.telInput);
              if (allowDropdown || showFlags || separateDialCode) {
                this.countryContainer = createEl("div", {
                  class: "iti__country-container"
                }, wrapper);
                if (this.showSelectedCountryOnLeft) {
                  this.countryContainer.style.left = "0px";
                } else {
                  this.countryContainer.style.right = "0px";
                }
                if (allowDropdown) {
                  this.selectedCountry = createEl("button", {
                    type: "button",
                    class: "iti__selected-country",
                    "aria-expanded": "false",
                    "aria-label": this.options.i18n.selectedCountryAriaLabel,
                    "aria-haspopup": "true",
                    "aria-controls": "iti-".concat(this.id, "__dropdown-content"),
                    "role": "combobox"
                  }, this.countryContainer);
                  if (this.telInput.disabled) {
                    this.selectedCountry.setAttribute("disabled", "true");
                  }
                } else {
                  this.selectedCountry = createEl("div", {
                    class: "iti__selected-country"
                  }, this.countryContainer);
                }
                var selectedCountryPrimary = createEl("div", {
                  class: "iti__selected-country-primary"
                }, this.selectedCountry);
                this.selectedCountryInner = createEl("div", {
                  class: "iti__flag"
                }, selectedCountryPrimary);
                this.selectedCountryA11yText = createEl("span", {
                  class: "iti__a11y-text"
                }, this.selectedCountryInner);
                if (allowDropdown) {
                  this.dropdownArrow = createEl("div", {
                    class: "iti__arrow",
                    "aria-hidden": "true"
                  }, selectedCountryPrimary);
                }
                if (separateDialCode) {
                  this.selectedDialCode = createEl("div", {
                    class: "iti__selected-dial-code"
                  }, this.selectedCountry);
                }
                if (allowDropdown) {
                  var extraClasses = fixDropdownWidth ? "" : "iti--flexible-dropdown-width";
                  this.dropdownContent = createEl("div", {
                    id: "iti-".concat(this.id, "__dropdown-content"),
                    class: "iti__dropdown-content iti__hide ".concat(extraClasses)
                  });
                  if (countrySearch) {
                    this.searchInput = createEl("input", {
                      type: "text",
                      class: "iti__search-input",
                      placeholder: i18n.searchPlaceholder,
                      role: "combobox",
                      "aria-expanded": "true",
                      "aria-label": i18n.searchPlaceholder,
                      "aria-controls": "iti-".concat(this.id, "__country-listbox"),
                      "aria-autocomplete": "list",
                      "autocomplete": "off"
                    }, this.dropdownContent);
                    this.searchResultsA11yText = createEl("span", {
                      class: "iti__a11y-text"
                    }, this.dropdownContent);
                  }
                  this.countryList = createEl("ul", {
                    class: "iti__country-list",
                    id: "iti-".concat(this.id, "__country-listbox"),
                    role: "listbox",
                    "aria-label": i18n.countryListAriaLabel
                  }, this.dropdownContent);
                  this._appendListItems();
                  if (countrySearch) {
                    this._updateSearchResultsText();
                  }
                  if (dropdownContainer) {
                    var dropdownClasses = "iti iti--container";
                    if (useFullscreenPopup) {
                      dropdownClasses += " iti--fullscreen-popup";
                    } else {
                      dropdownClasses += " iti--inline-dropdown";
                    }
                    this.dropdown = createEl("div", {
                      class: dropdownClasses
                    });
                    this.dropdown.appendChild(this.dropdownContent);
                  } else {
                    this.countryContainer.appendChild(this.dropdownContent);
                  }
                }
              }
              wrapper.appendChild(this.telInput);
              this._updateInputPadding();
              if (hiddenInput) {
                var telInputName = this.telInput.getAttribute("name") || "";
                var names = hiddenInput(telInputName);
                if (names.phone) {
                  this.hiddenInput = createEl("input", {
                    type: "hidden",
                    name: names.phone
                  });
                  wrapper.appendChild(this.hiddenInput);
                }
                if (names.country) {
                  this.hiddenInputCountry = createEl("input", {
                    type: "hidden",
                    name: names.country
                  });
                  wrapper.appendChild(this.hiddenInputCountry);
                }
              }
            }
            //* For each country: add a country list item <li> to the countryList <ul> container.
          }, {
            key: "_appendListItems",
            value: function _appendListItems() {
              for (var _i7 = 0; _i7 < this.countries.length; _i7++) {
                var _c3 = this.countries[_i7];
                var extraClass = _i7 === 0 ? "iti__highlight" : "";
                var listItem = createEl("li", {
                  id: "iti-".concat(this.id, "__item-").concat(_c3.iso2),
                  class: "iti__country ".concat(extraClass),
                  tabindex: "-1",
                  role: "option",
                  "data-dial-code": _c3.dialCode,
                  "data-country-code": _c3.iso2,
                  "aria-selected": "false"
                }, this.countryList);
                _c3.nodeById[this.id] = listItem;
                var content = "";
                if (this.options.showFlags) {
                  content += "<div class='iti__flag iti__".concat(_c3.iso2, "'></div>");
                }
                content += "<span class='iti__country-name'>".concat(_c3.name, "</span>");
                content += "<span class='iti__dial-code'>+".concat(_c3.dialCode, "</span>");
                listItem.insertAdjacentHTML("beforeend", content);
              }
            }
            //* Set the initial state of the input value and the selected country by:
            //* 1. Extracting a dial code from the given number
            //* 2. Using explicit initialCountry
          }, {
            key: "_setInitialState",
            value: function _setInitialState() {
              var overrideAutoCountry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              var attributeValue = this.telInput.getAttribute("value");
              var inputValue = this.telInput.value;
              var useAttribute = attributeValue && attributeValue.charAt(0) === "+" && (!inputValue || inputValue.charAt(0) !== "+");
              var val = useAttribute ? attributeValue : inputValue;
              var dialCode = this._getDialCode(val);
              var isRegionlessNanpNumber = isRegionlessNanp(val);
              var _this$options3 = this.options,
                initialCountry = _this$options3.initialCountry,
                geoIpLookup = _this$options3.geoIpLookup;
              var isAutoCountry = initialCountry === "auto" && geoIpLookup;
              if (dialCode && !isRegionlessNanpNumber) {
                this._updateCountryFromNumber(val);
              } else if (!isAutoCountry || overrideAutoCountry) {
                var lowerInitialCountry = initialCountry ? initialCountry.toLowerCase() : "";
                var isValidInitialCountry = lowerInitialCountry && this._getCountryData(lowerInitialCountry, true);
                if (isValidInitialCountry) {
                  this._setCountry(lowerInitialCountry);
                } else {
                  if (dialCode && isRegionlessNanpNumber) {
                    this._setCountry("us");
                  } else {
                    this._setCountry();
                  }
                }
              }
              if (val) {
                this._updateValFromNumber(val);
              }
            }
            //* Initialise the main event listeners: input keyup, and click selected country.
          }, {
            key: "_initListeners",
            value: function _initListeners() {
              this._initTelInputListeners();
              if (this.options.allowDropdown) {
                this._initDropdownListeners();
              }
              if ((this.hiddenInput || this.hiddenInputCountry) && this.telInput.form) {
                this._initHiddenInputListener();
              }
            }
            //* Update hidden input on form submit.
          }, {
            key: "_initHiddenInputListener",
            value: function _initHiddenInputListener() {
              var _this3 = this,
                _this$telInput$form;
              this._handleHiddenInputSubmit = function () {
                if (_this3.hiddenInput) {
                  _this3.hiddenInput.value = _this3.getNumber();
                }
                if (_this3.hiddenInputCountry) {
                  _this3.hiddenInputCountry.value = _this3.getSelectedCountryData().iso2 || "";
                }
              };
              (_this$telInput$form = this.telInput.form) === null || _this$telInput$form === void 0 || _this$telInput$form.addEventListener("submit", this._handleHiddenInputSubmit);
            }
            //* initialise the dropdown listeners.
          }, {
            key: "_initDropdownListeners",
            value: function _initDropdownListeners() {
              var _this4 = this;
              this._handleLabelClick = function (e) {
                if (_this4.dropdownContent.classList.contains("iti__hide")) {
                  _this4.telInput.focus();
                } else {
                  e.preventDefault();
                }
              };
              var label = this.telInput.closest("label");
              if (label) {
                label.addEventListener("click", this._handleLabelClick);
              }
              this._handleClickSelectedCountry = function () {
                if (_this4.dropdownContent.classList.contains("iti__hide") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {
                  _this4._openDropdown();
                }
              };
              this.selectedCountry.addEventListener("click", this._handleClickSelectedCountry);
              this._handleCountryContainerKeydown = function (e) {
                var isDropdownHidden = _this4.dropdownContent.classList.contains("iti__hide");
                if (isDropdownHidden && ["ArrowUp", "ArrowDown", " ", "Enter"].includes(e.key)) {
                  e.preventDefault();
                  e.stopPropagation();
                  _this4._openDropdown();
                }
                if (e.key === "Tab") {
                  _this4._closeDropdown();
                }
              };
              this.countryContainer.addEventListener("keydown", this._handleCountryContainerKeydown);
            }
            //* Init many requests: utils script / geo ip lookup.
          }, {
            key: "_initRequests",
            value: function _initRequests() {
              var _this5 = this;
              var _this$options4 = this.options,
                loadUtilsOnInit = _this$options4.loadUtilsOnInit,
                utilsScript = _this$options4.utilsScript,
                initialCountry = _this$options4.initialCountry,
                geoIpLookup = _this$options4.geoIpLookup;
              if (!loadUtilsOnInit && utilsScript) {
                console.warn("intl-tel-input: The `utilsScript` option is deprecated and will be removed in a future release! Please use the `loadUtilsOnInit` option instead.");
                loadUtilsOnInit = utilsScript;
              }
              if (loadUtilsOnInit && !intlTelInput.utils) {
                this._handlePageLoad = function () {
                  var _intlTelInput$loadUti;
                  window.removeEventListener("load", _this5._handlePageLoad);
                  (_intlTelInput$loadUti = intlTelInput.loadUtils(loadUtilsOnInit)) === null || _intlTelInput$loadUti === void 0 || _intlTelInput$loadUti.catch(function () {});
                };
                if (intlTelInput.documentReady()) {
                  this._handlePageLoad();
                } else {
                  window.addEventListener("load", this._handlePageLoad);
                }
              } else {
                this.resolveUtilsScriptPromise();
              }
              var isAutoCountry = initialCountry === "auto" && geoIpLookup;
              if (isAutoCountry && !this.selectedCountryData.iso2) {
                this._loadAutoCountry();
              } else {
                this.resolveAutoCountryPromise();
              }
            }
            //* Perform the geo ip lookup.
          }, {
            key: "_loadAutoCountry",
            value: function _loadAutoCountry() {
              var _this6 = this;
              if (intlTelInput.autoCountry) {
                this.handleAutoCountry();
              } else if (!intlTelInput.startedLoadingAutoCountry) {
                intlTelInput.startedLoadingAutoCountry = true;
                if (typeof this.options.geoIpLookup === "function") {
                  this.options.geoIpLookup(function () {
                    var iso2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                    var iso2Lower = iso2.toLowerCase();
                    var isValidIso2 = iso2Lower && _this6._getCountryData(iso2Lower, true);
                    if (isValidIso2) {
                      intlTelInput.autoCountry = iso2Lower;
                      setTimeout(function () {
                        return forEachInstance("handleAutoCountry");
                      });
                    } else {
                      _this6._setInitialState(true);
                      forEachInstance("rejectAutoCountryPromise");
                    }
                  }, function () {
                    _this6._setInitialState(true);
                    forEachInstance("rejectAutoCountryPromise");
                  });
                }
              }
            }
          }, {
            key: "_openDropdownWithPlus",
            value: function _openDropdownWithPlus() {
              this._openDropdown();
              this.searchInput.value = "+";
              this._filterCountries("", true);
            }
            //* Initialize the tel input listeners.
          }, {
            key: "_initTelInputListeners",
            value: function _initTelInputListeners() {
              var _this7 = this;
              var _this$options5 = this.options,
                strictMode = _this$options5.strictMode,
                formatAsYouType = _this$options5.formatAsYouType,
                separateDialCode = _this$options5.separateDialCode,
                formatOnDisplay = _this$options5.formatOnDisplay,
                allowDropdown = _this$options5.allowDropdown,
                countrySearch = _this$options5.countrySearch;
              var userOverrideFormatting = false;
              if (/(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])/.test(this.telInput.value)) {
                userOverrideFormatting = true;
              }
              this._handleInputEvent = function (e) {
                if (_this7.isAndroid && (e === null || e === void 0 ? void 0 : e.data) === "+" && separateDialCode && allowDropdown && countrySearch) {
                  var currentCaretPos = _this7.telInput.selectionStart || 0;
                  var valueBeforeCaret = _this7.telInput.value.substring(0, currentCaretPos - 1);
                  var valueAfterCaret = _this7.telInput.value.substring(currentCaretPos);
                  _this7.telInput.value = valueBeforeCaret + valueAfterCaret;
                  _this7._openDropdownWithPlus();
                  return;
                }
                if (_this7._updateCountryFromNumber(_this7.telInput.value)) {
                  _this7._triggerCountryChange();
                }
                var isFormattingChar = (e === null || e === void 0 ? void 0 : e.data) && /[^+0-9]/.test(e.data);
                var isPaste = (e === null || e === void 0 ? void 0 : e.inputType) === "insertFromPaste" && _this7.telInput.value;
                if (isFormattingChar || isPaste && !strictMode) {
                  userOverrideFormatting = true;
                } else if (!/[^+0-9]/.test(_this7.telInput.value)) {
                  userOverrideFormatting = false;
                }
                var disableFormatOnSetNumber = (e === null || e === void 0 ? void 0 : e.detail) && e.detail["isSetNumber"] && !formatOnDisplay;
                if (formatAsYouType && !userOverrideFormatting && !disableFormatOnSetNumber) {
                  var _currentCaretPos = _this7.telInput.selectionStart || 0;
                  var _valueBeforeCaret = _this7.telInput.value.substring(0, _currentCaretPos);
                  var relevantCharsBeforeCaret = _valueBeforeCaret.replace(/[^+0-9]/g, "").length;
                  var isDeleteForwards = (e === null || e === void 0 ? void 0 : e.inputType) === "deleteContentForward";
                  var formattedValue = _this7._formatNumberAsYouType();
                  var newCaretPos = translateCursorPosition(relevantCharsBeforeCaret, formattedValue, _currentCaretPos, isDeleteForwards);
                  _this7.telInput.value = formattedValue;
                  _this7.telInput.setSelectionRange(newCaretPos, newCaretPos);
                }
              };
              this.telInput.addEventListener("input", this._handleInputEvent);
              if (strictMode || separateDialCode) {
                this._handleKeydownEvent = function (e) {
                  if (e.key && e.key.length === 1 && !e.altKey && !e.ctrlKey && !e.metaKey) {
                    if (separateDialCode && allowDropdown && countrySearch && e.key === "+") {
                      e.preventDefault();
                      _this7._openDropdownWithPlus();
                      return;
                    }
                    if (strictMode) {
                      var value = _this7.telInput.value;
                      var alreadyHasPlus = value.charAt(0) === "+";
                      var isInitialPlus = !alreadyHasPlus && _this7.telInput.selectionStart === 0 && e.key === "+";
                      var isNumeric = /^[0-9]$/.test(e.key);
                      var isAllowedChar = separateDialCode ? isNumeric : isInitialPlus || isNumeric;
                      var newValue = value.slice(0, _this7.telInput.selectionStart) + e.key + value.slice(_this7.telInput.selectionEnd);
                      var newFullNumber = _this7._getFullNumber(newValue);
                      var coreNumber = intlTelInput.utils.getCoreNumber(newFullNumber, _this7.selectedCountryData.iso2);
                      var hasExceededMaxLength = _this7.maxCoreNumberLength && coreNumber.length > _this7.maxCoreNumberLength;
                      var isChangingDialCode = false;
                      if (alreadyHasPlus) {
                        var currentCountry = _this7.selectedCountryData.iso2;
                        var newCountry = _this7._getCountryFromNumber(newFullNumber);
                        isChangingDialCode = newCountry !== currentCountry;
                      }
                      if (!isAllowedChar || hasExceededMaxLength && !isChangingDialCode && !isInitialPlus) {
                        e.preventDefault();
                      }
                    }
                  }
                };
                this.telInput.addEventListener("keydown", this._handleKeydownEvent);
              }
            }
            //* Adhere to the input's maxlength attr.
          }, {
            key: "_cap",
            value: function _cap(number) {
              var max = parseInt(this.telInput.getAttribute("maxlength") || "", 10);
              return max && number.length > max ? number.substr(0, max) : number;
            }
            //* Trigger a custom event on the input.
          }, {
            key: "_trigger",
            value: function _trigger(name) {
              var detailProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              var e = new CustomEvent(name, {
                bubbles: true,
                cancelable: true,
                detail: detailProps
              });
              this.telInput.dispatchEvent(e);
            }
            //* Open the dropdown.
          }, {
            key: "_openDropdown",
            value: function _openDropdown() {
              var _this$options6 = this.options,
                fixDropdownWidth = _this$options6.fixDropdownWidth,
                countrySearch = _this$options6.countrySearch;
              if (fixDropdownWidth) {
                this.dropdownContent.style.width = "".concat(this.telInput.offsetWidth, "px");
              }
              this.dropdownContent.classList.remove("iti__hide");
              this.selectedCountry.setAttribute("aria-expanded", "true");
              this._setDropdownPosition();
              if (countrySearch) {
                var firstCountryItem = this.countryList.firstElementChild;
                if (firstCountryItem) {
                  this._highlightListItem(firstCountryItem, false);
                  this.countryList.scrollTop = 0;
                }
                this.searchInput.focus();
              }
              this._bindDropdownListeners();
              this.dropdownArrow.classList.add("iti__arrow--up");
              this._trigger("open:countrydropdown");
            }
            //* Set the dropdown position
          }, {
            key: "_setDropdownPosition",
            value: function _setDropdownPosition() {
              var _this8 = this;
              if (this.options.dropdownContainer) {
                this.options.dropdownContainer.appendChild(this.dropdown);
              }
              if (!this.options.useFullscreenPopup) {
                var inputPosRelativeToVP = this.telInput.getBoundingClientRect();
                var inputHeight = this.telInput.offsetHeight;
                if (this.options.dropdownContainer) {
                  this.dropdown.style.top = "".concat(inputPosRelativeToVP.top + inputHeight, "px");
                  this.dropdown.style.left = "".concat(inputPosRelativeToVP.left, "px");
                  this._handleWindowScroll = function () {
                    return _this8._closeDropdown();
                  };
                  window.addEventListener("scroll", this._handleWindowScroll);
                }
              }
            }
            //* We only bind dropdown listeners when the dropdown is open.
          }, {
            key: "_bindDropdownListeners",
            value: function _bindDropdownListeners() {
              var _this9 = this;
              this._handleMouseoverCountryList = function (e) {
                var _e$target;
                var listItem = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.closest(".iti__country");
                if (listItem) {
                  _this9._highlightListItem(listItem, false);
                }
              };
              this.countryList.addEventListener("mouseover", this._handleMouseoverCountryList);
              this._handleClickCountryList = function (e) {
                var _e$target2;
                var listItem = (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.closest(".iti__country");
                if (listItem) {
                  _this9._selectListItem(listItem);
                }
              };
              this.countryList.addEventListener("click", this._handleClickCountryList);
              var isOpening = true;
              this._handleClickOffToClose = function () {
                if (!isOpening) {
                  _this9._closeDropdown();
                }
                isOpening = false;
              };
              document.documentElement.addEventListener("click", this._handleClickOffToClose);
              var query = "";
              var queryTimer = null;
              this._handleKeydownOnDropdown = function (e) {
                if (["ArrowUp", "ArrowDown", "Enter", "Escape"].includes(e.key)) {
                  e.preventDefault();
                  e.stopPropagation();
                  if (e.key === "ArrowUp" || e.key === "ArrowDown") {
                    _this9._handleUpDownKey(e.key);
                  } else if (e.key === "Enter") {
                    _this9._handleEnterKey();
                  } else if (e.key === "Escape") {
                    _this9._closeDropdown();
                  }
                }
                if (!_this9.options.countrySearch && /^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {
                  e.stopPropagation();
                  if (queryTimer) {
                    clearTimeout(queryTimer);
                  }
                  query += e.key.toLowerCase();
                  _this9._searchForCountry(query);
                  queryTimer = setTimeout(function () {
                    query = "";
                  }, 1e3);
                }
              };
              document.addEventListener("keydown", this._handleKeydownOnDropdown);
              if (this.options.countrySearch) {
                var doFilter = function doFilter() {
                  var inputQuery = _this9.searchInput.value.trim();
                  if (inputQuery) {
                    _this9._filterCountries(inputQuery);
                  } else {
                    _this9._filterCountries("", true);
                  }
                };
                var keyupTimer = null;
                this._handleSearchChange = function () {
                  if (keyupTimer) {
                    clearTimeout(keyupTimer);
                  }
                  keyupTimer = setTimeout(function () {
                    doFilter();
                    keyupTimer = null;
                  }, 100);
                };
                this.searchInput.addEventListener("input", this._handleSearchChange);
                this.searchInput.addEventListener("click", function (e) {
                  return e.stopPropagation();
                });
              }
            }
            //* Hidden search (countrySearch disabled): Find the first list item whose name starts with the query string.
          }, {
            key: "_searchForCountry",
            value: function _searchForCountry(query) {
              for (var _i8 = 0; _i8 < this.countries.length; _i8++) {
                var _c4 = this.countries[_i8];
                var startsWith = _c4.name.substr(0, query.length).toLowerCase() === query;
                if (startsWith) {
                  var listItem = _c4.nodeById[this.id];
                  this._highlightListItem(listItem, false);
                  this._scrollTo(listItem);
                  break;
                }
              }
            }
            //* Country search enabled: Filter the countries according to the search query.
          }, {
            key: "_filterCountries",
            value: function _filterCountries(query) {
              var isReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
              var noCountriesAddedYet = true;
              this.countryList.innerHTML = "";
              var normalisedQuery = normaliseString(query);
              for (var _i9 = 0; _i9 < this.countries.length; _i9++) {
                var _c5 = this.countries[_i9];
                var normalisedCountryName = normaliseString(_c5.name);
                var countryInitials = _c5.name.split(/[^a-zA-ZÀ-ÿа-яА-Я]/).map(function (word) {
                  return word[0];
                }).join("").toLowerCase();
                var fullDialCode = "+".concat(_c5.dialCode);
                if (isReset || normalisedCountryName.includes(normalisedQuery) || fullDialCode.includes(normalisedQuery) || _c5.iso2.includes(normalisedQuery) || countryInitials.includes(normalisedQuery)) {
                  var listItem = _c5.nodeById[this.id];
                  if (listItem) {
                    this.countryList.appendChild(listItem);
                  }
                  if (noCountriesAddedYet) {
                    this._highlightListItem(listItem, false);
                    noCountriesAddedYet = false;
                  }
                }
              }
              if (noCountriesAddedYet) {
                this._highlightListItem(null, false);
              }
              this.countryList.scrollTop = 0;
              this._updateSearchResultsText();
            }
            //* Update search results text (for a11y).
          }, {
            key: "_updateSearchResultsText",
            value: function _updateSearchResultsText() {
              var i18n = this.options.i18n;
              var count = this.countryList.childElementCount;
              var searchText;
              if (count === 0) {
                searchText = i18n.zeroSearchResults;
              } else if (count === 1) {
                searchText = i18n.oneSearchResult;
              } else {
                searchText = i18n.multipleSearchResults.replace("${count}", count.toString());
              }
              this.searchResultsA11yText.textContent = searchText;
            }
            //* Highlight the next/prev item in the list (and ensure it is visible).
          }, {
            key: "_handleUpDownKey",
            value: function _handleUpDownKey(key) {
              var _this$highlightedItem, _this$highlightedItem2;
              var next = key === "ArrowUp" ? (_this$highlightedItem = this.highlightedItem) === null || _this$highlightedItem === void 0 ? void 0 : _this$highlightedItem.previousElementSibling : (_this$highlightedItem2 = this.highlightedItem) === null || _this$highlightedItem2 === void 0 ? void 0 : _this$highlightedItem2.nextElementSibling;
              if (!next && this.countryList.childElementCount > 1) {
                next = key === "ArrowUp" ? this.countryList.lastElementChild : this.countryList.firstElementChild;
              }
              if (next) {
                this._scrollTo(next);
                this._highlightListItem(next, false);
              }
            }
            //* Select the currently highlighted item.
          }, {
            key: "_handleEnterKey",
            value: function _handleEnterKey() {
              if (this.highlightedItem) {
                this._selectListItem(this.highlightedItem);
              }
            }
            //* Update the input's value to the given val (format first if possible)
            //* NOTE: this is called from _setInitialState, handleUtils and setNumber.
          }, {
            key: "_updateValFromNumber",
            value: function _updateValFromNumber(fullNumber) {
              var number = fullNumber;
              if (this.options.formatOnDisplay && intlTelInput.utils && this.selectedCountryData) {
                var useNational = this.options.nationalMode || number.charAt(0) !== "+" && !this.options.separateDialCode;
                var _intlTelInput$utils$n = intlTelInput.utils.numberFormat,
                  NATIONAL = _intlTelInput$utils$n.NATIONAL,
                  INTERNATIONAL = _intlTelInput$utils$n.INTERNATIONAL;
                var format = useNational ? NATIONAL : INTERNATIONAL;
                number = intlTelInput.utils.formatNumber(number, this.selectedCountryData.iso2, format);
              }
              number = this._beforeSetNumber(number);
              this.telInput.value = number;
            }
            //* Check if need to select a new country based on the given number
            //* Note: called from _setInitialState, keyup handler, setNumber.
          }, {
            key: "_updateCountryFromNumber",
            value: function _updateCountryFromNumber(fullNumber) {
              var iso2 = this._getCountryFromNumber(fullNumber);
              if (iso2 !== null) {
                return this._setCountry(iso2);
              }
              return false;
            }
          }, {
            key: "_getCountryFromNumber",
            value: function _getCountryFromNumber(fullNumber) {
              var plusIndex = fullNumber.indexOf("+");
              var number = plusIndex ? fullNumber.substring(plusIndex) : fullNumber;
              var selectedDialCode = this.selectedCountryData.dialCode;
              var isNanp = selectedDialCode === "1";
              if (number && isNanp && number.charAt(0) !== "+") {
                if (number.charAt(0) !== "1") {
                  number = "1".concat(number);
                }
                number = "+".concat(number);
              }
              if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== "+") {
                number = "+".concat(selectedDialCode).concat(number);
              }
              var dialCode = this._getDialCode(number, true);
              var numeric = getNumeric(number);
              if (dialCode) {
                var iso2Codes = this.dialCodeToIso2Map[getNumeric(dialCode)];
                var alreadySelected = iso2Codes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;
                var isRegionlessNanpNumber = selectedDialCode === "1" && isRegionlessNanp(numeric);
                if (!isRegionlessNanpNumber && !alreadySelected) {
                  for (var j = 0; j < iso2Codes.length; j++) {
                    if (iso2Codes[j]) {
                      return iso2Codes[j];
                    }
                  }
                }
              } else if (number.charAt(0) === "+" && numeric.length) {
                return "";
              } else if ((!number || number === "+") && !this.selectedCountryData.iso2) {
                return this.defaultCountry;
              }
              return null;
            }
            //* Remove highlighting from other list items and highlight the given item.
          }, {
            key: "_highlightListItem",
            value: function _highlightListItem(listItem, shouldFocus) {
              var prevItem = this.highlightedItem;
              if (prevItem) {
                prevItem.classList.remove("iti__highlight");
                prevItem.setAttribute("aria-selected", "false");
              }
              this.highlightedItem = listItem;
              if (this.highlightedItem) {
                this.highlightedItem.classList.add("iti__highlight");
                this.highlightedItem.setAttribute("aria-selected", "true");
                var activeDescendant = this.highlightedItem.getAttribute("id") || "";
                this.selectedCountry.setAttribute("aria-activedescendant", activeDescendant);
                if (this.options.countrySearch) {
                  this.searchInput.setAttribute("aria-activedescendant", activeDescendant);
                }
              }
              if (shouldFocus) {
                this.highlightedItem.focus();
              }
            }
            //* Find the country data for the given iso2 code
            //* the ignoreOnlyCountriesOption is only used during init() while parsing the onlyCountries array
          }, {
            key: "_getCountryData",
            value: function _getCountryData(iso2, allowFail) {
              for (var _i10 = 0; _i10 < this.countries.length; _i10++) {
                if (this.countries[_i10].iso2 === iso2) {
                  return this.countries[_i10];
                }
              }
              if (allowFail) {
                return null;
              }
              throw new Error("No country data for '".concat(iso2, "'"));
            }
            //* Update the selected country, dial code (if separateDialCode), placeholder, title, and active list item.
            //* Note: called from _setInitialState, _updateCountryFromNumber, _selectListItem, setCountry.
          }, {
            key: "_setCountry",
            value: function _setCountry(iso2) {
              var _this$options7 = this.options,
                separateDialCode = _this$options7.separateDialCode,
                showFlags = _this$options7.showFlags,
                i18n = _this$options7.i18n;
              var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};
              this.selectedCountryData = iso2 ? this._getCountryData(iso2, false) || {} : {};
              if (this.selectedCountryData.iso2) {
                this.defaultCountry = this.selectedCountryData.iso2;
              }
              if (this.selectedCountryInner) {
                var flagClass = "";
                var a11yText = "";
                if (iso2 && showFlags) {
                  flagClass = "iti__flag iti__".concat(iso2);
                  a11yText = "".concat(this.selectedCountryData.name, " +").concat(this.selectedCountryData.dialCode);
                } else {
                  flagClass = "iti__flag iti__globe";
                  a11yText = i18n.noCountrySelected;
                }
                this.selectedCountryInner.className = flagClass;
                this.selectedCountryA11yText.textContent = a11yText;
              }
              this._setSelectedCountryTitleAttribute(iso2, separateDialCode);
              if (separateDialCode) {
                var dialCode = this.selectedCountryData.dialCode ? "+".concat(this.selectedCountryData.dialCode) : "";
                this.selectedDialCode.innerHTML = dialCode;
                this._updateInputPadding();
              }
              this._updatePlaceholder();
              this._updateMaxLength();
              return prevCountry.iso2 !== iso2;
            }
            //* Update the input padding to make space for the selected country/dial code.
          }, {
            key: "_updateInputPadding",
            value: function _updateInputPadding() {
              if (this.selectedCountry) {
                var selectedCountryWidth = this.selectedCountry.offsetWidth || this._getHiddenSelectedCountryWidth();
                var inputPadding = selectedCountryWidth + 6;
                if (this.showSelectedCountryOnLeft) {
                  this.telInput.style.paddingLeft = "".concat(inputPadding, "px");
                } else {
                  this.telInput.style.paddingRight = "".concat(inputPadding, "px");
                }
              }
            }
            //* Update the maximum valid number length for the currently selected country.
          }, {
            key: "_updateMaxLength",
            value: function _updateMaxLength() {
              var _this$options8 = this.options,
                strictMode = _this$options8.strictMode,
                placeholderNumberType = _this$options8.placeholderNumberType,
                validationNumberType = _this$options8.validationNumberType;
              var iso2 = this.selectedCountryData.iso2;
              if (strictMode && intlTelInput.utils) {
                if (iso2) {
                  var numberType = intlTelInput.utils.numberType[placeholderNumberType];
                  var exampleNumber = intlTelInput.utils.getExampleNumber(iso2, false, numberType, true);
                  var validNumber = exampleNumber;
                  while (intlTelInput.utils.isPossibleNumber(exampleNumber, iso2, validationNumberType)) {
                    validNumber = exampleNumber;
                    exampleNumber += "0";
                  }
                  var coreNumber = intlTelInput.utils.getCoreNumber(validNumber, iso2);
                  this.maxCoreNumberLength = coreNumber.length;
                  if (iso2 === "by") {
                    this.maxCoreNumberLength = coreNumber.length + 1;
                  }
                } else {
                  this.maxCoreNumberLength = null;
                }
              }
            }
          }, {
            key: "_setSelectedCountryTitleAttribute",
            value: function _setSelectedCountryTitleAttribute() {
              var iso2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
              var separateDialCode = arguments.length > 1 ? arguments[1] : undefined;
              if (!this.selectedCountry) {
                return;
              }
              var title;
              if (iso2 && !separateDialCode) {
                title = "".concat(this.selectedCountryData.name, ": +").concat(this.selectedCountryData.dialCode);
              } else if (iso2) {
                title = this.selectedCountryData.name;
              } else {
                title = "Unknown";
              }
              this.selectedCountry.setAttribute("title", title);
            }
            //* When the input is in a hidden container during initialisation, we must inject some markup
            //* into the end of the DOM to calculate the correct offsetWidth.
            //* NOTE: this is only used when separateDialCode is enabled, so countryContainer and selectedCountry
            //* will definitely exist.
          }, {
            key: "_getHiddenSelectedCountryWidth",
            value: function _getHiddenSelectedCountryWidth() {
              if (this.telInput.parentNode) {
                var containerClone = this.telInput.parentNode.cloneNode(false);
                containerClone.style.visibility = "hidden";
                document.body.appendChild(containerClone);
                var countryContainerClone = this.countryContainer.cloneNode();
                containerClone.appendChild(countryContainerClone);
                var selectedCountryClone = this.selectedCountry.cloneNode(true);
                countryContainerClone.appendChild(selectedCountryClone);
                var width = selectedCountryClone.offsetWidth;
                document.body.removeChild(containerClone);
                return width;
              }
              return 0;
            }
            //* Update the input placeholder to an example number from the currently selected country.
          }, {
            key: "_updatePlaceholder",
            value: function _updatePlaceholder() {
              var _this$options9 = this.options,
                autoPlaceholder = _this$options9.autoPlaceholder,
                placeholderNumberType = _this$options9.placeholderNumberType,
                nationalMode = _this$options9.nationalMode,
                customPlaceholder = _this$options9.customPlaceholder;
              var shouldSetPlaceholder = autoPlaceholder === "aggressive" || !this.hadInitialPlaceholder && autoPlaceholder === "polite";
              if (intlTelInput.utils && shouldSetPlaceholder) {
                var numberType = intlTelInput.utils.numberType[placeholderNumberType];
                var placeholder = this.selectedCountryData.iso2 ? intlTelInput.utils.getExampleNumber(this.selectedCountryData.iso2, nationalMode, numberType) : "";
                placeholder = this._beforeSetNumber(placeholder);
                if (typeof customPlaceholder === "function") {
                  placeholder = customPlaceholder(placeholder, this.selectedCountryData);
                }
                this.telInput.setAttribute("placeholder", placeholder);
              }
            }
            //* Called when the user selects a list item from the dropdown.
          }, {
            key: "_selectListItem",
            value: function _selectListItem(listItem) {
              var countryChanged = this._setCountry(listItem.getAttribute("data-country-code"));
              this._closeDropdown();
              this._updateDialCode(listItem.getAttribute("data-dial-code"));
              this.telInput.focus();
              if (countryChanged) {
                this._triggerCountryChange();
              }
            }
            //* Close the dropdown and unbind any listeners.
          }, {
            key: "_closeDropdown",
            value: function _closeDropdown() {
              this.dropdownContent.classList.add("iti__hide");
              this.selectedCountry.setAttribute("aria-expanded", "false");
              this.selectedCountry.removeAttribute("aria-activedescendant");
              if (this.highlightedItem) {
                this.highlightedItem.setAttribute("aria-selected", "false");
              }
              if (this.options.countrySearch) {
                this.searchInput.removeAttribute("aria-activedescendant");
              }
              this.dropdownArrow.classList.remove("iti__arrow--up");
              document.removeEventListener("keydown", this._handleKeydownOnDropdown);
              if (this.options.countrySearch) {
                this.searchInput.removeEventListener("input", this._handleSearchChange);
              }
              document.documentElement.removeEventListener("click", this._handleClickOffToClose);
              this.countryList.removeEventListener("mouseover", this._handleMouseoverCountryList);
              this.countryList.removeEventListener("click", this._handleClickCountryList);
              if (this.options.dropdownContainer) {
                if (!this.options.useFullscreenPopup) {
                  window.removeEventListener("scroll", this._handleWindowScroll);
                }
                if (this.dropdown.parentNode) {
                  this.dropdown.parentNode.removeChild(this.dropdown);
                }
              }
              if (this._handlePageLoad) {
                window.removeEventListener("load", this._handlePageLoad);
              }
              this._trigger("close:countrydropdown");
            }
            //* Check if an element is visible within it's container, else scroll until it is.
          }, {
            key: "_scrollTo",
            value: function _scrollTo(element) {
              var container = this.countryList;
              var scrollTop = document.documentElement.scrollTop;
              var containerHeight = container.offsetHeight;
              var containerTop = container.getBoundingClientRect().top + scrollTop;
              var containerBottom = containerTop + containerHeight;
              var elementHeight = element.offsetHeight;
              var elementTop = element.getBoundingClientRect().top + scrollTop;
              var elementBottom = elementTop + elementHeight;
              var newScrollTop = elementTop - containerTop + container.scrollTop;
              if (elementTop < containerTop) {
                container.scrollTop = newScrollTop;
              } else if (elementBottom > containerBottom) {
                var heightDifference = containerHeight - elementHeight;
                container.scrollTop = newScrollTop - heightDifference;
              }
            }
            //* Replace any existing dial code with the new one
            //* Note: called from _selectListItem and setCountry
          }, {
            key: "_updateDialCode",
            value: function _updateDialCode(newDialCodeBare) {
              var inputVal = this.telInput.value;
              var newDialCode = "+".concat(newDialCodeBare);
              var newNumber;
              if (inputVal.charAt(0) === "+") {
                var prevDialCode = this._getDialCode(inputVal);
                if (prevDialCode) {
                  newNumber = inputVal.replace(prevDialCode, newDialCode);
                } else {
                  newNumber = newDialCode;
                }
                this.telInput.value = newNumber;
              }
            }
            //* Try and extract a valid international dial code from a full telephone number.
            //* Note: returns the raw string inc plus character and any whitespace/dots etc.
          }, {
            key: "_getDialCode",
            value: function _getDialCode(number, includeAreaCode) {
              var dialCode = "";
              if (number.charAt(0) === "+") {
                var numericChars = "";
                for (var _i11 = 0; _i11 < number.length; _i11++) {
                  var _c6 = number.charAt(_i11);
                  if (!isNaN(parseInt(_c6, 10))) {
                    numericChars += _c6;
                    if (includeAreaCode) {
                      if (this.dialCodeToIso2Map[numericChars]) {
                        dialCode = number.substr(0, _i11 + 1);
                      }
                    } else {
                      if (this.dialCodes[numericChars]) {
                        dialCode = number.substr(0, _i11 + 1);
                        break;
                      }
                    }
                    if (numericChars.length === this.dialCodeMaxLen) {
                      break;
                    }
                  }
                }
              }
              return dialCode;
            }
            //* Get the input val, adding the dial code if separateDialCode is enabled.
          }, {
            key: "_getFullNumber",
            value: function _getFullNumber(overrideVal) {
              var val = overrideVal || this.telInput.value.trim();
              var dialCode = this.selectedCountryData.dialCode;
              var prefix;
              var numericVal = getNumeric(val);
              if (this.options.separateDialCode && val.charAt(0) !== "+" && dialCode && numericVal) {
                prefix = "+".concat(dialCode);
              } else {
                prefix = "";
              }
              return prefix + val;
            }
            //* Remove the dial code if separateDialCode is enabled also cap the length if the input has a maxlength attribute
          }, {
            key: "_beforeSetNumber",
            value: function _beforeSetNumber(fullNumber) {
              var number = fullNumber;
              if (this.options.separateDialCode) {
                var dialCode = this._getDialCode(number);
                if (dialCode) {
                  dialCode = "+".concat(this.selectedCountryData.dialCode);
                  var start = number[dialCode.length] === " " || number[dialCode.length] === "-" ? dialCode.length + 1 : dialCode.length;
                  number = number.substr(start);
                }
              }
              return this._cap(number);
            }
            //* Trigger the 'countrychange' event.
          }, {
            key: "_triggerCountryChange",
            value: function _triggerCountryChange() {
              this._trigger("countrychange");
            }
            //* Format the number as the user types.
          }, {
            key: "_formatNumberAsYouType",
            value: function _formatNumberAsYouType() {
              var val = this._getFullNumber();
              var result = intlTelInput.utils ? intlTelInput.utils.formatNumberAsYouType(val, this.selectedCountryData.iso2) : val;
              var dialCode = this.selectedCountryData.dialCode;
              if (this.options.separateDialCode && this.telInput.value.charAt(0) !== "+" && result.includes("+".concat(dialCode))) {
                var afterDialCode = result.split("+".concat(dialCode))[1] || "";
                return afterDialCode.trim();
              }
              return result;
            }
            //**************************
            //*  SECRET PUBLIC METHODS
            //**************************
            //* This is called when the geoip call returns.
          }, {
            key: "handleAutoCountry",
            value: function handleAutoCountry() {
              if (this.options.initialCountry === "auto" && intlTelInput.autoCountry) {
                this.defaultCountry = intlTelInput.autoCountry;
                var hasSelectedCountryOrGlobe = this.selectedCountryData.iso2 || this.selectedCountryInner.classList.contains("iti__globe");
                if (!hasSelectedCountryOrGlobe) {
                  this.setCountry(this.defaultCountry);
                }
                this.resolveAutoCountryPromise();
              }
            }
            //* This is called when the utils request completes.
          }, {
            key: "handleUtils",
            value: function handleUtils() {
              if (intlTelInput.utils) {
                if (this.telInput.value) {
                  this._updateValFromNumber(this.telInput.value);
                }
                if (this.selectedCountryData.iso2) {
                  this._updatePlaceholder();
                  this._updateMaxLength();
                }
              }
              this.resolveUtilsScriptPromise();
            }
            //********************
            //*  PUBLIC METHODS
            //********************
            //* Remove plugin.
          }, {
            key: "destroy",
            value: function destroy() {
              var _wrapper$parentNode, _wrapper$parentNode2;
              var _this$options10 = this.options,
                allowDropdown = _this$options10.allowDropdown,
                separateDialCode = _this$options10.separateDialCode;
              if (allowDropdown) {
                this._closeDropdown();
                this.selectedCountry.removeEventListener("click", this._handleClickSelectedCountry);
                this.countryContainer.removeEventListener("keydown", this._handleCountryContainerKeydown);
                var label = this.telInput.closest("label");
                if (label) {
                  label.removeEventListener("click", this._handleLabelClick);
                }
              }
              var form = this.telInput.form;
              if (this._handleHiddenInputSubmit && form) {
                form.removeEventListener("submit", this._handleHiddenInputSubmit);
              }
              this.telInput.removeEventListener("input", this._handleInputEvent);
              if (this._handleKeydownEvent) {
                this.telInput.removeEventListener("keydown", this._handleKeydownEvent);
              }
              this.telInput.removeAttribute("data-intl-tel-input-id");
              if (separateDialCode) {
                if (this.isRTL) {
                  this.telInput.style.paddingRight = this.originalPaddingRight;
                } else {
                  this.telInput.style.paddingLeft = this.originalPaddingLeft;
                }
              }
              var wrapper = this.telInput.parentNode;
              wrapper === null || wrapper === void 0 || (_wrapper$parentNode = wrapper.parentNode) === null || _wrapper$parentNode === void 0 || _wrapper$parentNode.insertBefore(this.telInput, wrapper);
              wrapper === null || wrapper === void 0 || (_wrapper$parentNode2 = wrapper.parentNode) === null || _wrapper$parentNode2 === void 0 || _wrapper$parentNode2.removeChild(wrapper);
              delete intlTelInput.instances[this.id];
            }
            //* Get the extension from the current number.
          }, {
            key: "getExtension",
            value: function getExtension() {
              if (intlTelInput.utils) {
                return intlTelInput.utils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);
              }
              return "";
            }
            //* Format the number to the given format.
          }, {
            key: "getNumber",
            value: function getNumber(format) {
              if (intlTelInput.utils) {
                var iso2 = this.selectedCountryData.iso2;
                return intlTelInput.utils.formatNumber(this._getFullNumber(), iso2, format);
              }
              return "";
            }
            //* Get the type of the entered number e.g. landline/mobile.
          }, {
            key: "getNumberType",
            value: function getNumberType() {
              if (intlTelInput.utils) {
                return intlTelInput.utils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);
              }
              return -99;
            }
            //* Get the country data for the currently selected country.
          }, {
            key: "getSelectedCountryData",
            value: function getSelectedCountryData() {
              return this.selectedCountryData;
            }
            //* Get the validation error.
          }, {
            key: "getValidationError",
            value: function getValidationError() {
              if (intlTelInput.utils) {
                var iso2 = this.selectedCountryData.iso2;
                return intlTelInput.utils.getValidationError(this._getFullNumber(), iso2);
              }
              return -99;
            }
            //* Validate the input val
          }, {
            key: "isValidNumber",
            value: function isValidNumber() {
              if (!this.selectedCountryData.iso2) {
                return false;
              }
              var val = this._getFullNumber();
              var alphaCharPosition = val.search(/(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])/);
              if (alphaCharPosition > -1) {
                var beforeAlphaChar = val.substring(0, alphaCharPosition);
                var beforeAlphaIsValid = this._utilsIsPossibleNumber(beforeAlphaChar);
                var isValid = this._utilsIsPossibleNumber(val);
                return beforeAlphaIsValid && isValid;
              }
              return this._utilsIsPossibleNumber(val);
            }
          }, {
            key: "_utilsIsPossibleNumber",
            value: function _utilsIsPossibleNumber(val) {
              return intlTelInput.utils ? intlTelInput.utils.isPossibleNumber(val, this.selectedCountryData.iso2, this.options.validationNumberType) : null;
            }
            //* Validate the input val (precise)
          }, {
            key: "isValidNumberPrecise",
            value: function isValidNumberPrecise() {
              if (!this.selectedCountryData.iso2) {
                return false;
              }
              var val = this._getFullNumber();
              var alphaCharPosition = val.search(/(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])/);
              if (alphaCharPosition > -1) {
                var beforeAlphaChar = val.substring(0, alphaCharPosition);
                var beforeAlphaIsValid = this._utilsIsValidNumber(beforeAlphaChar);
                var isValid = this._utilsIsValidNumber(val);
                return beforeAlphaIsValid && isValid;
              }
              return this._utilsIsValidNumber(val);
            }
          }, {
            key: "_utilsIsValidNumber",
            value: function _utilsIsValidNumber(val) {
              return intlTelInput.utils ? intlTelInput.utils.isValidNumber(val, this.selectedCountryData.iso2) : null;
            }
            //* Update the selected country, and update the input val accordingly.
          }, {
            key: "setCountry",
            value: function setCountry(iso2) {
              var iso2Lower = iso2 === null || iso2 === void 0 ? void 0 : iso2.toLowerCase();
              var currentCountry = this.selectedCountryData.iso2;
              var isCountryChange = iso2 && iso2Lower !== currentCountry || !iso2 && currentCountry;
              if (isCountryChange) {
                this._setCountry(iso2Lower);
                this._updateDialCode(this.selectedCountryData.dialCode);
                this._triggerCountryChange();
              }
            }
            //* Set the input value and update the country.
          }, {
            key: "setNumber",
            value: function setNumber(number) {
              var countryChanged = this._updateCountryFromNumber(number);
              this._updateValFromNumber(number);
              if (countryChanged) {
                this._triggerCountryChange();
              }
              this._trigger("input", {
                isSetNumber: true
              });
            }
            //* Set the placeholder number typ
          }, {
            key: "setPlaceholderNumberType",
            value: function setPlaceholderNumberType(type) {
              this.options.placeholderNumberType = type;
              this._updatePlaceholder();
            }
          }, {
            key: "setDisabled",
            value: function setDisabled(disabled) {
              this.telInput.disabled = disabled;
              if (disabled) {
                this.selectedCountry.setAttribute("disabled", "true");
              } else {
                this.selectedCountry.removeAttribute("disabled");
              }
            }
          }]);
        }();
        var loadUtils = function loadUtils(source) {
          if (!intlTelInput.utils && !intlTelInput.startedLoadingUtilsScript) {
            var loadCall;
            if (typeof source === "string") {
              loadCall = Promise.reject(new Error("INTENTIONALLY BROKEN: this build of intl-tel-input includes the utilities module inline, but it has incorrectly attempted to load the utilities separately. If you are seeing this message, something is broken!"));
            } else if (typeof source === "function") {
              try {
                loadCall = source();
                if (!(loadCall instanceof Promise)) {
                  throw new TypeError("The function passed to loadUtils must return a promise for the utilities module, not ".concat(_typeof(loadCall)));
                }
              } catch (error) {
                return Promise.reject(error);
              }
            } else {
              return Promise.reject(new TypeError("The argument passed to loadUtils must be a URL string or a function that returns a promise for the utilities module, not ".concat(_typeof(source))));
            }
            intlTelInput.startedLoadingUtilsScript = true;
            return loadCall.then(function (module) {
              var utils2 = module === null || module === void 0 ? void 0 : module.default;
              if (!utils2 || _typeof(utils2) !== "object") {
                if (typeof source === "string") {
                  throw new TypeError("The module loaded from ".concat(source, " did not set utils as its default export."));
                } else {
                  throw new TypeError("The loader function passed to loadUtils did not resolve to a module object with utils as its default export.");
                }
              }
              intlTelInput.utils = utils2;
              forEachInstance("handleUtils");
              return true;
            }).catch(function (error) {
              forEachInstance("rejectUtilsScriptPromise", error);
              throw error;
            });
          }
          return null;
        };
        var intlTelInput = Object.assign(function (input, options) {
          var iti = new Iti(input, options);
          iti._init();
          input.setAttribute("data-intl-tel-input-id", iti.id.toString());
          intlTelInput.instances[iti.id] = iti;
          return iti;
        }, {
          defaults: defaults,
          //* Using a static var like this allows us to mock it in the tests.
          documentReady: function documentReady() {
            return document.readyState === "complete";
          },
          //* Get the country data object.
          getCountryData: function getCountryData() {
            return data_default;
          },
          //* A getter for the plugin instance.
          getInstance: function getInstance(input) {
            var id2 = input.getAttribute("data-intl-tel-input-id");
            return id2 ? intlTelInput.instances[id2] : null;
          },
          //* A map from instance ID to instance object.
          instances: {},
          loadUtils: loadUtils,
          startedLoadingUtilsScript: false,
          startedLoadingAutoCountry: false,
          version: "24.7.0"
        });
        var intl_tel_input_default = intlTelInput;

        // build/js/utils.js
        (function () {
          var k = this || self;
          function m(a, b) {
            a = a.split(".");
            var c = k;
            a[0] in c || "undefined" == typeof c.execScript || c.execScript("var " + a[0]);
            for (var d; a.length && (d = a.shift());) a.length || void 0 === b ? c[d] && c[d] !== Object.prototype[d] ? c = c[d] : c = c[d] = {} : c[d] = b;
          }
          function n(a, b) {
            function c() {}
            c.prototype = b.prototype;
            a.ma = b.prototype;
            a.prototype = new c();
            a.prototype.constructor = a;
            a.sa = function (d, e, f) {
              for (var g = Array(arguments.length - 2), h = 2; h < arguments.length; h++) g[h - 2] = arguments[h];
              return b.prototype[e].apply(d, g);
            };
          }
          function aa(a) {
            var b = [];
            var c = 0;
            for (var d in a) b[c++] = a[d];
            return b;
          }
          var ca = /*#__PURE__*/function () {
              function ca(a) {
                _classCallCheck(this, ca);
                if (ba !== ba) throw Error("SafeUrl is not meant to be built directly");
                this.g = a;
              }
              return _createClass(ca, [{
                key: "toString",
                value: function toString() {
                  return this.g.toString();
                }
              }]);
            }(),
            ba = {};
          new ca("about:invalid#zClosurez");
          new ca("about:blank");
          var ea = {};
          var fa = /*#__PURE__*/function () {
            function fa() {
              _classCallCheck(this, fa);
              if (ea !== ea) throw Error("SafeStyle is not meant to be built directly");
            }
            return _createClass(fa, [{
              key: "toString",
              value: function toString() {
                return "".toString();
              }
            }]);
          }();
          new fa();
          var ha = {};
          var ia = /*#__PURE__*/function () {
            function ia() {
              _classCallCheck(this, ia);
              if (ha !== ha) throw Error("SafeStyleSheet is not meant to be built directly");
            }
            return _createClass(ia, [{
              key: "toString",
              value: function toString() {
                return "".toString();
              }
            }]);
          }();
          new ia();
          var ja = {};
          var ka = /*#__PURE__*/function () {
            function ka() {
              _classCallCheck(this, ka);
              var a = k.trustedTypes && k.trustedTypes.emptyHTML || "";
              if (ja !== ja) throw Error("SafeHtml is not meant to be built directly");
              this.g = a;
            }
            return _createClass(ka, [{
              key: "toString",
              value: function toString() {
                return this.g.toString();
              }
            }]);
          }();
          new ka();
          function la(a, b) {
            this.g = a;
            this.l = !!b.aa;
            this.h = b.i;
            this.s = b.type;
            this.o = false;
            switch (this.h) {
              case ma:
              case na:
              case oa:
              case pa:
              case qa:
              case ra:
              case sa:
                this.o = true;
            }
            this.j = b.defaultValue;
          }
          var sa = 1,
            ra = 2,
            ma = 3,
            na = 4,
            oa = 6,
            pa = 16,
            qa = 18;
          function ta(a, b) {
            this.h = a;
            this.g = {};
            for (a = 0; a < b.length; a++) {
              var c = b[a];
              this.g[c.g] = c;
            }
          }
          function ua(a) {
            a = aa(a.g);
            a.sort(function (b, c) {
              return b.g - c.g;
            });
            return a;
          }
          function p() {
            this.h = {};
            this.j = this.m().g;
            this.g = this.l = null;
          }
          p.prototype.has = function (a) {
            return q(this, a.g);
          };
          p.prototype.get = function (a, b) {
            return r(this, a.g, b);
          };
          p.prototype.set = function (a, b) {
            t(this, a.g, b);
          };
          p.prototype.add = function (a, b) {
            va(this, a.g, b);
          };
          function wa(a, b) {
            for (var c = ua(a.m()), d = 0; d < c.length; d++) {
              var e = c[d],
                f = e.g;
              if (q(b, f)) {
                a.g && delete a.g[e.g];
                var g = 11 == e.h || 10 == e.h;
                if (e.l) {
                  e = u(b, f);
                  for (var h = 0; h < e.length; h++) va(a, f, g ? e[h].clone() : e[h]);
                } else e = v(b, f), g ? (g = v(a, f)) ? wa(g, e) : t(a, f, e.clone()) : t(a, f, e);
              }
            }
          }
          p.prototype.clone = function () {
            var a = new this.constructor();
            a != this && (a.h = {}, a.g && (a.g = {}), wa(a, this));
            return a;
          };
          function q(a, b) {
            return null != a.h[b];
          }
          function v(a, b) {
            var c = a.h[b];
            if (null == c) return null;
            if (a.l) {
              if (!(b in a.g)) {
                var d = a.l,
                  e = a.j[b];
                if (null != c) if (e.l) {
                  for (var f = [], g = 0; g < c.length; g++) f[g] = d.h(e, c[g]);
                  c = f;
                } else c = d.h(e, c);
                return a.g[b] = c;
              }
              return a.g[b];
            }
            return c;
          }
          function r(a, b, c) {
            var d = v(a, b);
            return a.j[b].l ? d[c || 0] : d;
          }
          function w(a, b) {
            if (q(a, b)) a = r(a, b);else a: {
              a = a.j[b];
              if (void 0 === a.j) if (b = a.s, b === Boolean) a.j = false;else if (b === Number) a.j = 0;else if (b === String) a.j = a.o ? "0" : "";else {
                a = new b();
                break a;
              }
              a = a.j;
            }
            return a;
          }
          function u(a, b) {
            return v(a, b) || [];
          }
          function x(a, b) {
            return a.j[b].l ? q(a, b) ? a.h[b].length : 0 : q(a, b) ? 1 : 0;
          }
          function t(a, b, c) {
            a.h[b] = c;
            a.g && (a.g[b] = c);
          }
          function va(a, b, c) {
            a.h[b] || (a.h[b] = []);
            a.h[b].push(c);
            a.g && delete a.g[b];
          }
          function y(a, b) {
            var c = [],
              d;
            for (d in b) 0 != d && c.push(new la(d, b[d]));
            return new ta(a, c);
          }
          function z() {}
          z.prototype.g = function (a) {
            new a.h();
            throw Error("Unimplemented");
          };
          z.prototype.h = function (a, b) {
            if (11 == a.h || 10 == a.h) return b instanceof p ? b : this.g(a.s.prototype.m(), b);
            if (14 == a.h) return "string" === typeof b && xa.test(b) && (a = Number(b), 0 < a) ? a : b;
            if (!a.o) return b;
            a = a.s;
            if (a === String) {
              if ("number" === typeof b) return String(b);
            } else if (a === Number && "string" === typeof b && ("Infinity" === b || "-Infinity" === b || "NaN" === b || xa.test(b))) return Number(b);
            return b;
          };
          var xa = /^-?[0-9]+$/;
          function ya() {}
          n(ya, z);
          ya.prototype.g = function (a, b) {
            a = new a.h();
            a.l = this;
            a.h = b;
            a.g = {};
            return a;
          };
          function B() {}
          n(B, ya);
          B.prototype.h = function (a, b) {
            return 8 == a.h ? !!b : z.prototype.h.apply(this, arguments);
          };
          B.prototype.g = function (a, b) {
            return B.ma.g.call(this, a, b);
          };
          function C(a, b) {
            null != a && this.g.apply(this, arguments);
          }
          C.prototype.h = "";
          C.prototype.set = function (a) {
            this.h = "" + a;
          };
          C.prototype.g = function (a, b, c) {
            this.h += String(a);
            if (null != b) for (var d = 1; d < arguments.length; d++) this.h += arguments[d];
            return this;
          };
          function D(a) {
            a.h = "";
          }
          C.prototype.toString = function () {
            return this.h;
          };
          function E() {
            p.call(this);
          }
          n(E, p);
          var za = null;
          function F() {
            p.call(this);
          }
          n(F, p);
          var Aa = null;
          function G() {
            p.call(this);
          }
          n(G, p);
          var Ba = null;
          E.prototype.m = function () {
            var a = za;
            a || (za = a = y(E, {
              0: {
                name: "NumberFormat",
                ia: "i18n.phonenumbers.NumberFormat"
              },
              1: {
                name: "pattern",
                required: true,
                i: 9,
                type: String
              },
              2: {
                name: "format",
                required: true,
                i: 9,
                type: String
              },
              3: {
                name: "leading_digits_pattern",
                aa: true,
                i: 9,
                type: String
              },
              4: {
                name: "national_prefix_formatting_rule",
                i: 9,
                type: String
              },
              6: {
                name: "national_prefix_optional_when_formatting",
                i: 8,
                defaultValue: false,
                type: Boolean
              },
              5: {
                name: "domestic_carrier_code_formatting_rule",
                i: 9,
                type: String
              }
            }));
            return a;
          };
          E.m = E.prototype.m;
          F.prototype.m = function () {
            var a = Aa;
            a || (Aa = a = y(F, {
              0: {
                name: "PhoneNumberDesc",
                ia: "i18n.phonenumbers.PhoneNumberDesc"
              },
              2: {
                name: "national_number_pattern",
                i: 9,
                type: String
              },
              9: {
                name: "possible_length",
                aa: true,
                i: 5,
                type: Number
              },
              10: {
                name: "possible_length_local_only",
                aa: true,
                i: 5,
                type: Number
              },
              6: {
                name: "example_number",
                i: 9,
                type: String
              }
            }));
            return a;
          };
          F.m = F.prototype.m;
          G.prototype.m = function () {
            var a = Ba;
            a || (Ba = a = y(G, {
              0: {
                name: "PhoneMetadata",
                ia: "i18n.phonenumbers.PhoneMetadata"
              },
              1: {
                name: "general_desc",
                i: 11,
                type: F
              },
              2: {
                name: "fixed_line",
                i: 11,
                type: F
              },
              3: {
                name: "mobile",
                i: 11,
                type: F
              },
              4: {
                name: "toll_free",
                i: 11,
                type: F
              },
              5: {
                name: "premium_rate",
                i: 11,
                type: F
              },
              6: {
                name: "shared_cost",
                i: 11,
                type: F
              },
              7: {
                name: "personal_number",
                i: 11,
                type: F
              },
              8: {
                name: "voip",
                i: 11,
                type: F
              },
              21: {
                name: "pager",
                i: 11,
                type: F
              },
              25: {
                name: "uan",
                i: 11,
                type: F
              },
              27: {
                name: "emergency",
                i: 11,
                type: F
              },
              28: {
                name: "voicemail",
                i: 11,
                type: F
              },
              29: {
                name: "short_code",
                i: 11,
                type: F
              },
              30: {
                name: "standard_rate",
                i: 11,
                type: F
              },
              31: {
                name: "carrier_specific",
                i: 11,
                type: F
              },
              33: {
                name: "sms_services",
                i: 11,
                type: F
              },
              24: {
                name: "no_international_dialling",
                i: 11,
                type: F
              },
              9: {
                name: "id",
                required: true,
                i: 9,
                type: String
              },
              10: {
                name: "country_code",
                i: 5,
                type: Number
              },
              11: {
                name: "international_prefix",
                i: 9,
                type: String
              },
              17: {
                name: "preferred_international_prefix",
                i: 9,
                type: String
              },
              12: {
                name: "national_prefix",
                i: 9,
                type: String
              },
              13: {
                name: "preferred_extn_prefix",
                i: 9,
                type: String
              },
              15: {
                name: "national_prefix_for_parsing",
                i: 9,
                type: String
              },
              16: {
                name: "national_prefix_transform_rule",
                i: 9,
                type: String
              },
              18: {
                name: "same_mobile_and_fixed_line_pattern",
                i: 8,
                defaultValue: false,
                type: Boolean
              },
              19: {
                name: "number_format",
                aa: true,
                i: 11,
                type: E
              },
              20: {
                name: "intl_number_format",
                aa: true,
                i: 11,
                type: E
              },
              22: {
                name: "main_country_for_code",
                i: 8,
                defaultValue: false,
                type: Boolean
              },
              23: {
                name: "leading_digits",
                i: 9,
                type: String
              }
            }));
            return a;
          };
          G.m = G.prototype.m;
          function H() {
            p.call(this);
          }
          n(H, p);
          var Ca = null,
            Da = {
              ra: 0,
              qa: 1,
              pa: 5,
              oa: 10,
              na: 20
            };
          H.prototype.m = function () {
            var a = Ca;
            a || (Ca = a = y(H, {
              0: {
                name: "PhoneNumber",
                ia: "i18n.phonenumbers.PhoneNumber"
              },
              1: {
                name: "country_code",
                required: true,
                i: 5,
                type: Number
              },
              2: {
                name: "national_number",
                required: true,
                i: 4,
                type: Number
              },
              3: {
                name: "extension",
                i: 9,
                type: String
              },
              4: {
                name: "italian_leading_zero",
                i: 8,
                type: Boolean
              },
              8: {
                name: "number_of_leading_zeros",
                i: 5,
                defaultValue: 1,
                type: Number
              },
              5: {
                name: "raw_input",
                i: 9,
                type: String
              },
              6: {
                name: "country_code_source",
                i: 14,
                defaultValue: 0,
                type: Da
              },
              7: {
                name: "preferred_domestic_carrier_code",
                i: 9,
                type: String
              }
            }));
            return a;
          };
          H.ctor = H;
          H.ctor.m = H.prototype.m;
          var I = {
              1: "US AG AI AS BB BM BS CA DM DO GD GU JM KN KY LC MP MS PR SX TC TT VC VG VI".split(" "),
              7: ["RU", "KZ"],
              20: ["EG"],
              27: ["ZA"],
              30: ["GR"],
              31: ["NL"],
              32: ["BE"],
              33: ["FR"],
              34: ["ES"],
              36: ["HU"],
              39: ["IT", "VA"],
              40: ["RO"],
              41: ["CH"],
              43: ["AT"],
              44: ["GB", "GG", "IM", "JE"],
              45: ["DK"],
              46: ["SE"],
              47: ["NO", "SJ"],
              48: ["PL"],
              49: ["DE"],
              51: ["PE"],
              52: ["MX"],
              53: ["CU"],
              54: ["AR"],
              55: ["BR"],
              56: ["CL"],
              57: ["CO"],
              58: ["VE"],
              60: ["MY"],
              61: ["AU", "CC", "CX"],
              62: ["ID"],
              63: ["PH"],
              64: ["NZ"],
              65: ["SG"],
              66: ["TH"],
              81: ["JP"],
              82: ["KR"],
              84: ["VN"],
              86: ["CN"],
              90: ["TR"],
              91: ["IN"],
              92: ["PK"],
              93: ["AF"],
              94: ["LK"],
              95: ["MM"],
              98: ["IR"],
              211: ["SS"],
              212: ["MA", "EH"],
              213: ["DZ"],
              216: ["TN"],
              218: ["LY"],
              220: ["GM"],
              221: ["SN"],
              222: ["MR"],
              223: ["ML"],
              224: ["GN"],
              225: ["CI"],
              226: ["BF"],
              227: ["NE"],
              228: ["TG"],
              229: ["BJ"],
              230: ["MU"],
              231: ["LR"],
              232: ["SL"],
              233: ["GH"],
              234: ["NG"],
              235: ["TD"],
              236: ["CF"],
              237: ["CM"],
              238: ["CV"],
              239: ["ST"],
              240: ["GQ"],
              241: ["GA"],
              242: ["CG"],
              243: ["CD"],
              244: ["AO"],
              245: ["GW"],
              246: ["IO"],
              247: ["AC"],
              248: ["SC"],
              249: ["SD"],
              250: ["RW"],
              251: ["ET"],
              252: ["SO"],
              253: ["DJ"],
              254: ["KE"],
              255: ["TZ"],
              256: ["UG"],
              257: ["BI"],
              258: ["MZ"],
              260: ["ZM"],
              261: ["MG"],
              262: ["RE", "YT"],
              263: ["ZW"],
              264: ["NA"],
              265: ["MW"],
              266: ["LS"],
              267: ["BW"],
              268: ["SZ"],
              269: ["KM"],
              290: ["SH", "TA"],
              291: ["ER"],
              297: ["AW"],
              298: ["FO"],
              299: ["GL"],
              350: ["GI"],
              351: ["PT"],
              352: ["LU"],
              353: ["IE"],
              354: ["IS"],
              355: ["AL"],
              356: ["MT"],
              357: ["CY"],
              358: ["FI", "AX"],
              359: ["BG"],
              370: ["LT"],
              371: ["LV"],
              372: ["EE"],
              373: ["MD"],
              374: ["AM"],
              375: ["BY"],
              376: ["AD"],
              377: ["MC"],
              378: ["SM"],
              380: ["UA"],
              381: ["RS"],
              382: ["ME"],
              383: ["XK"],
              385: ["HR"],
              386: ["SI"],
              387: ["BA"],
              389: ["MK"],
              420: ["CZ"],
              421: ["SK"],
              423: ["LI"],
              500: ["FK"],
              501: ["BZ"],
              502: ["GT"],
              503: ["SV"],
              504: ["HN"],
              505: ["NI"],
              506: ["CR"],
              507: ["PA"],
              508: ["PM"],
              509: ["HT"],
              590: ["GP", "BL", "MF"],
              591: ["BO"],
              592: ["GY"],
              593: ["EC"],
              594: ["GF"],
              595: ["PY"],
              596: ["MQ"],
              597: ["SR"],
              598: ["UY"],
              599: ["CW", "BQ"],
              670: ["TL"],
              672: ["NF"],
              673: ["BN"],
              674: ["NR"],
              675: ["PG"],
              676: ["TO"],
              677: ["SB"],
              678: ["VU"],
              679: ["FJ"],
              680: ["PW"],
              681: ["WF"],
              682: ["CK"],
              683: ["NU"],
              685: ["WS"],
              686: ["KI"],
              687: ["NC"],
              688: ["TV"],
              689: ["PF"],
              690: ["TK"],
              691: ["FM"],
              692: ["MH"],
              800: ["001"],
              808: ["001"],
              850: ["KP"],
              852: ["HK"],
              853: ["MO"],
              855: ["KH"],
              856: ["LA"],
              870: ["001"],
              878: ["001"],
              880: ["BD"],
              881: ["001"],
              882: ["001"],
              883: ["001"],
              886: ["TW"],
              888: ["001"],
              960: ["MV"],
              961: ["LB"],
              962: ["JO"],
              963: ["SY"],
              964: ["IQ"],
              965: ["KW"],
              966: ["SA"],
              967: ["YE"],
              968: ["OM"],
              970: ["PS"],
              971: ["AE"],
              972: ["IL"],
              973: ["BH"],
              974: ["QA"],
              975: ["BT"],
              976: ["MN"],
              977: ["NP"],
              979: ["001"],
              992: ["TJ"],
              993: ["TM"],
              994: ["AZ"],
              995: ["GE"],
              996: ["KG"],
              998: ["UZ"]
            },
            Ea = {
              AC: [, [,, "(?:[01589]\\d|[46])\\d{4}",,,,,,, [5, 6]], [,, "6[2-467]\\d{3}",,,, "62889",,, [5]], [,, "4\\d{4}",,,, "40123",,, [5]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AC", 247, "00",,,,,,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "(?:0[1-9]|[1589]\\d)\\d{4}",,,, "542011",,, [6]],,, [,,,,,,,,, [-1]]],
              AD: [, [,, "(?:1|6\\d)\\d{7}|[135-9]\\d{5}",,,,,,, [6, 8, 9]], [,, "[78]\\d{5}",,,, "712345",,, [6]], [,, "690\\d{6}|[356]\\d{5}",,,, "312345",,, [6, 9]], [,, "180[02]\\d{4}",,,, "18001234",,, [8]], [,, "[19]\\d{5}",,,, "912345",,, [6]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AD", 376, "00",,,,,,,, [[, "(\\d{3})(\\d{3})", "$1 $2", ["[135-9]"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["1"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"]]],, [,,,,,,,,, [-1]],,, [,, "1800\\d{4}",,,,,,, [8]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              AE: [, [,, "(?:[4-7]\\d|9[0-689])\\d{7}|800\\d{2,9}|[2-4679]\\d{7}",,,,,,, [5, 6, 7, 8, 9, 10, 11, 12]], [,, "[2-4679][2-8]\\d{6}",,,, "22345678",,, [8], [7]], [,, "5[024-68]\\d{7}",,,, "501234567",,, [9]], [,, "400\\d{6}|800\\d{2,9}",,,, "800123456"], [,, "900[02]\\d{5}",,,, "900234567",,, [9]], [,, "700[05]\\d{5}",,,, "700012345",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AE", 971, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2,9})", "$1 $2", ["60|8"]], [, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[236]|[479][2-8]"], "0$1"], [, "(\\d{3})(\\d)(\\d{5})", "$1 $2 $3", ["[479]"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["5"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "600[25]\\d{5}",,,, "600212345",,, [9]],,, [,,,,,,,,, [-1]]],
              AF: [, [,, "[2-7]\\d{8}",,,,,,, [9], [7]], [,, "(?:[25][0-8]|[34][0-4]|6[0-5])[2-9]\\d{6}",,,, "234567890",,,, [7]], [,, "7\\d{8}",,,, "701234567",,,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AF", 93, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[1-9]"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-7]"], "0$1"]], [[, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-7]"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              AG: [, [,, "(?:268|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "268(?:4(?:6[0-38]|84)|56[0-2])\\d{4}",,,, "2684601234",,,, [7]], [,, "268(?:464|7(?:1[3-9]|[28]\\d|3[0246]|64|7[0-689]))\\d{4}",,,, "2684641234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,, "26848[01]\\d{4}",,,, "2684801234",,,, [7]], "AG", 1, "011", "1",,, "([457]\\d{6})$|1", "268$1",,,,, [,, "26840[69]\\d{4}",,,, "2684061234",,,, [7]],, "268", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              AI: [, [,, "(?:264|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "264(?:292|4(?:6[12]|9[78]))\\d{4}",,,, "2644612345",,,, [7]], [,, "264(?:235|4(?:69|76)|5(?:3[6-9]|8[1-4])|7(?:29|72))\\d{4}",,,, "2642351234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "AI", 1, "011", "1",,, "([2457]\\d{6})$|1", "264$1",,,,, [,, "264724\\d{4}",,,, "2647241234",,,, [7]],, "264", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              AL: [, [,, "(?:700\\d\\d|900)\\d{3}|8\\d{5,7}|(?:[2-5]|6\\d)\\d{7}",,,,,,, [6, 7, 8, 9], [5]], [,, "4505[0-2]\\d{3}|(?:[2358][16-9]\\d[2-9]|4410)\\d{4}|(?:[2358][2-5][2-9]|4(?:[2-57-9][2-9]|6\\d))\\d{5}",,,, "22345678",,, [8], [5, 6, 7]], [,, "6(?:[78][2-9]|9\\d)\\d{6}",,,, "672123456",,, [9]], [,, "800\\d{4}",,,, "8001234",,, [7]], [,, "900[1-9]\\d\\d",,,, "900123",,, [6]], [,, "808[1-9]\\d\\d",,,, "808123",,, [6]], [,, "700[2-9]\\d{4}",,,, "70021234",,, [8]], [,,,,,,,,, [-1]], "AL", 355, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3,4})", "$1 $2", ["80|9"], "0$1"], [, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["4[2-6]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2358][2-5]|4"], "0$1"], [, "(\\d{3})(\\d{5})", "$1 $2", ["[23578]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["6"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              AM: [, [,, "(?:[1-489]\\d|55|60|77)\\d{6}",,,,,,, [8], [5, 6]], [,, "(?:(?:1[0-25]|47)\\d|2(?:2[2-46]|3[1-8]|4[2-69]|5[2-7]|6[1-9]|8[1-7])|3[12]2)\\d{5}",,,, "10123456",,,, [5, 6]], [,, "(?:33|4[1349]|55|77|88|9[13-9])\\d{6}",,,, "77123456"], [,, "800\\d{5}",,,, "80012345"], [,, "90[016]\\d{5}",,,, "90012345"], [,, "80[1-4]\\d{5}",,,, "80112345"], [,,,,,,,,, [-1]], [,, "60(?:2[78]|3[5-9]|4[02-9]|5[0-46-9]|[6-8]\\d|9[0-2])\\d{4}",,,, "60271234"], "AM", 374, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[89]0"], "0 $1"], [, "(\\d{3})(\\d{5})", "$1 $2", ["2|3[12]"], "(0$1)"], [, "(\\d{2})(\\d{6})", "$1 $2", ["1|47"], "(0$1)"], [, "(\\d{2})(\\d{6})", "$1 $2", ["[3-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              AO: [, [,, "[29]\\d{8}",,,,,,, [9]], [,, "2\\d(?:[0134][25-9]|[25-9]\\d)\\d{5}",,,, "222123456"], [,, "9[1-79]\\d{7}",,,, "923123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AO", 244, "00",,,,,,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[29]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              AR: [, [,, "(?:11|[89]\\d\\d)\\d{8}|[2368]\\d{9}",,,,,,, [10, 11], [6, 7, 8]], [,, "3(?:7(?:1[15]|81)|8(?:21|4[16]|69|9[12]))[46]\\d{5}|(?:2(?:657|9(?:54|66))|3(?:7(?:55|77)|865))[2-8]\\d{5}|(?:2(?:2(?:2[59]|44|52)|3(?:26|44)|473|9(?:[07]2|2[26]|34|46))|3327)[45]\\d{5}|(?:2(?:284|3(?:02|23)|920)|3(?:4(?:46|8[27]|92)|541|878))[2-7]\\d{5}|(?:2(?:(?:26|62)2|320|477|9(?:42|83))|3(?:329|4(?:62|76|89)|564))[2-6]\\d{5}|(?:(?:11[1-8]|670)\\d|2(?:2(?:0[45]|1[2-6]|3[3-6])|3(?:[06]4|7[45])|494|6(?:04|1[2-8]|[36][45]|4[3-6])|80[45]|9(?:[17][4-6]|[48][45]|9[3-6]))|3(?:364|4(?:1[2-8]|[25][4-6]|3[3-6]|84)|5(?:1[2-9]|[38][4-6])|6(?:2[45]|44)|7[069][45]|8(?:0[45]|[17][2-6]|3[4-6]|5[3-6]|8[3-68])))\\d{6}|2(?:2(?:21|4[23]|6[145]|7[1-4]|8[356]|9[267])|3(?:16|3[13-8]|43|5[346-8]|9[3-5])|475|6(?:2[46]|4[78]|5[1568])|9(?:03|2[1457-9]|3[1356]|4[08]|[56][23]|82))4\\d{5}|(?:2(?:2(?:57|81)|3(?:24|46|92)|9(?:01|23|64))|3(?:4(?:42|71)|5(?:25|37|4[347]|71)|7(?:18|35|5[17])))[3-6]\\d{5}|(?:2(?:2(?:02|2[3467]|4[156]|5[45]|6[6-8]|91)|3(?:1[47]|25|[45][25]|96)|47[48]|625|932)|3(?:38[2578]|4(?:0[0-24-9]|3[78]|4[457]|58|6[03-9]|72|83|9[136-8])|5(?:2[124]|[368][23]|4[2689]|7[2-6])|7(?:16|2[15]|3[14]|4[13]|5[468]|7[2-5]|8[26])|8(?:2[5-7]|3[278]|4[3-5]|5[78]|6[1-378]|[78]7|94)))[4-6]\\d{5}",,,, "1123456789",,, [10], [6, 7, 8]], [,, "93(?:7(?:1[15]|81)|8(?:21|4[16]|69|9[12]))[46]\\d{5}|9(?:2(?:657|9(?:54|66))|3(?:7(?:55|77)|865))[2-8]\\d{5}|9(?:2(?:2(?:2[59]|44|52)|3(?:26|44)|473|9(?:[07]2|2[26]|34|46))|3327)[45]\\d{5}|9(?:2(?:284|3(?:02|23)|920)|3(?:4(?:46|8[27]|92)|541|878))[2-7]\\d{5}|9(?:2(?:(?:26|62)2|320|477|9(?:42|83))|3(?:329|4(?:62|76|89)|564))[2-6]\\d{5}|(?:675\\d|9(?:11[1-8]\\d|2(?:2(?:0[45]|1[2-6]|3[3-6])|3(?:[06]4|7[45])|494|6(?:04|1[2-8]|[36][45]|4[3-6])|80[45]|9(?:[17][4-6]|[48][45]|9[3-6]))|3(?:364|4(?:1[2-8]|[25][4-6]|3[3-6]|84)|5(?:1[2-9]|[38][4-6])|6(?:2[45]|44)|7[069][45]|8(?:0[45]|[17][2-6]|3[4-6]|5[3-6]|8[3-68]))))\\d{6}|92(?:2(?:21|4[23]|6[145]|7[1-4]|8[356]|9[267])|3(?:16|3[13-8]|43|5[346-8]|9[3-5])|475|6(?:2[46]|4[78]|5[1568])|9(?:03|2[1457-9]|3[1356]|4[08]|[56][23]|82))4\\d{5}|9(?:2(?:2(?:57|81)|3(?:24|46|92)|9(?:01|23|64))|3(?:4(?:42|71)|5(?:25|37|4[347]|71)|7(?:18|35|5[17])))[3-6]\\d{5}|9(?:2(?:2(?:02|2[3467]|4[156]|5[45]|6[6-8]|91)|3(?:1[47]|25|[45][25]|96)|47[48]|625|932)|3(?:38[2578]|4(?:0[0-24-9]|3[78]|4[457]|58|6[03-9]|72|83|9[136-8])|5(?:2[124]|[368][23]|4[2689]|7[2-6])|7(?:16|2[15]|3[14]|4[13]|5[468]|7[2-5]|8[26])|8(?:2[5-7]|3[278]|4[3-5]|5[78]|6[1-378]|[78]7|94)))[4-6]\\d{5}",,,, "91123456789",,,, [6, 7, 8]], [,, "800\\d{7,8}",,,, "8001234567"], [,, "60[04579]\\d{7}",,,, "6001234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AR", 54, "00", "0",,, "0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?", "9$1",,, [[, "(\\d{3})", "$1", ["0|1(?:0[0-35-7]|1[02-5]|2[015]|3[47]|4[478])|911"]], [, "(\\d{2})(\\d{4})", "$1-$2", ["[1-9]"]], [, "(\\d{3})(\\d{4})", "$1-$2", ["[2-9]"]], [, "(\\d{4})(\\d{4})", "$1-$2", ["[1-8]"]], [, "(\\d{4})(\\d{2})(\\d{4})", "$1 $2-$3", ["2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])", "2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)", "2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]", "2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"], "0$1",, 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["1"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[68]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2-$3", ["[23]"], "0$1",, 1], [, "(\\d)(\\d{4})(\\d{2})(\\d{4})", "$2 15-$3-$4", ["9(?:2[2-469]|3[3-578])", "9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))", "9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)", "9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]", "9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"], "0$1"], [, "(\\d)(\\d{2})(\\d{4})(\\d{4})", "$2 15-$3-$4", ["91"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{5})", "$1-$2-$3", ["8"], "0$1"], [, "(\\d)(\\d{3})(\\d{3})(\\d{4})", "$2 15-$3-$4", ["9"], "0$1"]], [[, "(\\d{4})(\\d{2})(\\d{4})", "$1 $2-$3", ["2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])", "2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)", "2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]", "2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"], "0$1",, 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["1"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[68]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2-$3", ["[23]"], "0$1",, 1], [, "(\\d)(\\d{4})(\\d{2})(\\d{4})", "$1 $2 $3-$4", ["9(?:2[2-469]|3[3-578])", "9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))", "9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)", "9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]", "9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"]], [, "(\\d)(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3-$4", ["91"]], [, "(\\d{3})(\\d{3})(\\d{5})", "$1-$2-$3", ["8"], "0$1"], [, "(\\d)(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3-$4", ["9"]]], [,,,,,,,,, [-1]],,, [,, "810\\d{7}",,,,,,, [10]], [,, "810\\d{7}",,,, "8101234567",,, [10]],,, [,,,,,,,,, [-1]]],
              AS: [, [,, "(?:[58]\\d\\d|684|900)\\d{7}",,,,,,, [10], [7]], [,, "6846(?:22|33|44|55|77|88|9[19])\\d{4}",,,, "6846221234",,,, [7]], [,, "684(?:2(?:48|5[2468]|7[26])|7(?:3[13]|70|82))\\d{4}",,,, "6847331234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "AS", 1, "011", "1",,, "([267]\\d{6})$|1", "684$1",,,,, [,,,,,,,,, [-1]],, "684", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              AT: [, [,, "1\\d{3,12}|2\\d{6,12}|43(?:(?:0\\d|5[02-9])\\d{3,9}|2\\d{4,5}|[3467]\\d{4}|8\\d{4,6}|9\\d{4,7})|5\\d{4,12}|8\\d{7,12}|9\\d{8,12}|(?:[367]\\d|4[0-24-9])\\d{4,11}",,,,,,, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [3]], [,, "1(?:11\\d|[2-9]\\d{3,11})|(?:316|463|(?:51|66|73)2)\\d{3,10}|(?:2(?:1[467]|2[13-8]|5[2357]|6[1-46-8]|7[1-8]|8[124-7]|9[1458])|3(?:1[1-578]|3[23568]|4[5-7]|5[1378]|6[1-38]|8[3-68])|4(?:2[1-8]|35|7[1368]|8[2457])|5(?:2[1-8]|3[357]|4[147]|5[12578]|6[37])|6(?:13|2[1-47]|4[135-8]|5[468])|7(?:2[1-8]|35|4[13478]|5[68]|6[16-8]|7[1-6]|9[45]))\\d{4,10}",,,, "1234567890",,,, [3]], [,, "6(?:5[0-3579]|6[013-9]|[7-9]\\d)\\d{4,10}",,,, "664123456",,, [7, 8, 9, 10, 11, 12, 13]], [,, "800\\d{6,10}",,,, "800123456",,, [9, 10, 11, 12, 13]], [,, "(?:8[69][2-68]|9(?:0[01]|3[019]))\\d{6,10}",,,, "900123456",,, [9, 10, 11, 12, 13]], [,, "8(?:10|2[018])\\d{6,10}|828\\d{5}",,,, "810123456",,, [8, 9, 10, 11, 12, 13]], [,,,,,,,,, [-1]], [,, "5(?:0[1-9]|17|[79]\\d)\\d{2,10}|7[28]0\\d{6,10}",,,, "780123456",,, [5, 6, 7, 8, 9, 10, 11, 12, 13]], "AT", 43, "00", "0",,, "0",,,, [[, "(\\d{4})", "$1", ["14"]], [, "(\\d)(\\d{3,12})", "$1 $2", ["1(?:11|[2-9])"], "0$1"], [, "(\\d{3})(\\d{2})", "$1 $2", ["517"], "0$1"], [, "(\\d{2})(\\d{3,5})", "$1 $2", ["5[079]"], "0$1"], [, "(\\d{6})", "$1", ["[18]"]], [, "(\\d{3})(\\d{3,10})", "$1 $2", ["(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]"], "0$1"], [, "(\\d{4})(\\d{3,9})", "$1 $2", ["[2-467]|5[2-6]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["5"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4,7})", "$1 $2 $3", ["5"], "0$1"]], [[, "(\\d)(\\d{3,12})", "$1 $2", ["1(?:11|[2-9])"], "0$1"], [, "(\\d{3})(\\d{2})", "$1 $2", ["517"], "0$1"], [, "(\\d{2})(\\d{3,5})", "$1 $2", ["5[079]"], "0$1"], [, "(\\d{3})(\\d{3,10})", "$1 $2", ["(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]"], "0$1"], [, "(\\d{4})(\\d{3,9})", "$1 $2", ["[2-467]|5[2-6]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["5"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4,7})", "$1 $2 $3", ["5"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              AU: [, [,, "1(?:[0-79]\\d{7}(?:\\d(?:\\d{2})?)?|8[0-24-9]\\d{7})|[2-478]\\d{8}|1\\d{4,7}",,,,,,, [5, 6, 7, 8, 9, 10, 12]], [,, "(?:(?:(?:2(?:[0-26-9]\\d|3[0-8]|4[02-9]|5[0135-9])|7(?:[013-57-9]\\d|2[0-8]))\\d|3(?:(?:[0-3589]\\d|6[1-9]|7[0-35-9])\\d|4(?:[0-578]\\d|90)))\\d\\d|8(?:51(?:0(?:0[03-9]|[12479]\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\d|7[89]|9[0-4])|3\\d\\d)|(?:6[0-8]|[78]\\d)\\d{3}|9(?:[02-9]\\d{3}|1(?:(?:[0-58]\\d|6[0135-9])\\d|7(?:0[0-24-9]|[1-9]\\d)|9(?:[0-46-9]\\d|5[0-79])))))\\d{3}",,,, "212345678",,, [9], [8]], [,, "4(?:79[01]|83[0-389]|94[0-4])\\d{5}|4(?:[0-36]\\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\d{6}",,,, "412345678",,, [9]], [,, "180(?:0\\d{3}|2)\\d{3}",,,, "1800123456",,, [7, 10]], [,, "190[0-26]\\d{6}",,,, "1900123456",,, [10]], [,, "13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}",,,, "1300123456",,, [6, 8, 10, 12]], [,,,,,,,,, [-1]], [,, "14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}",,,, "147101234",,, [9]], "AU", 61, "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "0",,, "(183[12])|0",, "0011",, [[, "(\\d{2})(\\d{3,4})", "$1 $2", ["16"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["13"]], [, "(\\d{3})(\\d{3})", "$1 $2", ["19"]], [, "(\\d{3})(\\d{4})", "$1 $2", ["180", "1802"]], [, "(\\d{4})(\\d{3,4})", "$1 $2", ["19"]], [, "(\\d{2})(\\d{3})(\\d{2,4})", "$1 $2 $3", ["16"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["14|4"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["[2378]"], "(0$1)", "$CC ($1)"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:30|[89])"]], [, "(\\d{4})(\\d{4})(\\d{4})", "$1 $2 $3", ["130"]]], [[, "(\\d{2})(\\d{3,4})", "$1 $2", ["16"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2,4})", "$1 $2 $3", ["16"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["14|4"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["[2378]"], "(0$1)", "$CC ($1)"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:30|[89])"]]], [,, "163\\d{2,6}",,,, "1631234",,, [5, 6, 7, 8, 9]], 1,, [,, "1(?:3(?:00\\d{5}|45[0-4])|802)\\d{3}|1[38]00\\d{6}|13\\d{4}",,,,,,, [6, 7, 8, 10, 12]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              AW: [, [,, "(?:[25-79]\\d\\d|800)\\d{4}",,,,,,, [7]], [,, "5(?:2\\d|8[1-9])\\d{4}",,,, "5212345"], [,, "(?:290|5[69]\\d|6(?:[03]0|22|4[0-2]|[69]\\d)|7(?:[34]\\d|7[07])|9(?:6[45]|9[4-8]))\\d{4}",,,, "5601234"], [,, "800\\d{4}",,,, "8001234"], [,, "900\\d{4}",,,, "9001234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:28\\d|501)\\d{4}",,,, "5011234"], "AW", 297, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[25-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              AX: [, [,, "2\\d{4,9}|35\\d{4,5}|(?:60\\d\\d|800)\\d{4,6}|7\\d{5,11}|(?:[14]\\d|3[0-46-9]|50)\\d{4,8}",,,,,,, [5, 6, 7, 8, 9, 10, 11, 12]], [,, "18[1-8]\\d{3,6}",,,, "181234567",,, [6, 7, 8, 9]], [,, "4946\\d{2,6}|(?:4[0-8]|50)\\d{4,8}",,,, "412345678",,, [6, 7, 8, 9, 10]], [,, "800\\d{4,6}",,,, "800123456",,, [7, 8, 9]], [,, "[67]00\\d{5,6}",,,, "600123456",,, [8, 9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AX", 358, "00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))", "0",,, "0",, "00",,,, [,,,,,,,,, [-1]],, "18", [,,,,,,,,, [-1]], [,, "20\\d{4,8}|60[12]\\d{5,6}|7(?:099\\d{4,5}|5[03-9]\\d{3,7})|20[2-59]\\d\\d|(?:606|7(?:0[78]|1|3\\d))\\d{7}|(?:10|29|3[09]|70[1-5]\\d)\\d{4,8}",,,, "10112345"],,, [,,,,,,,,, [-1]]],
              AZ: [, [,, "365\\d{6}|(?:[124579]\\d|60|88)\\d{7}",,,,,,, [9], [7]], [,, "(?:2[12]428|3655[02])\\d{4}|(?:2(?:22[0-79]|63[0-28])|3654)\\d{5}|(?:(?:1[28]|46)\\d|2(?:[014-6]2|[23]3))\\d{6}",,,, "123123456",,,, [7]], [,, "36554\\d{4}|(?:[16]0|4[04]|5[015]|7[07]|99)\\d{7}",,,, "401234567"], [,, "88\\d{7}",,,, "881234567"], [,, "900200\\d{3}",,,, "900200123"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "AZ", 994, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[1-9]"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["90"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[28]|2|365|46", "1[28]|2|365[45]|46", "1[28]|2|365(?:4|5[02])|46"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[13-9]"], "0$1"]], [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["90"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[28]|2|365|46", "1[28]|2|365[45]|46", "1[28]|2|365(?:4|5[02])|46"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[13-9]"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BA: [, [,, "6\\d{8}|(?:[35689]\\d|49|70)\\d{6}",,,,,,, [8, 9], [6]], [,, "(?:3(?:[05-79][2-9]|1[4579]|[23][24-9]|4[2-4689]|8[2457-9])|49[2-579]|5(?:0[2-49]|[13][2-9]|[268][2-4679]|4[4689]|5[2-79]|7[2-69]|9[2-4689]))\\d{5}",,,, "30212345",,, [8], [6]], [,, "6040\\d{5}|6(?:03|[1-356]|44|7\\d)\\d{6}",,,, "61123456"], [,, "8[08]\\d{6}",,,, "80123456",,, [8]], [,, "9[0246]\\d{6}",,,, "90123456",,, [8]], [,, "8[12]\\d{6}",,,, "82123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BA", 387, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})", "$1-$2", ["[2-9]"]], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["6[1-3]|[7-9]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2-$3", ["[3-5]|6[56]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["6"], "0$1"]], [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["6[1-3]|[7-9]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2-$3", ["[3-5]|6[56]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["6"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "703[235]0\\d{3}|70(?:2[0-5]|3[0146]|[56]0)\\d{4}",,,, "70341234",,, [8]],,, [,,,,,,,,, [-1]]],
              BB: [, [,, "(?:246|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "246521[0369]\\d{3}|246(?:2(?:2[78]|7[0-4])|4(?:1[024-6]|2\\d|3[2-9])|5(?:20|[34]\\d|54|7[1-3])|6(?:2\\d|38)|7[35]7|9(?:1[89]|63))\\d{4}",,,, "2464123456",,,, [7]], [,, "246(?:(?:2(?:[3568]\\d|4[0-57-9])|3(?:5[2-9]|6[0-6])|4(?:46|5\\d)|69[5-7]|8(?:[2-5]\\d|83))\\d|52(?:1[147]|20))\\d{3}",,,, "2462501234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "(?:246976|900[2-9]\\d\\d)\\d{4}",,,, "9002123456",,,, [7]], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,, "24631\\d{5}",,,, "2463101234",,,, [7]], "BB", 1, "011", "1",,, "([2-9]\\d{6})$|1", "246$1",,,,, [,,,,,,,,, [-1]],, "246", [,,,,,,,,, [-1]], [,, "246(?:292|367|4(?:1[7-9]|3[01]|4[47-9]|67)|7(?:1[2-9]|2\\d|3[016]|53))\\d{4}",,,, "2464301234",,,, [7]],,, [,,,,,,,,, [-1]]],
              BD: [, [,, "[1-469]\\d{9}|8[0-79]\\d{7,8}|[2-79]\\d{8}|[2-9]\\d{7}|[3-9]\\d{6}|[57-9]\\d{5}",,,,,,, [6, 7, 8, 9, 10]], [,, "(?:4(?:31\\d\\d|423)|5222)\\d{3}(?:\\d{2})?|8332[6-9]\\d\\d|(?:3(?:03[56]|224)|4(?:22[25]|653))\\d{3,4}|(?:3(?:42[47]|529|823)|4(?:027|525|65(?:28|8))|562|6257|7(?:1(?:5[3-5]|6[12]|7[156]|89)|22[589]56|32|42675|52(?:[25689](?:56|8)|[347]8)|71(?:6[1267]|75|89)|92374)|82(?:2[59]|32)56|9(?:03[23]56|23(?:256|373)|31|5(?:1|2[4589]56)))\\d{3}|(?:3(?:02[348]|22[35]|324|422)|4(?:22[67]|32[236-9]|6(?:2[46]|5[57])|953)|5526|6(?:024|6655)|81)\\d{4,5}|(?:2(?:7(?:1[0-267]|2[0-289]|3[0-29]|4[01]|5[1-3]|6[013]|7[0178]|91)|8(?:0[125]|1[1-6]|2[0157-9]|3[1-69]|41|6[1-35]|7[1-5]|8[1-8]|9[0-6])|9(?:0[0-2]|1[0-4]|2[568]|3[3-6]|5[5-7]|6[0136-9]|7[0-7]|8[014-9]))|3(?:0(?:2[025-79]|3[2-4])|181|22[12]|32[2356]|824)|4(?:02[09]|22[348]|32[045]|523|6(?:27|54))|666(?:22|53)|7(?:22[57-9]|42[56]|82[35])8|8(?:0[124-9]|2(?:181|2[02-4679]8)|4[12]|[5-7]2)|9(?:[04]2|2(?:2|328)|81))\\d{4}|(?:2(?:[23]\\d|[45])\\d\\d|3(?:1(?:2[5-7]|[5-7])|425|822)|4(?:033|1\\d|[257]1|332|4(?:2[246]|5[25])|6(?:2[35]|56|62)|8(?:23|54)|92[2-5])|5(?:02[03489]|22[457]|32[35-79]|42[46]|6(?:[18]|53)|724|826)|6(?:023|2(?:2[2-5]|5[3-5]|8)|32[3478]|42[34]|52[47]|6(?:[18]|6(?:2[34]|5[24]))|[78]2[2-5]|92[2-6])|7(?:02|21\\d|[3-589]1|6[12]|72[24])|8(?:217|3[12]|[5-7]1)|9[24]1)\\d{5}|(?:(?:3[2-8]|5[2-57-9]|6[03-589])1|4[4689][18])\\d{5}|[59]1\\d{5}",,,, "27111234"], [,, "(?:1[13-9]\\d|644)\\d{7}|(?:3[78]|44|66)[02-9]\\d{7}",,,, "1812345678",,, [10]], [,, "80[03]\\d{7}",,,, "8001234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "96(?:0[469]|1[0-47]|3[389]|43|6[69]|7[78])\\d{6}",,,, "9604123456",,, [10]], "BD", 880, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{4,6})", "$1-$2", ["31[5-8]|[459]1"], "0$1"], [, "(\\d{3})(\\d{3,7})", "$1-$2", ["3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:[15]|28|4[14])|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]"], "0$1"], [, "(\\d{4})(\\d{3,6})", "$1-$2", ["[13-9]|2[23]"], "0$1"], [, "(\\d)(\\d{7,8})", "$1-$2", ["2"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BE: [, [,, "4\\d{8}|[1-9]\\d{7}",,,,,,, [8, 9]], [,, "80[2-8]\\d{5}|(?:1[0-69]|[23][2-8]|4[23]|5\\d|6[013-57-9]|71|8[1-79]|9[2-4])\\d{6}",,,, "12345678",,, [8]], [,, "4[5-9]\\d{7}",,,, "470123456",,, [9]], [,, "800[1-9]\\d{4}",,,, "80012345",,, [8]], [,, "(?:70(?:2[0-57]|3[04-7]|44|6[4-69]|7[0579])|90\\d\\d)\\d{4}",,,, "90012345",,, [8]], [,, "7879\\d{4}",,,, "78791234",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BE", 32, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:80|9)0"], "0$1"], [, "(\\d)(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[239]|4[23]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[15-8]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["4"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "78(?:0[57]|1[014-8]|2[25]|3[15-8]|48|[56]0|7[06-8]|9\\d)\\d{4}",,,, "78102345",,, [8]],,, [,,,,,,,,, [-1]]],
              BF: [, [,, "[025-7]\\d{7}",,,,,,, [8]], [,, "2(?:0(?:49|5[23]|6[5-7]|9[016-9])|4(?:4[569]|5[4-6]|6[5-7]|7[0179])|5(?:[34]\\d|50|6[5-7]))\\d{4}",,,, "20491234"], [,, "(?:0[1-7]|5[0-8]|[67]\\d)\\d{6}",,,, "70123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BF", 226, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[025-7]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BG: [, [,, "00800\\d{7}|[2-7]\\d{6,7}|[89]\\d{6,8}|2\\d{5}",,,,,,, [6, 7, 8, 9, 12], [4, 5]], [,, "2\\d{5,7}|(?:43[1-6]|70[1-9])\\d{4,5}|(?:[36]\\d|4[124-7]|[57][1-9]|8[1-6]|9[1-7])\\d{5,6}",,,, "2123456",,, [6, 7, 8], [4, 5]], [,, "(?:43[07-9]|99[69]\\d)\\d{5}|(?:8[7-9]|98)\\d{7}",,,, "43012345",,, [8, 9]], [,, "(?:00800\\d\\d|800)\\d{5}",,,, "80012345",,, [8, 12]], [,, "90\\d{6}",,,, "90123456",,, [8]], [,, "700\\d{5}",,,, "70012345",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BG", 359, "00", "0",,, "0",,,, [[, "(\\d{6})", "$1", ["1"]], [, "(\\d)(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["2"], "0$1"], [, "(\\d{3})(\\d{4})", "$1 $2", ["43[1-6]|70[1-9]"], "0$1"], [, "(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:70|8)0"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3", ["43[1-7]|7"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[48]|9[08]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"]], [[, "(\\d)(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["2"], "0$1"], [, "(\\d{3})(\\d{4})", "$1 $2", ["43[1-6]|70[1-9]"], "0$1"], [, "(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:70|8)0"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3", ["43[1-7]|7"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[48]|9[08]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BH: [, [,, "[136-9]\\d{7}",,,,,,, [8]], [,, "(?:1(?:3[1356]|6[0156]|7\\d)\\d|6(?:1[16]\\d|500|6(?:0\\d|3[12]|44|55|7[7-9]|88)|9[69][69])|7(?:[07]\\d\\d|1(?:11|78)))\\d{4}",,,, "17001234"], [,, "(?:3(?:[0-79]\\d|8[0-57-9])\\d|6(?:3(?:00|33|6[16])|441|6(?:3[03-9]|[69]\\d|7[0-689])))\\d{4}",,,, "36001234"], [,, "8[02369]\\d{6}",,,, "80123456"], [,, "(?:87|9[0-8])\\d{6}",,,, "90123456"], [,, "84\\d{6}",,,, "84123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BH", 973, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[13679]|8[02-4679]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BI: [, [,, "(?:[267]\\d|31)\\d{6}",,,,,,, [8]], [,, "(?:22|31)\\d{6}",,,, "22201234"], [,, "(?:29|[67][125-9])\\d{6}",,,, "79561234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BI", 257, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2367]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BJ: [, [,, "[24-689]\\d{7}",,,,,,, [8]], [,, "2090\\d{4}|2(?:02|1[037]|2[45]|3[68]|4\\d)\\d{5}",,,, "20211234"], [,, "(?:4[0-8]|[56]\\d|9[013-9])\\d{6}",,,, "90011234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "857[58]\\d{4}",,,, "85751234"], "BJ", 229, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24-689]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "81\\d{6}",,,, "81123456"],,, [,,,,,,,,, [-1]]],
              BL: [, [,, "590\\d{6}|(?:69|80|9\\d)\\d{7}",,,,,,, [9]], [,, "590(?:2[7-9]|3[3-7]|5[12]|87)\\d{4}",,,, "590271234"], [,, "69(?:0\\d\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\d)|6(?:1[016-9]|5[0-4]|[67]\\d))\\d{4}",,,, "690001234"], [,, "80[0-5]\\d{6}",,,, "800012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "9(?:(?:39[5-7]|76[018])\\d|475[0-5])\\d{4}",,,, "976012345"], "BL", 590, "00", "0",,, "0",,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BM: [, [,, "(?:441|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "441(?:[46]\\d\\d|5(?:4\\d|60|89))\\d{4}",,,, "4414123456",,,, [7]], [,, "441(?:[2378]\\d|5[0-39]|9[02])\\d{5}",,,, "4413701234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "BM", 1, "011", "1",,, "([2-9]\\d{6})$|1", "441$1",,,,, [,,,,,,,,, [-1]],, "441", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BN: [, [,, "[2-578]\\d{6}",,,,,,, [7]], [,, "22[0-7]\\d{4}|(?:2[013-9]|[34]\\d|5[0-25-9])\\d{5}",,,, "2345678"], [,, "(?:22[89]|[78]\\d\\d)\\d{4}",,,, "7123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "5[34]\\d{5}",,,, "5345678"], "BN", 673, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-578]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BO: [, [,, "8001\\d{5}|(?:[2-467]\\d|50)\\d{6}",,,,,,, [8, 9], [7]], [,, "(?:2(?:2\\d\\d|5(?:11|[258]\\d|9[67])|6(?:12|2\\d|9[34])|8(?:2[34]|39|62))|3(?:3\\d\\d|4(?:6\\d|8[24])|8(?:25|42|5[257]|86|9[25])|9(?:[27]\\d|3[2-4]|4[248]|5[24]|6[2-6]))|4(?:4\\d\\d|6(?:11|[24689]\\d|72)))\\d{4}",,,, "22123456",,, [8], [7]], [,, "[67]\\d{7}",,,, "71234567",,, [8]], [,, "8001[07]\\d{4}",,,, "800171234",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "50\\d{6}",,,, "50123456",,, [8], [7]], "BO", 591, "00(?:1\\d)?", "0",,, "0(1\\d)?",,,, [[, "(\\d)(\\d{7})", "$1 $2", ["[235]|4[46]"],, "0$CC $1"], [, "(\\d{8})", "$1", ["[67]"],, "0$CC $1"], [, "(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["8"],, "0$CC $1"]],, [,,,,,,,,, [-1]],,, [,, "8001[07]\\d{4}",,,,,,, [9]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BQ: [, [,, "(?:[34]1|7\\d)\\d{5}",,,,,,, [7]], [,, "(?:318[023]|41(?:6[023]|70)|7(?:1[578]|2[05]|50)\\d)\\d{3}",,,, "7151234"], [,, "(?:31(?:8[14-8]|9[14578])|416[14-9]|7(?:0[01]|7[07]|8\\d|9[056])\\d)\\d{3}",,,, "3181234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BQ", 599, "00",,,,,,,,,, [,,,,,,,,, [-1]],, "[347]", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BR: [, [,, "(?:[1-46-9]\\d\\d|5(?:[0-46-9]\\d|5[0-46-9]))\\d{8}|[1-9]\\d{9}|[3589]\\d{8}|[34]\\d{7}",,,,,,, [8, 9, 10, 11]], [,, "(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-5]\\d{7}",,,, "1123456789",,, [10], [8]], [,, "(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])(?:7|9\\d)\\d{7}",,,, "11961234567",,, [10, 11], [8, 9]], [,, "800\\d{6,7}",,,, "800123456",,, [9, 10]], [,, "300\\d{6}|[59]00\\d{6,7}",,,, "300123456",,, [9, 10]], [,, "(?:30[03]\\d{3}|4(?:0(?:0\\d|20)|370))\\d{4}|300\\d{5}",,,, "40041234",,, [8, 10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BR", 55, "00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)", "0",,, "(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\d{10,11}))?", "$2",,, [[, "(\\d{3,6})", "$1", ["1(?:1[25-8]|2[357-9]|3[02-68]|4[12568]|5|6[0-8]|8[015]|9[0-47-9])|321|610"]], [, "(\\d{4})(\\d{4})", "$1-$2", ["300|4(?:0[02]|37)", "4(?:02|37)0|[34]00"]], [, "(\\d{4})(\\d{4})", "$1-$2", ["[2-57]", "[2357]|4(?:[0-24-9]|3(?:[0-689]|7[1-9]))"]], [, "(\\d{3})(\\d{2,3})(\\d{4})", "$1 $2 $3", ["(?:[358]|90)0"], "0$1"], [, "(\\d{5})(\\d{4})", "$1-$2", ["9"]], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]"], "($1)", "0 $CC ($1)"], [, "(\\d{2})(\\d{5})(\\d{4})", "$1 $2-$3", ["[16][1-9]|[2-57-9]"], "($1)", "0 $CC ($1)"]], [[, "(\\d{4})(\\d{4})", "$1-$2", ["300|4(?:0[02]|37)", "4(?:02|37)0|[34]00"]], [, "(\\d{3})(\\d{2,3})(\\d{4})", "$1 $2 $3", ["(?:[358]|90)0"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2-$3", ["(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]"], "($1)", "0 $CC ($1)"], [, "(\\d{2})(\\d{5})(\\d{4})", "$1 $2-$3", ["[16][1-9]|[2-57-9]"], "($1)", "0 $CC ($1)"]], [,,,,,,,,, [-1]],,, [,, "30(?:0\\d{5,7}|3\\d{7})|40(?:0\\d|20)\\d{4}|800\\d{6,7}",,,,,,, [8, 9, 10]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BS: [, [,, "(?:242|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "242(?:3(?:02|[236][1-9]|4[0-24-9]|5[0-68]|7[347]|8[0-4]|9[2-467])|461|502|6(?:0[1-5]|12|2[013]|[45]0|7[67]|8[78]|9[89])|7(?:02|88))\\d{4}",,,, "2423456789",,,, [7]], [,, "242(?:3(?:5[79]|7[56]|95)|4(?:[23][1-9]|4[1-35-9]|5[1-8]|6[2-8]|7\\d|81)|5(?:2[45]|3[35]|44|5[1-46-9]|65|77)|6[34]6|7(?:27|38)|8(?:0[1-9]|1[02-9]|2\\d|3[0-4]|[89]9))\\d{4}",,,, "2423591234",,,, [7]], [,, "242300\\d{4}|8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456",,,, [7]], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "BS", 1, "011", "1",,, "([3-8]\\d{6})$|1", "242$1",,,,, [,,,,,,,,, [-1]],, "242", [,,,,,,,,, [-1]], [,, "242225\\d{4}",,,, "2422250123"],,, [,,,,,,,,, [-1]]],
              BT: [, [,, "[17]\\d{7}|[2-8]\\d{6}",,,,,,, [7, 8], [6]], [,, "(?:2[3-6]|[34][5-7]|5[236]|6[2-46]|7[246]|8[2-4])\\d{5}",,,, "2345678",,, [7], [6]], [,, "(?:1[67]|77)\\d{6}",,,, "17123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BT", 975, "00",,,,,,,, [[, "(\\d{3})(\\d{3})", "$1 $2", ["[2-7]"]], [, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-68]|7[246]"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[67]|7"]]], [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-68]|7[246]"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[67]|7"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BW: [, [,, "(?:0800|(?:[37]|800)\\d)\\d{6}|(?:[2-6]\\d|90)\\d{5}",,,,,,, [7, 8, 10]], [,, "(?:2(?:4[0-48]|6[0-24]|9[0578])|3(?:1[0-35-9]|55|[69]\\d|7[013]|81)|4(?:6[03]|7[1267]|9[0-5])|5(?:3[03489]|4[0489]|7[1-47]|88|9[0-49])|6(?:2[1-35]|5[149]|8[013467]))\\d{4}",,,, "2401234",,, [7]], [,, "(?:321|7[1-8]\\d)\\d{5}",,,, "71123456",,, [8]], [,, "(?:0800|800\\d)\\d{6}",,,, "0800012345",,, [10]], [,, "90\\d{5}",,,, "9012345",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "79(?:1(?:[0-2]\\d|3[0-3])|2[0-7]\\d)\\d{3}",,,, "79101234",,, [8]], "BW", 267, "00",,,,,,,, [[, "(\\d{2})(\\d{5})", "$1 $2", ["90"]], [, "(\\d{3})(\\d{4})", "$1 $2", ["[24-6]|3[15-9]"]], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[37]"]], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["0"]], [, "(\\d{3})(\\d{4})(\\d{3})", "$1 $2 $3", ["8"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BY: [, [,, "(?:[12]\\d|33|44|902)\\d{7}|8(?:0[0-79]\\d{5,7}|[1-7]\\d{9})|8(?:1[0-489]|[5-79]\\d)\\d{7}|8[1-79]\\d{6,7}|8[0-79]\\d{5}|8\\d{5}",,,,,,, [6, 7, 8, 9, 10, 11], [5]], [,, "(?:1(?:5(?:1[1-5]|[24]\\d|6[2-4]|9[1-7])|6(?:[235]\\d|4[1-7])|7\\d\\d)|2(?:1(?:[246]\\d|3[0-35-9]|5[1-9])|2(?:[235]\\d|4[0-8])|3(?:[26]\\d|3[02-79]|4[024-7]|5[03-7])))\\d{5}",,,, "152450911",,, [9], [5, 6, 7]], [,, "(?:2(?:5[5-79]|9[1-9])|(?:33|44)\\d)\\d{6}",,,, "294911911",,, [9]], [,, "800\\d{3,7}|8(?:0[13]|20\\d)\\d{7}",,,, "8011234567"], [,, "(?:810|902)\\d{7}",,,, "9021234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "249\\d{6}",,,, "249123456",,, [9]], "BY", 375, "810", "8",,, "0|80?",, "8~10",, [[, "(\\d{3})(\\d{3})", "$1 $2", ["800"], "8 $1"], [, "(\\d{3})(\\d{2})(\\d{2,4})", "$1 $2 $3", ["800"], "8 $1"], [, "(\\d{4})(\\d{2})(\\d{3})", "$1 $2-$3", ["1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])", "1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])"], "8 0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["1(?:[56]|7[467])|2[1-3]"], "8 0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[1-4]"], "8 0$1"], [, "(\\d{3})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["[89]"], "8 $1"]],, [,,,,,,,,, [-1]],,, [,, "800\\d{3,7}|(?:8(?:0[13]|10|20\\d)|902)\\d{7}"], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              BZ: [, [,, "(?:0800\\d|[2-8])\\d{6}",,,,,,, [7, 11]], [,, "(?:2(?:[02]\\d|36|[68]0)|[3-58](?:[02]\\d|[68]0)|7(?:[02]\\d|32|[68]0))\\d{4}",,,, "2221234",,, [7]], [,, "6[0-35-7]\\d{5}",,,, "6221234",,, [7]], [,, "0800\\d{7}",,,, "08001234123",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "BZ", 501, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1-$2", ["[2-8]"]], [, "(\\d)(\\d{3})(\\d{4})(\\d{3})", "$1-$2-$3-$4", ["0"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CA: [, [,, "(?:[2-8]\\d|90)\\d{8}|3\\d{6}",,,,,,, [7, 10]], [,, "(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|[26]8|3[178]|50|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|7[39])|90[25])[2-9]\\d{6}",,,, "5062345678",,, [10], [7]], [,, "(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|[26]8|3[178]|50|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|7[39])|90[25])[2-9]\\d{6}",,,, "5062345678",,, [10], [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456",,, [10]], [,, "900[2-9]\\d{6}",,,, "9002123456",,, [10]], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|(?:5(?:00|2[125-9]|33|44|66|77|88)|622)[2-9]\\d{6}",,,, "5002345678",,, [10]], [,, "600[2-9]\\d{6}",,,, "6002012345",,, [10]], "CA", 1, "011", "1",,, "1",,, 1,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "310\\d{4}",,,, "3101234",,, [7]],,, [,,,,,,,,, [-1]]],
              CC: [, [,, "1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}",,,,,,, [6, 7, 8, 9, 10, 12]], [,, "8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\d|70[23]|959))\\d{3}",,,, "891621234",,, [9], [8]], [,, "4(?:79[01]|83[0-389]|94[0-4])\\d{5}|4(?:[0-36]\\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\d{6}",,,, "412345678",,, [9]], [,, "180(?:0\\d{3}|2)\\d{3}",,,, "1800123456",,, [7, 10]], [,, "190[0-26]\\d{6}",,,, "1900123456",,, [10]], [,, "13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}",,,, "1300123456",,, [6, 8, 10, 12]], [,,,,,,,,, [-1]], [,, "14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}",,,, "147101234",,, [9]], "CC", 61, "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "0",,, "([59]\\d{7})$|0", "8$1", "0011",,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CD: [, [,, "(?:(?:[189]|5\\d)\\d|2)\\d{7}|[1-68]\\d{6}",,,,,,, [7, 8, 9, 10]], [,, "(?:(?:12|573)\\d\\d|276)\\d{5}|[1-6]\\d{6}",,,, "1234567"], [,, "88\\d{5}|(?:8[0-69]|9[017-9])\\d{7}",,,, "991234567",,, [7, 9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CD", 243, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["88"], "0$1"], [, "(\\d{2})(\\d{5})", "$1 $2", ["[1-6]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[89]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["5"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CF: [, [,, "(?:[27]\\d{3}|8776)\\d{4}",,,,,,, [8]], [,, "2[12]\\d{6}",,,, "21612345"], [,, "7[024-7]\\d{6}",,,, "70012345"], [,,,,,,,,, [-1]], [,, "8776\\d{4}",,,, "87761234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CF", 236, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[278]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CG: [, [,, "222\\d{6}|(?:0\\d|80)\\d{7}",,,,,,, [9]], [,, "222[1-589]\\d{5}",,,, "222123456"], [,, "026(?:1[0-5]|6[6-9])\\d{4}|0(?:[14-6]\\d\\d|2(?:40|5[5-8]|6[07-9]))\\d{5}",,,, "061234567"], [,,,,,,,,, [-1]], [,, "80[0-2]\\d{6}",,,, "800123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CG", 242, "00",,,,,,,, [[, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["8"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[02]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CH: [, [,, "8\\d{11}|[2-9]\\d{8}",,,,,,, [9, 12]], [,, "(?:2[12467]|3[1-4]|4[134]|5[256]|6[12]|[7-9]1)\\d{7}",,,, "212345678",,, [9]], [,, "(?:6[89]|7[235-9])\\d{7}",,,, "781234567",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "90[016]\\d{6}",,,, "900123456",,, [9]], [,, "84[0248]\\d{6}",,,, "840123456",,, [9]], [,, "878\\d{6}",,,, "878123456",,, [9]], [,,,,,,,,, [-1]], "CH", 41, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8[047]|90"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-79]|81"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["8"], "0$1"]],, [,, "74[0248]\\d{6}",,,, "740123456",,, [9]],,, [,,,,,,,,, [-1]], [,, "5[18]\\d{7}",,,, "581234567",,, [9]],,, [,, "860\\d{9}",,,, "860123456789",,, [12]]],
              CI: [, [,, "[02]\\d{9}",,,,,,, [10]], [,, "2(?:[15]\\d{3}|7(?:2(?:0[23]|1[2357]|2[245]|3[45]|4[3-5])|3(?:06|1[69]|[2-6]7)))\\d{5}",,,, "2123456789"], [,, "0[157]\\d{8}",,,, "0123456789"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CI", 225, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d)(\\d{5})", "$1 $2 $3 $4", ["2"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3 $4", ["0"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CK: [, [,, "[2-578]\\d{4}",,,,,,, [5]], [,, "(?:2\\d|3[13-7]|4[1-5])\\d{3}",,,, "21234"], [,, "[578]\\d{4}",,,, "71234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CK", 682, "00",,,,,,,, [[, "(\\d{2})(\\d{3})", "$1 $2", ["[2-578]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CL: [, [,, "12300\\d{6}|6\\d{9,10}|[2-9]\\d{8}",,,,,,, [9, 10, 11]], [,, "2(?:1982[0-6]|3314[05-9])\\d{3}|(?:2(?:1(?:160|962)|3(?:2\\d\\d|3(?:[03467]\\d|1[0-35-9]|2[1-9]|5[0-24-9]|8[0-3])|600)|646[59])|80[1-9]\\d\\d|9(?:3(?:[0-57-9]\\d\\d|6(?:0[02-9]|[1-9]\\d))|6(?:[0-8]\\d\\d|9(?:[02-79]\\d|1[05-9]))|7[1-9]\\d\\d|9(?:[03-9]\\d\\d|1(?:[0235-9]\\d|4[0-24-9])|2(?:[0-79]\\d|8[0-46-9]))))\\d{4}|(?:22|3[2-5]|[47][1-35]|5[1-3578]|6[13-57]|8[1-9]|9[2458])\\d{7}",,,, "221234567",,, [9]], [,, "2(?:1982[0-6]|3314[05-9])\\d{3}|(?:2(?:1(?:160|962)|3(?:2\\d\\d|3(?:[03467]\\d|1[0-35-9]|2[1-9]|5[0-24-9]|8[0-3])|600)|646[59])|80[1-9]\\d\\d|9(?:3(?:[0-57-9]\\d\\d|6(?:0[02-9]|[1-9]\\d))|6(?:[0-8]\\d\\d|9(?:[02-79]\\d|1[05-9]))|7[1-9]\\d\\d|9(?:[03-9]\\d\\d|1(?:[0235-9]\\d|4[0-24-9])|2(?:[0-79]\\d|8[0-46-9]))))\\d{4}|(?:22|3[2-5]|[47][1-35]|5[1-3578]|6[13-57]|8[1-9]|9[2458])\\d{7}",,,, "221234567",,, [9]], [,, "(?:123|8)00\\d{6}",,,, "800123456",,, [9, 11]], [,,,,,,,,, [-1]], [,, "600\\d{7,8}",,,, "6001234567",,, [10, 11]], [,,,,,,,,, [-1]], [,, "44\\d{7}",,,, "441234567",,, [9]], "CL", 56, "(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0",,,,,,, 1, [[, "(\\d{4})", "$1", ["1(?:[03-589]|21)|[29]0|78"]], [, "(\\d{5})(\\d{4})", "$1 $2", ["219", "2196"], "($1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["44"]], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2[1-36]"], "($1)"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["9[2-9]"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])"], "($1)"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["60|8"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["60"]]], [[, "(\\d{5})(\\d{4})", "$1 $2", ["219", "2196"], "($1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["44"]], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2[1-36]"], "($1)"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["9[2-9]"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])"], "($1)"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["60|8"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["60"]]], [,,,,,,,,, [-1]],,, [,, "600\\d{7,8}",,,,,,, [10, 11]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CM: [, [,, "[26]\\d{8}|88\\d{6,7}",,,,,,, [8, 9]], [,, "2(?:22|33)\\d{6}",,,, "222123456",,, [9]], [,, "(?:24[23]|6(?:[25-9]\\d|40))\\d{6}",,,, "671234567",,, [9]], [,, "88\\d{6,7}",,,, "88012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CM", 237, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["88"]], [, "(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[26]|88"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CN: [, [,, "(?:(?:1[03-689]|2\\d)\\d\\d|6)\\d{8}|1\\d{10}|[126]\\d{6}(?:\\d(?:\\d{2})?)?|86\\d{5,6}|(?:[3-579]\\d|8[0-57-9])\\d{5,9}",,,,,,, [7, 8, 9, 10, 11, 12], [5, 6]], [,, "(?:10(?:[02-79]\\d\\d|[18](?:0[1-9]|[1-9]\\d))|2(?:[02-57-9]\\d{3}|1(?:[18](?:0[1-9]|[1-9]\\d)|[2-79]\\d\\d))|(?:41[03]|8078|9(?:78|94))\\d\\d)\\d{5}|(?:10|2[0-57-9])(?:1(?:00|23)\\d\\d|95\\d{3,4})|(?:41[03]|9(?:78|94))(?:100\\d\\d|95\\d{3,4})|8078123|(?:43[35]|754|851)\\d{7,8}|(?:43[35]|754|851)(?:1(?:00\\d|23)\\d|95\\d{3,4})|(?:3(?:11|7[179])|4(?:[15]1|3[12])|5(?:1\\d|2[37]|3[12]|51|7[13-79]|9[15])|7(?:[39]1|5[57]|6[09])|8(?:71|98))(?:[02-8]\\d{7}|1(?:0(?:0\\d\\d(?:\\d{3})?|[1-9]\\d{5})|[13-9]\\d{6}|2(?:[0-24-9]\\d{5}|3\\d(?:\\d{4})?))|9(?:[0-46-9]\\d{6}|5\\d{3}(?:\\d(?:\\d{2})?)?))|(?:3(?:1[02-9]|35|49|5\\d|7[02-68]|9[1-68])|4(?:1[24-9]|2[179]|3[46-9]|5[2-9]|6[47-9]|7\\d|8[23])|5(?:3[03-9]|4[36]|5[02-9]|6[1-46]|7[028]|80|9[2-46-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[17]\\d|2[248]|3[04-9]|4[3-6]|5[0-3689]|6[2368]|9[02-9])|8(?:1[236-8]|2[5-7]|3\\d|5[2-9]|7[02-9]|8[36-8]|9[1-7])|9(?:0[1-3689]|1[1-79]|3\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))(?:[02-8]\\d{6}|1(?:0(?:0\\d\\d(?:\\d{2})?|[1-9]\\d{4})|[13-9]\\d{5}|2(?:[0-24-9]\\d{4}|3\\d(?:\\d{3})?))|9(?:[0-46-9]\\d{5}|5\\d{3,5}))",,,, "1012345678",,, [7, 8, 9, 10, 11], [5, 6]], [,, "1740[0-5]\\d{6}|1(?:[38]\\d|4[57]|[59][0-35-9]|6[25-7]|7[0-35-8])\\d{8}",,,, "13123456789",,, [11]], [,, "(?:(?:10|21)8|8)00\\d{7}",,,, "8001234567",,, [10, 12]], [,, "16[08]\\d{5}",,,, "16812345",,, [8]], [,, "10(?:10\\d{4}|96\\d{3,4})|400\\d{7}|950\\d{7,8}|(?:2[0-57-9]|3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))96\\d{3,4}",,,, "4001234567",,, [7, 8, 9, 10, 11], [5, 6]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CN", 86, "00|1(?:[12]\\d|79)\\d\\d00", "0",,, "(1(?:[12]\\d|79)\\d\\d)|0",, "00",, [[, "(\\d{5,6})", "$1", ["1(?:00|2[13])|9[56]", "1(?:00|2(?:1|39))|9[56]", "1(?:00|2(?:1|395))|9[56]"]], [, "(\\d{5,6})", "$1", ["1(?:0|23)|781|[1-9]12", "1(?:0|23)|7812|[1-9]123", "1(?:0|23(?:[0-8]|9[0-46-9]))|78123|[1-9]123"]], [, "(\\d{2})(\\d{5,6})", "$1 $2", ["(?:10|2[0-57-9])[19]|3(?:[157]|35|49|9[1-68])|4(?:1[124-9]|2[179]|6[47-9]|7|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:07|1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3|4[13]|5[1-5]|7[0-79]|9[0-35-9])|(?:4[35]|59|85)[1-9]", "(?:10|2[0-57-9])(?:1[02]|9[56])|8078|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\d|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))1", "10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|80781|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\d|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))12", "10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|807812|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\d|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123", "10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\d|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:078|1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123"], "0$1", "$CC $1"], [, "(\\d{3})(\\d{4})", "$1 $2", ["[1-9]", "1[1-9]|26|[3-9]|(?:10|2[0-57-9])(?:[0-8]|9[0-47-9])", "1(?:0(?:[02-8]|1(?:[013-9]|2[0-24-9])|9[0-47-9])|[1-9])|2(?:[0-57-9](?:[02-8]|1(?:0[1-9]|[13-9]|2[0-24-9])|9[0-47-9])|6)|[3-9]", "1(?:0(?:[02-8]|1(?:[013-9]|2[0-24-9])|9[0-47-9])|[1-9])|2(?:[0-57-9](?:[02-8]|1(?:0[1-9]|[13-9]|2[0-24-9])|9[0-47-9])|6)|3(?:[0268]|3[0-46-9]|4[0-8]|9[079])|4(?:[049]|1[03]|2[02-68]|[35]0|6[0-356]|8[014-9])|5(?:0|2[0-24-689]|4[0-2457-9]|6[057-9]|8[1-9]|90)|6(?:[0-24578]|3[06-9]|6[14-79]|9[03-9])|7(?:0[02-9]|2[0135-79]|3[23]|4[0-27-9]|6[1457]|8)|8(?:[046]|1[01459]|2[0-489]|50|8[0-2459]|9[09])|9(?:0[0457]|1[08]|[268]|4[024-9]|5[06-9]|78|94)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\d|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))(?:[02-9]|1(?:[013-9]|2[0-24-9]))", "1(?:0(?:[02-8]|1(?:[013-9]|2[0-24-9])|9[0-47-9])|[1-9])|2(?:[0-57-9](?:[02-8]|1(?:0[1-9]|[13-9]|2[0-24-9])|9[0-47-9])|6)|3(?:[0268]|3[0-46-9]|4[0-8]|9[079])|4(?:[049]|1[03]|2[02-68]|[35]0|6[0-356]|8[014-9])|5(?:0|2[0-24-689]|4[0-2457-9]|6[057-9]|8[1-9]|90)|6(?:[0-24578]|3[06-9]|6[14-79]|9[03-9])|7(?:0[02-9]|2[0135-79]|3[23]|4[0-27-9]|6[1457]|8)|8(?:0(?:[0-689]|7[0-79])|1[01459]|2[0-489]|[46]|50|8[0-2459]|9[09])|9(?:0[0457]|1[08]|[268]|4[024-9]|5[06-9]|78|94)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\d|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:078|1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))(?:[02-9]|1(?:[013-9]|2[0-24-9]))"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["16[08]"]], [, "(\\d{3})(\\d{5,6})", "$1 $2", ["3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]", "(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))[19]", "85[23](?:10|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:10|9[56])", "85[23](?:100|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:100|9[56])"], "0$1", "$CC $1"], [, "(\\d{4})(\\d{4})", "$1 $2", ["[1-9]", "1(?:0(?:[02-8]|1[1-9]|9[0-47-9])|[1-9])|2(?:[0-57-9](?:[0-8]|9[0-47-9])|6)|[3-9]", "1(?:0(?:[02-8]|1[1-9]|9[0-47-9])|[1-9])|26|3(?:[0268]|4[0-8]|9[079])|4(?:[049]|2[02-68]|[35]0|6[0-356]|8[014-9])|5(?:0|2[0-24-689]|4[0-2457-9]|6[057-9]|8[1-9]|90)|6(?:[0-24578]|3[06-9]|6[14-79]|9[03-9])|7(?:0[02-9]|2[0135-79]|3[23]|4[0-27-9]|6[1457]|8)|8(?:[046]|1[01459]|2[0-489]|5(?:0|[23][0-8])|8[0-2459]|9[09])|9(?:0[0457]|1[08]|[268]|4[024-9]|5[06-9])|(?:33|85[23]9)[0-46-9]|(?:2[0-57-9]|3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:[0-8]|9[0-47-9])", "1(?:0[02-8]|[1-9])|2(?:[0-57-9][0-8]|6)|3(?:[0268]|3[0-46-9]|4[0-8]|9[079])|4(?:[049]|2[02-68]|[35]0|6[0-356]|8[014-9])|5(?:0|2[0-24-689]|4[0-2457-9]|6[057-9]|90)|6(?:[0-24578]|3[06-9]|6[14-79]|9[03-9])|7(?:0[02-9]|2[0135-79]|3[23]|4[0-27-9]|6[1457]|8)|8(?:[046]|1[01459]|2[0-489]|5(?:0|[23](?:[02-8]|1[1-9]|9[0-46-9]))|8[0-2459]|9[09])|9(?:0[0457]|1[08]|[268]|4[024-9]|5[06-9])|(?:10|2[0-57-9])9[0-47-9]|(?:101|58|85[23]10)[1-9]|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:[02-8]|1(?:0[1-9]|[1-9])|9[0-47-9])"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["(?:4|80)0"]], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["10|2(?:[02-57-9]|1[1-9])", "10|2(?:[02-57-9]|1[1-9])", "10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{7,8})", "$1 $2", ["9"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["80"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["[3-578]"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["1[3-9]"],, "$CC $1"], [, "(\\d{2})(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["[12]"], "0$1",, 1]], [[, "(\\d{2})(\\d{5,6})", "$1 $2", ["(?:10|2[0-57-9])[19]|3(?:[157]|35|49|9[1-68])|4(?:1[124-9]|2[179]|6[47-9]|7|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:07|1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3|4[13]|5[1-5]|7[0-79]|9[0-35-9])|(?:4[35]|59|85)[1-9]", "(?:10|2[0-57-9])(?:1[02]|9[56])|8078|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\d|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))1", "10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|80781|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\d|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))12", "10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|807812|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\d|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123", "10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\d|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:078|1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123"], "0$1", "$CC $1"], [, "(\\d{3})(\\d{5,6})", "$1 $2", ["3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]", "(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))[19]", "85[23](?:10|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:10|9[56])", "85[23](?:100|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:100|9[56])"], "0$1", "$CC $1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["(?:4|80)0"]], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["10|2(?:[02-57-9]|1[1-9])", "10|2(?:[02-57-9]|1[1-9])", "10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{7,8})", "$1 $2", ["9"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["80"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["[3-578]"], "0$1", "$CC $1", 1], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["1[3-9]"],, "$CC $1"], [, "(\\d{2})(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["[12]"], "0$1",, 1]], [,,,,,,,,, [-1]],,, [,, "(?:(?:10|21)8|[48])00\\d{7}|950\\d{7,8}",,,,,,, [10, 11, 12]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CO: [, [,, "(?:46|60\\d\\d)\\d{6}|(?:1\\d|[39])\\d{9}",,,,,,, [8, 10, 11], [4, 7]], [,, "601055(?:[0-4]\\d|50)\\d\\d|6010(?:[0-4]\\d|5[0-4])\\d{4}|(?:46|60(?:[124-7][2-9]|8[1-9]))\\d{6}",,,, "6012345678",,, [8, 10], [4, 7]], [,, "333301[0-5]\\d{3}|3333(?:00|2[5-9]|[3-9]\\d)\\d{4}|(?:3(?:24[1-9]|3(?:00|3[0-24-9]))|9101)\\d{6}|3(?:0[0-5]|1\\d|2[0-3]|5[01]|70)\\d{7}",,,, "3211234567",,, [10]], [,, "1800\\d{7}",,,, "18001234567",,, [11]], [,, "(?:19(?:0[01]|4[78])|901)\\d{7}",,,, "19001234567",,, [10, 11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CO", 57, "00(?:4(?:[14]4|56)|[579])", "0",,, "0([3579]|4(?:[14]4|56))?",,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["46"]], [, "(\\d{3})(\\d{7})", "$1 $2", ["6|90"], "($1)", "0$CC $1"], [, "(\\d{3})(\\d{7})", "$1 $2", ["3[0-357]|91"],, "0$CC $1"], [, "(\\d)(\\d{3})(\\d{7})", "$1-$2-$3", ["1"], "0$1"]], [[, "(\\d{4})(\\d{4})", "$1 $2", ["46"]], [, "(\\d{3})(\\d{7})", "$1 $2", ["6|90"], "($1)", "0$CC $1"], [, "(\\d{3})(\\d{7})", "$1 $2", ["3[0-357]|91"],, "0$CC $1"], [, "(\\d)(\\d{3})(\\d{7})", "$1 $2 $3", ["1"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CR: [, [,, "(?:8\\d|90)\\d{8}|(?:[24-8]\\d{3}|3005)\\d{4}",,,,,,, [8, 10]], [,, "210[7-9]\\d{4}|2(?:[024-7]\\d|1[1-9])\\d{5}",,,, "22123456",,, [8]], [,, "(?:3005\\d|6500[01])\\d{3}|(?:5[07]|6[0-4]|7[0-3]|8[3-9])\\d{6}",,,, "83123456",,, [8]], [,, "800\\d{7}",,,, "8001234567",,, [10]], [,, "90[059]\\d{7}",,,, "9001234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:210[0-6]|4\\d{3}|5100)\\d{4}",,,, "40001234",,, [8]], "CR", 506, "00",,,, "(19(?:0[0-2468]|1[09]|20|66|77|99))",,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[2-7]|8[3-9]"],, "$CC $1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[89]"],, "$CC $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CU: [, [,, "(?:[2-7]|8\\d\\d)\\d{7}|[2-47]\\d{6}|[34]\\d{5}",,,,,,, [6, 7, 8, 10], [4, 5]], [,, "(?:3[23]|4[89])\\d{4,6}|(?:31|4[36]|8(?:0[25]|78)\\d)\\d{6}|(?:2[1-4]|4[1257]|7\\d)\\d{5,6}",,,, "71234567",,,, [4, 5]], [,, "(?:5\\d|6[2-4])\\d{6}",,,, "51234567",,, [8]], [,, "800\\d{7}",,,, "8001234567",,, [10]], [,,,,,,,,, [-1]], [,, "807\\d{7}",,,, "8071234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CU", 53, "119", "0",,, "0",,,, [[, "(\\d{2})(\\d{4,6})", "$1 $2", ["2[1-4]|[34]"], "(0$1)"], [, "(\\d)(\\d{6,7})", "$1 $2", ["7"], "(0$1)"], [, "(\\d)(\\d{7})", "$1 $2", ["[56]"], "0$1"], [, "(\\d{3})(\\d{7})", "$1 $2", ["8"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CV: [, [,, "(?:[2-59]\\d\\d|800)\\d{4}",,,,,,, [7]], [,, "2(?:2[1-7]|3[0-8]|4[12]|5[1256]|6\\d|7[1-3]|8[1-5])\\d{4}",,,, "2211234"], [,, "(?:36|5[1-389]|9\\d)\\d{5}",,,, "9911234"], [,, "800\\d{4}",,,, "8001234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:3[3-5]|4[356])\\d{5}",,,, "3401234"], "CV", 238, "0",,,,,,,, [[, "(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[2-589]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CW: [, [,, "(?:[34]1|60|(?:7|9\\d)\\d)\\d{5}",,,,,,, [7, 8]], [,, "9(?:4(?:3[0-5]|4[14]|6\\d)|50\\d|7(?:2[014]|3[02-9]|4[4-9]|6[357]|77|8[7-9])|8(?:3[39]|[46]\\d|7[01]|8[57-9]))\\d{4}",,,, "94351234"], [,, "953[01]\\d{4}|9(?:5[12467]|6[5-9])\\d{5}",,,, "95181234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "60[0-2]\\d{4}",,,, "6001234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "CW", 599, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[3467]"]], [, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["9[4-8]"]]],, [,, "955\\d{5}",,,, "95581234",,, [8]], 1, "[69]", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CX: [, [,, "1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}",,,,,,, [6, 7, 8, 9, 10, 12]], [,, "8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\d|7(?:0[01]|1[0-2])|958))\\d{3}",,,, "891641234",,, [9], [8]], [,, "4(?:79[01]|83[0-389]|94[0-4])\\d{5}|4(?:[0-36]\\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\d{6}",,,, "412345678",,, [9]], [,, "180(?:0\\d{3}|2)\\d{3}",,,, "1800123456",,, [7, 10]], [,, "190[0-26]\\d{6}",,,, "1900123456",,, [10]], [,, "13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}",,,, "1300123456",,, [6, 8, 10, 12]], [,,,,,,,,, [-1]], [,, "14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}",,,, "147101234",,, [9]], "CX", 61, "001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011", "0",,, "([59]\\d{7})$|0", "8$1", "0011",,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              CY: [, [,, "(?:[279]\\d|[58]0)\\d{6}",,,,,,, [8]], [,, "2[2-6]\\d{6}",,,, "22345678"], [,, "9(?:10|[4-79]\\d)\\d{5}",,,, "96123456"], [,, "800\\d{5}",,,, "80001234"], [,, "90[09]\\d{5}",,,, "90012345"], [,, "80[1-9]\\d{5}",,,, "80112345"], [,, "700\\d{5}",,,, "70012345"], [,,,,,,,,, [-1]], "CY", 357, "00",,,,,,,, [[, "(\\d{2})(\\d{6})", "$1 $2", ["[257-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "(?:50|77)\\d{6}",,,, "77123456"],,, [,,,,,,,,, [-1]]],
              CZ: [, [,, "(?:[2-578]\\d|60)\\d{7}|9\\d{8,11}",,,,,,, [9, 10, 11, 12]], [,, "(?:2\\d|3[1257-9]|4[16-9]|5[13-9])\\d{7}",,,, "212345678",,, [9]], [,, "(?:60[1-8]\\d|7(?:0(?:[2-5]\\d|60)|19[01]|[2379]\\d\\d))\\d{5}",,,, "601123456",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "9(?:0[05689]|76)\\d{6}",,,, "900123456",,, [9]], [,, "8[134]\\d{7}",,,, "811234567",,, [9]], [,, "70[01]\\d{6}",,,, "700123456",,, [9]], [,, "9[17]0\\d{6}",,,, "910123456",,, [9]], "CZ", 420, "00",,,,,,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-8]|9[015-7]"]], [, "(\\d{2})(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3 $4", ["96"]], [, "(\\d{2})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]], [, "(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "9(?:5\\d|7[2-4])\\d{6}",,,, "972123456",,, [9]],,, [,, "9(?:3\\d{9}|6\\d{7,10})",,,, "93123456789"]],
              DE: [, [,, "[2579]\\d{5,14}|49(?:[34]0|69|8\\d)\\d\\d?|49(?:37|49|60|7[089]|9\\d)\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\d{1,8}|(?:1|[368]\\d|4[0-8])\\d{3,13}|49(?:[015]\\d|2[13]|31|[46][1-8])\\d{1,9}",,,,,,, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [2, 3]], [,, "32\\d{9,11}|49[1-6]\\d{10}|322\\d{6}|49[0-7]\\d{3,9}|(?:[34]0|[68]9)\\d{3,13}|(?:2(?:0[1-689]|[1-3569]\\d|4[0-8]|7[1-7]|8[0-7])|3(?:[3569]\\d|4[0-79]|7[1-7]|8[1-8])|4(?:1[02-9]|[2-48]\\d|5[0-6]|6[0-8]|7[0-79])|5(?:0[2-8]|[124-6]\\d|[38][0-8]|[79][0-7])|6(?:0[02-9]|[1-358]\\d|[47][0-8]|6[1-9])|7(?:0[2-8]|1[1-9]|[27][0-7]|3\\d|[4-6][0-8]|8[0-5]|9[013-7])|8(?:0[2-9]|1[0-79]|2\\d|3[0-46-9]|4[0-6]|5[013-9]|6[1-8]|7[0-8]|8[0-24-6])|9(?:0[6-9]|[1-4]\\d|[589][0-7]|6[0-8]|7[0-467]))\\d{3,12}",,,, "30123456",,, [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [2, 3, 4]], [,, "16[023]\\d{7,8}|1(?:5310|7[0-57-9]\\d)\\d{6}|1(?:5[0-25-9]|76)\\d{8}",,,, "15123456789",,, [10, 11]], [,, "800\\d{7,12}",,,, "8001234567890",,, [10, 11, 12, 13, 14, 15]], [,, "(?:137[7-9]|900(?:[135]|9\\d))\\d{6}",,,, "9001234567",,, [10, 11]], [,, "180\\d{5,11}|13(?:7[1-6]\\d\\d|8)\\d{4}",,,, "18012345",,, [7, 8, 9, 10, 11, 12, 13, 14]], [,, "700\\d{8}",,,, "70012345678",,, [11]], [,,,,,,,,, [-1]], "DE", 49, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3,13})", "$1 $2", ["3[02]|40|[68]9"], "0$1"], [, "(\\d{3})(\\d{3,12})", "$1 $2", ["2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1", "2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1"], "0$1"], [, "(\\d{4})(\\d{2,11})", "$1 $2", ["[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]", "[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]"], "0$1"], [, "(\\d{3})(\\d{4})", "$1 $2", ["138"], "0$1"], [, "(\\d{5})(\\d{2,10})", "$1 $2", ["3"], "0$1"], [, "(\\d{3})(\\d{5,11})", "$1 $2", ["181"], "0$1"], [, "(\\d{3})(\\d)(\\d{4,10})", "$1 $2 $3", ["1(?:3|80)|9"], "0$1"], [, "(\\d{3})(\\d{7,8})", "$1 $2", ["1[67]"], "0$1"], [, "(\\d{3})(\\d{7,12})", "$1 $2", ["8"], "0$1"], [, "(\\d{5})(\\d{6})", "$1 $2", ["185", "1850", "18500"], "0$1"], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], [, "(\\d{4})(\\d{7})", "$1 $2", ["18[68]"], "0$1"], [, "(\\d{4})(\\d{7})", "$1 $2", ["15[1279]"], "0$1"], [, "(\\d{5})(\\d{6})", "$1 $2", ["15[03568]", "15(?:[0568]|31)"], "0$1"], [, "(\\d{3})(\\d{8})", "$1 $2", ["18"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{7,8})", "$1 $2 $3", ["1(?:6[023]|7)"], "0$1"], [, "(\\d{4})(\\d{2})(\\d{7})", "$1 $2 $3", ["15[279]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{8})", "$1 $2 $3", ["15"], "0$1"]],, [,, "16(?:4\\d{1,10}|[89]\\d{1,11})",,,, "16412345",,, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]],,, [,,,,,,,,, [-1]], [,, "18(?:1\\d{5,11}|[2-9]\\d{8})",,,, "18500123456",,, [8, 9, 10, 11, 12, 13, 14]],,, [,, "1(?:6(?:013|255|399)|7(?:(?:[015]1|[69]3)3|[2-4]55|[78]99))\\d{7,8}|15(?:(?:[03-68]00|113)\\d|2\\d55|7\\d99|9\\d33)\\d{7}",,,, "177991234567",,, [12, 13]]],
              DJ: [, [,, "(?:2\\d|77)\\d{6}",,,,,,, [8]], [,, "2(?:1[2-5]|7[45])\\d{5}",,,, "21360003"], [,, "77\\d{6}",,,, "77831001"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "DJ", 253, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[27]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              DK: [, [,, "[2-9]\\d{7}",,,,,,, [8]], [,, "(?:(?:2\\d|9[1-46-9])\\d|3(?:[0-37]\\d|4[013]|5[0-58]|6[01347-9]|8[0-8]|9[0-79])|4(?:[0-25]\\d|[34][02-9]|6[013-579]|7[013579]|8[0-47]|9[0-27])|5(?:[0-36]\\d|4[0146-9]|5[03-57-9]|7[0568]|8[0-358]|9[0-69])|6(?:[013578]\\d|2[0-68]|4[02-8]|6[01689]|9[015689])|7(?:[0-69]\\d|7[03-9]|8[0147])|8(?:[16-9]\\d|2[0-58]))\\d{5}",,,, "32123456"], [,, "(?:[2-7]\\d|8[126-9]|9[1-46-9])\\d{6}",,,, "34412345"], [,, "80\\d{6}",,,, "80123456"], [,, "90\\d{6}",,,, "90123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "DK", 45, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              DM: [, [,, "(?:[58]\\d\\d|767|900)\\d{7}",,,,,,, [10], [7]], [,, "767(?:2(?:55|66)|4(?:2[01]|4[0-25-9])|50[0-4])\\d{4}",,,, "7674201234",,,, [7]], [,, "767(?:2(?:[2-4689]5|7[5-7])|31[5-7]|61[1-8]|70[1-6])\\d{4}",,,, "7672251234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "DM", 1, "011", "1",,, "([2-7]\\d{6})$|1", "767$1",,,,, [,,,,,,,,, [-1]],, "767", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              DO: [, [,, "(?:[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "8(?:[04]9[2-9]\\d\\d|29(?:2(?:[0-59]\\d|6[04-9]|7[0-27]|8[0237-9])|3(?:[0-35-9]\\d|4[7-9])|[45]\\d\\d|6(?:[0-27-9]\\d|[3-5][1-9]|6[0135-8])|7(?:0[013-9]|[1-37]\\d|4[1-35689]|5[1-4689]|6[1-57-9]|8[1-79]|9[1-8])|8(?:0[146-9]|1[0-48]|[248]\\d|3[1-79]|5[01589]|6[013-68]|7[124-8]|9[0-8])|9(?:[0-24]\\d|3[02-46-9]|5[0-79]|60|7[0169]|8[57-9]|9[02-9])))\\d{4}",,,, "8092345678",,,, [7]], [,, "8[024]9[2-9]\\d{6}",,,, "8092345678",,,, [7]], [,, "8(?:00(?:14|[2-9]\\d)|(?:33|44|55|66|77|88)[2-9]\\d)\\d{5}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "DO", 1, "011", "1",,, "1",,,,,, [,,,,,,,,, [-1]],, "8001|8[024]9", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              DZ: [, [,, "(?:[1-4]|[5-79]\\d|80)\\d{7}",,,,,,, [8, 9]], [,, "9619\\d{5}|(?:1\\d|2[013-79]|3[0-8]|4[013-689])\\d{6}",,,, "12345678"], [,, "(?:5(?:4[0-29]|5\\d|6[0-3])|6(?:[569]\\d|7[0-6])|7[7-9]\\d)\\d{6}",,,, "551234567",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "80[3-689]1\\d{5}",,,, "808123456",,, [9]], [,, "80[12]1\\d{5}",,,, "801123456",,, [9]], [,,,,,,,,, [-1]], [,, "98[23]\\d{6}",,,, "983123456",,, [9]], "DZ", 213, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[1-4]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["9"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-8]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              EC: [, [,, "1\\d{9,10}|(?:[2-7]|9\\d)\\d{7}",,,,,,, [8, 9, 10, 11], [7]], [,, "[2-7][2-7]\\d{6}",,,, "22123456",,, [8], [7]], [,, "964[0-2]\\d{5}|9(?:39|[57][89]|6[0-36-9]|[89]\\d)\\d{6}",,,, "991234567",,, [9]], [,, "1800\\d{7}|1[78]00\\d{6}",,,, "18001234567",,, [10, 11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "[2-7]890\\d{4}",,,, "28901234",,, [8]], "EC", 593, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{4})", "$1-$2", ["[2-7]"]], [, "(\\d)(\\d{3})(\\d{4})", "$1 $2-$3", ["[2-7]"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["9"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1"]]], [[, "(\\d)(\\d{3})(\\d{4})", "$1-$2-$3", ["[2-7]"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["9"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              EE: [, [,, "8\\d{9}|[4578]\\d{7}|(?:[3-8]\\d|90)\\d{5}",,,,,,, [7, 8, 10]], [,, "(?:3[23589]|4[3-8]|6\\d|7[1-9]|88)\\d{5}",,,, "3212345",,, [7]], [,, "(?:5\\d{5}|8(?:1(?:0(?:0(?:00|[178]\\d)|[3-9]\\d\\d)|(?:1(?:0[2-6]|1\\d)|(?:2[0-59]|[3-79]\\d)\\d)\\d)|2(?:0(?:0(?:00|4\\d)|(?:19|[2-7]\\d)\\d)|(?:(?:[124-69]\\d|3[5-9])\\d|7(?:[0-79]\\d|8[13-9])|8(?:[2-6]\\d|7[01]))\\d)|[349]\\d{4}))\\d\\d|5(?:(?:[02]\\d|5[0-478])\\d|1(?:[0-8]\\d|95)|6(?:4[0-4]|5[1-589]))\\d{3}",,,, "51234567",,, [7, 8]], [,, "800(?:(?:0\\d\\d|1)\\d|[2-9])\\d{3}",,,, "80012345"], [,, "(?:40\\d\\d|900)\\d{4}",,,, "9001234",,, [7, 8]], [,,,,,,,,, [-1]], [,, "70[0-2]\\d{5}",,,, "70012345",,, [8]], [,,,,,,,,, [-1]], "EE", 372, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88", "[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88"]], [, "(\\d{4})(\\d{3,4})", "$1 $2", ["[45]|8(?:00|[1-49])", "[45]|8(?:00[1-9]|[1-49])"]], [, "(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["7"]], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]]],, [,,,,,,,,, [-1]],,, [,, "800[2-9]\\d{3}",,,,,,, [7]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              EG: [, [,, "[189]\\d{8,9}|[24-6]\\d{8}|[135]\\d{7}",,,,,,, [8, 9, 10], [6, 7]], [,, "13[23]\\d{6}|(?:15|57)\\d{6,7}|(?:2\\d|3|4[05-8]|5[05]|6[24-689]|8[2468]|9[235-7])\\d{7}",,,, "234567890",,, [8, 9], [6, 7]], [,, "1[0-25]\\d{8}",,,, "1001234567",,, [10]], [,, "800\\d{7}",,,, "8001234567",,, [10]], [,, "900\\d{7}",,,, "9001234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "EG", 20, "00", "0",,, "0",,,, [[, "(\\d)(\\d{7,8})", "$1 $2", ["[23]"], "0$1"], [, "(\\d{2})(\\d{6,7})", "$1 $2", ["1[35]|[4-6]|8[2468]|9[235-7]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[89]"], "0$1"], [, "(\\d{2})(\\d{8})", "$1 $2", ["1"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              EH: [, [,, "[5-8]\\d{8}",,,,,,, [9]], [,, "528[89]\\d{5}",,,, "528812345"], [,, "(?:6(?:[0-79]\\d|8[0-247-9])|7(?:[0167]\\d|2[0-4]|5[01]|8[0-3]))\\d{6}",,,, "650123456"], [,, "80[0-7]\\d{6}",,,, "801234567"], [,, "89\\d{7}",,,, "891234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:592(?:4[0-2]|93)|80[89]\\d\\d)\\d{4}",,,, "592401234"], "EH", 212, "00", "0",,, "0",,,,,, [,,,,,,,,, [-1]],, "528[89]", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              ER: [, [,, "[178]\\d{6}",,,,,,, [7], [6]], [,, "(?:1(?:1[12568]|[24]0|55|6[146])|8\\d\\d)\\d{4}",,,, "8370362",,,, [6]], [,, "(?:17[1-3]|7\\d\\d)\\d{4}",,,, "7123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "ER", 291, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[178]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              ES: [, [,, "[5-9]\\d{8}",,,,,,, [9]], [,, "96906(?:0[0-8]|1[1-9]|[2-9]\\d)\\d\\d|9(?:69(?:0[0-57-9]|[1-9]\\d)|73(?:[0-8]\\d|9[1-9]))\\d{4}|(?:8(?:[1356]\\d|[28][0-8]|[47][1-9])|9(?:[135]\\d|[268][0-8]|4[1-9]|7[124-9]))\\d{6}",,,, "810123456"], [,, "(?:590[16]00\\d|9(?:6906(?:09|10)|7390\\d\\d))\\d\\d|(?:6\\d|7[1-48])\\d{7}",,,, "612345678"], [,, "[89]00\\d{6}",,,, "800123456"], [,, "80[367]\\d{6}",,,, "803123456"], [,, "90[12]\\d{6}",,,, "901123456"], [,, "70\\d{7}",,,, "701234567"], [,,,,,,,,, [-1]], "ES", 34, "00",,,,,,,, [[, "(\\d{4})", "$1", ["905"]], [, "(\\d{6})", "$1", ["[79]9"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[89]00"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-9]"]]], [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[89]00"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-9]"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "51\\d{7}",,,, "511234567"],,, [,,,,,,,,, [-1]]],
              ET: [, [,, "(?:11|[2-579]\\d)\\d{7}",,,,,,, [9], [7]], [,, "11667[01]\\d{3}|(?:11(?:1(?:1[124]|2[2-7]|3[1-5]|5[5-8]|8[6-8])|2(?:13|3[6-8]|5[89]|7[05-9]|8[2-6])|3(?:2[01]|3[0-289]|4[1289]|7[1-4]|87)|4(?:1[69]|3[2-49]|4[0-3]|6[5-8]|7\\d)|5(?:1[578]|44|5[0-4])|6(?:1[578]|2[69]|39|4[5-7]|5[0-5]|6[0-59]|8[015-8]))|2(?:2(?:11[1-9]|22[0-7]|33\\d|44[1467]|66[1-68])|5(?:11[124-6]|33[2-8]|44[1467]|55[14]|66[1-3679]|77[124-79]|880))|3(?:3(?:11[0-46-8]|(?:22|55)[0-6]|33[0134689]|44[04]|66[01467])|4(?:44[0-8]|55[0-69]|66[0-3]|77[1-5]))|4(?:6(?:119|22[0-24-7]|33[1-5]|44[13-69]|55[14-689]|660|88[1-4])|7(?:(?:11|22)[1-9]|33[13-7]|44[13-6]|55[1-689]))|5(?:7(?:227|55[05]|(?:66|77)[14-8])|8(?:11[149]|22[013-79]|33[0-68]|44[013-8]|550|66[1-5]|77\\d)))\\d{4}",,,, "111112345",,,, [7]], [,, "700[1-9]\\d{5}|(?:7(?:0[1-9]|1[0-8]|22|77|86|99)|9\\d\\d)\\d{6}",,,, "911234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "ET", 251, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-579]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              FI: [, [,, "[1-35689]\\d{4}|7\\d{10,11}|(?:[124-7]\\d|3[0-46-9])\\d{8}|[1-9]\\d{5,8}",,,,,,, [5, 6, 7, 8, 9, 10, 11, 12]], [,, "1[35-7][1-8]\\d{3,6}|(?:1[49][1-8]|[23568][1-8]\\d|9(?:00|[1-8]\\d))\\d{2,6}",,,, "131234567",,, [5, 6, 7, 8, 9]], [,, "4946\\d{2,6}|(?:4[0-8]|50)\\d{4,8}",,,, "412345678",,, [6, 7, 8, 9, 10]], [,, "800\\d{4,6}",,,, "800123456",,, [7, 8, 9]], [,, "[67]00\\d{5,6}",,,, "600123456",,, [8, 9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "FI", 358, "00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))", "0",,, "0",, "00",, [[, "(\\d{5})", "$1", ["75[12]"], "0$1"], [, "(\\d{5})", "$1", ["20[2-59]"], "0$1"], [, "(\\d{6})", "$1", ["11"]], [, "(\\d{3})(\\d{3,7})", "$1 $2", ["(?:[1-3]0|[68])0|70[07-9]"], "0$1"], [, "(\\d{2})(\\d{4,8})", "$1 $2", ["[14]|2[09]|50|7[135]"], "0$1"], [, "(\\d{2})(\\d{6,10})", "$1 $2", ["7"], "0$1"], [, "(\\d)(\\d{4,9})", "$1 $2", ["(?:1[49]|[2568])[1-8]|3(?:0[1-9]|[1-9])|9"], "0$1"]], [[, "(\\d{5})", "$1", ["20[2-59]"], "0$1"], [, "(\\d{3})(\\d{3,7})", "$1 $2", ["(?:[1-3]0|[68])0|70[07-9]"], "0$1"], [, "(\\d{2})(\\d{4,8})", "$1 $2", ["[14]|2[09]|50|7[135]"], "0$1"], [, "(\\d{2})(\\d{6,10})", "$1 $2", ["7"], "0$1"], [, "(\\d)(\\d{4,9})", "$1 $2", ["(?:1[49]|[2568])[1-8]|3(?:0[1-9]|[1-9])|9"], "0$1"]], [,,,,,,,,, [-1]], 1, "1[03-79]|[2-9]", [,, "20(?:2[023]|9[89])\\d{1,6}|(?:60[12]\\d|7099)\\d{4,5}|(?:606|7(?:0[78]|1|3\\d))\\d{7}|(?:[1-3]00|7(?:0[1-5]\\d\\d|5[03-9]))\\d{3,7}"], [,, "20\\d{4,8}|60[12]\\d{5,6}|7(?:099\\d{4,5}|5[03-9]\\d{3,7})|20[2-59]\\d\\d|(?:606|7(?:0[78]|1|3\\d))\\d{7}|(?:10|29|3[09]|70[1-5]\\d)\\d{4,8}",,,, "10112345"],,, [,,,,,,,,, [-1]]],
              FJ: [, [,, "45\\d{5}|(?:0800\\d|[235-9])\\d{6}",,,,,,, [7, 11]], [,, "603\\d{4}|(?:3[0-5]|6[25-7]|8[58])\\d{5}",,,, "3212345",,, [7]], [,, "(?:[279]\\d|45|5[01568]|8[034679])\\d{5}",,,, "7012345",,, [7]], [,, "0800\\d{7}",,,, "08001234567",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "FJ", 679, "0(?:0|52)",,,,,, "00",, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[235-9]|45"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["0"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              FK: [, [,, "[2-7]\\d{4}",,,,,,, [5]], [,, "[2-47]\\d{4}",,,, "31234"], [,, "[56]\\d{4}",,,, "51234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "FK", 500, "00",,,,,,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              FM: [, [,, "(?:[39]\\d\\d|820)\\d{4}",,,,,,, [7]], [,, "31(?:00[67]|208|309)\\d\\d|(?:3(?:[2357]0[1-9]|602|804|905)|(?:820|9[2-6]\\d)\\d)\\d{3}",,,, "3201234"], [,, "31(?:00[67]|208|309)\\d\\d|(?:3(?:[2357]0[1-9]|602|804|905)|(?:820|9[2-7]\\d)\\d)\\d{3}",,,, "3501234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "FM", 691, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[389]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              FO: [, [,, "[2-9]\\d{5}",,,,,,, [6]], [,, "(?:20|[34]\\d|8[19])\\d{4}",,,, "201234"], [,, "(?:[27][1-9]|5\\d|9[16])\\d{4}",,,, "211234"], [,, "80[257-9]\\d{3}",,,, "802123"], [,, "90(?:[13-5][15-7]|2[125-7]|9\\d)\\d\\d",,,, "901123"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:6[0-36]|88)\\d{4}",,,, "601234"], "FO", 298, "00",,,, "(10(?:01|[12]0|88))",,,, [[, "(\\d{6})", "$1", ["[2-9]"],, "$CC $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              FR: [, [,, "[1-9]\\d{8}",,,,,,, [9]], [,, "(?:26[013-9]|59[1-35-9])\\d{6}|(?:[13]\\d|2[0-57-9]|4[1-9]|5[0-8])\\d{7}",,,, "123456789"], [,, "(?:6(?:[0-24-8]\\d|3[0-8]|9[589])|7[3-9]\\d)\\d{6}",,,, "612345678"], [,, "80[0-5]\\d{6}",,,, "801234567"], [,, "836(?:0[0-36-9]|[1-9]\\d)\\d{4}|8(?:1[2-9]|2[2-47-9]|3[0-57-9]|[569]\\d|8[0-35-9])\\d{6}",,,, "891123456"], [,, "8(?:1[01]|2[0156]|4[024]|84)\\d{6}",,,, "884012345"], [,,,,,,,,, [-1]], [,, "9\\d{8}",,,, "912345678"], "FR", 33, "00", "0",,, "0",,,, [[, "(\\d{4})", "$1", ["10"]], [, "(\\d{3})(\\d{3})", "$1 $2", ["1"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0 $1"], [, "(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[1-79]"], "0$1"]], [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0 $1"], [, "(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[1-79]"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "80[6-9]\\d{6}",,,, "806123456"],,, [,,,,,,,,, [-1]]],
              GA: [, [,, "(?:[067]\\d|11)\\d{6}|[2-7]\\d{6}",,,,,,, [7, 8]], [,, "[01]1\\d{6}",,,, "01441234",,, [8]], [,, "(?:(?:0[2-7]|7[467])\\d|6(?:0[0-4]|10|[256]\\d))\\d{5}|[2-7]\\d{6}",,,, "06031234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GA", 241, "00",,,, "0(11\\d{6}|60\\d{6}|61\\d{6}|6[256]\\d{6}|7[467]\\d{6})", "$1",,, [[, "(\\d)(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-7]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["0"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["11|[67]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GB: [, [,, "[1-357-9]\\d{9}|[18]\\d{8}|8\\d{6}",,,,,,, [7, 9, 10], [4, 5, 6, 8]], [,, "(?:1(?:1(?:3(?:[0-58]\\d\\d|73[0-35])|4(?:(?:[0-5]\\d|70)\\d|69[7-9])|(?:(?:5[0-26-9]|[78][0-49])\\d|6(?:[0-4]\\d|50))\\d)|(?:2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\d)\\d|1(?:[0-7]\\d|8[0-3]))|(?:3(?:0\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\d)\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\d{3})\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\d)|76\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\d|7[4-79])|295[5-7]|35[34]\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\d{3}",,,, "1212345678",,, [9, 10], [4, 5, 6, 7, 8]], [,, "7(?:457[0-57-9]|700[01]|911[028])\\d{5}|7(?:[1-3]\\d\\d|4(?:[0-46-9]\\d|5[0-689])|5(?:0[0-8]|[13-9]\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\d|8[02-9]|9[0-689])|8(?:[014-9]\\d|[23][0-8])|9(?:[024-9]\\d|1[02-9]|3[0-689]))\\d{6}",,,, "7400123456",,, [10]], [,, "80[08]\\d{7}|800\\d{6}|8001111",,,, "8001234567"], [,, "(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[2-49]))\\d{7}|845464\\d",,,, "9012345678",,, [7, 10]], [,,,,,,,,, [-1]], [,, "70\\d{8}",,,, "7012345678",,, [10]], [,, "56\\d{8}",,,, "5612345678",,, [10]], "GB", 44, "00", "0", " x",, "0",,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["800", "8001", "80011", "800111", "8001111"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["845", "8454", "84546", "845464"], "0$1"], [, "(\\d{3})(\\d{6})", "$1 $2", ["800"], "0$1"], [, "(\\d{5})(\\d{4,5})", "$1 $2", ["1(?:38|5[23]|69|76|94)", "1(?:(?:38|69)7|5(?:24|39)|768|946)", "1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)"], "0$1"], [, "(\\d{4})(\\d{5,6})", "$1 $2", ["1(?:[2-69][02-9]|[78])"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["[25]|7(?:0|6[02-9])", "[25]|7(?:0|6(?:[03-9]|2[356]))"], "0$1"], [, "(\\d{4})(\\d{6})", "$1 $2", ["7"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1389]"], "0$1"]],, [,, "76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}",,,, "7640123456",,, [10]], 1,, [,,,,,,,,, [-1]], [,, "(?:3[0347]|55)\\d{8}",,,, "5512345678",,, [10]],,, [,,,,,,,,, [-1]]],
              GD: [, [,, "(?:473|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "473(?:2(?:3[0-2]|69)|3(?:2[89]|86)|4(?:[06]8|3[5-9]|4[0-4]|5[579]|73|90)|63[68]|7(?:58|84)|800|938)\\d{4}",,,, "4732691234",,,, [7]], [,, "473(?:4(?:0[2-79]|1[04-9]|2[0-5]|49|5[68])|5(?:2[01]|3[3-8])|901)\\d{4}",,,, "4734031234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "GD", 1, "011", "1",,, "([2-9]\\d{6})$|1", "473$1",,,,, [,,,,,,,,, [-1]],, "473", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GE: [, [,, "(?:[3-57]\\d\\d|800)\\d{6}",,,,,,, [9], [6, 7]], [,, "(?:3(?:[256]\\d|4[124-9]|7[0-4])|4(?:1\\d|2[2-7]|3[1-79]|4[2-8]|7[239]|9[1-7]))\\d{6}",,,, "322123456",,,, [6, 7]], [,, "5(?:(?:(?:0555|1(?:[17]77|555))[5-9]|757(?:7[7-9]|8[01]))\\d|22252[0-4])\\d\\d|5(?:0(?:0[17]0|505)|1(?:0[01]0|1(?:07|33|51))|2(?:0[02]0|2[25]2)|3(?:0[03]0|3[35]3)|(?:40[04]|900)0|5222)[0-4]\\d{3}|(?:5(?:0(?:0(?:0\\d|11|22|3[0-6]|44|5[05]|77|88|9[09])|111|22[02]|77\\d)|1(?:1(?:[03][01]|[124]\\d|5[2-6]|7[0-4])|4\\d\\d)|[23]555|4(?:4\\d\\d|555)|5(?:[0157-9]\\d\\d|200)|6[89]\\d\\d|7(?:[0147-9]\\d\\d|5(?:00|[57]5))|8(?:0(?:[018]\\d|2[0-4])|5(?:55|8[89])|8(?:55|88))|9(?:090|[1-35-9]\\d\\d))|790\\d\\d)\\d{4}",,,, "555123456"], [,, "800\\d{6}",,,, "800123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "70[67]\\d{6}",,,, "706123456"], "GE", 995, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["70"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["32"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[57]"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[348]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,, "70[67]\\d{6}"], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GF: [, [,, "[56]94\\d{6}|(?:80|9\\d)\\d{7}",,,,,,, [9]], [,, "594(?:[02-49]\\d|1[0-5]|5[6-9]|6[0-3]|80)\\d{4}",,,, "594101234"], [,, "694(?:[0-249]\\d|3[0-8])\\d{4}",,,, "694201234"], [,, "80[0-5]\\d{6}",,,, "800012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "9(?:(?:396|76\\d)\\d|476[0-5])\\d{4}",,,, "976012345"], "GF", 594, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[56]|9[47]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[89]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GG: [, [,, "(?:1481|[357-9]\\d{3})\\d{6}|8\\d{6}(?:\\d{2})?",,,,,,, [7, 9, 10], [6]], [,, "1481[25-9]\\d{5}",,,, "1481256789",,, [10], [6]], [,, "7(?:(?:781|839)\\d|911[17])\\d{5}",,,, "7781123456",,, [10]], [,, "80[08]\\d{7}|800\\d{6}|8001111",,,, "8001234567"], [,, "(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[0-3]))\\d{7}|845464\\d",,,, "9012345678",,, [7, 10]], [,,,,,,,,, [-1]], [,, "70\\d{8}",,,, "7012345678",,, [10]], [,, "56\\d{8}",,,, "5612345678",,, [10]], "GG", 44, "00", "0",,, "([25-9]\\d{5})$|0", "1481$1",,,,, [,, "76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}",,,, "7640123456",,, [10]],,, [,,,,,,,,, [-1]], [,, "(?:3[0347]|55)\\d{8}",,,, "5512345678",,, [10]],,, [,,,,,,,,, [-1]]],
              GH: [, [,, "(?:[235]\\d{3}|800)\\d{5}",,,,,,, [8, 9], [7]], [,, "3082[0-5]\\d{4}|3(?:0(?:[237]\\d|8[01])|[167](?:2[0-6]|7\\d|80)|2(?:2[0-5]|7\\d|80)|3(?:2[0-3]|7\\d|80)|4(?:2[013-9]|3[01]|7\\d|80)|5(?:2[0-7]|7\\d|80)|8(?:2[0-2]|7\\d|80)|9(?:[28]0|7\\d))\\d{5}",,,, "302345678",,, [9], [7]], [,, "(?:2(?:[0346-9]\\d|5[67])|5(?:[03-7]\\d|9[1-9]))\\d{6}",,,, "231234567",,, [9]], [,, "800\\d{5}",,,, "80012345",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GH", 233, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[237]|8[0-2]"]], [, "(\\d{3})(\\d{5})", "$1 $2", ["8"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[235]"], "0$1"]], [[, "(\\d{3})(\\d{5})", "$1 $2", ["8"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[235]"], "0$1"]], [,,,,,,,,, [-1]],,, [,, "800\\d{5}",,,,,,, [8]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GI: [, [,, "(?:[25]\\d|60)\\d{6}",,,,,,, [8]], [,, "2190[0-2]\\d{3}|2(?:0(?:[02]\\d|3[01])|16[24-9]|2[2-5]\\d)\\d{4}",,,, "20012345"], [,, "5251[0-4]\\d{3}|(?:5(?:[146-8]\\d\\d|250)|60(?:1[01]|6\\d))\\d{4}",,,, "57123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GI", 350, "00",,,,,,,, [[, "(\\d{3})(\\d{5})", "$1 $2", ["2"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GL: [, [,, "(?:19|[2-689]\\d|70)\\d{4}",,,,,,, [6]], [,, "(?:19|3[1-7]|[68][1-9]|70|9\\d)\\d{4}",,,, "321000"], [,, "[245]\\d{5}",,,, "221234"], [,, "80\\d{4}",,,, "801234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "3[89]\\d{4}",,,, "381234"], "GL", 299, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["19|[2-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GM: [, [,, "[2-9]\\d{6}",,,,,,, [7]], [,, "(?:4(?:[23]\\d\\d|4(?:1[024679]|[6-9]\\d))|5(?:5(?:3\\d|4[0-7])|6[67]\\d|7(?:1[04]|2[035]|3[58]|48))|8\\d{3})\\d{3}",,,, "5661234"], [,, "(?:[23679]\\d|4[015]|5[0-489])\\d{5}",,,, "3012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GM", 220, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GN: [, [,, "722\\d{6}|(?:3|6\\d)\\d{7}",,,,,,, [8, 9]], [,, "3(?:0(?:24|3[12]|4[1-35-7]|5[13]|6[189]|[78]1|9[1478])|1\\d\\d)\\d{4}",,,, "30241234",,, [8]], [,, "6[0-356]\\d{7}",,,, "601123456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "722\\d{6}",,,, "722123456",,, [9]], "GN", 224, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["3"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[67]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GP: [, [,, "590\\d{6}|(?:69|80|9\\d)\\d{7}",,,,,,, [9]], [,, "590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1-9]|5[3-579]|[68][0-689]|7[08]|9\\d)\\d{4}",,,, "590201234"], [,, "69(?:0\\d\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\d)|6(?:1[016-9]|5[0-4]|[67]\\d))\\d{4}",,,, "690001234"], [,, "80[0-5]\\d{6}",,,, "800012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "9(?:(?:39[5-7]|76[018])\\d|475[0-5])\\d{4}",,,, "976012345"], "GP", 590, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[569]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]],, [,,,,,,,,, [-1]], 1,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GQ: [, [,, "222\\d{6}|(?:3\\d|55|[89]0)\\d{7}",,,,,,, [9]], [,, "33[0-24-9]\\d[46]\\d{4}|3(?:33|5\\d)\\d[7-9]\\d{4}",,,, "333091234"], [,, "(?:222|55\\d)\\d{6}",,,, "222123456"], [,, "80\\d[1-9]\\d{5}",,,, "800123456"], [,, "90\\d[1-9]\\d{5}",,,, "900123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GQ", 240, "00",,,,,,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[235]"]], [, "(\\d{3})(\\d{6})", "$1 $2", ["[89]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GR: [, [,, "5005000\\d{3}|8\\d{9,11}|(?:[269]\\d|70)\\d{8}",,,,,,, [10, 11, 12]], [,, "2(?:1\\d\\d|2(?:2[1-46-9]|[36][1-8]|4[1-7]|5[1-4]|7[1-5]|[89][1-9])|3(?:1\\d|2[1-57]|[35][1-3]|4[13]|7[1-7]|8[124-6]|9[1-79])|4(?:1\\d|2[1-8]|3[1-4]|4[13-5]|6[1-578]|9[1-5])|5(?:1\\d|[29][1-4]|3[1-5]|4[124]|5[1-6])|6(?:1\\d|[269][1-6]|3[1245]|4[1-7]|5[13-9]|7[14]|8[1-5])|7(?:1\\d|2[1-5]|3[1-6]|4[1-7]|5[1-57]|6[135]|9[125-7])|8(?:1\\d|2[1-5]|[34][1-4]|9[1-57]))\\d{6}",,,, "2123456789",,, [10]], [,, "68[57-9]\\d{7}|(?:69|94)\\d{8}",,,, "6912345678",,, [10]], [,, "800\\d{7,9}",,,, "8001234567"], [,, "90[19]\\d{7}",,,, "9091234567",,, [10]], [,, "8(?:0[16]|12|[27]5|50)\\d{7}",,,, "8011234567",,, [10]], [,, "70\\d{8}",,,, "7012345678",,, [10]], [,,,,,,,,, [-1]], "GR", 30, "00",,,,,,,, [[, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["21|7"]], [, "(\\d{4})(\\d{6})", "$1 $2", ["2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2689]"]], [, "(\\d{3})(\\d{3,4})(\\d{5})", "$1 $2 $3", ["8"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "5005000\\d{3}",,,, "5005000123",,, [10]],,, [,,,,,,,,, [-1]]],
              GT: [, [,, "80\\d{6}|(?:1\\d{3}|[2-7])\\d{7}",,,,,,, [8, 11]], [,, "[267][2-9]\\d{6}",,,, "22456789",,, [8]], [,, "(?:[3-5]\\d\\d|80[0-4])\\d{5}",,,, "51234567",,, [8]], [,, "18[01]\\d{8}",,,, "18001112222",,, [11]], [,, "19\\d{9}",,,, "19001112222",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "GT", 502, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[2-8]"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GU: [, [,, "(?:[58]\\d\\d|671|900)\\d{7}",,,,,,, [10], [7]], [,, "671(?:2\\d\\d|3(?:00|3[39]|4[349]|55|6[26])|4(?:00|56|7[1-9]|8[02-46-9])|5(?:55|6[2-5]|88)|6(?:3[2-578]|4[24-9]|5[34]|78|8[235-9])|7(?:[0479]7|2[0167]|3[45]|8[7-9])|8(?:[2-57-9]8|6[48])|9(?:2[29]|6[79]|7[1279]|8[7-9]|9[78]))\\d{4}",,,, "6713001234",,,, [7]], [,, "671(?:2\\d\\d|3(?:00|3[39]|4[349]|55|6[26])|4(?:00|56|7[1-9]|8[02-46-9])|5(?:55|6[2-5]|88)|6(?:3[2-578]|4[24-9]|5[34]|78|8[235-9])|7(?:[0479]7|2[0167]|3[45]|8[7-9])|8(?:[2-57-9]8|6[48])|9(?:2[29]|6[79]|7[1279]|8[7-9]|9[78]))\\d{4}",,,, "6713001234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "GU", 1, "011", "1",,, "([2-9]\\d{6})$|1", "671$1",, 1,,, [,,,,,,,,, [-1]],, "671", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GW: [, [,, "[49]\\d{8}|4\\d{6}",,,,,,, [7, 9]], [,, "443\\d{6}",,,, "443201234",,, [9]], [,, "9(?:5\\d|6[569]|77)\\d{6}",,,, "955012345",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "40\\d{5}",,,, "4012345",,, [7]], "GW", 245, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["40"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[49]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              GY: [, [,, "(?:[2-8]\\d{3}|9008)\\d{3}",,,,,,, [7]], [,, "(?:2(?:1[6-9]|2[0-35-9]|3[1-4]|5[3-9]|6\\d|7[0-79])|3(?:2[25-9]|3\\d)|4(?:4[0-24]|5[56])|50[0-6]|77[1-57])\\d{4}",,,, "2201234"], [,, "510\\d{4}|(?:6\\d|7[0-5])\\d{5}",,,, "6091234"], [,, "(?:289|8(?:00|6[28]|88|99))\\d{4}",,,, "2891234"], [,, "9008\\d{3}",,,, "9008123"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "515\\d{4}",,,, "5151234"], "GY", 592, "001",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              HK: [, [,, "8[0-46-9]\\d{6,7}|9\\d{4,7}|(?:[2-7]|9\\d{3})\\d{7}",,,,,,, [5, 6, 7, 8, 9, 11]], [,, "(?:2(?:[13-9]\\d|2[013-9])\\d|3(?:(?:[1569][0-24-9]|4[0-246-9]|7[0-24-69])\\d|8(?:4[0-8]|[579]\\d|6[0-2]))|58(?:0[1-9]|1[2-9]))\\d{4}",,,, "21234567",,, [8]], [,, "(?:4(?:44[0-25-9]|6(?:1[0-7]|4[0-57-9]|6[0-4])|74[0-2])|5(?:73[0-6]|95[0-8])|6(?:26[013-8]|66[0-3])|70(?:7[1-8]|8[0-4])|84(?:4[0-2]|8[0-35-9])|9(?:29[013-9]|39[01]|59[0-4]|899))\\d{4}|(?:4(?:4[0-35-9]|6[02357-9]|7[05])|5(?:[1-59][0-46-9]|6[0-4689]|7[0-246-9])|6(?:0[1-9]|[13-59]\\d|[268][0-57-9]|7[0-79])|70[1-49]|84[0-39]|9(?:0[1-9]|1[02-9]|[2358][0-8]|[467]\\d))\\d{5}",,,, "51234567",,, [8]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "900(?:[0-24-9]\\d{7}|3\\d{1,4})",,,, "90012345678",,, [5, 6, 7, 8, 11]], [,,,,,,,,, [-1]], [,, "8(?:1[0-4679]\\d|2(?:[0-36]\\d|7[0-4])|3(?:[034]\\d|2[09]|70))\\d{4}",,,, "81123456",,, [8]], [,,,,,,,,, [-1]], "HK", 852, "00(?:30|5[09]|[126-9]?)",,,,,, "00",, [[, "(\\d{3})(\\d{2,5})", "$1 $2", ["900", "9003"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[2-7]|8[1-4]|9(?:0[1-9]|[1-8])"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]], [, "(\\d{3})(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["9"]]],, [,, "7(?:1(?:0[0-38]|1[0-3679]|3[013]|69|9[0136])|2(?:[02389]\\d|1[18]|7[27-9])|3(?:[0-38]\\d|7[0-369]|9[2357-9])|47\\d|5(?:[178]\\d|5[0-5])|6(?:0[0-7]|2[236-9]|[35]\\d)|7(?:[27]\\d|8[7-9])|8(?:[23689]\\d|7[1-9])|9(?:[025]\\d|6[0-246-8]|7[0-36-9]|8[238]))\\d{4}",,,, "71123456",,, [8]],,, [,,,,,,,,, [-1]], [,, "30(?:0[1-9]|[15-7]\\d|2[047]|89)\\d{4}",,,, "30161234",,, [8]],,, [,,,,,,,,, [-1]]],
              HN: [, [,, "8\\d{10}|[237-9]\\d{7}",,,,,,, [8, 11]], [,, "2(?:2(?:0[0-59]|1[1-9]|[23]\\d|4[02-6]|5[57]|6[245]|7[0135689]|8[01346-9]|9[0-2])|4(?:0[578]|2[3-59]|3[13-9]|4[0-68]|5[1-3589])|5(?:0[2357-9]|1[1-356]|4[03-5]|5\\d|6[014-69]|7[04]|80)|6(?:[056]\\d|17|2[067]|3[047]|4[0-378]|[78][0-8]|9[01])|7(?:0[5-79]|6[46-9]|7[02-9]|8[034]|91)|8(?:79|8[0-357-9]|9[1-57-9]))\\d{4}",,,, "22123456",,, [8]], [,, "[37-9]\\d{7}",,,, "91234567",,, [8]], [,, "8002\\d{7}",,,, "80021234567",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "HN", 504, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1-$2", ["[237-9]"]], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["8"]]], [[, "(\\d{4})(\\d{4})", "$1-$2", ["[237-9]"]]], [,,,,,,,,, [-1]],,, [,, "8002\\d{7}",,,,,,, [11]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              HR: [, [,, "(?:[24-69]\\d|3[0-79])\\d{7}|80\\d{5,7}|[1-79]\\d{7}|6\\d{5,6}",,,,,,, [6, 7, 8, 9]], [,, "1\\d{7}|(?:2[0-3]|3[1-5]|4[02-47-9]|5[1-3])\\d{6,7}",,,, "12345678",,, [8, 9], [6, 7]], [,, "9(?:(?:0[1-9]|[12589]\\d)\\d\\d|7(?:[0679]\\d\\d|5(?:[01]\\d|44|55|77|9[5-7])))\\d{4}|98\\d{6}",,,, "921234567",,, [8, 9]], [,, "80\\d{5,7}",,,, "800123456",,, [7, 8, 9]], [,, "6[01459]\\d{6}|6[01]\\d{4,5}",,,, "611234",,, [6, 7, 8]], [,,,,,,,,, [-1]], [,, "7[45]\\d{6}",,,, "74123456",,, [8]], [,,,,,,,,, [-1]], "HR", 385, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["6[01]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["8"], "0$1"], [, "(\\d)(\\d{4})(\\d{3})", "$1 $2 $3", ["1"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["6|7[245]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["9"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-57]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "62\\d{6,7}|72\\d{6}",,,, "62123456",,, [8, 9]],,, [,,,,,,,,, [-1]]],
              HT: [, [,, "(?:[2-489]\\d|55)\\d{6}",,,,,,, [8]], [,, "2(?:2\\d|5[1-5]|81|9[149])\\d{5}",,,, "22453300"], [,, "(?:[34]\\d|55)\\d{6}",,,, "34101234"], [,, "8\\d{7}",,,, "80012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "9(?:[67][0-4]|8[0-3589]|9\\d)\\d{5}",,,, "98901234"], "HT", 509, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["[2-589]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              HU: [, [,, "[235-7]\\d{8}|[1-9]\\d{7}",,,,,,, [8, 9], [6, 7]], [,, "(?:1\\d|[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6[23689]|8[2-57-9]|9[2-69])\\d{6}",,,, "12345678",,, [8], [6, 7]], [,, "(?:[257]0|3[01])\\d{7}",,,, "201234567",,, [9]], [,, "(?:[48]0\\d|680[29])\\d{5}",,,, "80123456"], [,, "9[01]\\d{6}",,,, "90123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "21\\d{7}",,,, "211234567",,, [9]], "HU", 36, "00", "06",,, "06",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "(06 $1)"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]"], "(06 $1)"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-9]"], "06 $1"]],, [,,,,,,,,, [-1]],,, [,, "(?:[48]0\\d|680[29])\\d{5}"], [,, "38\\d{7}",,,, "381234567",,, [9]],,, [,,,,,,,,, [-1]]],
              ID: [, [,, "00[1-9]\\d{9,14}|(?:[1-36]|8\\d{5})\\d{6}|00\\d{9}|[1-9]\\d{8,10}|[2-9]\\d{7}",,,,,,, [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [5, 6]], [,, "2[124]\\d{7,8}|619\\d{8}|2(?:1(?:14|500)|2\\d{3})\\d{3}|61\\d{5,8}|(?:2(?:[35][1-4]|6[0-8]|7[1-6]|8\\d|9[1-8])|3(?:1|[25][1-8]|3[1-68]|4[1-3]|6[1-3568]|7[0-469]|8\\d)|4(?:0[1-589]|1[01347-9]|2[0-36-8]|3[0-24-68]|43|5[1-378]|6[1-5]|7[134]|8[1245])|5(?:1[1-35-9]|2[25-8]|3[124-9]|4[1-3589]|5[1-46]|6[1-8])|6(?:[25]\\d|3[1-69]|4[1-6])|7(?:02|[125][1-9]|[36]\\d|4[1-8]|7[0-36-9])|9(?:0[12]|1[013-8]|2[0-479]|5[125-8]|6[23679]|7[159]|8[01346]))\\d{5,8}",,,, "218350123",,, [7, 8, 9, 10, 11], [5, 6]], [,, "8[1-35-9]\\d{7,10}",,,, "812345678",,, [9, 10, 11, 12]], [,, "00(?:1803\\d{5,11}|7803\\d{7})|(?:177\\d|800)\\d{5,7}",,,, "8001234567",,, [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]], [,, "809\\d{7}",,,, "8091234567",,, [10]], [,, "804\\d{7}",,,, "8041234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "ID", 62, "00[89]", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["15"]], [, "(\\d{2})(\\d{5,9})", "$1 $2", ["2[124]|[36]1"], "(0$1)"], [, "(\\d{3})(\\d{5,7})", "$1 $2", ["800"], "0$1"], [, "(\\d{3})(\\d{5,8})", "$1 $2", ["[2-79]"], "(0$1)"], [, "(\\d{3})(\\d{3,4})(\\d{3})", "$1-$2-$3", ["8[1-35-9]"], "0$1"], [, "(\\d{3})(\\d{6,8})", "$1 $2", ["1"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["804"], "0$1"], [, "(\\d{3})(\\d)(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["80"], "0$1"], [, "(\\d{3})(\\d{4})(\\d{4,5})", "$1-$2-$3", ["8"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})(\\d{2,8})", "$1 $2 $3 $4", ["001"]], [, "(\\d{2})(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["0"]]], [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["15"]], [, "(\\d{2})(\\d{5,9})", "$1 $2", ["2[124]|[36]1"], "(0$1)"], [, "(\\d{3})(\\d{5,7})", "$1 $2", ["800"], "0$1"], [, "(\\d{3})(\\d{5,8})", "$1 $2", ["[2-79]"], "(0$1)"], [, "(\\d{3})(\\d{3,4})(\\d{3})", "$1-$2-$3", ["8[1-35-9]"], "0$1"], [, "(\\d{3})(\\d{6,8})", "$1 $2", ["1"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["804"], "0$1"], [, "(\\d{3})(\\d)(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["80"], "0$1"], [, "(\\d{3})(\\d{4})(\\d{4,5})", "$1-$2-$3", ["8"], "0$1"]], [,,,,,,,,, [-1]],,, [,, "001803\\d{5,11}|(?:007803\\d|8071)\\d{6}",,,,,,, [10, 11, 12, 13, 14, 15, 16, 17]], [,, "(?:1500|8071\\d{3})\\d{3}",,,, "8071123456",,, [7, 10]],,, [,,,,,,,,, [-1]]],
              IE: [, [,, "(?:1\\d|[2569])\\d{6,8}|4\\d{6,9}|7\\d{8}|8\\d{8,9}",,,,,,, [7, 8, 9, 10], [5, 6]], [,, "(?:1\\d|21)\\d{6,7}|(?:2[24-9]|4(?:0[24]|5\\d|7)|5(?:0[45]|1\\d|8)|6(?:1\\d|[237-9])|9(?:1\\d|[35-9]))\\d{5}|(?:23|4(?:[1-469]|8\\d)|5[23679]|6[4-6]|7[14]|9[04])\\d{7}",,,, "2212345",,,, [5, 6]], [,, "8(?:22|[35-9]\\d)\\d{6}",,,, "850123456",,, [9]], [,, "1800\\d{6}",,,, "1800123456",,, [10]], [,, "15(?:1[2-8]|[2-8]0|9[089])\\d{6}",,,, "1520123456",,, [10]], [,, "18[59]0\\d{6}",,,, "1850123456",,, [10]], [,, "700\\d{6}",,,, "700123456",,, [9]], [,, "76\\d{7}",,,, "761234567",,, [9]], "IE", 353, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{5})", "$1 $2", ["2[24-9]|47|58|6[237-9]|9[35-9]"], "(0$1)"], [, "(\\d{3})(\\d{5})", "$1 $2", ["[45]0"], "(0$1)"], [, "(\\d)(\\d{3,4})(\\d{4})", "$1 $2 $3", ["1"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2569]|4[1-69]|7[14]"], "(0$1)"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["70"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["81"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[78]"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["4"], "(0$1)"], [, "(\\d{2})(\\d)(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["8"], "0$1"]],, [,,,,,,,,, [-1]],,, [,, "18[59]0\\d{6}",,,,,,, [10]], [,, "818\\d{6}",,,, "818123456",,, [9]],,, [,, "88210[1-9]\\d{4}|8(?:[35-79]5\\d\\d|8(?:[013-9]\\d\\d|2(?:[01][1-9]|[2-9]\\d)))\\d{5}",,,, "8551234567",,, [10]]],
              IL: [, [,, "1\\d{6}(?:\\d{3,5})?|[57]\\d{8}|[1-489]\\d{7}",,,,,,, [7, 8, 9, 10, 11, 12]], [,, "153\\d{8,9}|29[1-9]\\d{5}|(?:2[0-8]|[3489]\\d)\\d{6}",,,, "21234567",,, [8, 11, 12], [7]], [,, "55(?:410|57[0-289])\\d{4}|5(?:(?:[0-2][02-9]|[36]\\d|[49][2-9]|8[3-7])\\d|5(?:01|2\\d|3[0-3]|4[34]|5[0-25689]|6[6-8]|7[0-267]|8[7-9]|9[1-9]))\\d{5}",,,, "502345678",,, [9]], [,, "1(?:255|80[019]\\d{3})\\d{3}",,,, "1800123456",,, [7, 10]], [,, "1212\\d{4}|1(?:200|9(?:0[0-2]|19))\\d{6}",,,, "1919123456",,, [8, 10]], [,, "1700\\d{6}",,,, "1700123456",,, [10]], [,,,,,,,,, [-1]], [,, "7(?:38(?:0\\d|5[0-2569]|88)|8(?:33|55|77|81)\\d)\\d{4}|7(?:18|2[23]|3[237]|47|6[258]|7\\d|82|9[2-9])\\d{6}",,,, "771234567",,, [9]], "IL", 972, "0(?:0|1[2-9])", "0",,, "0",,,, [[, "(\\d{4})(\\d{3})", "$1-$2", ["125"]], [, "(\\d{4})(\\d{2})(\\d{2})", "$1-$2-$3", ["121"]], [, "(\\d)(\\d{3})(\\d{4})", "$1-$2-$3", ["[2-489]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["[57]"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1-$2-$3", ["12"]], [, "(\\d{4})(\\d{6})", "$1-$2", ["159"]], [, "(\\d)(\\d{3})(\\d{3})(\\d{3})", "$1-$2-$3-$4", ["1[7-9]"]], [, "(\\d{3})(\\d{1,2})(\\d{3})(\\d{4})", "$1-$2 $3-$4", ["15"]]],, [,,,,,,,,, [-1]],,, [,, "1700\\d{6}",,,,,,, [10]], [,, "1599\\d{6}",,,, "1599123456",,, [10]],,, [,, "151\\d{8,9}",,,, "15112340000",,, [11, 12]]],
              IM: [, [,, "1624\\d{6}|(?:[3578]\\d|90)\\d{8}",,,,,,, [10], [6]], [,, "1624(?:230|[5-8]\\d\\d)\\d{3}",,,, "1624756789",,,, [6]], [,, "76245[06]\\d{4}|7(?:4576|[59]24\\d|624[0-4689])\\d{5}",,,, "7924123456"], [,, "808162\\d{4}",,,, "8081624567"], [,, "8(?:440[49]06|72299\\d)\\d{3}|(?:8(?:45|70)|90[0167])624\\d{4}",,,, "9016247890"], [,,,,,,,,, [-1]], [,, "70\\d{8}",,,, "7012345678"], [,, "56\\d{8}",,,, "5612345678"], "IM", 44, "00", "0",,, "([25-8]\\d{5})$|0", "1624$1",,,,, [,,,,,,,,, [-1]],, "74576|(?:16|7[56])24", [,,,,,,,,, [-1]], [,, "3440[49]06\\d{3}|(?:3(?:08162|3\\d{4}|45624|7(?:0624|2299))|55\\d{4})\\d{4}",,,, "5512345678"],,, [,,,,,,,,, [-1]]],
              IN: [, [,, "(?:000800|[2-9]\\d\\d)\\d{7}|1\\d{7,12}",,,,,,, [8, 9, 10, 11, 12, 13], [6, 7]], [,, "2717(?:[2-7]\\d|95)\\d{4}|(?:271[0-689]|782[0-6])[2-7]\\d{5}|(?:170[24]|2(?:(?:[02][2-79]|90)\\d|80[13468])|(?:3(?:23|80)|683|79[1-7])\\d|4(?:20[24]|72[2-8])|552[1-7])\\d{6}|(?:11|33|4[04]|80)[2-7]\\d{7}|(?:342|674|788)(?:[0189][2-7]|[2-7]\\d)\\d{5}|(?:1(?:2[0-249]|3[0-25]|4[145]|[59][14]|6[014]|7[1257]|8[01346])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568]|9[14])|3(?:26|4[13]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[014-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|2[14]|3[134]|4[47]|5[15]|[67]1)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91))[2-7]\\d{6}|(?:1(?:2[35-8]|3[346-9]|4[236-9]|[59][0235-9]|6[235-9]|7[34689]|8[257-9])|2(?:1[134689]|3[24-8]|4[2-8]|5[25689]|6[2-4679]|7[3-79]|8[2-479]|9[235-9])|3(?:01|1[79]|2[1245]|4[5-8]|5[125689]|6[235-7]|7[157-9]|8[2-46-8])|4(?:1[14578]|2[5689]|3[2-467]|5[4-7]|6[35]|73|8[2689]|9[2389])|5(?:[16][146-9]|2[14-8]|3[1346]|4[14-69]|5[46]|7[2-4]|8[2-8]|9[246])|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])|7(?:1[013-9]|2[0235-9]|3[2679]|4[1-35689]|5[2-46-9]|[67][02-9]|8[013-7]|9[089])|8(?:1[1357-9]|2[235-8]|3[03-57-9]|4[0-24-9]|5\\d|6[2457-9]|7[1-6]|8[1256]|9[2-4]))\\d[2-7]\\d{5}",,,, "7410410123",,, [10], [6, 7, 8]], [,, "(?:61279|7(?:887[02-9]|9(?:313|79[07-9]))|8(?:079[04-9]|(?:84|91)7[02-8]))\\d{5}|(?:6(?:12|[2-47]1|5[17]|6[13]|80)[0189]|7(?:1(?:2[0189]|9[0-5])|2(?:[14][017-9]|8[0-59])|3(?:2[5-8]|[34][017-9]|9[016-9])|4(?:1[015-9]|[29][89]|39|8[389])|5(?:[15][017-9]|2[04-9]|9[7-9])|6(?:0[0-47]|1[0-257-9]|2[0-4]|3[19]|5[4589])|70[0289]|88[089]|97[02-8])|8(?:0(?:6[67]|7[02-8])|70[017-9]|84[01489]|91[0-289]))\\d{6}|(?:7(?:31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[0189]\\d|7[02-8])\\d{5}|(?:6(?:[09]\\d|1[04679]|2[03689]|3[05-9]|4[0489]|50|6[069]|7[07]|8[7-9])|7(?:0\\d|2[0235-79]|3[05-8]|40|5[0346-8]|6[6-9]|7[1-9]|8[0-79]|9[089])|8(?:0[01589]|1[0-57-9]|2[235-9]|3[03-57-9]|[45]\\d|6[02457-9]|7[1-69]|8[0-25-9]|9[02-9])|9\\d\\d)\\d{7}|(?:6(?:(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|8[124-6])\\d|7(?:[235689]\\d|4[0189]))|7(?:1(?:[013-8]\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-5])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\d|5[0-367])|70[13-7]|881))[0189]\\d{5}",,,, "8123456789",,, [10]], [,, "000800\\d{7}|1(?:600\\d{6}|80(?:0\\d{4,9}|3\\d{9}))",,,, "1800123456"], [,, "186[12]\\d{9}",,,, "1861123456789",,, [13]], [,, "1860\\d{7}",,,, "18603451234",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "IN", 91, "00", "0",,, "0",,,, [[, "(\\d{7})", "$1", ["575"]], [, "(\\d{8})", "$1", ["5(?:0|2[23]|3[03]|[67]1|88)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)"],,, 1], [, "(\\d{4})(\\d{4,5})", "$1 $2", ["180", "1800"],,, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["140"],,, 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["11|2[02]|33|4[04]|79[1-7]|80[2-46]", "11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])", "11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]", "1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]", "1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]"], "0$1",, 1], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807", "1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]", "1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\d|7(?:1(?:[013-8]\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\d|5[0-367])|70[13-7]))[2-7]"], "0$1",, 1], [, "(\\d{5})(\\d{5})", "$1 $2", ["[6-9]"], "0$1",, 1], [, "(\\d{4})(\\d{2,4})(\\d{4})", "$1 $2 $3", ["1(?:6|8[06])", "1(?:6|8[06]0)"],,, 1], [, "(\\d{3})(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["0"]], [, "(\\d{4})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["18"],,, 1]], [[, "(\\d{8})", "$1", ["5(?:0|2[23]|3[03]|[67]1|88)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)", "5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)"],,, 1], [, "(\\d{4})(\\d{4,5})", "$1 $2", ["180", "1800"],,, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["140"],,, 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["11|2[02]|33|4[04]|79[1-7]|80[2-46]", "11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])", "11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]", "1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]", "1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]"], "0$1",, 1], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807", "1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]", "1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\d|7(?:1(?:[013-8]\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\d|5[0-367])|70[13-7]))[2-7]"], "0$1",, 1], [, "(\\d{5})(\\d{5})", "$1 $2", ["[6-9]"], "0$1",, 1], [, "(\\d{4})(\\d{2,4})(\\d{4})", "$1 $2 $3", ["1(?:6|8[06])", "1(?:6|8[06]0)"],,, 1], [, "(\\d{4})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["18"],,, 1]], [,,,,,,,,, [-1]],,, [,, "1(?:600\\d{6}|800\\d{4,9})|(?:000800|18(?:03\\d\\d|6(?:0|[12]\\d\\d)))\\d{7}"], [,, "140\\d{7}",,,, "1409305260",,, [10]],,, [,,,,,,,,, [-1]]],
              IO: [, [,, "3\\d{6}",,,,,,, [7]], [,, "37\\d{5}",,,, "3709100"], [,, "38\\d{5}",,,, "3801234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "IO", 246, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["3"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              IQ: [, [,, "(?:1|7\\d\\d)\\d{7}|[2-6]\\d{7,8}",,,,,,, [8, 9, 10], [6, 7]], [,, "1\\d{7}|(?:2[13-5]|3[02367]|4[023]|5[03]|6[026])\\d{6,7}",,,, "12345678",,, [8, 9], [6, 7]], [,, "7[3-9]\\d{8}",,,, "7912345678",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "IQ", 964, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-6]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              IR: [, [,, "[1-9]\\d{9}|(?:[1-8]\\d\\d|9)\\d{3,4}",,,,,,, [4, 5, 6, 7, 10], [8]], [,, "(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])(?:[03-57]\\d{7}|[16]\\d{3}(?:\\d{4})?|[289]\\d{3}(?:\\d(?:\\d{3})?)?)|94(?:000[09]|(?:12\\d|30[0-2])\\d|2(?:121|[2689]0\\d)|4(?:111|40\\d))\\d{4}",,,, "2123456789",,, [6, 7, 10], [4, 5, 8]], [,, "9(?:(?:0(?:[0-35]\\d|4[4-6])|(?:[13]\\d|2[0-3])\\d)\\d|9(?:[0-46]\\d\\d|5[15]0|8(?:[12]\\d|88)|9(?:0[0-3]|[19]\\d|21|69|77|8[7-9])))\\d{5}",,,, "9123456789",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "IR", 98, "00", "0",,, "0",,,, [[, "(\\d{4,5})", "$1", ["96"], "0$1"], [, "(\\d{2})(\\d{4,5})", "$1 $2", ["(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["9"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["[1-8]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,, "9(?:4440\\d{5}|6(?:0[12]|2[16-8]|3(?:08|[14]5|[23]|66)|4(?:0|80)|5[01]|6[89]|86|9[19]))",,,,,,, [4, 5, 10]], [,, "96(?:0[12]|2[16-8]|3(?:08|[14]5|[23]|66)|4(?:0|80)|5[01]|6[89]|86|9[19])",,,, "9601",,, [4, 5]],,, [,,,,,,,,, [-1]]],
              IS: [, [,, "(?:38\\d|[4-9])\\d{6}",,,,,,, [7, 9]], [,, "(?:4(?:1[0-24-69]|2[0-7]|[37][0-8]|4[0-24589]|5[0-68]|6\\d|8[0-36-8])|5(?:05|[156]\\d|2[02578]|3[0-579]|4[03-7]|7[0-2578]|8[0-35-9]|9[013-689])|872)\\d{4}",,,, "4101234",,, [7]], [,, "(?:38[589]\\d\\d|6(?:1[1-8]|2[0-6]|3[026-9]|4[014679]|5[0159]|6[0-69]|70|8[06-8]|9\\d)|7(?:5[057]|[6-9]\\d)|8(?:2[0-59]|[3-69]\\d|8[238]))\\d{4}",,,, "6111234"], [,, "80[0-8]\\d{4}",,,, "8001234",,, [7]], [,, "90(?:0\\d|1[5-79]|2[015-79]|3[135-79]|4[125-7]|5[25-79]|7[1-37]|8[0-35-7])\\d{3}",,,, "9001234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "49[0-24-79]\\d{4}",,,, "4921234",,, [7]], "IS", 354, "00|1(?:0(?:01|[12]0)|100)",,,,,, "00",, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[4-9]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["3"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "809\\d{4}",,,, "8091234",,, [7]],,, [,, "(?:689|8(?:7[18]|80)|95[48])\\d{4}",,,, "6891234",,, [7]]],
              IT: [, [,, "0\\d{5,10}|1\\d{8,10}|3(?:[0-8]\\d{7,10}|9\\d{7,8})|(?:43|55|70)\\d{8}|8\\d{5}(?:\\d{2,4})?",,,,,,, [6, 7, 8, 9, 10, 11, 12]], [,, "0669[0-79]\\d{1,6}|0(?:1(?:[0159]\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\d\\d|3(?:[0159]\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\d|6[0-8])|7(?:[0159]\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\d{2,7}",,,, "0212345678",,, [6, 7, 8, 9, 10, 11]], [,, "3[2-9]\\d{7,8}|(?:31|43)\\d{8}",,,, "3123456789",,, [9, 10]], [,, "80(?:0\\d{3}|3)\\d{3}",,,, "800123456",,, [6, 9]], [,, "(?:0878\\d{3}|89(?:2\\d|3[04]|4(?:[0-4]|[5-9]\\d\\d)|5[0-4]))\\d\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\d{6}",,,, "899123456",,, [6, 8, 9, 10]], [,, "84(?:[08]\\d{3}|[17])\\d{3}",,,, "848123456",,, [6, 9]], [,, "1(?:78\\d|99)\\d{6}",,,, "1781234567",,, [9, 10]], [,, "55\\d{8}",,,, "5512345678",,, [10]], "IT", 39, "00",,,,,,,, [[, "(\\d{4,5})", "$1", ["1(?:0|9[246])", "1(?:0|9(?:2[2-9]|[46]))"]], [, "(\\d{6})", "$1", ["1(?:1|92)"]], [, "(\\d{2})(\\d{4,6})", "$1 $2", ["0[26]"]], [, "(\\d{3})(\\d{3,6})", "$1 $2", ["0[13-57-9][0159]|8(?:03|4[17]|9[2-5])", "0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))"]], [, "(\\d{4})(\\d{2,6})", "$1 $2", ["0(?:[13-579][2-46-8]|8[236-8])"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["894"]], [, "(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[26]|5"]], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1(?:44|[679])|[378]|43"]], [, "(\\d{3})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[13-57-9][0159]|14"]], [, "(\\d{2})(\\d{4})(\\d{5})", "$1 $2 $3", ["0[26]"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["0"]], [, "(\\d{3})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["3"]]], [[, "(\\d{2})(\\d{4,6})", "$1 $2", ["0[26]"]], [, "(\\d{3})(\\d{3,6})", "$1 $2", ["0[13-57-9][0159]|8(?:03|4[17]|9[2-5])", "0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))"]], [, "(\\d{4})(\\d{2,6})", "$1 $2", ["0(?:[13-579][2-46-8]|8[236-8])"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["894"]], [, "(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[26]|5"]], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["1(?:44|[679])|[378]|43"]], [, "(\\d{3})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0[13-57-9][0159]|14"]], [, "(\\d{2})(\\d{4})(\\d{5})", "$1 $2 $3", ["0[26]"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["0"]], [, "(\\d{3})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["3"]]], [,,,,,,,,, [-1]], 1,, [,, "848\\d{6}",,,,,,, [9]], [,,,,,,,,, [-1]],,, [,, "3[2-8]\\d{9,10}",,,, "33101234501",,, [11, 12]]],
              JE: [, [,, "1534\\d{6}|(?:[3578]\\d|90)\\d{8}",,,,,,, [10], [6]], [,, "1534[0-24-8]\\d{5}",,,, "1534456789",,,, [6]], [,, "7(?:(?:(?:50|82)9|937)\\d|7(?:00[378]|97\\d))\\d{5}",,,, "7797712345"], [,, "80(?:07(?:35|81)|8901)\\d{4}",,,, "8007354567"], [,, "(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\d{4}",,,, "9018105678"], [,,,,,,,,, [-1]], [,, "701511\\d{4}",,,, "7015115678"], [,, "56\\d{8}",,,, "5612345678"], "JE", 44, "00", "0",,, "([0-24-8]\\d{5})$|0", "1534$1",,,,, [,, "76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}",,,, "7640123456"],,, [,,,,,,,,, [-1]], [,, "(?:3(?:0(?:07(?:35|81)|8901)|3\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\d{4})\\d{4}",,,, "5512345678"],,, [,,,,,,,,, [-1]]],
              JM: [, [,, "(?:[58]\\d\\d|658|900)\\d{7}",,,,,,, [10], [7]], [,, "8766060\\d{3}|(?:658(?:2(?:[0-8]\\d|9[0-46-9])|[3-9]\\d\\d)|876(?:52[35]|6(?:0[1-3579]|1[0235-9]|[23]\\d|40|5[06]|6[2-589]|7[0-25-9]|8[04]|9[4-9])|7(?:0[2-689]|[1-6]\\d|8[056]|9[45])|9(?:0[1-8]|1[02378]|[2-8]\\d|9[2-468])))\\d{4}",,,, "8765230123",,,, [7]], [,, "(?:658295|876(?:2(?:0[1-9]|[13-9]\\d|2[013-9])|[348]\\d\\d|5(?:0[1-9]|[1-9]\\d)|6(?:4[89]|6[67])|7(?:0[07]|7\\d|8[1-47-9]|9[0-36-9])|9(?:[01]9|9[0579])))\\d{4}",,,, "8762101234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "JM", 1, "011", "1",,, "1",,,,,, [,,,,,,,,, [-1]],, "658|876", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              JO: [, [,, "(?:(?:[2689]|7\\d)\\d|32|53)\\d{6}",,,,,,, [8, 9]], [,, "87(?:000|90[01])\\d{3}|(?:2(?:6(?:2[0-35-9]|3[0-578]|4[24-7]|5[0-24-8]|[6-8][023]|9[0-3])|7(?:0[1-79]|10|2[014-7]|3[0-689]|4[019]|5[0-3578]))|32(?:0[1-69]|1[1-35-7]|2[024-7]|3\\d|4[0-3]|[5-7][023])|53(?:0[0-3]|[13][023]|2[0-59]|49|5[0-35-9]|6[15]|7[45]|8[1-6]|9[0-36-9])|6(?:2(?:[05]0|22)|3(?:00|33)|4(?:0[0-25]|1[2-7]|2[0569]|[38][07-9]|4[025689]|6[0-589]|7\\d|9[0-2])|5(?:[01][056]|2[034]|3[0-57-9]|4[178]|5[0-69]|6[0-35-9]|7[1-379]|8[0-68]|9[0239]))|87(?:20|7[078]|99))\\d{4}",,,, "62001234",,, [8]], [,, "7(?:[78][0-25-9]|9\\d)\\d{6}",,,, "790123456",,, [9]], [,, "80\\d{6}",,,, "80012345",,, [8]], [,, "9\\d{7}",,,, "90012345",,, [8]], [,, "85\\d{6}",,,, "85012345",,, [8]], [,, "70\\d{7}",,,, "700123456",,, [9]], [,,,,,,,,, [-1]], "JO", 962, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2356]|87"], "(0$1)"], [, "(\\d{3})(\\d{5,6})", "$1 $2", ["[89]"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["70"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["7"], "0$1"]],, [,, "74(?:66|77)\\d{5}",,,, "746612345",,, [9]],,, [,,,,,,,,, [-1]], [,, "8(?:10|8\\d)\\d{5}",,,, "88101234",,, [8]],,, [,,,,,,,,, [-1]]],
              JP: [, [,, "00[1-9]\\d{6,14}|[257-9]\\d{9}|(?:00|[1-9]\\d\\d)\\d{6}",,,,,,, [8, 9, 10, 11, 12, 13, 14, 15, 16, 17]], [,, "(?:1(?:1[235-8]|2[3-6]|3[3-9]|4[2-6]|[58][2-8]|6[2-7]|7[2-9]|9[1-9])|(?:2[2-9]|[36][1-9])\\d|4(?:[2-578]\\d|6[02-8]|9[2-59])|5(?:[2-589]\\d|6[1-9]|7[2-8])|7(?:[25-9]\\d|3[4-9]|4[02-9])|8(?:[2679]\\d|3[2-9]|4[5-9]|5[1-9]|8[03-9])|9(?:[2-58]\\d|[679][1-9]))\\d{6}",,,, "312345678",,, [9]], [,, "[7-9]0[1-9]\\d{7}",,,, "9012345678",,, [10]], [,, "00777(?:[01]|5\\d)\\d\\d|(?:00(?:7778|882[1245])|(?:120|800\\d)\\d\\d)\\d{4}|00(?:37|66|78)\\d{6,13}",,,, "120123456"], [,, "990\\d{6}",,,, "990123456",,, [9]], [,,,,,,,,, [-1]], [,, "60\\d{7}",,,, "601234567",,, [9]], [,, "50[1-9]\\d{7}",,,, "5012345678",,, [10]], "JP", 81, "010", "0",,, "(000[259]\\d{6})$|(?:(?:003768)0?)|0", "$1",,, [[, "(\\d{4})(\\d{4})", "$1-$2", ["007", "0077", "00777", "00777[01]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1-$2-$3", ["(?:12|57|99)0"], "0$1"], [, "(\\d{4})(\\d)(\\d{4})", "$1-$2-$3", ["1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51)|9(?:80|9[16])", "1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]", "1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["60"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1-$2-$3", ["[36]|4(?:2[09]|7[01])", "[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[0459]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[26-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9]|9[29])|5(?:2|3(?:[045]|9[0-8])|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|3(?:[29]|60)|49|51|6(?:[0-24]|36|5[0-3589]|7[23]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3(?:[045]|9(?:[0-58]|6[4-9]|7[0-35689]))|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|60|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[2-57-9]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|7(?:2[2-468]|3[78])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3", ["[14]|[289][2-9]|5[3-9]|7[2-4679]"], "0$1"], [, "(\\d{4})(\\d{2})(\\d{3,4})", "$1-$2-$3", ["007", "0077"]], [, "(\\d{4})(\\d{2})(\\d{4})", "$1-$2-$3", ["008"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["800"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[257-9]"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3,4})", "$1-$2-$3", ["0"]], [, "(\\d{4})(\\d{4})(\\d{4,5})", "$1-$2-$3", ["0"]], [, "(\\d{4})(\\d{5})(\\d{5,6})", "$1-$2-$3", ["0"]], [, "(\\d{4})(\\d{6})(\\d{6,7})", "$1-$2-$3", ["0"]]], [[, "(\\d{3})(\\d{3})(\\d{3})", "$1-$2-$3", ["(?:12|57|99)0"], "0$1"], [, "(\\d{4})(\\d)(\\d{4})", "$1-$2-$3", ["1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51)|9(?:80|9[16])", "1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]", "1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["60"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1-$2-$3", ["[36]|4(?:2[09]|7[01])", "[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[0459]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[26-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9]|9[29])|5(?:2|3(?:[045]|9[0-8])|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|3(?:[29]|60)|49|51|6(?:[0-24]|36|5[0-3589]|7[23]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]", "1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3(?:[045]|9(?:[0-58]|6[4-9]|7[0-35689]))|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|60|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[2-57-9]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|7(?:2[2-468]|3[78])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3", ["[14]|[289][2-9]|5[3-9]|7[2-4679]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["800"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[257-9]"], "0$1"]], [,, "20\\d{8}",,,, "2012345678",,, [10]],,, [,, "00(?:777(?:[01]|(?:5|8\\d)\\d)|882[1245]\\d\\d)\\d\\d|00(?:37|66|78)\\d{6,13}"], [,, "570\\d{6}",,,, "570123456",,, [9]],,, [,,,,,,,,, [-1]]],
              KE: [, [,, "(?:[17]\\d\\d|900)\\d{6}|(?:2|80)0\\d{6,7}|[4-6]\\d{6,8}",,,,,,, [7, 8, 9, 10]], [,, "(?:4[245]|5[1-79]|6[01457-9])\\d{5,7}|(?:4[136]|5[08]|62)\\d{7}|(?:[24]0|66)\\d{6,7}",,,, "202012345",,, [7, 8, 9]], [,, "(?:1(?:0[0-8]|1[0-7]|2[014]|30)|7\\d\\d)\\d{6}",,,, "712123456",,, [9]], [,, "800[02-8]\\d{5,6}",,,, "800223456",,, [9, 10]], [,, "900[02-9]\\d{5}",,,, "900223456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "KE", 254, "000", "0",,, "0",,,, [[, "(\\d{2})(\\d{5,7})", "$1 $2", ["[24-6]"], "0$1"], [, "(\\d{3})(\\d{6})", "$1 $2", ["[17]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[89]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              KG: [, [,, "8\\d{9}|[235-9]\\d{8}",,,,,,, [9, 10], [5, 6]], [,, "312(?:5[0-79]\\d|9(?:[0-689]\\d|7[0-24-9]))\\d{3}|(?:3(?:1(?:2[0-46-8]|3[1-9]|47|[56]\\d)|2(?:22|3[0-479]|6[0-7])|4(?:22|5[6-9]|6\\d)|5(?:22|3[4-7]|59|6\\d)|6(?:22|5[35-7]|6\\d)|7(?:22|3[468]|4[1-9]|59|[67]\\d)|9(?:22|4[1-8]|6\\d))|6(?:09|12|2[2-4])\\d)\\d{5}",,,, "312123456",,, [9], [5, 6]], [,, "312(?:58\\d|973)\\d{3}|(?:2(?:0[0-35]|2\\d)|5[0-24-7]\\d|600|7(?:[07]\\d|55)|88[08]|9(?:12|9[05-9]))\\d{6}",,,, "700123456",,, [9]], [,, "800\\d{6,7}",,,, "800123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "KG", 996, "00", "0",,, "0",,,, [[, "(\\d{4})(\\d{5})", "$1 $2", ["3(?:1[346]|[24-79])"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[235-79]|88"], "0$1"], [, "(\\d{3})(\\d{3})(\\d)(\\d{2,3})", "$1 $2 $3 $4", ["8"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              KH: [, [,, "1\\d{9}|[1-9]\\d{7,8}",,,,,,, [8, 9, 10], [6, 7]], [,, "23(?:4(?:[2-4]|[56]\\d)|[568]\\d\\d)\\d{4}|23[236-9]\\d{5}|(?:2[4-6]|3[2-6]|4[2-4]|[5-7][2-5])(?:(?:[237-9]|4[56]|5\\d)\\d{5}|6\\d{5,6})",,,, "23756789",,, [8, 9], [6, 7]], [,, "(?:(?:1[28]|3[18]|9[67])\\d|6[016-9]|7(?:[07-9]|[16]\\d)|8(?:[013-79]|8\\d))\\d{6}|(?:1\\d|9[0-57-9])\\d{6}|(?:2[3-6]|3[2-6]|4[2-4]|[5-7][2-5])48\\d{5}",,,, "91234567",,, [8, 9]], [,, "1800(?:1\\d|2[019])\\d{4}",,,, "1800123456",,, [10]], [,, "1900(?:1\\d|2[09])\\d{4}",,,, "1900123456",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "KH", 855, "00[14-9]", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-9]"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              KI: [, [,, "(?:[37]\\d|6[0-79])\\d{6}|(?:[2-48]\\d|50)\\d{3}",,,,,,, [5, 8]], [,, "(?:[24]\\d|3[1-9]|50|65(?:02[12]|12[56]|22[89]|[3-5]00)|7(?:27\\d\\d|3100|5(?:02[12]|12[56]|22[89]|[34](?:00|81)|500))|8[0-5])\\d{3}",,,, "31234"], [,, "(?:6200[01]|7(?:310[1-9]|5(?:02[03-9]|12[0-47-9]|22[0-7]|[34](?:0[1-9]|8[02-9])|50[1-9])))\\d{3}|(?:63\\d\\d|7(?:(?:[0146-9]\\d|2[0-689])\\d|3(?:[02-9]\\d|1[1-9])|5(?:[0-2][013-9]|[34][1-79]|5[1-9]|[6-9]\\d)))\\d{4}",,,, "72001234",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "30(?:0[01]\\d\\d|12(?:11|20))\\d\\d",,,, "30010000",,, [8]], "KI", 686, "00", "0",,, "0",,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              KM: [, [,, "[3478]\\d{6}",,,,,,, [7], [4]], [,, "7[4-7]\\d{5}",,,, "7712345",,,, [4]], [,, "[34]\\d{6}",,,, "3212345"], [,,,,,,,,, [-1]], [,, "8\\d{6}",,,, "8001234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "KM", 269, "00",,,,,,,, [[, "(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[3478]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              KN: [, [,, "(?:[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "869(?:2(?:29|36)|302|4(?:6[015-9]|70)|56[5-7])\\d{4}",,,, "8692361234",,,, [7]], [,, "869(?:48[89]|55[6-8]|66\\d|76[02-7])\\d{4}",,,, "8697652917",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "KN", 1, "011", "1",,, "([2-7]\\d{6})$|1", "869$1",,,,, [,,,,,,,,, [-1]],, "869", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              KP: [, [,, "85\\d{6}|(?:19\\d|[2-7])\\d{7}",,,,,,, [8, 10], [6, 7]], [,, "(?:(?:195|2)\\d|3[19]|4[159]|5[37]|6[17]|7[39]|85)\\d{6}",,,, "21234567",,,, [6, 7]], [,, "19[1-3]\\d{7}",,,, "1921234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "KP", 850, "00|99", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"], "0$1"], [, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-7]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"]],, [,,,,,,,,, [-1]],,, [,, "238[02-9]\\d{4}|2(?:[0-24-9]\\d|3[0-79])\\d{5}",,,,,,, [8]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              KR: [, [,, "00[1-9]\\d{8,11}|(?:[12]|5\\d{3})\\d{7}|[13-6]\\d{9}|(?:[1-6]\\d|80)\\d{7}|[3-6]\\d{4,5}|(?:00|7)0\\d{8}",,,,,,, [5, 6, 8, 9, 10, 11, 12, 13, 14], [3, 4, 7]], [,, "(?:2|3[1-3]|[46][1-4]|5[1-5])[1-9]\\d{6,7}|(?:3[1-3]|[46][1-4]|5[1-5])1\\d{2,3}",,,, "22123456",,, [5, 6, 8, 9, 10], [3, 4, 7]], [,, "1(?:05(?:[0-8]\\d|9[0-6])|22[13]\\d)\\d{4,5}|1(?:0[0-46-9]|[16-9]\\d|2[013-9])\\d{6,7}",,,, "1020000000",,, [9, 10]], [,, "00(?:308\\d{6,7}|798\\d{7,9})|(?:00368|[38]0)\\d{7}",,,, "801234567",,, [9, 11, 12, 13, 14]], [,, "60[2-9]\\d{6}",,,, "602345678",,, [9]], [,,,,,,,,, [-1]], [,, "50\\d{8,9}",,,, "5012345678",,, [10, 11]], [,, "70\\d{8}",,,, "7012345678",,, [10]], "KR", 82, "00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))", "0",,, "0(8(?:[1-46-8]|5\\d\\d))?",,,, [[, "(\\d{5})", "$1", ["1[016-9]1", "1[016-9]11", "1[016-9]114"], "0$1"], [, "(\\d{2})(\\d{3,4})", "$1-$2", ["(?:3[1-3]|[46][1-4]|5[1-5])1"], "0$1", "0$CC-$1"], [, "(\\d{4})(\\d{4})", "$1-$2", ["1"]], [, "(\\d)(\\d{3,4})(\\d{4})", "$1-$2-$3", ["2"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["[36]0|8"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{3,4})(\\d{4})", "$1-$2-$3", ["[1346]|5[1-5]"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[57]"], "0$1", "0$CC-$1"], [, "(\\d{5})(\\d{3})(\\d{3})", "$1 $2 $3", ["003", "0030"]], [, "(\\d{2})(\\d{5})(\\d{4})", "$1-$2-$3", ["5"], "0$1", "0$CC-$1"], [, "(\\d{5})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["0"]], [, "(\\d{5})(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["0"]]], [[, "(\\d{2})(\\d{3,4})", "$1-$2", ["(?:3[1-3]|[46][1-4]|5[1-5])1"], "0$1", "0$CC-$1"], [, "(\\d{4})(\\d{4})", "$1-$2", ["1"]], [, "(\\d)(\\d{3,4})(\\d{4})", "$1-$2-$3", ["2"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1-$2-$3", ["[36]0|8"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{3,4})(\\d{4})", "$1-$2-$3", ["[1346]|5[1-5]"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1-$2-$3", ["[57]"], "0$1", "0$CC-$1"], [, "(\\d{2})(\\d{5})(\\d{4})", "$1-$2-$3", ["5"], "0$1", "0$CC-$1"]], [,, "15\\d{7,8}",,,, "1523456789",,, [9, 10]],,, [,, "00(?:3(?:08\\d{6,7}|68\\d{7})|798\\d{7,9})",,,,,,, [11, 12, 13, 14]], [,, "1(?:5(?:22|33|44|66|77|88|99)|6(?:[07]0|44|6[0168]|88)|8(?:00|33|55|77|99))\\d{4}",,,, "15441234",,, [8]],,, [,,,,,,,,, [-1]]],
              KW: [, [,, "18\\d{5}|(?:[2569]\\d|41)\\d{6}",,,,,,, [7, 8]], [,, "2(?:[23]\\d\\d|4(?:[1-35-9]\\d|44)|5(?:0[034]|[2-46]\\d|5[1-3]|7[1-7]))\\d{4}",,,, "22345678",,, [8]], [,, "(?:41\\d\\d|5(?:(?:[05]\\d|1[0-7]|6[56])\\d|2(?:22|5[25])|7(?:55|77)|88[58])|6(?:(?:0[034679]|5[015-9]|6\\d)\\d|1(?:00|11|6[16])|2[26]2|3[36]3|4[46]4|7(?:0[013-9]|[67]\\d)|8[68]8|9(?:[069]\\d|3[039]))|9(?:(?:[04679]\\d|8[057-9])\\d|1(?:1[01]|99)|2(?:00|2\\d)|3(?:00|3[03])|5(?:00|5\\d)))\\d{4}",,,, "50012345",,, [8]], [,, "18\\d{5}",,,, "1801234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "KW", 965, "00",,,,,,,, [[, "(\\d{4})(\\d{3,4})", "$1 $2", ["[169]|2(?:[235]|4[1-35-9])|52"]], [, "(\\d{3})(\\d{5})", "$1 $2", ["[245]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              KY: [, [,, "(?:345|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "345(?:2(?:22|3[23]|44|66)|333|444|6(?:23|38|40)|7(?:30|4[35-79]|6[6-9]|77)|8(?:00|1[45]|[48]8)|9(?:14|4[035-9]))\\d{4}",,,, "3452221234",,,, [7]], [,, "345(?:32[1-9]|42[0-4]|5(?:1[67]|2[5-79]|4[6-9]|50|76)|649|82[56]|9(?:1[679]|2[2-9]|3[06-9]|90))\\d{4}",,,, "3453231234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "(?:345976|900[2-9]\\d\\d)\\d{4}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "KY", 1, "011", "1",,, "([2-9]\\d{6})$|1", "345$1",,,,, [,, "345849\\d{4}",,,, "3458491234"],, "345", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              KZ: [, [,, "(?:33622|8\\d{8})\\d{5}|[78]\\d{9}",,,,,,, [10, 14], [5, 6, 7]], [,, "(?:33622|7(?:1(?:0(?:[23]\\d|4[0-3]|59|63)|1(?:[23]\\d|4[0-79]|59)|2(?:[23]\\d|59)|3(?:2\\d|3[0-79]|4[0-35-9]|59)|4(?:[24]\\d|3[013-9]|5[1-9]|97)|5(?:2\\d|3[1-9]|4[0-7]|59)|6(?:[2-4]\\d|5[19]|61)|72\\d|8(?:[27]\\d|3[1-46-9]|4[0-5]|59))|2(?:1(?:[23]\\d|4[46-9]|5[3469])|2(?:2\\d|3[0679]|46|5[12679])|3(?:[2-4]\\d|5[139])|4(?:2\\d|3[1-35-9]|59)|5(?:[23]\\d|4[0-8]|59|61)|6(?:2\\d|3[1-9]|4[0-4]|59)|7(?:[2379]\\d|40|5[279])|8(?:[23]\\d|4[0-3]|59)|9(?:2\\d|3[124578]|59))))\\d{5}",,,, "7123456789",,, [10], [5, 6, 7]], [,, "7(?:0[0-25-8]|47|6[0-4]|7[15-8]|85)\\d{7}",,,, "7710009998",,, [10]], [,, "8(?:00|108\\d{3})\\d{7}",,,, "8001234567"], [,, "809\\d{7}",,,, "8091234567",,, [10]], [,,,,,,,,, [-1]], [,, "808\\d{7}",,,, "8081234567",,, [10]], [,, "751\\d{7}",,,, "7511234567",,, [10]], "KZ", 7, "810", "8",,, "8",, "8~10",,,, [,,,,,,,,, [-1]],, "33|7", [,, "751\\d{7}",,,,,,, [10]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              LA: [, [,, "[23]\\d{9}|3\\d{8}|(?:[235-8]\\d|41)\\d{6}",,,,,,, [8, 9, 10], [6]], [,, "(?:2[13]|[35-7][14]|41|8[1468])\\d{6}",,,, "21212862",,, [8], [6]], [,, "208[78]\\d{6}|(?:20[23579]|30[24])\\d{7}",,,, "2023123456",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LA", 856, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["2[13]|3[14]|[4-8]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["30[0135-9]"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["[23]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "30[0135-9]\\d{6}",,,, "301234567",,, [9]],,, [,,,,,,,,, [-1]]],
              LB: [, [,, "[27-9]\\d{7}|[13-9]\\d{6}",,,,,,, [7, 8]], [,, "7(?:62|8[0-7]|9[04-9])\\d{4}|(?:[14-69]\\d|2(?:[14-69]\\d|[78][1-9])|7[2-57]|8[02-9])\\d{5}",,,, "1123456"], [,, "793(?:[01]\\d|2[0-4])\\d{3}|(?:(?:3|81)\\d|7(?:[01]\\d|6[013-9]|8[89]|9[12]))\\d{5}",,,, "71123456"], [,,,,,,,,, [-1]], [,, "9[01]\\d{6}",,,, "90123456",,, [8]], [,, "80\\d{6}",,,, "80123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LB", 961, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[27-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              LC: [, [,, "(?:[58]\\d\\d|758|900)\\d{7}",,,,,,, [10], [7]], [,, "758(?:234|4(?:30|5\\d|6[2-9]|8[0-2])|57[0-2]|(?:63|75)8)\\d{4}",,,, "7584305678",,,, [7]], [,, "758(?:28[4-7]|384|4(?:6[01]|8[4-9])|5(?:1[89]|20|84)|7(?:1[2-9]|2\\d|3[0-3])|812)\\d{4}",,,, "7582845678",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "LC", 1, "011", "1",,, "([2-8]\\d{6})$|1", "758$1",,,,, [,,,,,,,,, [-1]],, "758", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              LI: [, [,, "[68]\\d{8}|(?:[2378]\\d|90)\\d{5}",,,,,,, [7, 9]], [,, "(?:2(?:01|1[27]|2[02]|3\\d|6[02-578]|96)|3(?:[24]0|33|7[0135-7]|8[048]|9[0269]))\\d{4}",,,, "2345678",,, [7]], [,, "(?:6(?:(?:4[5-9]|5[0-469])\\d|6(?:[024-6]\\d|[17]0|3[7-9]))\\d|7(?:[37-9]\\d|42|56))\\d{4}",,,, "660234567"], [,, "8002[28]\\d\\d|80(?:05\\d|9)\\d{4}",,,, "8002222"], [,, "90(?:02[258]|1(?:23|3[14])|66[136])\\d\\d",,,, "9002222",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LI", 423, "00", "0",,, "(1001)|0",,,, [[, "(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3", ["[2379]|8(?:0[09]|7)", "[2379]|8(?:0(?:02|9)|7)"],, "$CC $1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["69"],, "$CC $1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"],, "$CC $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "870(?:28|87)\\d\\d",,,, "8702812",,, [7]],,, [,, "697(?:42|56|[78]\\d)\\d{4}",,,, "697861234",,, [9]]],
              LK: [, [,, "[1-9]\\d{8}",,,,,,, [9], [7]], [,, "(?:12[2-9]|602|8[12]\\d|9(?:1\\d|22|9[245]))\\d{6}|(?:11|2[13-7]|3[1-8]|4[157]|5[12457]|6[35-7])[2-57]\\d{6}",,,, "112345678",,,, [7]], [,, "7(?:[0-25-8]\\d|4[0-4])\\d{6}",,,, "712345678"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LK", 94, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[1-689]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "1973\\d{5}",,,, "197312345"],,, [,,,,,,,,, [-1]]],
              LR: [, [,, "(?:[245]\\d|33|77|88)\\d{7}|(?:2\\d|[4-6])\\d{6}",,,,,,, [7, 8, 9]], [,, "2\\d{7}",,,, "21234567",,, [8]], [,, "(?:(?:(?:22|33)0|555|(?:77|88)\\d)\\d|4(?:240|[67]))\\d{5}|[56]\\d{6}",,,, "770123456",,, [7, 9]], [,,,,,,,,, [-1]], [,, "332(?:02|[34]\\d)\\d{4}",,,, "332021234",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LR", 231, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["4[67]|[56]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-578]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              LS: [, [,, "(?:[256]\\d\\d|800)\\d{5}",,,,,,, [8]], [,, "2\\d{7}",,,, "22123456"], [,, "[56]\\d{7}",,,, "50123456"], [,, "800[1256]\\d{4}",,,, "80021234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LS", 266, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[2568]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              LT: [, [,, "(?:[3469]\\d|52|[78]0)\\d{6}",,,,,,, [8]], [,, "(?:3[1478]|4[124-6]|52)\\d{6}",,,, "31234567"], [,, "6\\d{7}",,,, "61234567"], [,, "80[02]\\d{5}",,,, "80012345"], [,, "9(?:0[0239]|10)\\d{5}",,,, "90012345"], [,, "808\\d{5}",,,, "80812345"], [,, "70[05]\\d{5}",,,, "70012345"], [,, "[89]01\\d{5}",,,, "80123456"], "LT", 370, "00", "0",,, "[08]",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["52[0-7]"], "(0-$1)",, 1], [, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[7-9]"], "0 $1",, 1], [, "(\\d{2})(\\d{6})", "$1 $2", ["37|4(?:[15]|6[1-8])"], "(0-$1)",, 1], [, "(\\d{3})(\\d{5})", "$1 $2", ["[3-6]"], "(0-$1)",, 1]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "70[67]\\d{5}",,,, "70712345"],,, [,,,,,,,,, [-1]]],
              LU: [, [,, "35[013-9]\\d{4,8}|6\\d{8}|35\\d{2,4}|(?:[2457-9]\\d|3[0-46-9])\\d{2,9}",,,,,,, [4, 5, 6, 7, 8, 9, 10, 11]], [,, "(?:35[013-9]|80[2-9]|90[89])\\d{1,8}|(?:2[2-9]|3[0-46-9]|[457]\\d|8[13-9]|9[2-579])\\d{2,9}",,,, "27123456"], [,, "6(?:[269][18]|5[1568]|7[189]|81)\\d{6}",,,, "628123456",,, [9]], [,, "800\\d{5}",,,, "80012345",,, [8]], [,, "90[015]\\d{5}",,,, "90012345",,, [8]], [,, "801\\d{5}",,,, "80112345",,, [8]], [,,,,,,,,, [-1]], [,, "20(?:1\\d{5}|[2-689]\\d{1,7})",,,, "20201234",,, [4, 5, 6, 7, 8, 9, 10]], "LU", 352, "00",,,, "(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\d)",,,, [[, "(\\d{2})(\\d{3})", "$1 $2", ["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"],, "$CC $1"], [, "(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"],, "$CC $1"], [, "(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["20[2-689]"],, "$CC $1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})", "$1 $2 $3 $4", ["2(?:[0367]|4[3-8])"],, "$CC $1"], [, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["80[01]|90[015]"],, "$CC $1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["20"],, "$CC $1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6"],, "$CC $1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})", "$1 $2 $3 $4 $5", ["2(?:[0367]|4[3-8])"],, "$CC $1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{1,5})", "$1 $2 $3 $4", ["[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]"],, "$CC $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              LV: [, [,, "(?:[268]\\d|90)\\d{6}",,,,,,, [8]], [,, "6\\d{7}",,,, "63123456"], [,, "23(?:23[0-57-9]|33[0238])\\d{3}|2(?:[0-24-9]\\d\\d|3(?:0[07]|[14-9]\\d|2[024-9]|3[0-24-9]))\\d{4}",,,, "21234567"], [,, "80\\d{6}",,,, "80123456"], [,, "90\\d{6}",,,, "90123456"], [,, "81\\d{6}",,,, "81123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LV", 371, "00",,,,,,,, [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[269]|8[01]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              LY: [, [,, "[2-9]\\d{8}",,,,,,, [9], [7]], [,, "(?:2(?:0[56]|[1-6]\\d|7[124579]|8[124])|3(?:1\\d|2[2356])|4(?:[17]\\d|2[1-357]|5[2-4]|8[124])|5(?:[1347]\\d|2[1-469]|5[13-5]|8[1-4])|6(?:[1-479]\\d|5[2-57]|8[1-5])|7(?:[13]\\d|2[13-79])|8(?:[124]\\d|5[124]|84))\\d{6}",,,, "212345678",,,, [7]], [,, "9[1-6]\\d{7}",,,, "912345678"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "LY", 218, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{7})", "$1-$2", ["[2-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MA: [, [,, "[5-8]\\d{8}",,,,,,, [9]], [,, "5(?:2(?:[0-25-79]\\d|3[1-578]|4[02-46-8]|8[0235-7])|3(?:[0-47]\\d|5[02-9]|6[02-8]|8[014-9]|9[3-9])|(?:4[067]|5[03])\\d)\\d{5}",,,, "520123456"], [,, "(?:6(?:[0-79]\\d|8[0-247-9])|7(?:[0167]\\d|2[0-4]|5[01]|8[0-3]))\\d{6}",,,, "650123456"], [,, "80[0-7]\\d{6}",,,, "801234567"], [,, "89\\d{7}",,,, "891234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:592(?:4[0-2]|93)|80[89]\\d\\d)\\d{4}",,,, "592401234"], "MA", 212, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["5[45]"], "0$1"], [, "(\\d{4})(\\d{5})", "$1-$2", ["5(?:2[2-46-9]|3[3-9]|9)|8(?:0[89]|92)"], "0$1"], [, "(\\d{2})(\\d{7})", "$1-$2", ["8"], "0$1"], [, "(\\d{3})(\\d{6})", "$1-$2", ["[5-7]"], "0$1"]],, [,,,,,,,,, [-1]], 1,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MC: [, [,, "(?:[3489]|6\\d)\\d{7}",,,,,,, [8, 9]], [,, "(?:870|9[2-47-9]\\d)\\d{5}",,,, "99123456",,, [8]], [,, "4(?:[469]\\d|5[1-9])\\d{5}|(?:3|6\\d)\\d{7}",,,, "612345678"], [,, "(?:800|90\\d)\\d{5}",,,, "90123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MC", 377, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3", ["87"]], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["4"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[389]"]], [, "(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["6"], "0$1"]], [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["4"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[389]"]], [, "(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["6"], "0$1"]], [,,,,,,,,, [-1]],,, [,, "8[07]0\\d{5}",,,,,,, [8]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MD: [, [,, "(?:[235-7]\\d|[89]0)\\d{6}",,,,,,, [8]], [,, "(?:(?:2[1-9]|3[1-79])\\d|5(?:33|5[257]))\\d{5}",,,, "22212345"], [,, "562\\d{5}|(?:6\\d|7[16-9])\\d{6}",,,, "62112345"], [,, "800\\d{5}",,,, "80012345"], [,, "90[056]\\d{5}",,,, "90012345"], [,, "808\\d{5}",,,, "80812345"], [,,,,,,,,, [-1]], [,, "3[08]\\d{6}",,,, "30123456"], "MD", 373, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{5})", "$1 $2", ["[89]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["22|3"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["[25-7]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "803\\d{5}",,,, "80312345"],,, [,,,,,,,,, [-1]]],
              ME: [, [,, "(?:20|[3-79]\\d)\\d{6}|80\\d{6,7}",,,,,,, [8, 9], [6]], [,, "(?:20[2-8]|3(?:[0-2][2-7]|3[24-7])|4(?:0[2-467]|1[2467])|5(?:0[2467]|1[24-7]|2[2-467]))\\d{5}",,,, "30234567",,, [8], [6]], [,, "6(?:[07-9]\\d|3[024]|6[0-25])\\d{5}",,,, "67622901",,, [8]], [,, "80(?:[0-2578]|9\\d)\\d{5}",,,, "80080002"], [,, "9(?:4[1568]|5[178])\\d{5}",,,, "94515151",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "78[1-49]\\d{5}",,,, "78108780",,, [8]], "ME", 382, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[2-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "77[1-9]\\d{5}",,,, "77273012",,, [8]],,, [,,,,,,,,, [-1]]],
              MF: [, [,, "590\\d{6}|(?:69|80|9\\d)\\d{7}",,,,,,, [9]], [,, "590(?:0[079]|[14]3|[27][79]|3[03-7]|5[0-268]|87)\\d{4}",,,, "590271234"], [,, "69(?:0\\d\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\d)|6(?:1[016-9]|5[0-4]|[67]\\d))\\d{4}",,,, "690001234"], [,, "80[0-5]\\d{6}",,,, "800012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "9(?:(?:39[5-7]|76[018])\\d|475[0-5])\\d{4}",,,, "976012345"], "MF", 590, "00", "0",,, "0",,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MG: [, [,, "[23]\\d{8}",,,,,,, [9], [7]], [,, "2072[29]\\d{4}|20(?:2\\d|4[47]|5[3467]|6[279]|7[356]|8[268]|9[2457])\\d{5}",,,, "202123456",,,, [7]], [,, "3[2-47-9]\\d{7}",,,, "321234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "22\\d{7}",,,, "221234567"], "MG", 261, "00", "0",,, "([24-9]\\d{6})$|0", "20$1",,, [[, "(\\d{2})(\\d{2})(\\d{3})(\\d{2})", "$1 $2 $3 $4", ["[23]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MH: [, [,, "329\\d{4}|(?:[256]\\d|45)\\d{5}",,,,,,, [7]], [,, "(?:247|528|625)\\d{4}",,,, "2471234"], [,, "(?:(?:23|54)5|329|45[35-8])\\d{4}",,,, "2351234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "635\\d{4}",,,, "6351234"], "MH", 692, "011", "1",,, "1",,,, [[, "(\\d{3})(\\d{4})", "$1-$2", ["[2-6]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MK: [, [,, "[2-578]\\d{7}",,,,,,, [8], [6, 7]], [,, "(?:(?:2(?:62|77)0|3444)\\d|4[56]440)\\d{3}|(?:34|4[357])700\\d{3}|(?:2(?:[0-3]\\d|5[0-578]|6[01]|82)|3(?:1[3-68]|[23][2-68]|4[23568])|4(?:[23][2-68]|4[3-68]|5[2568]|6[25-8]|7[24-68]|8[4-68]))\\d{5}",,,, "22012345",,,, [6, 7]], [,, "7(?:3555|(?:474|9[019]7)7)\\d{3}|7(?:[0-25-8]\\d\\d|3(?:[1-48]\\d|6[01]|7[01578])|4(?:2\\d|60|7[01578])|9(?:[2-4]\\d|5[01]|7[015]))\\d{4}",,,, "72345678"], [,, "800\\d{5}",,,, "80012345"], [,, "5\\d{7}",,,, "50012345"], [,, "8(?:0[1-9]|[1-9]\\d)\\d{5}",,,, "80123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MK", 389, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["2|34[47]|4(?:[37]7|5[47]|64)"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[347]"], "0$1"], [, "(\\d{3})(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[58]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              ML: [, [,, "[24-9]\\d{7}",,,,,,, [8]], [,, "2(?:07[0-8]|12[67])\\d{4}|(?:2(?:02|1[4-689])|4(?:0[0-4]|4[1-39]))\\d{5}",,,, "20212345"], [,, "2(?:0(?:01|79)|17\\d)\\d{4}|(?:5[01]|[679]\\d|8[2-49])\\d{6}",,,, "65012345"], [,, "80\\d{6}",,,, "80012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "ML", 223, "00",,,,,,,, [[, "(\\d{4})", "$1", ["67[057-9]|74[045]", "67(?:0[09]|[59]9|77|8[89])|74(?:0[02]|44|55)"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24-9]"]]], [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24-9]"]]], [,,,,,,,,, [-1]],,, [,, "80\\d{6}"], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MM: [, [,, "1\\d{5,7}|95\\d{6}|(?:[4-7]|9[0-46-9])\\d{6,8}|(?:2|8\\d)\\d{5,8}",,,,,,, [6, 7, 8, 9, 10], [5]], [,, "(?:1(?:(?:12|[28]\\d|3[56]|7[3-6]|9[0-6])\\d|4(?:2[29]|62|7[0-2]|83)|6)|2(?:2(?:00|8[34])|4(?:0\\d|[26]2|7[0-2]|83)|51\\d\\d)|4(?:2(?:2\\d\\d|48[013])|3(?:20\\d|4(?:70|83)|56)|420\\d|5(?:2\\d|470))|6(?:0(?:[23]|88\\d)|(?:124|[56]2\\d)\\d|2472|3(?:20\\d|470)|4(?:2[04]\\d|472)|7(?:3\\d\\d|4[67]0|8(?:[01459]\\d|8))))\\d{4}|5(?:2(?:2\\d{5,6}|47[02]\\d{4})|(?:3472|4(?:2(?:1|86)|470)|522\\d|6(?:20\\d|483)|7(?:20\\d|48[01])|8(?:20\\d|47[02])|9(?:20\\d|470))\\d{4})|7(?:(?:0470|4(?:25\\d|470)|5(?:202|470|96\\d))\\d{4}|1(?:20\\d{4,5}|4(?:70|83)\\d{4}))|8(?:1(?:2\\d{5,6}|4(?:10|7[01]\\d)\\d{3})|2(?:2\\d{5,6}|(?:320|490\\d)\\d{3})|(?:3(?:2\\d\\d|470)|4[24-7]|5(?:(?:2\\d|51)\\d|4(?:[1-35-9]\\d|4[0-57-9]))|6[23])\\d{4})|(?:1[2-6]\\d|4(?:2[24-8]|3[2-7]|[46][2-6]|5[3-5])|5(?:[27][2-8]|3[2-68]|4[24-8]|5[23]|6[2-4]|8[24-7]|9[2-7])|6(?:[19]20|42[03-6]|(?:52|7[45])\\d)|7(?:[04][24-8]|[15][2-7]|22|3[2-4])|8(?:1[2-689]|2[2-8]|(?:[35]2|64)\\d))\\d{4}|25\\d{5,6}|(?:2[2-9]|6(?:1[2356]|[24][2-6]|3[24-6]|5[2-4]|6[2-8]|7[235-7]|8[245]|9[24])|8(?:3[24]|5[245]))\\d{4}",,,, "1234567",,, [6, 7, 8, 9], [5]], [,, "(?:17[01]|9(?:2(?:[0-4]|[56]\\d\\d)|(?:3(?:[0-36]|4\\d)|(?:6\\d|8[89]|9[4-8])\\d|7(?:3|40|[5-9]\\d))\\d|4(?:(?:[0245]\\d|[1379])\\d|88)|5[0-6])\\d)\\d{4}|9[69]1\\d{6}|9(?:[68]\\d|9[089])\\d{5}",,,, "92123456",,, [7, 8, 9, 10]], [,, "80080(?:0[1-9]|2\\d)\\d{3}",,,, "8008001234",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "1333\\d{4}|[12]468\\d{4}",,,, "13331234",,, [8]], "MM", 95, "00", "0",,, "0",,,, [[, "(\\d)(\\d{2})(\\d{3})", "$1 $2 $3", ["16|2"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["4(?:[2-46]|5[3-5])|5|6(?:[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-5]|(?:60|86)[23]"], "0$1"], [, "(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[12]|452|678|86", "[12]|452|6788|86"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[4-7]|8[1-35]"], "0$1"], [, "(\\d)(\\d{3})(\\d{4,6})", "$1 $2 $3", ["9(?:2[0-4]|[35-9]|4[137-9])"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"], [, "(\\d)(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["92"], "0$1"], [, "(\\d)(\\d{5})(\\d{4})", "$1 $2 $3", ["9"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MN: [, [,, "[12]\\d{7,9}|[5-9]\\d{7}",,,,,,, [8, 9, 10], [4, 5, 6]], [,, "[12]2[1-3]\\d{5,6}|(?:(?:[12](?:1|27)|5[368])\\d\\d|7(?:0(?:[0-5]\\d|7[078]|80)|128))\\d{4}|[12](?:3[2-8]|4[2-68]|5[1-4689])\\d{6,7}",,,, "53123456",,,, [4, 5, 6]], [,, "(?:83[01]|92[039])\\d{5}|(?:5[05]|6[069]|8[015689]|9[013-9])\\d{6}",,,, "88123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "712[0-79]\\d{4}|7(?:1[013-9]|[25-9]\\d)\\d{5}",,,, "75123456",,, [8]], "MN", 976, "001", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["[12]1"], "0$1"], [, "(\\d{4})(\\d{4})", "$1 $2", ["[5-9]"]], [, "(\\d{3})(\\d{5,6})", "$1 $2", ["[12]2[1-3]"], "0$1"], [, "(\\d{4})(\\d{5,6})", "$1 $2", ["[12](?:27|3[2-8]|4[2-68]|5[1-4689])", "[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]"], "0$1"], [, "(\\d{5})(\\d{4,5})", "$1 $2", ["[12]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MO: [, [,, "0800\\d{3}|(?:28|[68]\\d)\\d{6}",,,,,,, [7, 8]], [,, "(?:28[2-9]|8(?:11|[2-57-9]\\d))\\d{5}",,,, "28212345",,, [8]], [,, "6800[0-79]\\d{3}|6(?:[235]\\d\\d|6(?:0[0-5]|[1-9]\\d)|8(?:0[1-9]|[14-8]\\d|2[5-9]|[39][0-4]))\\d{4}",,,, "66123456",,, [8]], [,, "0800\\d{3}",,,, "0800501",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MO", 853, "00",,,,,,,, [[, "(\\d{4})(\\d{3})", "$1 $2", ["0"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[268]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MP: [, [,, "[58]\\d{9}|(?:67|90)0\\d{7}",,,,,,, [10], [7]], [,, "670(?:2(?:3[3-7]|56|8[4-8])|32[1-38]|4(?:33|8[348])|5(?:32|55|88)|6(?:64|70|82)|78[3589]|8[3-9]8|989)\\d{4}",,,, "6702345678",,,, [7]], [,, "670(?:2(?:3[3-7]|56|8[4-8])|32[1-38]|4(?:33|8[348])|5(?:32|55|88)|6(?:64|70|82)|78[3589]|8[3-9]8|989)\\d{4}",,,, "6702345678",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "MP", 1, "011", "1",,, "([2-9]\\d{6})$|1", "670$1",, 1,,, [,,,,,,,,, [-1]],, "670", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MQ: [, [,, "596\\d{6}|(?:69|[89]\\d)\\d{7}",,,,,,, [9]], [,, "(?:596(?:[03-7]\\d|1[05]|2[7-9]|8[0-39]|9[04-9])|80[6-9]\\d\\d|9(?:477[6-9]|767[4589]))\\d{4}",,,, "596301234"], [,, "69[67]\\d{6}",,,, "696201234"], [,, "80[0-5]\\d{6}",,,, "800012345"], [,, "8[129]\\d{7}",,,, "810123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "9(?:397[0-3]|477[0-5]|76(?:6\\d|7[0-367]))\\d{4}",,,, "976612345"], "MQ", 596, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[569]|8(?:0[6-9]|[36])"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MR: [, [,, "(?:[2-4]\\d\\d|800)\\d{5}",,,,,,, [8]], [,, "(?:25[08]|35\\d|45[1-7])\\d{5}",,,, "35123456"], [,, "[2-4][0-46-9]\\d{6}",,,, "22123456"], [,, "800\\d{5}",,,, "80012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MR", 222, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-48]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MS: [, [,, "(?:[58]\\d\\d|664|900)\\d{7}",,,,,,, [10], [7]], [,, "6644(?:1[0-3]|91)\\d{4}",,,, "6644912345",,,, [7]], [,, "664(?:3(?:49|9[1-6])|49[2-6])\\d{4}",,,, "6644923456",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "MS", 1, "011", "1",,, "([34]\\d{6})$|1", "664$1",,,,, [,,,,,,,,, [-1]],, "664", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MT: [, [,, "3550\\d{4}|(?:[2579]\\d\\d|800)\\d{5}",,,,,,, [8]], [,, "20(?:3[1-4]|6[059])\\d{4}|2(?:0[19]|[1-357]\\d|60)\\d{5}",,,, "21001234"], [,, "(?:7(?:210|[79]\\d\\d)|9(?:[29]\\d\\d|69[67]|8(?:1[1-3]|89|97)))\\d{4}",,,, "96961234"], [,, "800(?:02|[3467]\\d)\\d{3}",,,, "80071234"], [,, "5(?:0(?:0(?:37|43)|(?:6\\d|70|9[0168])\\d)|[12]\\d0[1-5])\\d{3}",,,, "50037123"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "3550\\d{4}",,,, "35501234"], "MT", 356, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[2357-9]"]]],, [,, "7117\\d{4}",,,, "71171234"],,, [,,,,,,,,, [-1]], [,, "501\\d{5}",,,, "50112345"],,, [,,,,,,,,, [-1]]],
              MU: [, [,, "(?:[57]|8\\d\\d)\\d{7}|[2-468]\\d{6}",,,,,,, [7, 8, 10]], [,, "(?:2(?:[0346-8]\\d|1[0-7])|4(?:[013568]\\d|2[4-8]|71)|54(?:[3-5]\\d|71)|6\\d\\d|8(?:14|3[129]))\\d{4}",,,, "54480123",,, [7, 8]], [,, "5(?:4(?:2[1-389]|7[1-9])|87[15-8])\\d{4}|(?:5(?:2[5-9]|4[3-689]|[57]\\d|8[0-689]|9[0-8])|7(?:0[0-4]|3[013]))\\d{5}",,,, "52512345",,, [8]], [,, "802\\d{7}|80[0-2]\\d{4}",,,, "8001234",,, [7, 10]], [,, "30\\d{5}",,,, "3012345",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "3(?:20|9\\d)\\d{4}",,,, "3201234",,, [7]], "MU", 230, "0(?:0|[24-7]0|3[03])",,,,,, "020",, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-46]|8[013]"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[57]"]], [, "(\\d{5})(\\d{5})", "$1 $2", ["8"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MV: [, [,, "(?:800|9[0-57-9]\\d)\\d{7}|[34679]\\d{6}",,,,,,, [7, 10]], [,, "(?:3(?:0[0-4]|3[0-59])|6(?:[58][024689]|6[024-68]|7[02468]))\\d{4}",,,, "6701234",,, [7]], [,, "(?:46[46]|[79]\\d\\d)\\d{4}",,,, "7712345",,, [7]], [,, "800\\d{7}",,,, "8001234567",,, [10]], [,, "900\\d{7}",,,, "9001234567",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MV", 960, "0(?:0|19)",,,,,, "00",, [[, "(\\d{3})(\\d{4})", "$1-$2", ["[34679]"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[89]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "4(?:0[01]|50)\\d{4}",,,, "4001234",,, [7]],,, [,,,,,,,,, [-1]]],
              MW: [, [,, "(?:[1289]\\d|31|77)\\d{7}|1\\d{6}",,,,,,, [7, 9]], [,, "(?:1[2-9]|2[12]\\d\\d)\\d{5}",,,, "1234567"], [,, "111\\d{6}|(?:31|77|[89][89])\\d{7}",,,, "991234567",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MW", 265, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["1[2-9]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[137-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MX: [, [,, "[2-9]\\d{9}",,,,,,, [10], [7, 8]], [,, "657[12]\\d{6}|(?:2(?:0[01]|2\\d|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[267][1-9]|3[1-8]|[45]\\d|8[1-35-9]|9[2-689])|5(?:[56]\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-3689]|6[0-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1346][1-9]|[27]\\d|5[13-9]|8[1-69]|9[17])|8(?:1\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[0-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69]\\d|7[12]|8[1-8]))\\d{7}",,,, "2001234567",,,, [7, 8]], [,, "657[12]\\d{6}|(?:2(?:2\\d|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[267][1-9]|3[1-8]|[45]\\d|8[1-35-9]|9[2-689])|5(?:[56]\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-3689]|6[0-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1346][1-9]|[27]\\d|5[13-9]|8[1-69]|9[17])|8(?:1\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[0-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69]\\d|7[12]|8[1-8]))\\d{7}",,,, "2221234567",,,, [7, 8]], [,, "8(?:00|88)\\d{7}",,,, "8001234567"], [,, "900\\d{7}",,,, "9001234567"], [,, "300\\d{7}",,,, "3001234567"], [,, "500\\d{7}",,,, "5001234567"], [,,,,,,,,, [-1]], "MX", 52, "0[09]",,,,,, "00",, [[, "(\\d{5})", "$1", ["53"]], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["33|5[56]|81"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-9]"]]], [[, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["33|5[56]|81"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[2-9]"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MY: [, [,, "1\\d{8,9}|(?:3\\d|[4-9])\\d{7}",,,,,,, [8, 9, 10], [6, 7]], [,, "4270\\d{4}|(?:3(?:2[0-36-9]|3[0-368]|4[0-278]|5[0-24-8]|6[0-467]|7[1246-9]|8\\d|9[0-57])\\d|4(?:2[0-689]|[3-79]\\d|8[1-35689])|5(?:2[0-589]|[3468]\\d|5[0-489]|7[1-9]|9[23])|6(?:2[2-9]|3[1357-9]|[46]\\d|5[0-6]|7[0-35-9]|85|9[015-8])|7(?:[2579]\\d|3[03-68]|4[0-8]|6[5-9]|8[0-35-9])|8(?:[24][2-8]|3[2-5]|5[2-7]|6[2-589]|7[2-578]|[89][2-9])|9(?:0[57]|13|[25-7]\\d|[3489][0-8]))\\d{5}",,,, "323856789",,, [8, 9], [6, 7]], [,, "1(?:1888[689]|4400|8(?:47|8[27])[0-4])\\d{4}|1(?:0(?:[23568]\\d|4[0-6]|7[016-9]|9[0-8])|1(?:[1-5]\\d\\d|6(?:0[5-9]|[1-9]\\d)|7(?:[0-4]\\d|5[0-7]))|(?:[269]\\d|[37][1-9]|4[235-9])\\d|5(?:31|9\\d\\d)|8(?:1[23]|[236]\\d|4[06]|5(?:46|[7-9])|7[016-9]|8[01]|9[0-8]))\\d{5}",,,, "123456789",,, [9, 10]], [,, "1[378]00\\d{6}",,,, "1300123456",,, [10]], [,, "1600\\d{6}",,,, "1600123456",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "15(?:4(?:6[0-4]\\d|8(?:0[125]|[17]\\d|21|3[01]|4[01589]|5[014]|6[02]))|6(?:32[0-6]|78\\d))\\d{4}",,,, "1546012345",,, [10]], "MY", 60, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1-$2 $3", ["[4-79]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1-$2 $3", ["1(?:[02469]|[378][1-9]|53)|8", "1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8"], "0$1"], [, "(\\d)(\\d{4})(\\d{4})", "$1-$2 $3", ["3"], "0$1"], [, "(\\d)(\\d{3})(\\d{2})(\\d{4})", "$1-$2-$3-$4", ["1(?:[367]|80)"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2 $3", ["15"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4})", "$1-$2 $3", ["1"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              MZ: [, [,, "(?:2|8\\d)\\d{7}",,,,,,, [8, 9]], [,, "2(?:[1346]\\d|5[0-2]|[78][12]|93)\\d{5}",,,, "21123456",,, [8]], [,, "8[2-79]\\d{7}",,,, "821234567",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "MZ", 258, "00",,,,,,,, [[, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2|8[2-79]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["8"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              NA: [, [,, "[68]\\d{7,8}",,,,,,, [8, 9]], [,, "64426\\d{3}|6(?:1(?:2[2-7]|3[01378]|4[0-4])|254|32[0237]|4(?:27|41|5[25])|52[236-8]|626|7(?:2[2-4]|30))\\d{4,5}|6(?:1(?:(?:0\\d|2[0189]|3[24-69]|4[5-9])\\d|17|69|7[014])|2(?:17|5[0-36-8]|69|70)|3(?:17|2[14-689]|34|6[289]|7[01]|81)|4(?:17|2[0-2]|4[06]|5[0137]|69|7[01])|5(?:17|2[0459]|69|7[01])|6(?:17|25|38|42|69|7[01])|7(?:17|2[569]|3[13]|6[89]|7[01]))\\d{4}",,,, "61221234"], [,, "(?:60|8[1245])\\d{7}",,,, "811234567",,, [9]], [,, "80\\d{7}",,,, "800123456",,, [9]], [,, "8701\\d{5}",,,, "870123456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "8(?:3\\d\\d|86)\\d{5}",,,, "88612345"], "NA", 264, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["88"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["6"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["87"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              NC: [, [,, "(?:050|[2-57-9]\\d\\d)\\d{3}",,,,,,, [6]], [,, "(?:2[03-9]|3[0-5]|4[1-7]|88)\\d{4}",,,, "201234"], [,, "(?:5[0-4]|[79]\\d|8[0-79])\\d{4}",,,, "751234"], [,, "050\\d{3}",,,, "050012"], [,, "36\\d{4}",,,, "366711"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NC", 687, "00",,,,,,,, [[, "(\\d{3})", "$1", ["5[6-8]"]], [, "(\\d{2})(\\d{2})(\\d{2})", "$1.$2.$3", ["[02-57-9]"]]], [[, "(\\d{2})(\\d{2})(\\d{2})", "$1.$2.$3", ["[02-57-9]"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              NE: [, [,, "[027-9]\\d{7}",,,,,,, [8]], [,, "2(?:0(?:20|3[1-8]|4[13-5]|5[14]|6[14578]|7[1-578])|1(?:4[145]|5[14]|6[14-68]|7[169]|88))\\d{4}",,,, "20201234"], [,, "(?:23|7[0467]|[89]\\d)\\d{6}",,,, "93123456"], [,, "08\\d{6}",,,, "08123456"], [,, "09\\d{6}",,,, "09123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NE", 227, "00",,,,,,,, [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["08"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[089]|2[013]|7[0467]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              NF: [, [,, "[13]\\d{5}",,,,,,, [6], [5]], [,, "(?:1(?:06|17|28|39)|3[0-2]\\d)\\d{3}",,,, "106609",,,, [5]], [,, "(?:14|3[58])\\d{4}",,,, "381234",,,, [5]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NF", 672, "00",,,, "([0-258]\\d{4})$", "3$1",,, [[, "(\\d{2})(\\d{4})", "$1 $2", ["1[0-3]"]], [, "(\\d)(\\d{5})", "$1 $2", ["[13]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              NG: [, [,, "38\\d{6}|[78]\\d{9,13}|(?:20|9\\d)\\d{8}",,,,,,, [8, 10, 11, 12, 13, 14], [6, 7]], [,, "(?:20(?:[1259]\\d|3[013-9]|4[1-8]|6[024-689]|7[1-79]|8[2-9])|38)\\d{6}",,,, "2033123456",,, [8, 10], [6, 7]], [,, "(?:702[0-24-9]|819[01])\\d{6}|(?:7(?:0[13-9]|[12]\\d)|8(?:0[1-9]|1[0-8])|9(?:0[1-9]|1[1-6]))\\d{7}",,,, "8021234567",,, [10]], [,, "800\\d{7,11}",,,, "80017591759",,, [10, 11, 12, 13, 14]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NG", 234, "009", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["3"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[7-9]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["20[129]"], "0$1"], [, "(\\d{4})(\\d{2})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{3})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["[78]"], "0$1"], [, "(\\d{3})(\\d{5})(\\d{5,6})", "$1 $2 $3", ["[78]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "700\\d{7,11}",,,, "7001234567",,, [10, 11, 12, 13, 14]],,, [,,,,,,,,, [-1]]],
              NI: [, [,, "(?:1800|[25-8]\\d{3})\\d{4}",,,,,,, [8]], [,, "2\\d{7}",,,, "21234567"], [,, "(?:5(?:5[0-7]|[78]\\d)|6(?:20|3[035]|4[045]|5[05]|77|8[1-9]|9[059])|(?:7[5-8]|8\\d)\\d)\\d{5}",,,, "81234567"], [,, "1800\\d{4}",,,, "18001234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NI", 505, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[125-8]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              NL: [, [,, "(?:[124-7]\\d\\d|3(?:[02-9]\\d|1[0-8]))\\d{6}|8\\d{6,9}|9\\d{6,10}|1\\d{4,5}",,,,,,, [5, 6, 7, 8, 9, 10, 11]], [,, "(?:1(?:[035]\\d|1[13-578]|6[124-8]|7[24]|8[0-467])|2(?:[0346]\\d|2[2-46-9]|5[125]|9[479])|3(?:[03568]\\d|1[3-8]|2[01]|4[1-8])|4(?:[0356]\\d|1[1-368]|7[58]|8[15-8]|9[23579])|5(?:[0358]\\d|[19][1-9]|2[1-57-9]|4[13-8]|6[126]|7[0-3578])|7\\d\\d)\\d{6}",,,, "101234567",,, [9]], [,, "(?:6[1-58]|970\\d)\\d{7}",,,, "612345678",,, [9, 11]], [,, "800\\d{4,7}",,,, "8001234",,, [7, 8, 9, 10]], [,, "90[069]\\d{4,7}",,,, "9061234",,, [7, 8, 9, 10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:85|91)\\d{7}",,,, "851234567",,, [9]], "NL", 31, "00", "0",,, "0",,,, [[, "(\\d{4})", "$1", ["1[238]|[34]"]], [, "(\\d{2})(\\d{3,4})", "$1 $2", ["14"]], [, "(\\d{6})", "$1", ["1"]], [, "(\\d{3})(\\d{4,7})", "$1 $2", ["[89]0"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["66"], "0$1"], [, "(\\d)(\\d{8})", "$1 $2", ["6"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["1[16-8]|2[259]|3[124]|4[17-9]|5[124679]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-578]|91"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{5})", "$1 $2 $3", ["9"], "0$1"]], [[, "(\\d{3})(\\d{4,7})", "$1 $2", ["[89]0"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["66"], "0$1"], [, "(\\d)(\\d{8})", "$1 $2", ["6"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["1[16-8]|2[259]|3[124]|4[17-9]|5[124679]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-578]|91"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{5})", "$1 $2 $3", ["9"], "0$1"]], [,, "66\\d{7}",,,, "662345678",,, [9]],,, [,, "140(?:1[035]|2[0346]|3[03568]|4[0356]|5[0358]|8[458])|140(?:1[16-8]|2[259]|3[124]|4[17-9]|5[124679]|7)\\d",,,,,,, [5, 6]], [,, "140(?:1[035]|2[0346]|3[03568]|4[0356]|5[0358]|8[458])|(?:140(?:1[16-8]|2[259]|3[124]|4[17-9]|5[124679]|7)|8[478]\\d{6})\\d",,,, "14020",,, [5, 6, 9]],,, [,,,,,,,,, [-1]]],
              NO: [, [,, "(?:0|[2-9]\\d{3})\\d{4}",,,,,,, [5, 8]], [,, "(?:2[1-4]|3[1-3578]|5[1-35-7]|6[1-4679]|7[0-8])\\d{6}",,,, "21234567",,, [8]], [,, "(?:4[015-8]|9\\d)\\d{6}",,,, "40612345",,, [8]], [,, "80[01]\\d{5}",,,, "80012345",,, [8]], [,, "82[09]\\d{5}",,,, "82012345",,, [8]], [,, "810(?:0[0-6]|[2-8]\\d)\\d{3}",,,, "81021234",,, [8]], [,, "880\\d{5}",,,, "88012345",,, [8]], [,, "85[0-5]\\d{5}",,,, "85012345",,, [8]], "NO", 47, "00",,,,,,,, [[, "(\\d{3})(\\d{2})(\\d{3})", "$1 $2 $3", ["8"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2-79]"]]],, [,,,,,,,,, [-1]], 1, "[02-689]|7[0-8]", [,,,,,,,,, [-1]], [,, "(?:0[235-9]|81(?:0(?:0[7-9]|1\\d)|5\\d\\d))\\d{3}",,,, "02000"],,, [,, "81[23]\\d{5}",,,, "81212345",,, [8]]],
              NP: [, [,, "(?:1\\d|9)\\d{9}|[1-9]\\d{7}",,,,,,, [8, 10, 11], [6, 7]], [,, "(?:1[0-6]\\d|99[02-6])\\d{5}|(?:2[13-79]|3[135-8]|4[146-9]|5[135-7]|6[13-9]|7[15-9]|8[1-46-9]|9[1-7])[2-6]\\d{5}",,,, "14567890",,, [8], [6, 7]], [,, "9(?:00|6[0-3]|7[024-6]|8[0-24-68])\\d{7}",,,, "9841234567",,, [10]], [,, "1(?:66001|800\\d\\d)\\d{5}",,,, "16600101234",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NP", 977, "00", "0",,, "0",,,, [[, "(\\d)(\\d{7})", "$1-$2", ["1[2-6]"], "0$1"], [, "(\\d{2})(\\d{6})", "$1-$2", ["1[01]|[2-8]|9(?:[1-59]|[67][2-6])"], "0$1"], [, "(\\d{3})(\\d{7})", "$1-$2", ["9"]], [, "(\\d{4})(\\d{2})(\\d{5})", "$1-$2-$3", ["1"]]], [[, "(\\d)(\\d{7})", "$1-$2", ["1[2-6]"], "0$1"], [, "(\\d{2})(\\d{6})", "$1-$2", ["1[01]|[2-8]|9(?:[1-59]|[67][2-6])"], "0$1"], [, "(\\d{3})(\\d{7})", "$1-$2", ["9"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              NR: [, [,, "(?:444|(?:55|8\\d)\\d|666)\\d{4}",,,,,,, [7]], [,, "444\\d{4}",,,, "4441234"], [,, "(?:55[3-9]|666|8\\d\\d)\\d{4}",,,, "5551234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NR", 674, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[4-68]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              NU: [, [,, "(?:[4-7]|888\\d)\\d{3}",,,,,,, [4, 7]], [,, "[47]\\d{3}",,,, "7012",,, [4]], [,, "(?:[56]|888[1-9])\\d{3}",,,, "8884012"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "NU", 683, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["8"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              NZ: [, [,, "[1289]\\d{9}|50\\d{5}(?:\\d{2,3})?|[27-9]\\d{7,8}|(?:[34]\\d|6[0-35-9])\\d{6}|8\\d{4,6}",,,,,,, [5, 6, 7, 8, 9, 10]], [,, "240\\d{5}|(?:3[2-79]|[49][2-9]|6[235-9]|7[2-57-9])\\d{6}",,,, "32345678",,, [8], [7]], [,, "2(?:[0-27-9]\\d|6)\\d{6,7}|2(?:1\\d|75)\\d{5}",,,, "211234567",,, [8, 9, 10]], [,, "508\\d{6,7}|80\\d{6,8}",,,, "800123456",,, [8, 9, 10]], [,, "(?:1[13-57-9]\\d{5}|50(?:0[08]|30|66|77|88))\\d{3}|90\\d{6,8}",,,, "900123456",,, [7, 8, 9, 10]], [,,,,,,,,, [-1]], [,, "70\\d{7}",,,, "701234567",,, [9]], [,,,,,,,,, [-1]], "NZ", 64, "0(?:0|161)", "0",,, "0",, "00",, [[, "(\\d{2})(\\d{3,8})", "$1 $2", ["8[1-79]"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["50[036-8]|8|90", "50(?:[0367]|88)|8|90"], "0$1"], [, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["24|[346]|7[2-57-9]|9[2-9]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2(?:10|74)|[589]"], "0$1"], [, "(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["1|2[028]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,5})", "$1 $2 $3", ["2(?:[169]|7[0-35-9])|7"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "8(?:1[16-9]|22|3\\d|4[045]|5[459]|6[235-9]|7[0-3579]|90)\\d{2,7}",,,, "83012378"],,, [,,,,,,,,, [-1]]],
              OM: [, [,, "(?:1505|[279]\\d{3}|500)\\d{4}|800\\d{5,6}",,,,,,, [7, 8, 9]], [,, "2[1-6]\\d{6}",,,, "23123456",,, [8]], [,, "(?:1505|90[1-9]\\d)\\d{4}|(?:7[126-9]|9[1-9])\\d{6}",,,, "92123456",,, [8]], [,, "8007\\d{4,5}|(?:500|800[05])\\d{4}",,,, "80071234"], [,, "900\\d{5}",,,, "90012345",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "OM", 968, "00",,,,,,,, [[, "(\\d{3})(\\d{4,6})", "$1 $2", ["[58]"]], [, "(\\d{2})(\\d{6})", "$1 $2", ["2"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[179]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              PA: [, [,, "(?:00800|8\\d{3})\\d{6}|[68]\\d{7}|[1-57-9]\\d{6}",,,,,,, [7, 8, 10, 11]], [,, "(?:1(?:0\\d|1[479]|2[37]|3[0137]|4[17]|5[05]|6[058]|7[0167]|8[2358]|9[1389])|2(?:[0235-79]\\d|1[0-7]|4[013-9]|8[02-9])|3(?:[07-9]\\d|1[0-7]|2[0-5]|33|4[0-79]|5[0-35]|6[068])|4(?:00|3[0-579]|4\\d|7[0-57-9])|5(?:[01]\\d|2[0-7]|[56]0|79)|7(?:0[09]|2[0-26-8]|3[03]|4[04]|5[05-9]|6[0156]|7[0-24-9]|8[5-9]|90)|8(?:09|2[89]|3\\d|4[0-24-689]|5[014]|8[02])|9(?:0[5-9]|1[0135-8]|2[036-9]|3[35-79]|40|5[0457-9]|6[05-9]|7[04-9]|8[35-8]|9\\d))\\d{4}",,,, "2001234",,, [7]], [,, "(?:1[16]1|21[89]|6\\d{3}|8(?:1[01]|7[23]))\\d{4}",,,, "61234567",,, [7, 8]], [,, "800\\d{4,5}|(?:00800|800\\d)\\d{6}",,,, "8001234"], [,, "(?:8(?:22|55|60|7[78]|86)|9(?:00|81))\\d{4}",,,, "8601234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "PA", 507, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1-$2", ["[1-57-9]"]], [, "(\\d{4})(\\d{4})", "$1-$2", ["[68]"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              PE: [, [,, "(?:[14-8]|9\\d)\\d{7}",,,,,,, [8, 9], [6, 7]], [,, "(?:(?:(?:4[34]|5[14])[0-8]|687)\\d|7(?:173|(?:3[0-8]|55)\\d)|8(?:10[05689]|6(?:0[06-9]|1[6-9]|29)|7(?:0[0569]|[56]0)))\\d{4}|(?:1[0-8]|4[12]|5[236]|6[1-7]|7[246]|8[2-4])\\d{6}",,,, "11234567",,, [8], [6, 7]], [,, "9\\d{8}",,,, "912345678",,, [9]], [,, "800\\d{5}",,,, "80012345",,, [8]], [,, "805\\d{5}",,,, "80512345",,, [8]], [,, "801\\d{5}",,,, "80112345",,, [8]], [,, "80[24]\\d{5}",,,, "80212345",,, [8]], [,,,,,,,,, [-1]], "PE", 51, "00|19(?:1[124]|77|90)00", "0", " Anexo ",, "0",, "00",, [[, "(\\d{3})(\\d{5})", "$1 $2", ["80"], "(0$1)"], [, "(\\d)(\\d{7})", "$1 $2", ["1"], "(0$1)"], [, "(\\d{2})(\\d{6})", "$1 $2", ["[4-8]"], "(0$1)"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              PF: [, [,, "4\\d{5}(?:\\d{2})?|8\\d{7,8}",,,,,,, [6, 8, 9]], [,, "4(?:0[4-689]|9[4-68])\\d{5}",,,, "40412345",,, [8]], [,, "8[7-9]\\d{6}",,,, "87123456",,, [8]], [,, "80[0-5]\\d{6}",,,, "800012345",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "499\\d{5}",,,, "49901234",,, [8]], "PF", 689, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["44"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["4|8[7-9]"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]]],, [,,,,,,,,, [-1]],,, [,, "44\\d{4}",,,,,,, [6]], [,, "44\\d{4}",,,, "440123",,, [6]],,, [,,,,,,,,, [-1]]],
              PG: [, [,, "(?:180|[78]\\d{3})\\d{4}|(?:[2-589]\\d|64)\\d{5}",,,,,,, [7, 8]], [,, "(?:(?:3[0-2]|4[257]|5[34]|9[78])\\d|64[1-9]|85[02-46-9])\\d{4}",,,, "3123456",,, [7]], [,, "(?:7\\d|8[1-38])\\d{6}",,,, "70123456",,, [8]], [,, "180\\d{4}",,,, "1801234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "2(?:0[0-57]|7[568])\\d{4}",,,, "2751234",,, [7]], "PG", 675, "00|140[1-3]",,,,,, "00",, [[, "(\\d{3})(\\d{4})", "$1 $2", ["18|[2-69]|85"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[78]"]]],, [,, "27[01]\\d{4}",,,, "2700123",,, [7]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              PH: [, [,, "(?:[2-7]|9\\d)\\d{8}|2\\d{5}|(?:1800|8)\\d{7,9}",,,,,,, [6, 8, 9, 10, 11, 12, 13], [4, 5, 7]], [,, "(?:(?:2[3-8]|3[2-68]|4[2-9]|5[2-6]|6[2-58]|7[24578])\\d{3}|88(?:22\\d\\d|42))\\d{4}|(?:2|8[2-8]\\d\\d)\\d{5}",,,, "232345678",,, [6, 8, 9, 10], [4, 5, 7]], [,, "(?:8(?:1[37]|9[5-8])|9(?:0[5-9]|1[0-24-9]|[235-7]\\d|4[2-9]|8[135-9]|9[1-9]))\\d{7}",,,, "9051234567",,, [10]], [,, "1800\\d{7,9}",,,, "180012345678",,, [11, 12, 13]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "PH", 63, "00", "0",,, "0",,,, [[, "(\\d)(\\d{5})", "$1 $2", ["2"], "(0$1)"], [, "(\\d{4})(\\d{4,6})", "$1 $2", ["3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2", "3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))"], "(0$1)"], [, "(\\d{5})(\\d{4})", "$1 $2", ["346|4(?:27|9[35])|883", "3469|4(?:279|9(?:30|56))|8834"], "(0$1)"], [, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["2"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[3-7]|8[2-8]"], "(0$1)"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["[89]"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]], [, "(\\d{4})(\\d{1,2})(\\d{3})(\\d{4})", "$1 $2 $3 $4", ["1"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              PK: [, [,, "122\\d{6}|[24-8]\\d{10,11}|9(?:[013-9]\\d{8,10}|2(?:[01]\\d\\d|2(?:[06-8]\\d|1[01]))\\d{7})|(?:[2-8]\\d{3}|92(?:[0-7]\\d|8[1-9]))\\d{6}|[24-9]\\d{8}|[89]\\d{7}",,,,,,, [8, 9, 10, 11, 12], [5, 6, 7]], [,, "(?:(?:21|42)[2-9]|58[126])\\d{7}|(?:2[25]|4[0146-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\\d{6,7}|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8]))[2-9]\\d{5,6}",,,, "2123456789",,, [9, 10], [5, 6, 7, 8]], [,, "3(?:[0-247]\\d|3[0-79]|55|64)\\d{7}",,,, "3012345678",,, [10]], [,, "800\\d{5}(?:\\d{3})?",,,, "80012345",,, [8, 11]], [,, "900\\d{5}",,,, "90012345",,, [8]], [,,,,,,,,, [-1]], [,, "122\\d{6}",,,, "122044444",,, [9]], [,,,,,,,,, [-1]], "PK", 92, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})(\\d{2,7})", "$1 $2 $3", ["[89]0"], "0$1"], [, "(\\d{4})(\\d{5})", "$1 $2", ["1"]], [, "(\\d{3})(\\d{6,7})", "$1 $2", ["2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])", "9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]"], "(0$1)"], [, "(\\d{2})(\\d{7,8})", "$1 $2", ["(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]"], "(0$1)"], [, "(\\d{5})(\\d{5})", "$1 $2", ["58"], "(0$1)"], [, "(\\d{3})(\\d{7})", "$1 $2", ["3"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91"], "(0$1)"], [, "(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["[24-9]"], "(0$1)"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "(?:2(?:[125]|3[2358]|4[2-4]|9[2-8])|4(?:[0-246-9]|5[3479])|5(?:[1-35-7]|4[2-467])|6(?:0[468]|[1-8])|7(?:[14]|2[236])|8(?:[16]|2[2-689]|3[23578]|4[3478]|5[2356])|9(?:1|22|3[27-9]|4[2-6]|6[3569]|9[2-7]))111\\d{6}",,,, "21111825888",,, [11, 12]],,, [,,,,,,,,, [-1]]],
              PL: [, [,, "(?:6|8\\d\\d)\\d{7}|[1-9]\\d{6}(?:\\d{2})?|[26]\\d{5}",,,,,,, [6, 7, 8, 9, 10]], [,, "47\\d{7}|(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])(?:[02-9]\\d{6}|1(?:[0-8]\\d{5}|9\\d{3}(?:\\d{2})?))",,,, "123456789",,, [7, 9]], [,, "21(?:1[013-5]|2\\d)\\d{5}|(?:45|5[0137]|6[069]|7[2389]|88)\\d{7}",,,, "512345678",,, [9]], [,, "800\\d{6,7}",,,, "800123456",,, [9, 10]], [,, "70[01346-8]\\d{6}",,,, "701234567",,, [9]], [,, "801\\d{6}",,,, "801234567",,, [9]], [,,,,,,,,, [-1]], [,, "39\\d{7}",,,, "391234567",,, [9]], "PL", 48, "00",,,,,,,, [[, "(\\d{5})", "$1", ["19"]], [, "(\\d{3})(\\d{3})", "$1 $2", ["11|20|64"]], [, "(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3", ["(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1", "(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19"]], [, "(\\d{3})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["64"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)"]], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[2-8]|[2-7]|8[1-79]|9[145]"]], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["8"]]],, [,, "64\\d{4,7}",,,, "641234567",,, [6, 7, 8, 9]],,, [,,,,,,,,, [-1]], [,, "804\\d{6}",,,, "804123456",,, [9]],,, [,,,,,,,,, [-1]]],
              PM: [, [,, "[45]\\d{5}|(?:708|8\\d\\d)\\d{6}",,,,,,, [6, 9]], [,, "(?:4[1-35-9]|5[0-47-9]|80[6-9]\\d\\d)\\d{4}",,,, "430123"], [,, "(?:4[02-489]|5[02-9]|708[45][0-5])\\d{4}",,,, "551234"], [,, "80[0-5]\\d{6}",,,, "800012345",,, [9]], [,, "8[129]\\d{7}",,,, "810123456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "PM", 508, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["[45]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["7"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              PR: [, [,, "(?:[589]\\d\\d|787)\\d{7}",,,,,,, [10], [7]], [,, "(?:787|939)[2-9]\\d{6}",,,, "7872345678",,,, [7]], [,, "(?:787|939)[2-9]\\d{6}",,,, "7872345678",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "PR", 1, "011", "1",,, "1",,, 1,,, [,,,,,,,,, [-1]],, "787|939", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              PS: [, [,, "[2489]2\\d{6}|(?:1\\d|5)\\d{8}",,,,,,, [8, 9, 10], [7]], [,, "(?:22[2-47-9]|42[45]|82[014-68]|92[3569])\\d{5}",,,, "22234567",,, [8], [7]], [,, "5[69]\\d{7}",,,, "599123456",,, [9]], [,, "1800\\d{6}",,,, "1800123456",,, [10]], [,,,,,,,,, [-1]], [,, "1700\\d{6}",,,, "1700123456",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "PS", 970, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["[2489]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["5"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              PT: [, [,, "1693\\d{5}|(?:[26-9]\\d|30)\\d{7}",,,,,,, [9]], [,, "2(?:[12]\\d|3[1-689]|4[1-59]|[57][1-9]|6[1-35689]|8[1-69]|9[1256])\\d{6}",,,, "212345678"], [,, "6(?:[06]92(?:30|9\\d)|[35]92(?:[049]\\d|3[034]))\\d{3}|(?:(?:16|6[0356])93|9(?:[1-36]\\d\\d|480))\\d{5}",,,, "912345678"], [,, "80[02]\\d{6}",,,, "800123456"], [,, "(?:6(?:0[178]|4[68])\\d|76(?:0[1-57]|1[2-47]|2[237]))\\d{5}",,,, "760123456"], [,, "80(?:8\\d|9[1579])\\d{5}",,,, "808123456"], [,, "884[0-4689]\\d{5}",,,, "884123456"], [,, "30\\d{7}",,,, "301234567"], "PT", 351, "00",,,,,,,, [[, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["2[12]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["16|[236-9]"]]],, [,, "6(?:222\\d|8988)\\d{4}",,,, "622212345"],,, [,,,,,,,,, [-1]], [,, "70(?:38[01]|596|(?:7\\d|8[17])\\d)\\d{4}",,,, "707123456"],,, [,, "600\\d{6}|6[06]92(?:0\\d|3[349]|49)\\d{3}",,,, "600110000"]],
              PW: [, [,, "(?:[24-8]\\d\\d|345|900)\\d{4}",,,,,,, [7]], [,, "(?:2(?:55|77)|345|488|5(?:35|44|87)|6(?:22|54|79)|7(?:33|47)|8(?:24|55|76)|900)\\d{4}",,,, "2771234"], [,, "(?:(?:46|83)[0-5]|6[2-4689]0)\\d{4}|(?:45|77|88)\\d{5}",,,, "6201234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "PW", 680, "01[12]",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              PY: [, [,, "59\\d{4,6}|9\\d{5,10}|(?:[2-46-8]\\d|5[0-8])\\d{4,7}",,,,,,, [6, 7, 8, 9, 10, 11], [5]], [,, "(?:[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36])\\d{5,7}|(?:2(?:2[4-68]|[4-68]\\d|7[15]|9[1-5])|3(?:18|3[167]|4[2357]|51|[67]\\d)|4(?:3[12]|5[13]|9[1-47])|5(?:[1-4]\\d|5[02-4])|6(?:3[1-3]|44|7[1-8])|7(?:4[0-4]|5\\d|6[1-578]|75|8[0-8])|858)\\d{5,6}",,,, "212345678",,, [7, 8, 9], [5, 6]], [,, "9(?:51|6[129]|7[1-6]|8[1-7]|9[1-5])\\d{6}",,,, "961456789",,, [9]], [,, "9800\\d{5,7}",,,, "98000123456",,, [9, 10, 11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "8700[0-4]\\d{4}",,,, "870012345",,, [9]], "PY", 595, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3,6})", "$1 $2", ["[2-9]0"], "0$1"], [, "(\\d{2})(\\d{5})", "$1 $2", ["[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]"], "(0$1)"], [, "(\\d{3})(\\d{4,5})", "$1 $2", ["2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["87"]], [, "(\\d{3})(\\d{6})", "$1 $2", ["9(?:[5-79]|8[1-7])"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-8]"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["9"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "[2-9]0\\d{4,7}",,,, "201234567",,, [6, 7, 8, 9]],,, [,,,,,,,,, [-1]]],
              QA: [, [,, "800\\d{4}|(?:2|800)\\d{6}|(?:0080|[3-7])\\d{7}",,,,,,, [7, 8, 9, 11]], [,, "4(?:1111|2022)\\d{3}|4(?:[04]\\d\\d|14[0-6]|999)\\d{4}",,,, "44123456",,, [8]], [,, "[35-7]\\d{7}",,,, "33123456",,, [8]], [,, "800\\d{4}|(?:0080[01]|800)\\d{6}",,,, "8001234",,, [7, 9, 11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "QA", 974, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["2[16]|8"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[3-7]"]]],, [,, "2[16]\\d{5}",,,, "2123456",,, [7]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              RE: [, [,, "(?:26|[689]\\d)\\d{7}",,,,,,, [9]], [,, "26(?:2\\d\\d|3(?:0\\d|1[0-6]))\\d{4}",,,, "262161234"], [,, "69(?:2\\d\\d|3(?:[06][0-6]|1[013]|2[0-2]|3[0-39]|4\\d|5[0-5]|7[0-37]|8[0-8]|9[0-479]))\\d{4}",,,, "692123456"], [,, "80\\d{7}",,,, "801234567"], [,, "89[1-37-9]\\d{6}",,,, "891123456"], [,, "8(?:1[019]|2[0156]|84|90)\\d{6}",,,, "810123456"], [,,,,,,,,, [-1]], [,, "9(?:399[0-3]|479[0-5]|76(?:2[278]|3[0-37]))\\d{4}",,,, "939901234"], "RE", 262, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[2689]"], "0$1"]],, [,,,,,,,,, [-1]], 1,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              RO: [, [,, "(?:[236-8]\\d|90)\\d{7}|[23]\\d{5}",,,,,,, [6, 9]], [,, "[23][13-6]\\d{7}|(?:2(?:19\\d|[3-6]\\d9)|31\\d\\d)\\d\\d",,,, "211234567"], [,, "(?:630|702)0\\d{5}|(?:6(?:00|2\\d)|7(?:0[013-9]|1[0-3]|[2-7]\\d|8[03-8]|9[0-39]))\\d{6}",,,, "712034567",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "90[0136]\\d{6}",,,, "900123456",,, [9]], [,, "801\\d{6}",,,, "801123456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "RO", 40, "00", "0", " int ",, "0",,,, [[, "(\\d{3})(\\d{3})", "$1 $2", ["2[3-6]", "2[3-6]\\d9"], "0$1"], [, "(\\d{2})(\\d{4})", "$1 $2", ["219|31"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[23]1"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[236-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "(?:37\\d|80[578])\\d{6}",,,, "372123456",,, [9]],,, [,,,,,,,,, [-1]]],
              RS: [, [,, "38[02-9]\\d{6,9}|6\\d{7,9}|90\\d{4,8}|38\\d{5,6}|(?:7\\d\\d|800)\\d{3,9}|(?:[12]\\d|3[0-79])\\d{5,10}",,,,,,, [6, 7, 8, 9, 10, 11, 12], [4, 5]], [,, "(?:11[1-9]\\d|(?:2[389]|39)(?:0[2-9]|[2-9]\\d))\\d{3,8}|(?:1[02-9]|2[0-24-7]|3[0-8])[2-9]\\d{4,9}",,,, "10234567",,, [7, 8, 9, 10, 11, 12], [4, 5, 6]], [,, "6(?:[0-689]|7\\d)\\d{6,7}",,,, "601234567",,, [8, 9, 10]], [,, "800\\d{3,9}",,,, "80012345"], [,, "(?:78\\d|90[0169])\\d{3,7}",,,, "90012345",,, [6, 7, 8, 9, 10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "RS", 381, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3,9})", "$1 $2", ["(?:2[389]|39)0|[7-9]"], "0$1"], [, "(\\d{2})(\\d{5,10})", "$1 $2", ["[1-36]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "7[06]\\d{4,10}",,,, "700123456"],,, [,,,,,,,,, [-1]]],
              RU: [, [,, "8\\d{13}|[347-9]\\d{9}",,,,,,, [10, 14], [7]], [,, "(?:3(?:0[12]|4[1-35-79]|5[1-3]|65|8[1-58]|9[0145])|4(?:01|1[1356]|2[13467]|7[1-5]|8[1-7]|9[1-689])|8(?:1[1-8]|2[01]|3[13-6]|4[0-8]|5[15]|6[1-35-79]|7[1-37-9]))\\d{7}",,,, "3011234567",,, [10], [7]], [,, "9\\d{9}",,,, "9123456789",,, [10]], [,, "8(?:0[04]|108\\d{3})\\d{7}",,,, "8001234567"], [,, "80[39]\\d{7}",,,, "8091234567",,, [10]], [,,,,,,,,, [-1]], [,, "808\\d{7}",,,, "8081234567",,, [10]], [,,,,,,,,, [-1]], "RU", 7, "810", "8",,, "8",, "8~10",, [[, "(\\d{3})(\\d{2})(\\d{2})", "$1-$2-$3", ["[0-79]"]], [, "(\\d{4})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["7(?:1[0-8]|2[1-9])", "7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))", "7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2"], "8 ($1)",, 1], [, "(\\d{5})(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["7(?:1[0-68]|2[1-9])", "7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))", "7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]"], "8 ($1)",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "8 ($1)",, 1], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[349]|8(?:[02-7]|1[1-8])"], "8 ($1)",, 1], [, "(\\d{4})(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["8"], "8 ($1)"]], [[, "(\\d{4})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["7(?:1[0-8]|2[1-9])", "7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))", "7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2"], "8 ($1)",, 1], [, "(\\d{5})(\\d)(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["7(?:1[0-68]|2[1-9])", "7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))", "7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]"], "8 ($1)",, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "8 ($1)",, 1], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[349]|8(?:[02-7]|1[1-8])"], "8 ($1)",, 1], [, "(\\d{4})(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["8"], "8 ($1)"]], [,,,,,,,,, [-1]], 1, "3[04-689]|[489]", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              RW: [, [,, "(?:06|[27]\\d\\d|[89]00)\\d{6}",,,,,,, [8, 9]], [,, "(?:06|2[23568]\\d)\\d{6}",,,, "250123456"], [,, "7[237-9]\\d{7}",,,, "720123456",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "900\\d{6}",,,, "900123456",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "RW", 250, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["0"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["2"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[7-9]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SA: [, [,, "92\\d{7}|(?:[15]|8\\d)\\d{8}",,,,,,, [9, 10], [7]], [,, "1(?:1\\d|2[24-8]|3[35-8]|4[3-68]|6[2-5]|7[235-7])\\d{6}",,,, "112345678",,, [9], [7]], [,, "579[01]\\d{5}|5(?:[013-689]\\d|7[0-8])\\d{6}",,,, "512345678",,, [9]], [,, "800\\d{7}",,,, "8001234567",,, [10]], [,, "925\\d{6}",,,, "925012345",,, [9]], [,, "920\\d{6}",,,, "920012345",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SA", 966, "00", "0",,, "0",,,, [[, "(\\d{4})(\\d{5})", "$1 $2", ["9"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["5"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["81"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "811\\d{7}",,,, "8110123456",,, [10]],,, [,,,,,,,,, [-1]]],
              SB: [, [,, "[6-9]\\d{6}|[1-6]\\d{4}",,,,,,, [5, 7]], [,, "(?:1[4-79]|[23]\\d|4[0-2]|5[03]|6[0-37])\\d{3}",,,, "40123",,, [5]], [,, "48\\d{3}|(?:(?:6[89]|7[1-9]|8[4-9])\\d|9(?:1[2-9]|2[013-9]|3[0-2]|[46]\\d|5[0-46-9]|7[0-689]|8[0-79]|9[0-8]))\\d{4}",,,, "7421234"], [,, "1[38]\\d{3}",,,, "18123",,, [5]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "5[12]\\d{3}",,,, "51123",,, [5]], "SB", 677, "0[01]",,,,,,,, [[, "(\\d{2})(\\d{5})", "$1 $2", ["6[89]|7|8[4-9]|9(?:[1-8]|9[0-8])"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SC: [, [,, "(?:[2489]\\d|64)\\d{5}",,,,,,, [7]], [,, "4[2-46]\\d{5}",,,, "4217123"], [,, "2[125-8]\\d{5}",,,, "2510123"], [,, "800[08]\\d{3}",,,, "8000000"], [,, "85\\d{5}",,,, "8512345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "971\\d{4}|(?:64|95)\\d{5}",,,, "6412345"], "SC", 248, "010|0[0-2]",,,,,, "00",, [[, "(\\d)(\\d{3})(\\d{3})", "$1 $2 $3", ["[246]|9[57]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SD: [, [,, "[19]\\d{8}",,,,,,, [9]], [,, "1(?:5\\d|8[35-7])\\d{6}",,,, "153123456"], [,, "(?:1[0-2]|9[0-3569])\\d{7}",,,, "911231234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SD", 249, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[19]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SE: [, [,, "(?:[26]\\d\\d|9)\\d{9}|[1-9]\\d{8}|[1-689]\\d{7}|[1-4689]\\d{6}|2\\d{5}",,,,,,, [6, 7, 8, 9, 10, 12]], [,, "(?:(?:[12][136]|3[356]|4[0246]|6[03]|8\\d)\\d|90[1-9])\\d{4,6}|(?:1(?:2[0-35]|4[0-4]|5[0-25-9]|7[13-6]|[89]\\d)|2(?:2[0-7]|4[0136-8]|5[0138]|7[018]|8[01]|9[0-57])|3(?:0[0-4]|1\\d|2[0-25]|4[056]|7[0-2]|8[0-3]|9[023])|4(?:1[013-8]|3[0135]|5[14-79]|7[0-246-9]|8[0156]|9[0-689])|5(?:0[0-6]|[15][0-5]|2[0-68]|3[0-4]|4\\d|6[03-5]|7[013]|8[0-79]|9[01])|6(?:1[1-3]|2[0-4]|4[02-57]|5[0-37]|6[0-3]|7[0-2]|8[0247]|9[0-356])|9(?:1[0-68]|2\\d|3[02-5]|4[0-3]|5[0-4]|[68][01]|7[0135-8]))\\d{5,6}",,,, "8123456",,, [7, 8, 9]], [,, "7[02369]\\d{7}",,,, "701234567",,, [9]], [,, "20\\d{4,7}",,,, "20123456",,, [6, 7, 8, 9]], [,, "649\\d{6}|99[1-59]\\d{4}(?:\\d{3})?|9(?:00|39|44)[1-8]\\d{3,6}",,,, "9001234567",,, [7, 8, 9, 10]], [,, "77[0-7]\\d{6}",,,, "771234567",,, [9]], [,, "75[1-8]\\d{6}",,,, "751234567",,, [9]], [,,,,,,,,, [-1]], "SE", 46, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{2,3})(\\d{2})", "$1-$2 $3", ["20"], "0$1"], [, "(\\d{3})(\\d{4})", "$1-$2", ["9(?:00|39|44|9)"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})", "$1-$2 $3", ["[12][136]|3[356]|4[0246]|6[03]|90[1-9]"], "0$1"], [, "(\\d)(\\d{2,3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["8"], "0$1"], [, "(\\d{3})(\\d{2,3})(\\d{2})", "$1-$2 $3", ["1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"], "0$1"], [, "(\\d{3})(\\d{2,3})(\\d{3})", "$1-$2 $3", ["9(?:00|39|44)"], "0$1"], [, "(\\d{2})(\\d{2,3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["10|7"], "0$1"], [, "(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1-$2 $3 $4", ["8"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1-$2 $3 $4", ["[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{3})", "$1-$2 $3 $4", ["9"], "0$1"], [, "(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1-$2 $3 $4 $5", ["[26]"], "0$1"]], [[, "(\\d{2})(\\d{2,3})(\\d{2})", "$1 $2 $3", ["20"]], [, "(\\d{3})(\\d{4})", "$1 $2", ["9(?:00|39|44|9)"]], [, "(\\d{2})(\\d{3})(\\d{2})", "$1 $2 $3", ["[12][136]|3[356]|4[0246]|6[03]|90[1-9]"]], [, "(\\d)(\\d{2,3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]], [, "(\\d{3})(\\d{2,3})(\\d{2})", "$1 $2 $3", ["1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"]], [, "(\\d{3})(\\d{2,3})(\\d{3})", "$1 $2 $3", ["9(?:00|39|44)"]], [, "(\\d{2})(\\d{2,3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]"]], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["10|7"]], [, "(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1 $2 $3 $4", ["8"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{3})", "$1 $2 $3 $4", ["9"]], [, "(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4 $5", ["[26]"]]], [,, "74[02-9]\\d{6}",,,, "740123456",,, [9]],,, [,,,,,,,,, [-1]], [,, "10[1-8]\\d{6}",,,, "102345678",,, [9]],,, [,, "(?:25[245]|67[3-68])\\d{9}",,,, "254123456789",,, [12]]],
              SG: [, [,, "(?:(?:1\\d|8)\\d\\d|7000)\\d{7}|[3689]\\d{7}",,,,,,, [8, 10, 11]], [,, "662[0-24-9]\\d{4}|6(?:[0-578]\\d|6[013-57-9]|9[0-35-9])\\d{5}",,,, "61234567",,, [8]], [,, "8(?:09[0-689]|96[0-2])\\d{4}|(?:8(?:0[1-8]|[1-8]\\d|9[0-5])|9[0-8]\\d)\\d{5}",,,, "81234567",,, [8]], [,, "(?:18|8)00\\d{7}",,,, "18001234567",,, [10, 11]], [,, "1900\\d{7}",,,, "19001234567",,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:3[12]\\d|666)\\d{5}",,,, "31234567",,, [8]], "SG", 65, "0[0-3]\\d",,,,,,,, [[, "(\\d{4,5})", "$1", ["1[013-9]|77", "1(?:[013-8]|9(?:0[1-9]|[1-9]))|77"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[369]|8(?:0[1-9]|[1-9])"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]], [, "(\\d{4})(\\d{4})(\\d{3})", "$1 $2 $3", ["7"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]]], [[, "(\\d{4})(\\d{4})", "$1 $2", ["[369]|8(?:0[1-9]|[1-9])"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"]], [, "(\\d{4})(\\d{4})(\\d{3})", "$1 $2 $3", ["7"]], [, "(\\d{4})(\\d{3})(\\d{4})", "$1 $2 $3", ["1"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "7000\\d{7}",,,, "70001234567",,, [11]],,, [,,,,,,,,, [-1]]],
              SH: [, [,, "(?:[256]\\d|8)\\d{3}",,,,,,, [4, 5]], [,, "2(?:[0-57-9]\\d|6[4-9])\\d\\d",,,, "22158"], [,, "[56]\\d{4}",,,, "51234",,, [5]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "262\\d\\d",,,, "26212",,, [5]], "SH", 290, "00",,,,,,,,,, [,,,,,,,,, [-1]], 1, "[256]", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SI: [, [,, "[1-7]\\d{7}|8\\d{4,7}|90\\d{4,6}",,,,,,, [5, 6, 7, 8]], [,, "(?:[1-357][2-8]|4[24-8])\\d{6}",,,, "12345678",,, [8], [7]], [,, "65(?:[178]\\d|5[56]|6[01])\\d{4}|(?:[37][01]|4[0139]|51|6[489])\\d{6}",,,, "31234567",,, [8]], [,, "80\\d{4,6}",,,, "80123456",,, [6, 7, 8]], [,, "89[1-3]\\d{2,5}|90\\d{4,6}",,,, "90123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:59\\d\\d|8(?:1(?:[67]\\d|8[0-589])|2(?:0\\d|2[0-37-9]|8[0-2489])|3[389]\\d))\\d{4}",,,, "59012345",,, [8]], "SI", 386, "00|10(?:22|66|88|99)", "0",,, "0",, "00",, [[, "(\\d{2})(\\d{3,6})", "$1 $2", ["8[09]|9"], "0$1"], [, "(\\d{3})(\\d{5})", "$1 $2", ["59|8"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[37][01]|4[0139]|51|6"], "0$1"], [, "(\\d)(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[1-57]"], "(0$1)"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SJ: [, [,, "0\\d{4}|(?:[489]\\d|79)\\d{6}",,,,,,, [5, 8]], [,, "79\\d{6}",,,, "79123456",,, [8]], [,, "(?:4[015-8]|9\\d)\\d{6}",,,, "41234567",,, [8]], [,, "80[01]\\d{5}",,,, "80012345",,, [8]], [,, "82[09]\\d{5}",,,, "82012345",,, [8]], [,, "810(?:0[0-6]|[2-8]\\d)\\d{3}",,,, "81021234",,, [8]], [,, "880\\d{5}",,,, "88012345",,, [8]], [,, "85[0-5]\\d{5}",,,, "85012345",,, [8]], "SJ", 47, "00",,,,,,,,,, [,,,,,,,,, [-1]],, "79", [,,,,,,,,, [-1]], [,, "(?:0[235-9]|81(?:0(?:0[7-9]|1\\d)|5\\d\\d))\\d{3}",,,, "02000"],,, [,, "81[23]\\d{5}",,,, "81212345",,, [8]]],
              SK: [, [,, "[2-689]\\d{8}|[2-59]\\d{6}|[2-5]\\d{5}",,,,,,, [6, 7, 9]], [,, "(?:2(?:16|[2-9]\\d{3})|(?:(?:[3-5][1-8]\\d|819)\\d|601[1-5])\\d)\\d{4}|(?:2|[3-5][1-8])1[67]\\d{3}|[3-5][1-8]16\\d\\d",,,, "221234567"], [,, "909[1-9]\\d{5}|9(?:0[1-8]|1[0-24-9]|4[03-57-9]|5\\d)\\d{6}",,,, "912123456",,, [9]], [,, "800\\d{6}",,,, "800123456",,, [9]], [,, "9(?:00|[78]\\d)\\d{6}",,,, "900123456",,, [9]], [,, "8[5-9]\\d{7}",,,, "850123456",,, [9]], [,,,,,,,,, [-1]], [,, "6(?:02|5[0-4]|9[0-6])\\d{6}",,,, "690123456",,, [9]], "SK", 421, "00", "0",,, "0",,,, [[, "(\\d)(\\d{2})(\\d{3,4})", "$1 $2 $3", ["21"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["[3-5][1-8]1", "[3-5][1-8]1[67]"], "0$1"], [, "(\\d{4})(\\d{3})", "$1 $2", ["909", "9090"], "0$1"], [, "(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1/$2 $3 $4", ["2"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[689]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1/$2 $3 $4", ["[3-5]"], "0$1"]], [[, "(\\d)(\\d{2})(\\d{3,4})", "$1 $2 $3", ["21"], "0$1"], [, "(\\d{2})(\\d{2})(\\d{2,3})", "$1 $2 $3", ["[3-5][1-8]1", "[3-5][1-8]1[67]"], "0$1"], [, "(\\d)(\\d{3})(\\d{3})(\\d{2})", "$1/$2 $3 $4", ["2"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[689]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1/$2 $3 $4", ["[3-5]"], "0$1"]], [,, "9090\\d{3}",,,, "9090123",,, [7]],,, [,, "9090\\d{3}|(?:602|8(?:00|[5-9]\\d)|9(?:00|[78]\\d))\\d{6}",,,,,,, [7, 9]], [,, "96\\d{7}",,,, "961234567",,, [9]],,, [,,,,,,,,, [-1]]],
              SL: [, [,, "(?:[237-9]\\d|66)\\d{6}",,,,,,, [8], [6]], [,, "22[2-4][2-9]\\d{4}",,,, "22221234",,,, [6]], [,, "(?:25|3[0-5]|66|7[2-9]|8[08]|9[09])\\d{6}",,,, "25123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SL", 232, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{6})", "$1 $2", ["[236-9]"], "(0$1)"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SM: [, [,, "(?:0549|[5-7]\\d)\\d{6}",,,,,,, [8, 10], [6]], [,, "0549(?:8[0157-9]|9\\d)\\d{4}",,,, "0549886377",,, [10], [6]], [,, "6[16]\\d{6}",,,, "66661212",,, [8]], [,,,,,,,,, [-1]], [,, "7[178]\\d{6}",,,, "71123456",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "5[158]\\d{6}",,,, "58001110",,, [8]], "SM", 378, "00",,,, "([89]\\d{5})$", "0549$1",,, [[, "(\\d{6})", "$1", ["[89]"]], [, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-7]"]], [, "(\\d{4})(\\d{6})", "$1 $2", ["0"]]], [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[5-7]"]], [, "(\\d{4})(\\d{6})", "$1 $2", ["0"]]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SN: [, [,, "(?:[378]\\d|93)\\d{7}",,,,,,, [9]], [,, "3(?:0(?:1[0-2]|80)|282|3(?:8[1-9]|9[3-9])|611)\\d{5}",,,, "301012345"], [,, "7(?:(?:[06-8]\\d|[19]0|21)\\d|5(?:0[01]|[19]0|2[25]|[38]3|[4-7]\\d))\\d{5}",,,, "701234567"], [,, "800\\d{6}",,,, "800123456"], [,, "88[4689]\\d{6}",,,, "884123456"], [,, "81[02468]\\d{6}",,,, "810123456"], [,,,,,,,,, [-1]], [,, "(?:3(?:392|9[01]\\d)\\d|93(?:3[13]0|929))\\d{4}",,,, "933301234"], "SN", 221, "00",,,,,,,, [[, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[379]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SO: [, [,, "[346-9]\\d{8}|[12679]\\d{7}|[1-5]\\d{6}|[1348]\\d{5}",,,,,,, [6, 7, 8, 9]], [,, "(?:1\\d|2[0-79]|3[0-46-8]|4[0-7]|5[57-9])\\d{5}|(?:[134]\\d|8[125])\\d{4}",,,, "4012345",,, [6, 7]], [,, "(?:(?:15|(?:3[59]|4[89]|6\\d|7[79]|8[08])\\d|9(?:0\\d|[2-9]))\\d|2(?:4\\d|8))\\d{5}|(?:[67]\\d\\d|904)\\d{5}",,,, "71123456",,, [7, 8, 9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SO", 252, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{4})", "$1 $2", ["8[125]"]], [, "(\\d{6})", "$1", ["[134]"]], [, "(\\d)(\\d{6})", "$1 $2", ["[15]|2[0-79]|3[0-46-8]|4[0-7]"]], [, "(\\d)(\\d{7})", "$1 $2", ["(?:2|90)4|[67]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[348]|64|79|90"]], [, "(\\d{2})(\\d{5,7})", "$1 $2", ["1|28|6[0-35-9]|77|9[2-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SR: [, [,, "(?:[2-5]|68|[78]\\d)\\d{5}",,,,,,, [6, 7]], [,, "(?:2[1-3]|3[0-7]|(?:4|68)\\d|5[2-58])\\d{4}",,,, "211234"], [,, "(?:7[124-7]|8[124-9])\\d{5}",,,, "7412345",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "56\\d{4}",,,, "561234",,, [6]], "SR", 597, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})", "$1-$2-$3", ["56"]], [, "(\\d{3})(\\d{3})", "$1-$2", ["[2-5]"]], [, "(\\d{3})(\\d{4})", "$1-$2", ["[6-8]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SS: [, [,, "[19]\\d{8}",,,,,,, [9]], [,, "1[89]\\d{7}",,,, "181234567"], [,, "(?:12|9[1257-9])\\d{7}",,,, "977123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SS", 211, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[19]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              ST: [, [,, "(?:22|9\\d)\\d{5}",,,,,,, [7]], [,, "22\\d{5}",,,, "2221234"], [,, "900[5-9]\\d{3}|9(?:0[1-9]|[89]\\d)\\d{4}",,,, "9812345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "ST", 239, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[29]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SV: [, [,, "[267]\\d{7}|(?:80\\d|900)\\d{4}(?:\\d{4})?",,,,,,, [7, 8, 11]], [,, "2(?:79(?:0[0347-9]|[1-9]\\d)|89(?:0[024589]|[1-9]\\d))\\d{3}|2(?:[1-69]\\d|[78][0-8])\\d{5}",,,, "21234567",,, [8]], [,, "[67]\\d{7}",,,, "70123456",,, [8]], [,, "800\\d{8}|80[01]\\d{4}",,,, "8001234",,, [7, 11]], [,, "900\\d{4}(?:\\d{4})?",,,, "9001234",,, [7, 11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SV", 503, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[89]"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["[267]"]], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["[89]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SX: [, [,, "7215\\d{6}|(?:[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "7215(?:4[2-8]|8[239]|9[056])\\d{4}",,,, "7215425678",,,, [7]], [,, "7215(?:1[02]|2\\d|5[034679]|8[014-8])\\d{4}",,,, "7215205678",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002123456"], [,, "900[2-9]\\d{6}",,,, "9002123456"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "SX", 1, "011", "1",,, "(5\\d{6})$|1", "721$1",,,,, [,,,,,,,,, [-1]],, "721", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SY: [, [,, "[1-39]\\d{8}|[1-5]\\d{7}",,,,,,, [8, 9], [6, 7]], [,, "21\\d{6,7}|(?:1(?:[14]\\d|[2356])|2[235]|3(?:[13]\\d|4)|4[134]|5[1-3])\\d{6}",,,, "112345678",,,, [6, 7]], [,, "9[1-689]\\d{7}",,,, "944567890",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "SY", 963, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-5]"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1",, 1]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              SZ: [, [,, "0800\\d{4}|(?:[237]\\d|900)\\d{6}",,,,,,, [8, 9]], [,, "[23][2-5]\\d{6}",,,, "22171234",,, [8]], [,, "7[6-9]\\d{6}",,,, "76123456",,, [8]], [,, "0800\\d{4}",,,, "08001234",,, [8]], [,, "900\\d{6}",,,, "900012345",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "70\\d{6}",,,, "70012345",,, [8]], "SZ", 268, "00",,,,,,,, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[0237]"]], [, "(\\d{5})(\\d{4})", "$1 $2", ["9"]]],, [,,,,,,,,, [-1]],,, [,, "0800\\d{4}",,,,,,, [8]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TA: [, [,, "8\\d{3}",,,,,,, [4]], [,, "8\\d{3}",,,, "8999"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TA", 290, "00",,,,,,,,,, [,,,,,,,,, [-1]],, "8", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TC: [, [,, "(?:[58]\\d\\d|649|900)\\d{7}",,,,,,, [10], [7]], [,, "649(?:266|712|9(?:4\\d|50))\\d{4}",,,, "6497121234",,,, [7]], [,, "649(?:2(?:3[129]|4[1-79])|3\\d\\d|4[34][1-3])\\d{4}",,,, "6492311234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,, "649(?:71[01]|966)\\d{4}",,,, "6497101234",,,, [7]], "TC", 1, "011", "1",,, "([2-479]\\d{6})$|1", "649$1",,,,, [,,,,,,,,, [-1]],, "649", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TD: [, [,, "(?:22|[689]\\d|77)\\d{6}",,,,,,, [8]], [,, "22(?:[37-9]0|5[0-5]|6[89])\\d{4}",,,, "22501234"], [,, "(?:[69]\\d|77|8[56])\\d{6}",,,, "63012345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TD", 235, "00|16",,,,,, "00",, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[26-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TG: [, [,, "[279]\\d{7}",,,,,,, [8]], [,, "2(?:2[2-7]|3[23]|4[45]|55|6[67]|77)\\d{5}",,,, "22212345"], [,, "(?:7[019]|9[0-36-9])\\d{6}",,,, "90112345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TG", 228, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[279]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TH: [, [,, "(?:001800|[2-57]|[689]\\d)\\d{7}|1\\d{7,9}",,,,,,, [8, 9, 10, 13]], [,, "(?:1[0689]|2\\d|3[2-9]|4[2-5]|5[2-6]|7[3-7])\\d{6}",,,, "21234567",,, [8]], [,, "67(?:1[0-8]|2[4-7])\\d{5}|(?:14|6[1-6]|[89]\\d)\\d{7}",,,, "812345678",,, [9]], [,, "(?:001800\\d|1800)\\d{6}",,,, "1800123456",,, [10, 13]], [,, "1900\\d{6}",,,, "1900123456",,, [10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "6[08]\\d{7}",,,, "601234567",,, [9]], "TH", 66, "00[1-9]", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{4})", "$1 $2 $3", ["2"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[13-9]"], "0$1"], [, "(\\d{4})(\\d{3})(\\d{3})", "$1 $2 $3", ["1"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TJ: [, [,, "[0-57-9]\\d{8}",,,,,,, [9], [3, 5, 6, 7]], [,, "(?:3(?:1[3-5]|2[245]|3[12]|4[24-7]|5[25]|72)|4(?:46|74|87))\\d{6}",,,, "372123456",,,, [3, 5, 6, 7]], [,, "(?:33[03-9]|4(?:1[18]|4[02-479])|81[1-9])\\d{6}|(?:[09]\\d|1[0178]|2[02]|[34]0|5[05]|7[01578]|8[078])\\d{7}",,,, "917123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TJ", 992, "810",,,,,, "8~10",, [[, "(\\d{6})(\\d)(\\d{2})", "$1 $2 $3", ["331", "3317"]], [, "(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["44[02-479]|[34]7"]], [, "(\\d{4})(\\d)(\\d{4})", "$1 $2 $3", ["3(?:[1245]|3[12])"]], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[0-57-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TK: [, [,, "[2-47]\\d{3,6}",,,,,,, [4, 5, 6, 7]], [,, "(?:2[2-4]|[34]\\d)\\d{2,5}",,,, "3101"], [,, "7[2-4]\\d{2,5}",,,, "7290"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TK", 690, "00",,,,,,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TL: [, [,, "7\\d{7}|(?:[2-47]\\d|[89]0)\\d{5}",,,,,,, [7, 8]], [,, "(?:2[1-5]|3[1-9]|4[1-4])\\d{5}",,,, "2112345",,, [7]], [,, "7[2-8]\\d{6}",,,, "77212345",,, [8]], [,, "80\\d{5}",,,, "8012345",,, [7]], [,, "90\\d{5}",,,, "9012345",,, [7]], [,,,,,,,,, [-1]], [,, "70\\d{5}",,,, "7012345",,, [7]], [,,,,,,,,, [-1]], "TL", 670, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[2-489]|70"]], [, "(\\d{4})(\\d{4})", "$1 $2", ["7"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TM: [, [,, "(?:[1-6]\\d|71)\\d{6}",,,,,,, [8]], [,, "(?:1(?:2\\d|3[1-9])|2(?:22|4[0-35-8])|3(?:22|4[03-9])|4(?:22|3[128]|4\\d|6[15])|5(?:22|5[7-9]|6[014-689]))\\d{5}",,,, "12345678"], [,, "(?:6\\d|71)\\d{6}",,,, "66123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TM", 993, "810", "8",,, "8",, "8~10",, [[, "(\\d{2})(\\d{2})(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["12"], "(8 $1)"], [, "(\\d{3})(\\d)(\\d{2})(\\d{2})", "$1 $2-$3-$4", ["[1-5]"], "(8 $1)"], [, "(\\d{2})(\\d{6})", "$1 $2", ["[67]"], "8 $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TN: [, [,, "[2-57-9]\\d{7}",,,,,,, [8]], [,, "81200\\d{3}|(?:3[0-2]|7\\d)\\d{6}",,,, "30010123"], [,, "3(?:001|[12]40)\\d{4}|(?:(?:[259]\\d|4[0-8])\\d|3(?:1[1-35]|6[0-4]|91))\\d{5}",,,, "20123456"], [,, "8010\\d{4}",,,, "80101234"], [,, "88\\d{6}",,,, "88123456"], [,, "8[12]10\\d{4}",,,, "81101234"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TN", 216, "00",,,,,,,, [[, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-57-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TO: [, [,, "(?:0800|(?:[5-8]\\d\\d|999)\\d)\\d{3}|[2-8]\\d{4}",,,,,,, [5, 7]], [,, "(?:2\\d|3[0-8]|4[0-4]|50|6[09]|7[0-24-69]|8[05])\\d{3}",,,, "20123",,, [5]], [,, "(?:5(?:4[0-5]|5[4-6])|6(?:[09]\\d|3[02]|8[15-9])|(?:7\\d|8[46-9])\\d|999)\\d{4}",,,, "7715123",,, [7]], [,, "0800\\d{3}",,,, "0800222",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "55[0-37-9]\\d{4}",,,, "5510123",,, [7]], "TO", 676, "00",,,,,,,, [[, "(\\d{2})(\\d{3})", "$1-$2", ["[2-4]|50|6[09]|7[0-24-69]|8[05]"]], [, "(\\d{4})(\\d{3})", "$1 $2", ["0"]], [, "(\\d{3})(\\d{4})", "$1 $2", ["[5-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TR: [, [,, "4\\d{6}|8\\d{11,12}|(?:[2-58]\\d\\d|900)\\d{7}",,,,,,, [7, 10, 12, 13]], [,, "(?:2(?:[13][26]|[28][2468]|[45][268]|[67][246])|3(?:[13][28]|[24-6][2468]|[78][02468]|92)|4(?:[16][246]|[23578][2468]|4[26]))\\d{7}",,,, "2123456789",,, [10]], [,, "561(?:011|61\\d)\\d{4}|5(?:0[15-7]|1[06]|24|[34]\\d|5[1-59]|9[46])\\d{7}",,,, "5012345678",,, [10]], [,, "8(?:00\\d{7}(?:\\d{2,3})?|11\\d{7})",,,, "8001234567",,, [10, 12, 13]], [,, "(?:8[89]8|900)\\d{7}",,,, "9001234567",,, [10]], [,,,,,,,,, [-1]], [,, "592(?:21[12]|461)\\d{4}",,,, "5922121234",,, [10]], [,, "850\\d{7}",,,, "8500123456",,, [10]], "TR", 90, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d)(\\d{3})", "$1 $2 $3", ["444"],,, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["512|8[01589]|90"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["5(?:[0-59]|61)", "5(?:[0-59]|61[06])", "5(?:[0-59]|61[06]1)"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24][1-8]|3[1-9]"], "(0$1)",, 1], [, "(\\d{3})(\\d{3})(\\d{6,7})", "$1 $2 $3", ["80"], "0$1",, 1]], [[, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["512|8[01589]|90"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["5(?:[0-59]|61)", "5(?:[0-59]|61[06])", "5(?:[0-59]|61[06]1)"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[24][1-8]|3[1-9]"], "(0$1)",, 1], [, "(\\d{3})(\\d{3})(\\d{6,7})", "$1 $2 $3", ["80"], "0$1",, 1]], [,, "512\\d{7}",,,, "5123456789",,, [10]],,, [,, "(?:444|811\\d{3})\\d{4}",,,,,,, [7, 10]], [,, "444\\d{4}",,,, "4441444",,, [7]],,, [,,,,,,,,, [-1]]],
              TT: [, [,, "(?:[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "868(?:2(?:01|1[5-9]|[23]\\d|4[0-2])|6(?:0[7-9]|1[02-8]|2[1-9]|[3-69]\\d|7[0-79])|82[124])\\d{4}",,,, "8682211234",,,, [7]], [,, "868(?:(?:2[5-9]|3\\d)\\d|4(?:3[0-6]|[6-9]\\d)|6(?:20|78|8\\d)|7(?:0[1-9]|1[02-9]|[2-9]\\d))\\d{4}",,,, "8682911234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "TT", 1, "011", "1",,, "([2-46-8]\\d{6})$|1", "868$1",,,,, [,,,,,,,,, [-1]],, "868", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,, "868619\\d{4}",,,, "8686191234",,,, [7]]],
              TV: [, [,, "(?:2|7\\d\\d|90)\\d{4}",,,,,,, [5, 6, 7]], [,, "2[02-9]\\d{3}",,,, "20123",,, [5]], [,, "(?:7[01]\\d|90)\\d{4}",,,, "901234",,, [6, 7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "TV", 688, "00",,,,,,,, [[, "(\\d{2})(\\d{3})", "$1 $2", ["2"]], [, "(\\d{2})(\\d{4})", "$1 $2", ["90"]], [, "(\\d{2})(\\d{5})", "$1 $2", ["7"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              TW: [, [,, "[2-689]\\d{8}|7\\d{9,10}|[2-8]\\d{7}|2\\d{6}",,,,,,, [7, 8, 9, 10, 11]], [,, "(?:2[2-8]\\d|370|55[01]|7[1-9])\\d{6}|4(?:(?:0(?:0[1-9]|[2-48]\\d)|1[023]\\d)\\d{4,5}|(?:[239]\\d\\d|4(?:0[56]|12|49))\\d{5})|6(?:[01]\\d{7}|4(?:0[56]|12|24|4[09])\\d{4,5})|8(?:(?:2(?:3\\d|4[0-269]|[578]0|66)|36[24-9]|90\\d\\d)\\d{4}|4(?:0[56]|12|24|4[09])\\d{4,5})|(?:2(?:2(?:0\\d\\d|4(?:0[68]|[249]0|3[0-467]|5[0-25-9]|6[0235689]))|(?:3(?:[09]\\d|1[0-4])|(?:4\\d|5[0-49]|6[0-29]|7[0-5])\\d)\\d)|(?:(?:3[2-9]|5[2-8]|6[0-35-79]|8[7-9])\\d\\d|4(?:2(?:[089]\\d|7[1-9])|(?:3[0-4]|[78]\\d|9[01])\\d))\\d)\\d{3}",,,, "221234567",,, [8, 9]], [,, "(?:40001[0-2]|9[0-8]\\d{4})\\d{3}",,,, "912345678",,, [9]], [,, "80[0-79]\\d{6}|800\\d{5}",,,, "800123456",,, [8, 9]], [,, "20(?:[013-9]\\d\\d|2)\\d{4}",,,, "203123456",,, [7, 9]], [,,,,,,,,, [-1]], [,, "99\\d{7}",,,, "990123456",,, [9]], [,, "7010(?:[0-2679]\\d|3[0-7]|8[0-5])\\d{5}|70\\d{8}",,,, "7012345678",,, [10, 11]], "TW", 886, "0(?:0[25-79]|19)", "0", "#",, "0",,,, [[, "(\\d{2})(\\d)(\\d{4})", "$1 $2 $3", ["202"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[258]0"], "0$1"], [, "(\\d)(\\d{3,4})(\\d{4})", "$1 $2 $3", ["[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]", "[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[49]"], "0$1"], [, "(\\d{2})(\\d{4})(\\d{4,5})", "$1 $2 $3", ["7"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "50[0-46-9]\\d{6}",,,, "500123456",,, [9]],,, [,,,,,,,,, [-1]]],
              TZ: [, [,, "(?:[25-8]\\d|41|90)\\d{7}",,,,,,, [9]], [,, "2[2-8]\\d{7}",,,, "222345678"], [,, "(?:6[125-9]|7[13-9])\\d{7}",,,, "621234567"], [,, "80[08]\\d{6}",,,, "800123456"], [,, "90\\d{7}",,,, "900123456"], [,, "8(?:40|6[01])\\d{6}",,,, "840123456"], [,,,,,,,,, [-1]], [,, "41\\d{7}",,,, "412345678"], "TZ", 255, "00[056]", "0",,, "0",,,, [[, "(\\d{3})(\\d{2})(\\d{4})", "$1 $2 $3", ["[89]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[24]"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["5"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[67]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,, "(?:8(?:[04]0|6[01])|90\\d)\\d{6}"], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              UA: [, [,, "[89]\\d{9}|[3-9]\\d{8}",,,,,,, [9, 10], [5, 6, 7]], [,, "(?:3[1-8]|4[13-8]|5[1-7]|6[12459])\\d{7}",,,, "311234567",,, [9], [5, 6, 7]], [,, "790\\d{6}|(?:39|50|6[36-8]|7[1-357]|9[1-9])\\d{7}",,,, "501234567",,, [9]], [,, "800[1-8]\\d{5,6}",,,, "800123456"], [,, "900[239]\\d{5,6}",,,, "900212345"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "89[1-579]\\d{6}",,,, "891234567",,, [9]], "UA", 380, "00", "0",,, "0",, "0~0",, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]", "6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]"], "0$1"], [, "(\\d{4})(\\d{5})", "$1 $2", ["3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])", "3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[3-7]|89|9[1-9]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[89]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              UG: [, [,, "800\\d{6}|(?:[29]0|[347]\\d)\\d{7}",,,,,,, [9], [5, 6, 7]], [,, "20(?:(?:240|30[67])\\d|6(?:00[0-2]|30[0-4]))\\d{3}|(?:20(?:[017]\\d|2[5-9]|3[1-4]|5[0-4]|6[15-9])|[34]\\d{3})\\d{5}",,,, "312345678",,,, [5, 6, 7]], [,, "72[48]0\\d{5}|7(?:[015-8]\\d|2[067]|36|4[0-6]|9[89])\\d{6}",,,, "712345678"], [,, "800[1-3]\\d{5}",,,, "800123456"], [,, "90[1-3]\\d{6}",,,, "901123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "UG", 256, "00[057]", "0",,, "0",,,, [[, "(\\d{4})(\\d{5})", "$1 $2", ["202", "2024"], "0$1"], [, "(\\d{3})(\\d{6})", "$1 $2", ["[27-9]|4(?:6[45]|[7-9])"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["[34]"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              US: [, [,, "[2-9]\\d{9}|3\\d{6}",,,,,,, [10], [7]], [,, "(?:3052(?:0[0-8]|[1-9]\\d)|5056(?:[0-35-9]\\d|4[468])|7302[0-4]\\d)\\d{4}|(?:305[3-9]|472[24]|505[2-57-9]|7306|983[2-47-9])\\d{6}|(?:2(?:0[1-35-9]|1[02-9]|2[03-57-9]|3[1459]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-47-9]|1[02-9]|2[013569]|3[0-24679]|4[167]|5[0-2]|6[01349]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[179]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|3[016]|4[0156]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-8]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}",,,, "2015550123",,,, [7]], [,, "(?:3052(?:0[0-8]|[1-9]\\d)|5056(?:[0-35-9]\\d|4[468])|7302[0-4]\\d)\\d{4}|(?:305[3-9]|472[24]|505[2-57-9]|7306|983[2-47-9])\\d{6}|(?:2(?:0[1-35-9]|1[02-9]|2[03-57-9]|3[1459]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-47-9]|1[02-9]|2[013569]|3[0-24679]|4[167]|5[0-2]|6[01349]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[179]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|3[016]|4[0156]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-8]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}",,,, "2015550123",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,, "305209\\d{4}",,,, "3052090123",,,, [7]], "US", 1, "011", "1",,, "1",,, 1, [[, "(\\d{3})(\\d{4})", "$1-$2", ["310"],,, 1], [, "(\\d{3})(\\d{4})", "$1-$2", ["[24-9]|3(?:[02-9]|1[1-9])"]], [, "(\\d{3})(\\d{3})(\\d{4})", "($1) $2-$3", ["[2-9]"],,, 1]], [[, "(\\d{3})(\\d{4})", "$1-$2", ["310"],,, 1], [, "(\\d{3})(\\d{3})(\\d{4})", "$1-$2-$3", ["[2-9]"]]], [,,,,,,,,, [-1]], 1,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              UY: [, [,, "0004\\d{2,9}|[1249]\\d{7}|(?:[49]\\d|80)\\d{5}",,,,,,, [6, 7, 8, 9, 10, 11, 12, 13]], [,, "(?:1(?:770|9(?:20|[89]7))|(?:2\\d|4[2-7])\\d\\d)\\d{4}",,,, "21231234",,, [8], [7]], [,, "9[1-9]\\d{6}",,,, "94231234",,, [8]], [,, "0004\\d{2,9}|(?:405|80[05])\\d{4}",,,, "8001234"], [,, "90[0-8]\\d{4}",,,, "9001234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "UY", 598, "0(?:0|1[3-9]\\d)", "0", " int. ",, "0",, "00",, [[, "(\\d{3})(\\d{3,4})", "$1 $2", ["0"]], [, "(\\d{3})(\\d{4})", "$1 $2", ["[49]0|8"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["9"], "0$1"], [, "(\\d{4})(\\d{4})", "$1 $2", ["[124]"]], [, "(\\d{3})(\\d{3})(\\d{2,4})", "$1 $2 $3", ["0"]], [, "(\\d{3})(\\d{3})(\\d{3})(\\d{2,4})", "$1 $2 $3 $4", ["0"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              UZ: [, [,, "(?:20|33|[5-79]\\d|88)\\d{7}",,,,,,, [9]], [,, "(?:55\\d\\d|6(?:1(?:22|3[124]|4[1-4]|5[1-3578]|64)|2(?:22|3[0-57-9]|41)|5(?:22|3[3-7]|5[024-8])|[69]\\d\\d|7(?:[23]\\d|7[69]))|7(?:0(?:5[4-9]|6[0146]|7[124-6]|9[135-8])|(?:1[12]|[68]\\d)\\d|2(?:22|3[13-57-9]|4[1-3579]|5[14])|3(?:2\\d|3[1578]|4[1-35-7]|5[1-57]|61)|4(?:2\\d|3[1-579]|7[1-79])|5(?:22|5[1-9]|6[1457])|9(?:22|5[1-9])))\\d{5}",,,, "669050123"], [,, "(?:(?:[25]0|33|88|9[0-57-9])\\d{3}|6(?:1(?:2(?:2[01]|98)|35[0-4]|50\\d|61[23]|7(?:[01][017]|4\\d|55|9[5-9]))|2(?:(?:11|7\\d)\\d|2(?:[12]1|9[01379])|5(?:[126]\\d|3[0-4]))|5(?:19[01]|2(?:27|9[26])|(?:30|59|7\\d)\\d)|6(?:2(?:1[5-9]|2[0367]|38|41|52|60)|(?:3[79]|9[0-3])\\d|4(?:56|83)|7(?:[07]\\d|1[017]|3[07]|4[047]|5[057]|67|8[0178]|9[79]))|7(?:2(?:24|3[237]|4[5-9]|7[15-8])|5(?:7[12]|8[0589])|7(?:0\\d|[39][07])|9(?:0\\d|7[079])))|7(?:[07]\\d{3}|1(?:13[01]|6(?:0[47]|1[67]|66)|71[3-69]|98\\d)|2(?:2(?:2[79]|95)|3(?:2[5-9]|6[0-6])|57\\d|7(?:0\\d|1[17]|2[27]|3[37]|44|5[057]|66|88))|3(?:2(?:1[0-6]|21|3[469]|7[159])|(?:33|9[4-6])\\d|5(?:0[0-4]|5[579]|9\\d)|7(?:[0-3579]\\d|4[0467]|6[67]|8[078]))|4(?:2(?:29|5[0257]|6[0-7]|7[1-57])|5(?:1[0-4]|8\\d|9[5-9])|7(?:0\\d|1[024589]|2[0-27]|3[0137]|[46][07]|5[01]|7[5-9]|9[079])|9(?:7[015-9]|[89]\\d))|5(?:112|2(?:0\\d|2[29]|[49]4)|3[1568]\\d|52[6-9]|7(?:0[01578]|1[017]|[23]7|4[047]|[5-7]\\d|8[78]|9[079]))|9(?:22[128]|3(?:2[0-4]|7\\d)|57[02569]|7(?:2[05-9]|3[37]|4\\d|60|7[2579]|87|9[07]))))\\d{4}",,,, "912345678"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "UZ", 998, "00",,,,,,,, [[, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["[235-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              VA: [, [,, "0\\d{5,10}|3[0-8]\\d{7,10}|55\\d{8}|8\\d{5}(?:\\d{2,4})?|(?:1\\d|39)\\d{7,8}",,,,,,, [6, 7, 8, 9, 10, 11, 12]], [,, "06698\\d{1,6}",,,, "0669812345",,, [6, 7, 8, 9, 10, 11]], [,, "3[1-9]\\d{8}|3[2-9]\\d{7}",,,, "3123456789",,, [9, 10]], [,, "80(?:0\\d{3}|3)\\d{3}",,,, "800123456",,, [6, 9]], [,, "(?:0878\\d{3}|89(?:2\\d|3[04]|4(?:[0-4]|[5-9]\\d\\d)|5[0-4]))\\d\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\d{6}",,,, "899123456",,, [6, 8, 9, 10]], [,, "84(?:[08]\\d{3}|[17])\\d{3}",,,, "848123456",,, [6, 9]], [,, "1(?:78\\d|99)\\d{6}",,,, "1781234567",,, [9, 10]], [,, "55\\d{8}",,,, "5512345678",,, [10]], "VA", 39, "00",,,,,,,,,, [,,,,,,,,, [-1]],, "06698", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,, "3[2-8]\\d{9,10}",,,, "33101234501",,, [11, 12]]],
              VC: [, [,, "(?:[58]\\d\\d|784|900)\\d{7}",,,,,,, [10], [7]], [,, "784(?:266|3(?:6[6-9]|7\\d|8[0-6])|4(?:38|5[0-36-8]|8[0-8])|5(?:55|7[0-2]|93)|638|784)\\d{4}",,,, "7842661234",,,, [7]], [,, "784(?:4(?:3[0-5]|5[45]|89|9[0-8])|5(?:2[6-9]|3[0-4])|720)\\d{4}",,,, "7844301234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,, "78451[0-2]\\d{4}",,,, "7845101234",,,, [7]], "VC", 1, "011", "1",,, "([2-7]\\d{6})$|1", "784$1",,,,, [,,,,,,,,, [-1]],, "784", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              VE: [, [,, "[68]00\\d{7}|(?:[24]\\d|[59]0)\\d{8}",,,,,,, [10], [7]], [,, "(?:2(?:12|3[457-9]|[467]\\d|[58][1-9]|9[1-6])|[4-6]00)\\d{7}",,,, "2121234567",,,, [7]], [,, "4(?:1[24-8]|2[46])\\d{7}",,,, "4121234567"], [,, "800\\d{7}",,,, "8001234567"], [,, "90[01]\\d{7}",,,, "9001234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "VE", 58, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{7})", "$1-$2", ["[24-689]"], "0$1", "$CC $1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "501\\d{7}",,,, "5010123456",,,, [7]],,, [,,,,,,,,, [-1]]],
              VG: [, [,, "(?:284|[58]\\d\\d|900)\\d{7}",,,,,,, [10], [7]], [,, "284(?:229|4(?:22|9[45])|774|8(?:52|6[459]))\\d{4}",,,, "2842291234",,,, [7]], [,, "284(?:245|3(?:0[0-3]|4[0-7]|68|9[34])|4(?:4[0-6]|68|9[69])|5(?:4[0-7]|68|9[69]))\\d{4}",,,, "2843001234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "VG", 1, "011", "1",,, "([2-578]\\d{6})$|1", "284$1",,,,, [,,,,,,,,, [-1]],, "284", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              VI: [, [,, "[58]\\d{9}|(?:34|90)0\\d{7}",,,,,,, [10], [7]], [,, "340(?:2(?:0\\d|10|2[06-8]|4[49]|77)|3(?:32|44)|4(?:2[23]|44|7[34]|89)|5(?:1[34]|55)|6(?:2[56]|4[23]|77|9[023])|7(?:1[2-57-9]|2[57]|7\\d)|884|998)\\d{4}",,,, "3406421234",,,, [7]], [,, "340(?:2(?:0\\d|10|2[06-8]|4[49]|77)|3(?:32|44)|4(?:2[23]|44|7[34]|89)|5(?:1[34]|55)|6(?:2[56]|4[23]|77|9[023])|7(?:1[2-57-9]|2[57]|7\\d)|884|998)\\d{4}",,,, "3406421234",,,, [7]], [,, "8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",,,, "8002345678"], [,, "900[2-9]\\d{6}",,,, "9002345678"], [,,,,,,,,, [-1]], [,, "52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}",,,, "5002345678"], [,,,,,,,,, [-1]], "VI", 1, "011", "1",,, "([2-9]\\d{6})$|1", "340$1",, 1,,, [,,,,,,,,, [-1]],, "340", [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              VN: [, [,, "[12]\\d{9}|[135-9]\\d{8}|[16]\\d{7}|[16-8]\\d{6}",,,,,,, [7, 8, 9, 10]], [,, "2(?:0[3-9]|1[0-689]|2[0-25-9]|[38][2-9]|4[2-8]|5[124-9]|6[0-39]|7[0-7]|9[0-4679])\\d{7}",,,, "2101234567",,, [10]], [,, "(?:5(?:2[238]|59)|89[6-9]|99[013-9])\\d{6}|(?:3\\d|5[1689]|7[06-9]|8[1-8]|9[0-8])\\d{7}",,,, "912345678",,, [9]], [,, "1800\\d{4,6}|12(?:0[13]|28)\\d{4}",,,, "1800123456",,, [8, 9, 10]], [,, "1900\\d{4,6}",,,, "1900123456",,, [8, 9, 10]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "672\\d{6}",,,, "672012345",,, [9]], "VN", 84, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[17]99"], "0$1",, 1], [, "(\\d{2})(\\d{5})", "$1 $2", ["80"], "0$1",, 1], [, "(\\d{3})(\\d{4,5})", "$1 $2", ["69"], "0$1",, 1], [, "(\\d{4})(\\d{4,6})", "$1 $2", ["1"],,, 1], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["6"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[357-9]"], "0$1",, 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["2[48]"], "0$1",, 1], [, "(\\d{3})(\\d{4})(\\d{3})", "$1 $2 $3", ["2"], "0$1",, 1]], [[, "(\\d{2})(\\d{5})", "$1 $2", ["80"], "0$1",, 1], [, "(\\d{4})(\\d{4,6})", "$1 $2", ["1"],,, 1], [, "(\\d{2})(\\d{3})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["6"], "0$1",, 1], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[357-9]"], "0$1",, 1], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["2[48]"], "0$1",, 1], [, "(\\d{3})(\\d{4})(\\d{3})", "$1 $2 $3", ["2"], "0$1",, 1]], [,,,,,,,,, [-1]],,, [,, "[17]99\\d{4}|69\\d{5,6}",,,,,,, [7, 8]], [,, "(?:[17]99|80\\d)\\d{4}|69\\d{5,6}",,,, "1992000",,, [7, 8]],,, [,,,,,,,,, [-1]]],
              VU: [, [,, "[57-9]\\d{6}|(?:[238]\\d|48)\\d{3}",,,,,,, [5, 7]], [,, "(?:38[0-8]|48[4-9])\\d\\d|(?:2[02-9]|3[4-7]|88)\\d{3}",,,, "22123",,, [5]], [,, "(?:[58]\\d|7[013-7])\\d{5}",,,, "5912345",,, [7]], [,, "81[18]\\d\\d",,,, "81123",,, [5]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "9(?:0[1-9]|1[01])\\d{4}",,,, "9010123",,, [7]], "VU", 678, "00",,,,,,,, [[, "(\\d{3})(\\d{4})", "$1 $2", ["[57-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "(?:3[03]|900\\d)\\d{3}",,,, "30123"],,, [,,,,,,,,, [-1]]],
              WF: [, [,, "(?:40|72|8\\d{4})\\d{4}|[89]\\d{5}",,,,,,, [6, 9]], [,, "72\\d{4}",,,, "721234",,, [6]], [,, "(?:72|8[23])\\d{4}",,,, "821234",,, [6]], [,, "80[0-5]\\d{6}",,,, "800012345",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "9[23]\\d{4}",,,, "921234",,, [6]], "WF", 681, "00",,,,,,,, [[, "(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3", ["[47-9]"]], [, "(\\d{3})(\\d{2})(\\d{2})(\\d{2})", "$1 $2 $3 $4", ["8"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,, "[48]0\\d{4}",,,, "401234",,, [6]]],
              WS: [, [,, "(?:[2-6]|8\\d{5})\\d{4}|[78]\\d{6}|[68]\\d{5}",,,,,,, [5, 6, 7, 10]], [,, "6[1-9]\\d{3}|(?:[2-5]|60)\\d{4}",,,, "22123",,, [5, 6]], [,, "(?:7[1-35-7]|8(?:[3-7]|9\\d{3}))\\d{5}",,,, "7212345",,, [7, 10]], [,, "800\\d{3}",,,, "800123",,, [6]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "WS", 685, "0",,,,,,,, [[, "(\\d{5})", "$1", ["[2-5]|6[1-9]"]], [, "(\\d{3})(\\d{3,7})", "$1 $2", ["[68]"]], [, "(\\d{2})(\\d{5})", "$1 $2", ["7"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              XK: [, [,, "2\\d{7,8}|3\\d{7,11}|(?:4\\d\\d|[89]00)\\d{5}",,,,,,, [8, 9, 10, 11, 12]], [,, "38\\d{6,10}|(?:2[89]|39)(?:0\\d{5,6}|[1-9]\\d{5})",,,, "28012345"], [,, "4[3-9]\\d{6}",,,, "43201234",,, [8]], [,, "800\\d{5}",,,, "80001234",,, [8]], [,, "900\\d{5}",,,, "90001234",,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "XK", 383, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{5})", "$1 $2", ["[89]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3})", "$1 $2 $3", ["[2-4]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["2|39"], "0$1"], [, "(\\d{2})(\\d{7,10})", "$1 $2", ["3"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              YE: [, [,, "(?:1|7\\d)\\d{7}|[1-7]\\d{6}",,,,,,, [7, 8, 9], [6]], [,, "78[0-7]\\d{4}|17\\d{6}|(?:[12][2-68]|3[2358]|4[2-58]|5[2-6]|6[3-58]|7[24-6])\\d{5}",,,, "1234567",,, [7, 8], [6]], [,, "7[01378]\\d{7}",,,, "712345678",,, [9]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "YE", 967, "00", "0",,, "0",,,, [[, "(\\d)(\\d{3})(\\d{3,4})", "$1 $2 $3", ["[1-6]|7(?:[24-6]|8[0-7])"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["7"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              YT: [, [,, "(?:80|9\\d)\\d{7}|(?:26|63)9\\d{6}",,,,,,, [9]], [,, "269(?:0[0-467]|15|5[0-4]|6\\d|[78]0)\\d{4}",,,, "269601234"], [,, "639(?:0[0-79]|1[019]|[267]\\d|3[09]|40|5[05-9]|9[04-79])\\d{4}",,,, "639012345"], [,, "80\\d{7}",,,, "801234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "9(?:(?:39|47)8[01]|769\\d)\\d{4}",,,, "939801234"], "YT", 262, "00", "0",,, "0",,,,,, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              ZA: [, [,, "[1-79]\\d{8}|8\\d{4,9}",,,,,,, [5, 6, 7, 8, 9, 10]], [,, "(?:2(?:0330|4302)|52087)0\\d{3}|(?:1[0-8]|2[1-378]|3[1-69]|4\\d|5[1346-8])\\d{7}",,,, "101234567",,, [9]], [,, "(?:1(?:3492[0-25]|4495[0235]|549(?:20|5[01]))|4[34]492[01])\\d{3}|8[1-4]\\d{3,7}|(?:2[27]|47|54)4950\\d{3}|(?:1(?:049[2-4]|9[12]\\d\\d)|(?:6\\d\\d|7(?:[0-46-9]\\d|5[0-4]))\\d\\d|8(?:5\\d{3}|7(?:08[67]|158|28[5-9]|310)))\\d{4}|(?:1[6-8]|28|3[2-69]|4[025689]|5[36-8])4920\\d{3}|(?:12|[2-5]1)492\\d{4}",,,, "711234567",,, [5, 6, 7, 8, 9]], [,, "80\\d{7}",,,, "801234567",,, [9]], [,, "(?:86[2-9]|9[0-2]\\d)\\d{6}",,,, "862345678",,, [9]], [,, "860\\d{6}",,,, "860123456",,, [9]], [,,,,,,,,, [-1]], [,, "87(?:08[0-589]|15[0-79]|28[0-4]|31[1-9])\\d{4}|87(?:[02][0-79]|1[0-46-9]|3[02-9]|[4-9]\\d)\\d{5}",,,, "871234567",,, [9]], "ZA", 27, "00", "0",,, "0",,,, [[, "(\\d{2})(\\d{3,4})", "$1 $2", ["8[1-4]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{2,3})", "$1 $2 $3", ["8[1-4]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["860"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["[1-9]"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["8"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "861\\d{6,7}",,,, "861123456",,, [9, 10]],,, [,,,,,,,,, [-1]]],
              ZM: [, [,, "800\\d{6}|(?:21|63|[79]\\d)\\d{7}",,,,,,, [9], [6]], [,, "21[1-8]\\d{6}",,,, "211234567",,,, [6]], [,, "(?:7[5-79]|9[5-8])\\d{7}",,,, "955123456"], [,, "800\\d{6}",,,, "800123456"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "63\\d{7}",,,, "630123456"], "ZM", 260, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3})", "$1 $2", ["[1-9]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[28]"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["[79]"], "0$1"]], [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[28]"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["[79]"], "0$1"]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              ZW: [, [,, "2(?:[0-57-9]\\d{6,8}|6[0-24-9]\\d{6,7})|[38]\\d{9}|[35-8]\\d{8}|[3-6]\\d{7}|[1-689]\\d{6}|[1-3569]\\d{5}|[1356]\\d{4}",,,,,,, [5, 6, 7, 8, 9, 10], [3, 4]], [,, "(?:1(?:(?:3\\d|9)\\d|[4-8])|2(?:(?:(?:0(?:2[014]|5)|(?:2[0157]|31|84|9)\\d\\d|[56](?:[14]\\d\\d|20)|7(?:[089]|2[03]|[35]\\d\\d))\\d|4(?:2\\d\\d|8))\\d|1(?:2|[39]\\d{4}))|3(?:(?:123|(?:29\\d|92)\\d)\\d\\d|7(?:[19]|[56]\\d))|5(?:0|1[2-478]|26|[37]2|4(?:2\\d{3}|83)|5(?:25\\d\\d|[78])|[689]\\d)|6(?:(?:[16-8]21|28|52[013])\\d\\d|[39])|8(?:[1349]28|523)\\d\\d)\\d{3}|(?:4\\d\\d|9[2-9])\\d{4,5}|(?:(?:2(?:(?:(?:0|8[146])\\d|7[1-7])\\d|2(?:[278]\\d|92)|58(?:2\\d|3))|3(?:[26]|9\\d{3})|5(?:4\\d|5)\\d\\d)\\d|6(?:(?:(?:[0-246]|[78]\\d)\\d|37)\\d|5[2-8]))\\d\\d|(?:2(?:[569]\\d|8[2-57-9])|3(?:[013-59]\\d|8[37])|6[89]8)\\d{3}",,,, "1312345",,,, [3, 4]], [,, "7(?:[1278]\\d|3[1-9])\\d{6}",,,, "712345678",,, [9]], [,, "80(?:[01]\\d|20|8[0-8])\\d{3}",,,, "8001234",,, [7]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "86(?:1[12]|22|30|44|55|77|8[368])\\d{6}",,,, "8686123456",,, [10]], "ZW", 263, "00", "0",,, "0",,,, [[, "(\\d{3})(\\d{3,5})", "$1 $2", ["2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]"], "0$1"], [, "(\\d)(\\d{3})(\\d{2,4})", "$1 $2 $3", ["[49]"], "0$1"], [, "(\\d{3})(\\d{4})", "$1 $2", ["80"], "0$1"], [, "(\\d{2})(\\d{7})", "$1 $2", ["24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2", "2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]"], "(0$1)"], [, "(\\d{2})(\\d{3})(\\d{4})", "$1 $2 $3", ["7"], "0$1"], [, "(\\d{3})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)", "2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)"], "0$1"], [, "(\\d{4})(\\d{6})", "$1 $2", ["8"], "0$1"], [, "(\\d{2})(\\d{3,5})", "$1 $2", ["1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]"], "0$1"], [, "(\\d{2})(\\d{3})(\\d{3,4})", "$1 $2 $3", ["29[013-9]|39|54"], "0$1"], [, "(\\d{4})(\\d{3,5})", "$1 $2", ["(?:25|54)8", "258|5483"], "0$1"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              800: [, [,, "(?:00|[1-9]\\d)\\d{6}",,,,,,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:00|[1-9]\\d)\\d{6}",,,, "12345678"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "001", 800,,,,,,,, 1, [[, "(\\d{4})(\\d{4})", "$1 $2", ["\\d"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              808: [, [,, "[1-9]\\d{7}",,,,,,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "[1-9]\\d{7}",,,, "12345678"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "001", 808,,,,,,,, 1, [[, "(\\d{4})(\\d{4})", "$1 $2", ["[1-9]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              870: [, [,, "7\\d{11}|[35-7]\\d{8}",,,,,,, [9, 12]], [,,,,,,,,, [-1]], [,, "(?:[356]|774[45])\\d{8}|7[6-8]\\d{7}",,,, "301234567"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "001", 870,,,,,,,,, [[, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["[35-7]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              878: [, [,, "10\\d{10}",,,,,,, [12]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "10\\d{10}",,,, "101234567890"], "001", 878,,,,,,,, 1, [[, "(\\d{2})(\\d{5})(\\d{5})", "$1 $2 $3", ["1"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              881: [, [,, "6\\d{9}|[0-36-9]\\d{8}",,,,,,, [9, 10]], [,,,,,,,,, [-1]], [,, "6\\d{9}|[0-36-9]\\d{8}",,,, "612345678"], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "001", 881,,,,,,,,, [[, "(\\d)(\\d{3})(\\d{5})", "$1 $2 $3", ["[0-37-9]"]], [, "(\\d)(\\d{3})(\\d{5,6})", "$1 $2 $3", ["6"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              882: [, [,, "[13]\\d{6}(?:\\d{2,5})?|[19]\\d{7}|(?:[25]\\d\\d|4)\\d{7}(?:\\d{2})?",,,,,,, [7, 8, 9, 10, 11, 12]], [,,,,,,,,, [-1]], [,, "342\\d{4}|(?:337|49)\\d{6}|(?:3(?:2|47|7\\d{3})|50\\d{3})\\d{7}",,,, "3421234",,, [7, 8, 9, 10, 12]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\d{4}|6\\d{5,10})|(?:345\\d|9[89])\\d{6}|(?:10|2(?:3|85\\d)|3(?:[15]|[69]\\d\\d)|4[15-8]|51)\\d{8}",,,, "390123456789"], "001", 882,,,,,,,,, [[, "(\\d{2})(\\d{5})", "$1 $2", ["16|342"]], [, "(\\d{2})(\\d{6})", "$1 $2", ["49"]], [, "(\\d{2})(\\d{2})(\\d{4})", "$1 $2 $3", ["1[36]|9"]], [, "(\\d{2})(\\d{4})(\\d{3})", "$1 $2 $3", ["3[23]"]], [, "(\\d{2})(\\d{3,4})(\\d{4})", "$1 $2 $3", ["16"]], [, "(\\d{2})(\\d{4})(\\d{4})", "$1 $2 $3", ["10|23|3(?:[15]|4[57])|4|51"]], [, "(\\d{3})(\\d{4})(\\d{4})", "$1 $2 $3", ["34"]], [, "(\\d{2})(\\d{4,5})(\\d{5})", "$1 $2 $3", ["[1-35]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,, "348[57]\\d{7}",,,, "34851234567",,, [11]]],
              883: [, [,, "(?:[1-4]\\d|51)\\d{6,10}",,,,,,, [8, 9, 10, 11, 12]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "(?:2(?:00\\d\\d|10)|(?:370[1-9]|51\\d0)\\d)\\d{7}|51(?:00\\d{5}|[24-9]0\\d{4,7})|(?:1[0-79]|2[24-689]|3[02-689]|4[0-4])0\\d{5,9}",,,, "510012345"], "001", 883,,,,,,,, 1, [[, "(\\d{3})(\\d{3})(\\d{2,8})", "$1 $2 $3", ["[14]|2[24-689]|3[02-689]|51[24-9]"]], [, "(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3", ["510"]], [, "(\\d{3})(\\d{3})(\\d{4})", "$1 $2 $3", ["21"]], [, "(\\d{4})(\\d{4})(\\d{4})", "$1 $2 $3", ["51[13]"]], [, "(\\d{3})(\\d{3})(\\d{3})(\\d{3})", "$1 $2 $3 $4", ["[235]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]],
              888: [, [,, "\\d{11}",,,,,,, [11]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "001", 888,,,,,,,, 1, [[, "(\\d{3})(\\d{3})(\\d{5})", "$1 $2 $3"]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,, "\\d{11}",,,, "12345678901"],,, [,,,,,,,,, [-1]]],
              979: [, [,, "[1359]\\d{8}",,,,,,, [9], [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,, "[1359]\\d{8}",,,, "123456789",,,, [8]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], [,,,,,,,,, [-1]], "001", 979,,,,,,,, 1, [[, "(\\d)(\\d{4})(\\d{4})", "$1 $2 $3", ["[1359]"]]],, [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]], [,,,,,,,,, [-1]],,, [,,,,,,,,, [-1]]]
            };
          function J() {
            this.g = {};
          }
          J.h = void 0;
          J.g = function () {
            return J.h ? J.h : J.h = new J();
          };
          var Fa = {
              0: "0",
              1: "1",
              2: "2",
              3: "3",
              4: "4",
              5: "5",
              6: "6",
              7: "7",
              8: "8",
              9: "9",
              "\uFF10": "0",
              "\uFF11": "1",
              "\uFF12": "2",
              "\uFF13": "3",
              "\uFF14": "4",
              "\uFF15": "5",
              "\uFF16": "6",
              "\uFF17": "7",
              "\uFF18": "8",
              "\uFF19": "9",
              "\u0660": "0",
              "\u0661": "1",
              "\u0662": "2",
              "\u0663": "3",
              "\u0664": "4",
              "\u0665": "5",
              "\u0666": "6",
              "\u0667": "7",
              "\u0668": "8",
              "\u0669": "9",
              "\u06F0": "0",
              "\u06F1": "1",
              "\u06F2": "2",
              "\u06F3": "3",
              "\u06F4": "4",
              "\u06F5": "5",
              "\u06F6": "6",
              "\u06F7": "7",
              "\u06F8": "8",
              "\u06F9": "9"
            },
            Ga = {
              0: "0",
              1: "1",
              2: "2",
              3: "3",
              4: "4",
              5: "5",
              6: "6",
              7: "7",
              8: "8",
              9: "9",
              "+": "+",
              "*": "*",
              "#": "#"
            },
            Ha = {
              0: "0",
              1: "1",
              2: "2",
              3: "3",
              4: "4",
              5: "5",
              6: "6",
              7: "7",
              8: "8",
              9: "9",
              "\uFF10": "0",
              "\uFF11": "1",
              "\uFF12": "2",
              "\uFF13": "3",
              "\uFF14": "4",
              "\uFF15": "5",
              "\uFF16": "6",
              "\uFF17": "7",
              "\uFF18": "8",
              "\uFF19": "9",
              "\u0660": "0",
              "\u0661": "1",
              "\u0662": "2",
              "\u0663": "3",
              "\u0664": "4",
              "\u0665": "5",
              "\u0666": "6",
              "\u0667": "7",
              "\u0668": "8",
              "\u0669": "9",
              "\u06F0": "0",
              "\u06F1": "1",
              "\u06F2": "2",
              "\u06F3": "3",
              "\u06F4": "4",
              "\u06F5": "5",
              "\u06F6": "6",
              "\u06F7": "7",
              "\u06F8": "8",
              "\u06F9": "9",
              A: "2",
              B: "2",
              C: "2",
              D: "3",
              E: "3",
              F: "3",
              G: "4",
              H: "4",
              I: "4",
              J: "5",
              K: "5",
              L: "5",
              M: "6",
              N: "6",
              O: "6",
              P: "7",
              Q: "7",
              R: "7",
              S: "7",
              T: "8",
              U: "8",
              V: "8",
              W: "9",
              X: "9",
              Y: "9",
              Z: "9"
            },
            Ia = RegExp("[+\uFF0B]+"),
            K = RegExp("^[+\uFF0B]+"),
            Ja = RegExp("([0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9])"),
            Ka = RegExp("[+\uFF0B0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9]"),
            La = /[\\\/] *x/,
            Ma = RegExp("[^0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9A-Za-z#]+$"),
            Na = /(?:.*?[A-Za-z]){3}.*/,
            Oa = RegExp("^\\+([0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9]|[\\-\\.\\(\\)]?)*[0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9]([0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9]|[\\-\\.\\(\\)]?)*$"),
            Pa = RegExp("^([A-Za-z0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9]+((\\-)*[A-Za-z0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9])*\\.)*[A-Za-z]+((\\-)*[A-Za-z0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9])*\\.?$");
          function L(a) {
            return "([0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9]{1," + a + "})";
          }
          function Qa() {
            return ";ext=" + L("20") + "|[ \xA0\\t,]*(?:e?xt(?:ensi(?:o\u0301?|\xF3))?n?|\uFF45?\uFF58\uFF54\uFF4E?|\u0434\u043E\u0431|anexo)[:\\.\uFF0E]?[ \xA0\\t,-]*" + (L("20") + "#?|[ \xA0\\t,]*(?:[x\uFF58#\uFF03~\uFF5E]|int|\uFF49\uFF4E\uFF54)[:\\.\uFF0E]?[ \xA0\\t,-]*") + (L("9") + "#?|[- ]+") + (L("6") + "#|[ \xA0\\t]*(?:,{2}|;)[:\\.\uFF0E]?[ \xA0\\t,-]*") + (L("15") + "#?|[ \xA0\\t]*(?:,)+[:\\.\uFF0E]?[ \xA0\\t,-]*") + (L("9") + "#?");
          }
          var Ra = new RegExp("(?:" + Qa() + ")$", "i"),
            Sa = new RegExp("^[0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9]{2}$|^[+\uFF0B]*(?:[-x\u2010-\u2015\u2212\u30FC\uFF0D-\uFF0F \xA0\xAD\u200B\u2060\u3000()\uFF08\uFF09\uFF3B\uFF3D.\\[\\]/~\u2053\u223C\uFF5E*]*[0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9]){3,}[-x\u2010-\u2015\u2212\u30FC\uFF0D-\uFF0F \xA0\xAD\u200B\u2060\u3000()\uFF08\uFF09\uFF3B\uFF3D.\\[\\]/~\u2053\u223C\uFF5E*A-Za-z0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9]*(?:" + Qa() + ")?$", "i"),
            Ta = /(\$\d)/,
            Ua = /^\(?\$1\)?$/;
          function Va(a) {
            return 2 > a.length ? false : M(Sa, a);
          }
          function Wa(a) {
            return M(Na, a) ? N(a, Ha) : N(a, Fa);
          }
          function Xa(a) {
            var b = Wa(a.toString());
            D(a);
            a.g(b);
          }
          function Ya(a) {
            return null != a && (1 != x(a, 9) || -1 != u(a, 9)[0]);
          }
          function N(a, b) {
            for (var c = new C(), d, e = a.length, f = 0; f < e; ++f) d = a.charAt(f), d = b[d.toUpperCase()], null != d && c.g(d);
            return c.toString();
          }
          function Za(a) {
            return 0 == a.length || Ua.test(a);
          }
          function O(a) {
            return null != a && isNaN(a) && a.toUpperCase() in Ea;
          }
          J.prototype.format = function (a, b) {
            if (0 == r(a, 2) && q(a, 5)) {
              var c = w(a, 5);
              if (0 < c.length) return c;
            }
            c = w(a, 1);
            var d = P(a);
            if (0 == b) return $a(c, 0, d, "");
            if (!(c in I)) return d;
            var e = Q(this, c, R(c));
            a = q(a, 3) && 0 != r(a, 3).length ? 3 == b ? ";ext=" + r(a, 3) : q(e, 13) ? r(e, 13) + w(a, 3) : " ext. " + w(a, 3) : "";
            a: {
              e = 0 == u(e, 20).length || 2 == b ? u(e, 19) : u(e, 20);
              for (var f, g = e.length, h = 0; h < g; ++h) {
                f = e[h];
                var l = x(f, 3);
                if (0 == l || 0 == d.search(r(f, 3, l - 1))) {
                  if (l = new RegExp(r(f, 1)), M(l, d)) {
                    e = f;
                    break a;
                  }
                }
              }
              e = null;
            }
            null != e && (g = e, e = w(g, 2), f = new RegExp(r(g, 1)), w(g, 5), g = w(g, 4), d = 2 == b && null != g && 0 < g.length ? d.replace(f, e.replace(Ta, g)) : d.replace(f, e), 3 == b && (d = d.replace(RegExp("^[-x\u2010-\u2015\u2212\u30FC\uFF0D-\uFF0F \xA0\xAD\u200B\u2060\u3000()\uFF08\uFF09\uFF3B\uFF3D.\\[\\]/~\u2053\u223C\uFF5E]+"), ""), d = d.replace(RegExp("[-x\u2010-\u2015\u2212\u30FC\uFF0D-\uFF0F \xA0\xAD\u200B\u2060\u3000()\uFF08\uFF09\uFF3B\uFF3D.\\[\\]/~\u2053\u223C\uFF5E]+", "g"), "-")));
            return $a(c, b, d, a);
          };
          function Q(a, b, c) {
            return "001" == c ? S(a, "" + b) : S(a, c);
          }
          function P(a) {
            if (!q(a, 2)) return "";
            var b = "" + r(a, 2);
            return q(a, 4) && r(a, 4) && 0 < w(a, 8) ? Array(w(a, 8) + 1).join("0") + b : b;
          }
          function $a(a, b, c, d) {
            switch (b) {
              case 0:
                return "+" + a + c + d;
              case 1:
                return "+" + a + " " + c + d;
              case 3:
                return "tel:+" + a + "-" + c + d;
              default:
                return c + d;
            }
          }
          function T(a, b) {
            switch (b) {
              case 4:
                return r(a, 5);
              case 3:
                return r(a, 4);
              case 1:
                return r(a, 3);
              case 0:
              case 2:
                return r(a, 2);
              case 5:
                return r(a, 6);
              case 6:
                return r(a, 8);
              case 7:
                return r(a, 7);
              case 8:
                return r(a, 21);
              case 9:
                return r(a, 25);
              case 10:
                return r(a, 28);
              default:
                return r(a, 1);
            }
          }
          function ab(a, b) {
            return U(a, r(b, 1)) ? U(a, r(b, 5)) ? 4 : U(a, r(b, 4)) ? 3 : U(a, r(b, 6)) ? 5 : U(a, r(b, 8)) ? 6 : U(a, r(b, 7)) ? 7 : U(a, r(b, 21)) ? 8 : U(a, r(b, 25)) ? 9 : U(a, r(b, 28)) ? 10 : U(a, r(b, 2)) ? r(b, 18) || U(a, r(b, 3)) ? 2 : 0 : !r(b, 18) && U(a, r(b, 3)) ? 1 : -1 : -1;
          }
          function S(a, b) {
            if (null == b) return null;
            b = b.toUpperCase();
            var c = a.g[b];
            if (null == c) {
              c = Ea[b];
              if (null == c) return null;
              c = new B().g(G.m(), c);
              a.g[b] = c;
            }
            return c;
          }
          function U(a, b) {
            var c = a.length;
            return 0 < x(b, 9) && -1 == u(b, 9).indexOf(c) ? false : M(w(b, 2), a);
          }
          function bb(a, b) {
            if (null == b) return null;
            var c = w(b, 1);
            c = I[c];
            if (null == c) a = null;else if (1 == c.length) a = c[0];else a: {
              b = P(b);
              for (var d, e = c.length, f = 0; f < e; f++) {
                d = c[f];
                var g = S(a, d);
                if (q(g, 23)) {
                  if (0 == b.search(r(g, 23))) {
                    a = d;
                    break a;
                  }
                } else if (-1 != ab(b, g)) {
                  a = d;
                  break a;
                }
              }
              a = null;
            }
            return a;
          }
          function R(a) {
            a = I[a];
            return null == a ? "ZZ" : a[0];
          }
          function cb(a, b) {
            a = S(a, b);
            if (null == a) throw Error("Invalid region code: " + b);
            return w(a, 10);
          }
          function V(a, b, c, d) {
            var e = T(c, d),
              f = 0 == x(e, 9) ? u(r(c, 1), 9) : u(e, 9);
            e = u(e, 10);
            if (2 == d) if (Ya(T(c, 0))) a = T(c, 1), Ya(a) && (f = f.concat(0 == x(a, 9) ? u(r(c, 1), 9) : u(a, 9)), f.sort(), 0 == e.length ? e = u(a, 10) : (e = e.concat(u(a, 10)), e.sort()));else return V(a, b, c, 1);
            if (-1 == f[0]) return 5;
            b = b.length;
            if (-1 < e.indexOf(b)) return 4;
            c = f[0];
            return c == b ? 0 : c > b ? 2 : f[f.length - 1] < b ? 3 : -1 < f.indexOf(b, 1) ? 0 : 5;
          }
          function W(a, b, c) {
            var d = P(b);
            b = w(b, 1);
            if (!(b in I)) return 1;
            b = Q(a, b, R(b));
            return V(a, d, b, c);
          }
          function db(a, b) {
            a = a.toString();
            if (0 == a.length || "0" == a.charAt(0)) return 0;
            for (var c, d = a.length, e = 1; 3 >= e && e <= d; ++e) if (c = parseInt(a.substring(0, e), 10), c in I) return b.g(a.substring(e)), c;
            return 0;
          }
          function eb(a, b, c, d, e, f) {
            if (0 == b.length) return 0;
            b = new C(b);
            var g;
            null != c && (g = r(c, 11));
            null == g && (g = "NonMatch");
            var h = b.toString();
            if (0 == h.length) g = 20;else if (K.test(h)) h = h.replace(K, ""), D(b), b.g(Wa(h)), g = 1;else {
              h = new RegExp(g);
              Xa(b);
              g = b.toString();
              if (0 == g.search(h)) {
                h = g.match(h)[0].length;
                var l = g.substring(h).match(Ja);
                l && null != l[1] && 0 < l[1].length && "0" == N(l[1], Fa) ? g = false : (D(b), b.g(g.substring(h)), g = true);
              } else g = false;
              g = g ? 5 : 20;
            }
            e && t(f, 6, g);
            if (20 != g) {
              if (2 >= b.h.length) throw Error("Phone number too short after IDD");
              a = db(b, d);
              if (0 != a) return t(f, 1, a), a;
              throw Error("Invalid country calling code");
            }
            if (null != c && (g = w(c, 10), h = "" + g, l = b.toString(), 0 == l.lastIndexOf(h, 0) && (h = new C(l.substring(h.length)), l = r(c, 1), l = new RegExp(w(l, 2)), fb(h, c, null), h = h.toString(), !M(l, b.toString()) && M(l, h) || 3 == V(a, b.toString(), c, -1)))) return d.g(h), e && t(f, 6, 10), t(f, 1, g), g;
            t(f, 1, 0);
            return 0;
          }
          function fb(a, b, c) {
            var d = a.toString(),
              e = d.length,
              f = r(b, 15);
            if (0 != e && null != f && 0 != f.length) {
              var g = new RegExp("^(?:" + f + ")");
              if (e = g.exec(d)) {
                f = new RegExp(w(r(b, 1), 2));
                var h = M(f, d),
                  l = e.length - 1;
                b = r(b, 16);
                if (null == b || 0 == b.length || null == e[l] || 0 == e[l].length) {
                  if (!h || M(f, d.substring(e[0].length))) null != c && 0 < l && null != e[l] && c.g(e[1]), a.set(d.substring(e[0].length));
                } else if (d = d.replace(g, b), !h || M(f, d)) null != c && 0 < l && c.g(e[1]), a.set(d);
              }
            }
          }
          function X(a, b, c) {
            if (!O(c) && 0 < b.length && "+" != b.charAt(0)) throw Error("Invalid country calling code");
            return gb(a, b, c, true);
          }
          function gb(a, b, c, d) {
            var _b;
            if (null == b) throw Error("The string supplied did not seem to be a phone number");
            if (250 < b.length) throw Error("The string supplied is too long to be a phone number");
            var e = new C();
            var f = b.indexOf(";phone-context=");
            if (-1 === f) f = null;else if (f += 15, f >= b.length) f = "";else {
              var g = b.indexOf(";", f);
              f = -1 !== g ? b.substring(f, g) : b.substring(f);
            }
            var h = f;
            null == h ? g = true : 0 === h.length ? g = false : (g = Oa.exec(h), h = Pa.exec(h), g = null !== g || null !== h);
            if (!g) throw Error("The string supplied did not seem to be a phone number");
            null != f ? ("+" === f.charAt(0) && e.g(f), f = b.indexOf("tel:"), e.g(b.substring(0 <= f ? f + 4 : 0, b.indexOf(";phone-context=")))) : (f = e.g, g = (_b = b) !== null && _b !== void 0 ? _b : "", h = g.search(Ka), 0 <= h ? (g = g.substring(h), g = g.replace(Ma, ""), h = g.search(La), 0 <= h && (g = g.substring(0, h))) : g = "", f.call(e, g));
            f = e.toString();
            g = f.indexOf(";isub=");
            0 < g && (D(e), e.g(f.substring(0, g)));
            if (!Va(e.toString())) throw Error("The string supplied did not seem to be a phone number");
            f = e.toString();
            if (!(O(c) || null != f && 0 < f.length && K.test(f))) throw Error("Invalid country calling code");
            f = new H();
            d && t(f, 5, b);
            a: {
              b = e.toString();
              g = b.search(Ra);
              if (0 <= g && Va(b.substring(0, g))) {
                h = b.match(Ra);
                for (var l = h.length, A = 1; A < l; ++A) if (null != h[A] && 0 < h[A].length) {
                  D(e);
                  e.g(b.substring(0, g));
                  b = h[A];
                  break a;
                }
              }
              b = "";
            }
            0 < b.length && t(f, 3, b);
            g = S(a, c);
            b = new C();
            h = 0;
            l = e.toString();
            try {
              h = eb(a, l, g, b, d, f);
            } catch (da) {
              if ("Invalid country calling code" == da.message && K.test(l)) {
                if (l = l.replace(K, ""), h = eb(a, l, g, b, d, f), 0 == h) throw da;
              } else throw da;
            }
            0 != h ? (e = R(h), e != c && (g = Q(a, h, e))) : (Xa(e), b.g(e.toString()), null != c ? (h = w(g, 10), t(f, 1, h)) : d && (delete f.h[6], f.g && delete f.g[6]));
            if (2 > b.h.length) throw Error("The string supplied is too short to be a phone number");
            null != g && (c = new C(), e = new C(b.toString()), fb(e, g, c), a = V(a, e.toString(), g, -1), 2 != a && 4 != a && 5 != a && (b = e, d && 0 < c.toString().length && t(f, 7, c.toString())));
            d = b.toString();
            a = d.length;
            if (2 > a) throw Error("The string supplied is too short to be a phone number");
            if (17 < a) throw Error("The string supplied is too long to be a phone number");
            if (1 < d.length && "0" == d.charAt(0)) {
              t(f, 4, true);
              for (a = 1; a < d.length - 1 && "0" == d.charAt(a);) a++;
              1 != a && t(f, 8, a);
            }
            t(f, 2, parseInt(d, 10));
            return f;
          }
          function M(a, b) {
            return (a = "string" == typeof a ? b.match("^(?:" + a + ")$") : b.match(a)) && a[0].length == b.length ? true : false;
          }
          function hb(a) {
            this.fa = RegExp("\u2008");
            this.ja = "";
            this.v = new C();
            this.da = "";
            this.s = new C();
            this.ba = new C();
            this.u = true;
            this.ea = this.ca = this.la = false;
            this.ga = J.g();
            this.$ = 0;
            this.h = new C();
            this.ha = false;
            this.o = "";
            this.g = new C();
            this.j = [];
            this.ka = a;
            this.l = ib(this, this.ka);
          }
          var jb = new G();
          t(jb, 11, "NA");
          var kb = RegExp("^[-x\u2010-\u2015\u2212\u30FC\uFF0D-\uFF0F \xA0\xAD\u200B\u2060\u3000()\uFF08\uFF09\uFF3B\uFF3D.\\[\\]/~\u2053\u223C\uFF5E]*\\$1[-x\u2010-\u2015\u2212\u30FC\uFF0D-\uFF0F \xA0\xAD\u200B\u2060\u3000()\uFF08\uFF09\uFF3B\uFF3D.\\[\\]/~\u2053\u223C\uFF5E]*(\\$\\d[-x\u2010-\u2015\u2212\u30FC\uFF0D-\uFF0F \xA0\xAD\u200B\u2060\u3000()\uFF08\uFF09\uFF3B\uFF3D.\\[\\]/~\u2053\u223C\uFF5E]*)*$"),
            lb = /[- ]/;
          function ib(a, b) {
            var c = a.ga;
            b = O(b) ? cb(c, b) : 0;
            a = S(a.ga, R(b));
            return null != a ? a : jb;
          }
          function mb(a) {
            for (var b = a.j.length, c = 0; c < b; ++c) {
              var d = a.j[c],
                e = w(d, 1);
              if (a.da == e) return false;
              var f = a;
              var g = d,
                h = w(g, 1);
              D(f.v);
              var l = f;
              g = w(g, 2);
              var A = "999999999999999".match(h)[0];
              A.length < l.g.h.length ? l = "" : (l = A.replace(new RegExp(h, "g"), g), l = l.replace(RegExp("9", "g"), "\u2008"));
              0 < l.length ? (f.v.g(l), f = true) : f = false;
              if (f) return a.da = e, a.ha = lb.test(r(d, 4)), a.$ = 0, true;
            }
            return a.u = false;
          }
          function nb(a, b) {
            for (var c = [], d = b.length - 3, e = a.j.length, f = 0; f < e; ++f) {
              var g = a.j[f];
              0 == x(g, 3) ? c.push(a.j[f]) : (g = r(g, 3, Math.min(d, x(g, 3) - 1)), 0 == b.search(g) && c.push(a.j[f]));
            }
            a.j = c;
          }
          function ob(a, b) {
            a.s.g(b);
            var c = b;
            Ja.test(c) || 1 == a.s.h.length && Ia.test(c) ? ("+" == b ? (c = b, a.ba.g(b)) : (c = Fa[b], a.ba.g(c), a.g.g(c)), b = c) : (a.u = false, a.la = true);
            if (!a.u) {
              if (!a.la) {
                if (pb(a)) {
                  if (qb(a)) return rb(a);
                } else if (0 < a.o.length && (b = a.g.toString(), D(a.g), a.g.g(a.o), a.g.g(b), b = a.h.toString(), c = b.lastIndexOf(a.o), D(a.h), a.h.g(b.substring(0, c))), a.o != sb(a)) return a.h.g(" "), rb(a);
              }
              return a.s.toString();
            }
            switch (a.ba.h.length) {
              case 0:
              case 1:
              case 2:
                return a.s.toString();
              case 3:
                if (pb(a)) a.ea = true;else return a.o = sb(a), tb(a);
              default:
                if (a.ea) return qb(a) && (a.ea = false), a.h.toString() + a.g.toString();
                if (0 < a.j.length) {
                  b = ub(a, b);
                  c = vb(a);
                  if (0 < c.length) return c;
                  nb(a, a.g.toString());
                  return mb(a) ? wb(a) : a.u ? Y(a, b) : a.s.toString();
                }
                return tb(a);
            }
          }
          function rb(a) {
            a.u = true;
            a.ea = false;
            a.j = [];
            a.$ = 0;
            D(a.v);
            a.da = "";
            return tb(a);
          }
          function vb(a) {
            for (var b = a.g.toString(), c = a.j.length, d = 0; d < c; ++d) {
              var e = a.j[d],
                f = w(e, 1);
              if (new RegExp("^(?:" + f + ")$").test(b) && (a.ha = lb.test(r(e, 4)), e = b.replace(new RegExp(f, "g"), r(e, 2)), e = Y(a, e), N(e, Ga) == a.ba)) return e;
            }
            return "";
          }
          function Y(a, b) {
            var c = a.h.h.length;
            return a.ha && 0 < c && " " != a.h.toString().charAt(c - 1) ? a.h + " " + b : a.h + b;
          }
          function tb(a) {
            var b = a.g.toString();
            if (3 <= b.length) {
              for (var c = a.ca && 0 == a.o.length && 0 < x(a.l, 20) ? u(a.l, 20) : u(a.l, 19), d = c.length, e = 0; e < d; ++e) {
                var f = c[e];
                0 < a.o.length && Za(w(f, 4)) && !r(f, 6) && !q(f, 5) || (0 != a.o.length || a.ca || Za(w(f, 4)) || r(f, 6)) && kb.test(w(f, 2)) && a.j.push(f);
              }
              nb(a, b);
              b = vb(a);
              return 0 < b.length ? b : mb(a) ? wb(a) : a.s.toString();
            }
            return Y(a, b);
          }
          function wb(a) {
            var b = a.g.toString(),
              c = b.length;
            if (0 < c) {
              for (var d = "", e = 0; e < c; e++) d = ub(a, b.charAt(e));
              return a.u ? Y(a, d) : a.s.toString();
            }
            return a.h.toString();
          }
          function sb(a) {
            var b = a.g.toString(),
              c = 0;
            if (1 != r(a.l, 10)) var d = false;else d = a.g.toString(), d = "1" == d.charAt(0) && "0" != d.charAt(1) && "1" != d.charAt(1);
            d ? (c = 1, a.h.g("1").g(" "), a.ca = true) : q(a.l, 15) && (d = new RegExp("^(?:" + r(a.l, 15) + ")"), d = b.match(d), null != d && null != d[0] && 0 < d[0].length && (a.ca = true, c = d[0].length, a.h.g(b.substring(0, c))));
            D(a.g);
            a.g.g(b.substring(c));
            return b.substring(0, c);
          }
          function pb(a) {
            var b = a.ba.toString(),
              c = new RegExp("^(?:\\+|" + r(a.l, 11) + ")");
            c = b.match(c);
            return null != c && null != c[0] && 0 < c[0].length ? (a.ca = true, c = c[0].length, D(a.g), a.g.g(b.substring(c)), D(a.h), a.h.g(b.substring(0, c)), "+" != b.charAt(0) && a.h.g(" "), true) : false;
          }
          function qb(a) {
            if (0 == a.g.h.length) return false;
            var b = new C(),
              c = db(a.g, b);
            if (0 == c) return false;
            D(a.g);
            a.g.g(b.toString());
            b = R(c);
            "001" == b ? a.l = S(a.ga, "" + c) : b != a.ka && (a.l = ib(a, b));
            a.h.g("" + c).g(" ");
            a.o = "";
            return true;
          }
          function ub(a, b) {
            var c = a.v.toString();
            if (0 <= c.substring(a.$).search(a.fa)) {
              var d = c.search(a.fa);
              b = c.replace(a.fa, b);
              D(a.v);
              a.v.g(b);
              a.$ = d;
              return b.substring(0, a.$ + 1);
            }
            1 == a.j.length && (a.u = false);
            a.da = "";
            return a.s.toString();
          }
          var Z = {
            FIXED_LINE: 0,
            MOBILE: 1,
            FIXED_LINE_OR_MOBILE: 2,
            TOLL_FREE: 3,
            PREMIUM_RATE: 4,
            SHARED_COST: 5,
            VOIP: 6,
            PERSONAL_NUMBER: 7,
            PAGER: 8,
            UAN: 9,
            VOICEMAIL: 10,
            UNKNOWN: -1
          };
          m("intlTelInputUtilsTemp", {});
          m("intlTelInputUtilsTemp.formatNumberAsYouType", function (a, b) {
            try {
              var _c7 = a.replace(/[^+0-9]/g, ""),
                d = new hb(b);
              b = "";
              for (var e = 0; e < _c7.length; e++) d.ja = ob(d, _c7.charAt(e)), b = d.ja;
              return b;
            } catch (_unused) {
              return a;
            }
          });
          m("intlTelInputUtilsTemp.formatNumber", function (a, b, c) {
            try {
              var e = J.g(),
                f = X(e, a, b);
              var d = W(e, f, -1);
              return 0 == d || 4 == d ? e.format(f, "undefined" === typeof c ? 0 : c) : a;
            } catch (_unused2) {
              return a;
            }
          });
          m("intlTelInputUtilsTemp.getExampleNumber", function (a, b, c, d) {
            try {
              var l = J.g();
              a: {
                var e = l;
                if (O(a)) {
                  var f = T(S(e, a), c);
                  try {
                    if (q(f, 6)) {
                      var g = r(f, 6);
                      var h = gb(e, g, a, false);
                      break a;
                    }
                  } catch (A) {}
                }
                h = null;
              }
              return l.format(h, d ? 0 : b ? 2 : 1);
            } catch (_unused3) {
              return "";
            }
          });
          m("intlTelInputUtilsTemp.getExtension", function (a, b) {
            try {
              return r(X(J.g(), a, b), 3);
            } catch (_unused4) {
              return "";
            }
          });
          m("intlTelInputUtilsTemp.getNumberType", function (a, b) {
            try {
              var g = J.g(),
                h = X(g, a, b);
              var c = bb(g, h),
                d = Q(g, w(h, 1), c);
              if (null == d) var e = -1;else {
                var f = P(h);
                e = ab(f, d);
              }
              return e;
            } catch (_unused5) {
              return -99;
            }
          });
          m("intlTelInputUtilsTemp.getValidationError", function (a, b) {
            if (!b) return 1;
            try {
              var _c8 = J.g(),
                d = X(_c8, a, b);
              return W(_c8, d, -1);
            } catch (c) {
              return "Invalid country calling code" === c.message ? 1 : 3 >= a.length || "Phone number too short after IDD" === c.message || "The string supplied is too short to be a phone number" === c.message ? 2 : "The string supplied is too long to be a phone number" === c.message ? 3 : -99;
            }
          });
          m("intlTelInputUtilsTemp.isValidNumber", function (a, b) {
            try {
              var l = J.g();
              var c = X(l, a, b),
                d = bb(l, c);
              a = l;
              var e = w(c, 1),
                f = Q(a, e, d);
              if (null == f || "001" != d && e != cb(a, d)) var g = false;else {
                var h = P(c);
                g = -1 != ab(h, f);
              }
              return g;
            } catch (_unused6) {
              return false;
            }
          });
          m("intlTelInputUtilsTemp.isPossibleNumber", function (a, b, c) {
            try {
              var d = J.g(),
                e = X(d, a, b);
              if (c) {
                var f = 0 === W(d, e, Z[c]);
                if ("FIXED_LINE_OR_MOBILE" === c) {
                  var g = 0 === W(d, e, Z.MOBILE),
                    h = 0 === W(d, e, Z.FIXED_LINE);
                  return g || h || f;
                }
                return f;
              }
              return 0 === W(d, e, -1);
            } catch (_unused7) {
              return false;
            }
          });
          m("intlTelInputUtilsTemp.getCoreNumber", function (a, b) {
            try {
              return r(X(J.g(), a, b), 2).toString();
            } catch (_unused8) {
              return "";
            }
          });
          m("intlTelInputUtilsTemp.numberFormat", {
            E164: 0,
            INTERNATIONAL: 1,
            NATIONAL: 2,
            RFC3966: 3
          });
          m("intlTelInputUtilsTemp.numberType", Z);
          m("intlTelInputUtilsTemp.validationError", {
            IS_POSSIBLE: 0,
            INVALID_COUNTRY_CODE: 1,
            TOO_SHORT: 2,
            TOO_LONG: 3,
            IS_POSSIBLE_LOCAL_ONLY: 4,
            INVALID_LENGTH: 5
          });
        })();
        var utils = window.intlTelInputUtilsTemp;
        delete window.intlTelInputUtilsTemp;
        var utils_default = utils;

        // src/js/intl-tel-input/intlTelInputWithUtils.ts
        intl_tel_input_default.utils = utils_default;
        var intlTelInputWithUtils_default = intl_tel_input_default;
        return __toCommonJS(intlTelInputWithUtils_exports);
      }();

      // UMD
      return factoryOutput.default;
    });
  })(intlTelInputWithUtils);
  var intlTelInputWithUtilsExports = intlTelInputWithUtils.exports;
  var intlTelInput = /*@__PURE__*/getDefaultExportFromCjs(intlTelInputWithUtilsExports);

  var inputmask = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t();
    }("undefined" != typeof self ? self : commonjsGlobal, function () {
      return function () {

        var e = {
            3976: function _(e, t) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.default = void 0;
              t.default = {
                _maxTestPos: 500,
                placeholder: "_",
                optionalmarker: ["[", "]"],
                quantifiermarker: ["{", "}"],
                groupmarker: ["(", ")"],
                alternatormarker: "|",
                escapeChar: "\\",
                mask: null,
                regex: null,
                oncomplete: function oncomplete() {},
                onincomplete: function onincomplete() {},
                oncleared: function oncleared() {},
                repeat: 0,
                greedy: !1,
                autoUnmask: !1,
                removeMaskOnSubmit: !1,
                clearMaskOnLostFocus: !0,
                insertMode: !0,
                insertModeVisual: !0,
                clearIncomplete: !1,
                alias: null,
                onKeyDown: function onKeyDown() {},
                onBeforeMask: null,
                onBeforePaste: function onBeforePaste(e, t) {
                  return "function" == typeof t.onBeforeMask ? t.onBeforeMask.call(this, e, t) : e;
                },
                onBeforeWrite: null,
                onUnMask: null,
                showMaskOnFocus: !0,
                showMaskOnHover: !0,
                onKeyValidation: function onKeyValidation() {},
                skipOptionalPartCharacter: " ",
                numericInput: !1,
                rightAlign: !1,
                undoOnEscape: !0,
                radixPoint: "",
                _radixDance: !1,
                groupSeparator: "",
                keepStatic: null,
                positionCaretOnTab: !0,
                tabThrough: !1,
                supportsInputType: ["text", "tel", "url", "password", "search"],
                isComplete: null,
                preValidation: null,
                postValidation: null,
                staticDefinitionSymbol: void 0,
                jitMasking: !1,
                nullable: !0,
                inputEventOnly: !1,
                noValuePatching: !1,
                positionCaretOnClick: "lvp",
                casing: null,
                inputmode: "text",
                importDataAttributes: !0,
                shiftPositions: !0,
                usePrototypeDefinitions: !0,
                validationEventTimeOut: 3e3,
                substitutes: {}
              };
            },
            7392: function _(e, t) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.default = void 0;
              t.default = {
                9: {
                  validator: "[0-9\uFF10-\uFF19]",
                  definitionSymbol: "*"
                },
                a: {
                  validator: "[A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]",
                  definitionSymbol: "*"
                },
                "*": {
                  validator: "[0-9\uFF10-\uFF19A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]"
                }
              };
            },
            253: function _(e, t) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.default = function (e, t, n) {
                if (void 0 === n) return e.__data ? e.__data[t] : null;
                e.__data = e.__data || {}, e.__data[t] = n;
              };
            },
            3776: function _(e, t, n) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.Event = void 0, t.off = function (e, t) {
                var n, i;
                u(this[0]) && e && (n = this[0].eventRegistry, i = this[0], e.split(" ").forEach(function (e) {
                  var a = o(e.split("."), 2);
                  (function (e, i) {
                    var a,
                      r,
                      o = [];
                    if (e.length > 0) {
                      if (void 0 === t) for (a = 0, r = n[e][i].length; a < r; a++) o.push({
                        ev: e,
                        namespace: i && i.length > 0 ? i : "global",
                        handler: n[e][i][a]
                      });else o.push({
                        ev: e,
                        namespace: i && i.length > 0 ? i : "global",
                        handler: t
                      });
                    } else if (i.length > 0) for (var l in n) for (var s in n[l]) if (s === i) if (void 0 === t) for (a = 0, r = n[l][s].length; a < r; a++) o.push({
                      ev: l,
                      namespace: s,
                      handler: n[l][s][a]
                    });else o.push({
                      ev: l,
                      namespace: s,
                      handler: t
                    });
                    return o;
                  })(a[0], a[1]).forEach(function (e) {
                    var t = e.ev,
                      a = e.handler;
                    !function (e, t, a) {
                      if (e in n == 1) if (i.removeEventListener ? i.removeEventListener(e, a, !1) : i.detachEvent && i.detachEvent("on".concat(e), a), "global" === t) for (var r in n[e]) n[e][r].splice(n[e][r].indexOf(a), 1);else n[e][t].splice(n[e][t].indexOf(a), 1);
                    }(t, e.namespace, a);
                  });
                }));
                return this;
              }, t.on = function (e, t) {
                if (u(this[0])) {
                  var n = this[0].eventRegistry,
                    i = this[0];
                  e.split(" ").forEach(function (e) {
                    var a = o(e.split("."), 2),
                      r = a[0],
                      l = a[1];
                    !function (e, a) {
                      i.addEventListener ? i.addEventListener(e, t, !1) : i.attachEvent && i.attachEvent("on".concat(e), t), n[e] = n[e] || {}, n[e][a] = n[e][a] || [], n[e][a].push(t);
                    }(r, void 0 === l ? "global" : l);
                  });
                }
                return this;
              }, t.trigger = function (e) {
                var t = arguments;
                if (u(this[0])) for (var n = this[0].eventRegistry, i = this[0], o = "string" == typeof e ? e.split(" ") : [e.type], l = 0; l < o.length; l++) {
                  var s = o[l].split("."),
                    f = s[0],
                    p = s[1] || "global";
                  if (void 0 !== c && "global" === p) {
                    var d,
                      h = {
                        bubbles: !0,
                        cancelable: !0,
                        composed: !0,
                        detail: arguments[1]
                      };
                    if (c.createEvent) {
                      try {
                        if ("input" === f) h.inputType = "insertText", d = new InputEvent(f, h);else d = new CustomEvent(f, h);
                      } catch (e) {
                        (d = c.createEvent("CustomEvent")).initCustomEvent(f, h.bubbles, h.cancelable, h.detail);
                      }
                      e.type && (0, a.default)(d, e), i.dispatchEvent(d);
                    } else (d = c.createEventObject()).eventType = f, d.detail = arguments[1], e.type && (0, a.default)(d, e), i.fireEvent("on" + d.eventType, d);
                  } else if (void 0 !== n[f]) {
                    arguments[0] = arguments[0].type ? arguments[0] : r.default.Event(arguments[0]), arguments[0].detail = arguments.slice(1);
                    var v = n[f];
                    ("global" === p ? Object.values(v).flat() : v[p]).forEach(function (e) {
                      return e.apply(i, t);
                    });
                  }
                }
                return this;
              };
              var i = s(n(9380)),
                a = s(n(600)),
                r = s(n(4963));
              function o(e, t) {
                return function (e) {
                  if (Array.isArray(e)) return e;
                }(e) || function (e, t) {
                  var n = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                  if (null != n) {
                    var i,
                      a,
                      r,
                      o,
                      l = [],
                      s = !0,
                      c = !1;
                    try {
                      if (r = (n = n.call(e)).next, 0 === t) ; else for (; !(s = (i = r.call(n)).done) && (l.push(i.value), l.length !== t); s = !0);
                    } catch (e) {
                      c = !0, a = e;
                    } finally {
                      try {
                        if (!s && null != n.return && (o = n.return(), Object(o) !== o)) return;
                      } finally {
                        if (c) throw a;
                      }
                    }
                    return l;
                  }
                }(e, t) || function (e, t) {
                  if (!e) return;
                  if ("string" == typeof e) return l(e, t);
                  var n = Object.prototype.toString.call(e).slice(8, -1);
                  "Object" === n && e.constructor && (n = e.constructor.name);
                  if ("Map" === n || "Set" === n) return Array.from(e);
                  if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return l(e, t);
                }(e, t) || function () {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
              }
              function l(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
                return i;
              }
              function s(e) {
                return e && e.__esModule ? e : {
                  default: e
                };
              }
              var c = i.default.document;
              function u(e) {
                return e instanceof Element;
              }
              var f = t.Event = void 0;
              "function" == typeof i.default.CustomEvent ? t.Event = f = i.default.CustomEvent : i.default.Event && c && c.createEvent ? (t.Event = f = function f(e, t) {
                t = t || {
                  bubbles: !1,
                  cancelable: !1,
                  composed: !0,
                  detail: void 0
                };
                var n = c.createEvent("CustomEvent");
                return n.initCustomEvent(e, t.bubbles, t.cancelable, t.detail), n;
              }, f.prototype = i.default.Event.prototype) : "undefined" != typeof Event && (t.Event = f = Event);
            },
            600: function _(e, t) {
              function n(e) {
                return n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
                  return _typeof(e);
                } : function (e) {
                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
                }, n(e);
              }
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.default = function e() {
                var t,
                  i,
                  a,
                  r,
                  o,
                  l,
                  s = arguments[0] || {},
                  c = 1,
                  u = arguments.length,
                  f = !1;
                "boolean" == typeof s && (f = s, s = arguments[c] || {}, c++);
                "object" !== n(s) && "function" != typeof s && (s = {});
                for (; c < u; c++) if (null != (t = arguments[c])) for (i in t) a = s[i], s !== (r = t[i]) && (f && r && ("[object Object]" === Object.prototype.toString.call(r) || (o = Array.isArray(r))) ? (o ? (o = !1, l = a && Array.isArray(a) ? a : []) : l = a && "[object Object]" === Object.prototype.toString.call(a) ? a : {}, s[i] = e(f, l, r)) : void 0 !== r && (s[i] = r));
                return s;
              };
            },
            4963: function _(e, t, n) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.default = void 0;
              var i = l(n(9380)),
                a = l(n(253)),
                r = n(3776),
                o = l(n(600));
              function l(e) {
                return e && e.__esModule ? e : {
                  default: e
                };
              }
              var s = i.default.document;
              function c(e) {
                return e instanceof c ? e : this instanceof c ? void (null != e && e !== i.default && (this[0] = e.nodeName ? e : void 0 !== e[0] && e[0].nodeName ? e[0] : s.querySelector(e), void 0 !== this[0] && null !== this[0] && (this[0].eventRegistry = this[0].eventRegistry || {}))) : new c(e);
              }
              c.prototype = {
                on: r.on,
                off: r.off,
                trigger: r.trigger
              }, c.extend = o.default, c.data = a.default, c.Event = r.Event;
              t.default = c;
            },
            9845: function _(e, t, n) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.mobile = t.iphone = t.ie = void 0;
              var i,
                a = (i = n(9380)) && i.__esModule ? i : {
                  default: i
                };
              var r = a.default.navigator && a.default.navigator.userAgent || "";
              t.ie = r.indexOf("MSIE ") > 0 || r.indexOf("Trident/") > 0, t.mobile = a.default.navigator && a.default.navigator.userAgentData && a.default.navigator.userAgentData.mobile || a.default.navigator && a.default.navigator.maxTouchPoints || "ontouchstart" in a.default, t.iphone = /iphone/i.test(r);
            },
            7184: function _(e, t) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.default = function (e) {
                return e.replace(n, "\\$1");
              };
              var n = new RegExp("(\\" + ["/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\", "$", "^"].join("|\\") + ")", "gim");
            },
            6030: function _(e, t, n) {
              function i(e) {
                return i = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
                  return _typeof(e);
                } : function (e) {
                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
                }, i(e);
              }
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.EventHandlers = void 0;
              var a,
                r = n(9845),
                o = (a = n(9380)) && a.__esModule ? a : {
                  default: a
                },
                l = n(7760),
                s = n(2839),
                c = n(8711),
                u = n(7215),
                f = n(4713);
              function p() {
                /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */p = function p() {
                  return t;
                };
                var e,
                  t = {},
                  n = Object.prototype,
                  a = n.hasOwnProperty,
                  r = Object.defineProperty || function (e, t, n) {
                    e[t] = n.value;
                  },
                  o = "function" == typeof Symbol ? Symbol : {},
                  l = o.iterator || "@@iterator",
                  s = o.asyncIterator || "@@asyncIterator",
                  c = o.toStringTag || "@@toStringTag";
                function u(e, t, n) {
                  return Object.defineProperty(e, t, {
                    value: n,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                  }), e[t];
                }
                try {
                  u({}, "");
                } catch (e) {
                  u = function u(e, t, n) {
                    return e[t] = n;
                  };
                }
                function f(e, t, n, i) {
                  var a = t && t.prototype instanceof k ? t : k,
                    o = Object.create(a.prototype),
                    l = new D(i || []);
                  return r(o, "_invoke", {
                    value: E(e, n, l)
                  }), o;
                }
                function d(e, t, n) {
                  try {
                    return {
                      type: "normal",
                      arg: e.call(t, n)
                    };
                  } catch (e) {
                    return {
                      type: "throw",
                      arg: e
                    };
                  }
                }
                t.wrap = f;
                var h = "suspendedStart",
                  v = "suspendedYield",
                  m = "executing",
                  g = "completed",
                  y = {};
                function k() {}
                function b() {}
                function x() {}
                var w = {};
                u(w, l, function () {
                  return this;
                });
                var P = Object.getPrototypeOf,
                  S = P && P(P(L([])));
                S && S !== n && a.call(S, l) && (w = S);
                var O = x.prototype = k.prototype = Object.create(w);
                function _(e) {
                  ["next", "throw", "return"].forEach(function (t) {
                    u(e, t, function (e) {
                      return this._invoke(t, e);
                    });
                  });
                }
                function M(e, t) {
                  function n(r, o, l, s) {
                    var c = d(e[r], e, o);
                    if ("throw" !== c.type) {
                      var u = c.arg,
                        f = u.value;
                      return f && "object" == i(f) && a.call(f, "__await") ? t.resolve(f.__await).then(function (e) {
                        n("next", e, l, s);
                      }, function (e) {
                        n("throw", e, l, s);
                      }) : t.resolve(f).then(function (e) {
                        u.value = e, l(u);
                      }, function (e) {
                        return n("throw", e, l, s);
                      });
                    }
                    s(c.arg);
                  }
                  var o;
                  r(this, "_invoke", {
                    value: function value(e, i) {
                      function a() {
                        return new t(function (t, a) {
                          n(e, i, t, a);
                        });
                      }
                      return o = o ? o.then(a, a) : a();
                    }
                  });
                }
                function E(t, n, i) {
                  var a = h;
                  return function (r, o) {
                    if (a === m) throw new Error("Generator is already running");
                    if (a === g) {
                      if ("throw" === r) throw o;
                      return {
                        value: e,
                        done: !0
                      };
                    }
                    for (i.method = r, i.arg = o;;) {
                      var l = i.delegate;
                      if (l) {
                        var s = j(l, i);
                        if (s) {
                          if (s === y) continue;
                          return s;
                        }
                      }
                      if ("next" === i.method) i.sent = i._sent = i.arg;else if ("throw" === i.method) {
                        if (a === h) throw a = g, i.arg;
                        i.dispatchException(i.arg);
                      } else "return" === i.method && i.abrupt("return", i.arg);
                      a = m;
                      var c = d(t, n, i);
                      if ("normal" === c.type) {
                        if (a = i.done ? g : v, c.arg === y) continue;
                        return {
                          value: c.arg,
                          done: i.done
                        };
                      }
                      "throw" === c.type && (a = g, i.method = "throw", i.arg = c.arg);
                    }
                  };
                }
                function j(t, n) {
                  var i = n.method,
                    a = t.iterator[i];
                  if (a === e) return n.delegate = null, "throw" === i && t.iterator.return && (n.method = "return", n.arg = e, j(t, n), "throw" === n.method) || "return" !== i && (n.method = "throw", n.arg = new TypeError("The iterator does not provide a '" + i + "' method")), y;
                  var r = d(a, t.iterator, n.arg);
                  if ("throw" === r.type) return n.method = "throw", n.arg = r.arg, n.delegate = null, y;
                  var o = r.arg;
                  return o ? o.done ? (n[t.resultName] = o.value, n.next = t.nextLoc, "return" !== n.method && (n.method = "next", n.arg = e), n.delegate = null, y) : o : (n.method = "throw", n.arg = new TypeError("iterator result is not an object"), n.delegate = null, y);
                }
                function T(e) {
                  var t = {
                    tryLoc: e[0]
                  };
                  1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t);
                }
                function A(e) {
                  var t = e.completion || {};
                  t.type = "normal", delete t.arg, e.completion = t;
                }
                function D(e) {
                  this.tryEntries = [{
                    tryLoc: "root"
                  }], e.forEach(T, this), this.reset(!0);
                }
                function L(t) {
                  if (t || "" === t) {
                    var n = t[l];
                    if (n) return n.call(t);
                    if ("function" == typeof t.next) return t;
                    if (!isNaN(t.length)) {
                      var r = -1,
                        o = function n() {
                          for (; ++r < t.length;) if (a.call(t, r)) return n.value = t[r], n.done = !1, n;
                          return n.value = e, n.done = !0, n;
                        };
                      return o.next = o;
                    }
                  }
                  throw new TypeError(i(t) + " is not iterable");
                }
                return b.prototype = x, r(O, "constructor", {
                  value: x,
                  configurable: !0
                }), r(x, "constructor", {
                  value: b,
                  configurable: !0
                }), b.displayName = u(x, c, "GeneratorFunction"), t.isGeneratorFunction = function (e) {
                  var t = "function" == typeof e && e.constructor;
                  return !!t && (t === b || "GeneratorFunction" === (t.displayName || t.name));
                }, t.mark = function (e) {
                  return Object.setPrototypeOf ? Object.setPrototypeOf(e, x) : (e.__proto__ = x, u(e, c, "GeneratorFunction")), e.prototype = Object.create(O), e;
                }, t.awrap = function (e) {
                  return {
                    __await: e
                  };
                }, _(M.prototype), u(M.prototype, s, function () {
                  return this;
                }), t.AsyncIterator = M, t.async = function (e, n, i, a, r) {
                  void 0 === r && (r = Promise);
                  var o = new M(f(e, n, i, a), r);
                  return t.isGeneratorFunction(n) ? o : o.next().then(function (e) {
                    return e.done ? e.value : o.next();
                  });
                }, _(O), u(O, c, "Generator"), u(O, l, function () {
                  return this;
                }), u(O, "toString", function () {
                  return "[object Generator]";
                }), t.keys = function (e) {
                  var t = Object(e),
                    n = [];
                  for (var i in t) n.push(i);
                  return n.reverse(), function e() {
                    for (; n.length;) {
                      var i = n.pop();
                      if (i in t) return e.value = i, e.done = !1, e;
                    }
                    return e.done = !0, e;
                  };
                }, t.values = L, D.prototype = {
                  constructor: D,
                  reset: function reset(t) {
                    if (this.prev = 0, this.next = 0, this.sent = this._sent = e, this.done = !1, this.delegate = null, this.method = "next", this.arg = e, this.tryEntries.forEach(A), !t) for (var n in this) "t" === n.charAt(0) && a.call(this, n) && !isNaN(+n.slice(1)) && (this[n] = e);
                  },
                  stop: function stop() {
                    this.done = !0;
                    var e = this.tryEntries[0].completion;
                    if ("throw" === e.type) throw e.arg;
                    return this.rval;
                  },
                  dispatchException: function dispatchException(t) {
                    if (this.done) throw t;
                    var n = this;
                    function i(i, a) {
                      return l.type = "throw", l.arg = t, n.next = i, a && (n.method = "next", n.arg = e), !!a;
                    }
                    for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                      var o = this.tryEntries[r],
                        l = o.completion;
                      if ("root" === o.tryLoc) return i("end");
                      if (o.tryLoc <= this.prev) {
                        var s = a.call(o, "catchLoc"),
                          c = a.call(o, "finallyLoc");
                        if (s && c) {
                          if (this.prev < o.catchLoc) return i(o.catchLoc, !0);
                          if (this.prev < o.finallyLoc) return i(o.finallyLoc);
                        } else if (s) {
                          if (this.prev < o.catchLoc) return i(o.catchLoc, !0);
                        } else {
                          if (!c) throw new Error("try statement without catch or finally");
                          if (this.prev < o.finallyLoc) return i(o.finallyLoc);
                        }
                      }
                    }
                  },
                  abrupt: function abrupt(e, t) {
                    for (var n = this.tryEntries.length - 1; n >= 0; --n) {
                      var i = this.tryEntries[n];
                      if (i.tryLoc <= this.prev && a.call(i, "finallyLoc") && this.prev < i.finallyLoc) {
                        var r = i;
                        break;
                      }
                    }
                    r && ("break" === e || "continue" === e) && r.tryLoc <= t && t <= r.finallyLoc && (r = null);
                    var o = r ? r.completion : {};
                    return o.type = e, o.arg = t, r ? (this.method = "next", this.next = r.finallyLoc, y) : this.complete(o);
                  },
                  complete: function complete(e, t) {
                    if ("throw" === e.type) throw e.arg;
                    return "break" === e.type || "continue" === e.type ? this.next = e.arg : "return" === e.type ? (this.rval = this.arg = e.arg, this.method = "return", this.next = "end") : "normal" === e.type && t && (this.next = t), y;
                  },
                  finish: function finish(e) {
                    for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                      var n = this.tryEntries[t];
                      if (n.finallyLoc === e) return this.complete(n.completion, n.afterLoc), A(n), y;
                    }
                  },
                  catch: function _catch(e) {
                    for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                      var n = this.tryEntries[t];
                      if (n.tryLoc === e) {
                        var i = n.completion;
                        if ("throw" === i.type) {
                          var a = i.arg;
                          A(n);
                        }
                        return a;
                      }
                    }
                    throw new Error("illegal catch attempt");
                  },
                  delegateYield: function delegateYield(t, n, i) {
                    return this.delegate = {
                      iterator: L(t),
                      resultName: n,
                      nextLoc: i
                    }, "next" === this.method && (this.arg = e), y;
                  }
                }, t;
              }
              function d(e, t) {
                var _n = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                if (!_n) {
                  if (Array.isArray(e) || (_n = function (e, t) {
                    if (!e) return;
                    if ("string" == typeof e) return h(e, t);
                    var n = Object.prototype.toString.call(e).slice(8, -1);
                    "Object" === n && e.constructor && (n = e.constructor.name);
                    if ("Map" === n || "Set" === n) return Array.from(e);
                    if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return h(e, t);
                  }(e)) || t) {
                    _n && (e = _n);
                    var i = 0,
                      a = function a() {};
                    return {
                      s: a,
                      n: function n() {
                        return i >= e.length ? {
                          done: !0
                        } : {
                          done: !1,
                          value: e[i++]
                        };
                      },
                      e: function e(_e) {
                        throw _e;
                      },
                      f: a
                    };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var r,
                  o = !0,
                  l = !1;
                return {
                  s: function s() {
                    _n = _n.call(e);
                  },
                  n: function n() {
                    var e = _n.next();
                    return o = e.done, e;
                  },
                  e: function e(_e2) {
                    l = !0, r = _e2;
                  },
                  f: function f() {
                    try {
                      o || null == _n.return || _n.return();
                    } finally {
                      if (l) throw r;
                    }
                  }
                };
              }
              function h(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
                return i;
              }
              function v(e, t, n, i, a, r, o) {
                try {
                  var l = e[r](o),
                    s = l.value;
                } catch (e) {
                  return void n(e);
                }
                l.done ? t(s) : Promise.resolve(s).then(i, a);
              }
              var m,
                g,
                y = t.EventHandlers = {
                  keyEvent: function keyEvent(e, t, n, i, a) {
                    var o = this.inputmask,
                      p = o.opts,
                      d = o.dependencyLib,
                      h = o.maskset,
                      v = this,
                      m = d(v),
                      g = e.key,
                      k = c.caret.call(o, v),
                      b = p.onKeyDown.call(this, e, c.getBuffer.call(o), k, p);
                    if (void 0 !== b) return b;
                    if (g === s.keys.Backspace || g === s.keys.Delete || r.iphone && g === s.keys.BACKSPACE_SAFARI || e.ctrlKey && g === s.keys.x && !("oncut" in v)) e.preventDefault(), u.handleRemove.call(o, v, g, k), (0, l.writeBuffer)(v, c.getBuffer.call(o, !0), h.p, e, v.inputmask._valueGet() !== c.getBuffer.call(o).join(""));else if (g === s.keys.End || g === s.keys.PageDown) {
                      e.preventDefault();
                      var x = c.seekNext.call(o, c.getLastValidPosition.call(o));
                      c.caret.call(o, v, e.shiftKey ? k.begin : x, x, !0);
                    } else g === s.keys.Home && !e.shiftKey || g === s.keys.PageUp ? (e.preventDefault(), c.caret.call(o, v, 0, e.shiftKey ? k.begin : 0, !0)) : p.undoOnEscape && g === s.keys.Escape && !0 !== e.altKey ? ((0, l.checkVal)(v, !0, !1, o.undoValue.split("")), m.trigger("click")) : g !== s.keys.Insert || e.shiftKey || e.ctrlKey || void 0 !== o.userOptions.insertMode ? !0 === p.tabThrough && g === s.keys.Tab ? !0 === e.shiftKey ? (k.end = c.seekPrevious.call(o, k.end, !0), !0 === f.getTest.call(o, k.end - 1).match.static && k.end--, k.begin = c.seekPrevious.call(o, k.end, !0), k.begin >= 0 && k.end > 0 && (e.preventDefault(), c.caret.call(o, v, k.begin, k.end))) : (k.begin = c.seekNext.call(o, k.begin, !0), k.end = c.seekNext.call(o, k.begin, !0), k.end < h.maskLength && k.end--, k.begin <= h.maskLength && (e.preventDefault(), c.caret.call(o, v, k.begin, k.end))) : e.shiftKey || (p.insertModeVisual && !1 === p.insertMode ? g === s.keys.ArrowRight ? setTimeout(function () {
                      var e = c.caret.call(o, v);
                      c.caret.call(o, v, e.begin);
                    }, 0) : g === s.keys.ArrowLeft && setTimeout(function () {
                      var e = c.translatePosition.call(o, v.inputmask.caretPos.begin);
                      c.translatePosition.call(o, v.inputmask.caretPos.end);
                      o.isRTL ? c.caret.call(o, v, e + (e === h.maskLength ? 0 : 1)) : c.caret.call(o, v, e - (0 === e ? 0 : 1));
                    }, 0) : void 0 === o.keyEventHook || o.keyEventHook(e)) : u.isSelection.call(o, k) ? p.insertMode = !p.insertMode : (p.insertMode = !p.insertMode, c.caret.call(o, v, k.begin, k.begin));
                    return o.isComposing = g == s.keys.Process || g == s.keys.Unidentified, o.ignorable = g.length > 1 && !("textarea" === v.tagName.toLowerCase() && g == s.keys.Enter), y.keypressEvent.call(this, e, t, n, i, a);
                  },
                  keypressEvent: function keypressEvent(e, t, n, i, a) {
                    var r = this.inputmask || this,
                      o = r.opts,
                      f = r.dependencyLib,
                      p = r.maskset,
                      d = r.el,
                      h = f(d),
                      v = e.key;
                    if (!0 === t || e.ctrlKey && e.altKey && !r.ignorable || !(e.ctrlKey || e.metaKey || r.ignorable)) {
                      if (v) {
                        var m,
                          g = t ? {
                            begin: a,
                            end: a
                          } : c.caret.call(r, d);
                        t || (v = o.substitutes[v] || v), p.writeOutBuffer = !0;
                        var y = u.isValid.call(r, g, v, i, void 0, void 0, void 0, t);
                        if (!1 !== y && (c.resetMaskSet.call(r, !0), m = void 0 !== y.caret ? y.caret : c.seekNext.call(r, y.pos.begin ? y.pos.begin : y.pos), p.p = m), m = o.numericInput && void 0 === y.caret ? c.seekPrevious.call(r, m) : m, !1 !== n && (setTimeout(function () {
                          o.onKeyValidation.call(d, v, y);
                        }, 0), p.writeOutBuffer && !1 !== y)) {
                          var k = c.getBuffer.call(r);
                          (0, l.writeBuffer)(d, k, m, e, !0 !== t);
                        }
                        if (e.preventDefault(), t) return !1 !== y && (y.forwardPosition = m), y;
                      }
                    } else v === s.keys.Enter && r.undoValue !== r._valueGet(!0) && (r.undoValue = r._valueGet(!0), setTimeout(function () {
                      h.trigger("change");
                    }, 0));
                  },
                  pasteEvent: (m = p().mark(function e(t) {
                    var n, i, a, r, s, u;
                    return p().wrap(function (e) {
                      for (;;) switch (e.prev = e.next) {
                        case 0:
                          n = function n(e, _n2, i, a, o) {
                            var s = c.caret.call(e, _n2, void 0, void 0, !0),
                              u = i.substr(0, s.begin),
                              f = i.substr(s.end, i.length);
                            if (u == (e.isRTL ? c.getBufferTemplate.call(e).slice().reverse() : c.getBufferTemplate.call(e)).slice(0, s.begin).join("") && (u = ""), f == (e.isRTL ? c.getBufferTemplate.call(e).slice().reverse() : c.getBufferTemplate.call(e)).slice(s.end).join("") && (f = ""), a = u + a + f, e.isRTL && !0 !== r.numericInput) {
                              a = a.split("");
                              var p,
                                h = d(c.getBufferTemplate.call(e));
                              try {
                                for (h.s(); !(p = h.n()).done;) {
                                  var v = p.value;
                                  a[0] === v && a.shift();
                                }
                              } catch (e) {
                                h.e(e);
                              } finally {
                                h.f();
                              }
                              a = a.reverse().join("");
                            }
                            var m = a;
                            if ("function" == typeof o) {
                              if (!1 === (m = o.call(e, m, r))) return !1;
                              m || (m = i);
                            }
                            (0, l.checkVal)(_n2, !0, !1, m.toString().split(""), t);
                          }, i = this, a = this.inputmask, r = a.opts, s = a._valueGet(!0), a.skipInputEvent = !0, t.clipboardData && t.clipboardData.getData ? u = t.clipboardData.getData("text/plain") : o.default.clipboardData && o.default.clipboardData.getData && (u = o.default.clipboardData.getData("Text")), n(a, i, s, u, r.onBeforePaste), t.preventDefault();
                        case 7:
                        case "end":
                          return e.stop();
                      }
                    }, e, this);
                  }), g = function g() {
                    var e = this,
                      t = arguments;
                    return new Promise(function (n, i) {
                      var a = m.apply(e, t);
                      function r(e) {
                        v(a, n, i, r, o, "next", e);
                      }
                      function o(e) {
                        v(a, n, i, r, o, "throw", e);
                      }
                      r(void 0);
                    });
                  }, function (e) {
                    return g.apply(this, arguments);
                  }),
                  inputFallBackEvent: function inputFallBackEvent(e) {
                    var t = this.inputmask,
                      n = t.opts,
                      i = t.dependencyLib;
                    var a,
                      o = this,
                      u = o.inputmask._valueGet(!0),
                      p = (t.isRTL ? c.getBuffer.call(t).slice().reverse() : c.getBuffer.call(t)).join(""),
                      d = c.caret.call(t, o, void 0, void 0, !0);
                    if (p !== u) {
                      if (a = function (e, i, a) {
                        for (var r, o, l, s = e.substr(0, a.begin).split(""), u = e.substr(a.begin).split(""), p = i.substr(0, a.begin).split(""), d = i.substr(a.begin).split(""), h = s.length >= p.length ? s.length : p.length, v = u.length >= d.length ? u.length : d.length, m = "", g = [], y = "~"; s.length < h;) s.push(y);
                        for (; p.length < h;) p.push(y);
                        for (; u.length < v;) u.unshift(y);
                        for (; d.length < v;) d.unshift(y);
                        var k = s.concat(u),
                          b = p.concat(d);
                        for (o = 0, r = k.length; o < r; o++) switch (l = f.getPlaceholder.call(t, c.translatePosition.call(t, o)), m) {
                          case "insertText":
                            b[o - 1] === k[o] && a.begin == k.length - 1 && g.push(k[o]), o = r;
                            break;
                          case "insertReplacementText":
                          case "deleteContentBackward":
                            k[o] === y ? a.end++ : o = r;
                            break;
                          default:
                            k[o] !== b[o] && (k[o + 1] !== y && k[o + 1] !== l && void 0 !== k[o + 1] || (b[o] !== l || b[o + 1] !== y) && b[o] !== y ? b[o + 1] === y && b[o] === k[o + 1] ? (m = "insertText", g.push(k[o]), a.begin--, a.end--) : k[o] !== l && k[o] !== y && (k[o + 1] === y || b[o] !== k[o] && b[o + 1] === k[o + 1]) ? (m = "insertReplacementText", g.push(k[o]), a.begin--) : k[o] === y ? (m = "deleteContentBackward", (c.isMask.call(t, c.translatePosition.call(t, o), !0) || b[o] === n.radixPoint) && a.end++) : o = r : (m = "insertText", g.push(k[o]), a.begin--, a.end--));
                        }
                        return {
                          action: m,
                          data: g,
                          caret: a
                        };
                      }(u, p, d), (o.inputmask.shadowRoot || o.ownerDocument).activeElement !== o && o.focus(), (0, l.writeBuffer)(o, c.getBuffer.call(t)), c.caret.call(t, o, d.begin, d.end, !0), !r.mobile && t.skipNextInsert && "insertText" === e.inputType && "insertText" === a.action && t.isComposing) return !1;
                      switch ("insertCompositionText" === e.inputType && "insertText" === a.action && t.isComposing ? t.skipNextInsert = !0 : t.skipNextInsert = !1, a.action) {
                        case "insertText":
                        case "insertReplacementText":
                          a.data.forEach(function (e, n) {
                            var a = new i.Event("keypress");
                            a.key = e, t.ignorable = !1, y.keypressEvent.call(o, a);
                          }), setTimeout(function () {
                            t.$el.trigger("keyup");
                          }, 0);
                          break;
                        case "deleteContentBackward":
                          var h = new i.Event("keydown");
                          h.key = s.keys.Backspace, y.keyEvent.call(o, h);
                          break;
                        default:
                          (0, l.applyInputValue)(o, u), c.caret.call(t, o, d.begin, d.end, !0);
                      }
                      e.preventDefault();
                    }
                  },
                  setValueEvent: function setValueEvent(e) {
                    var t = this.inputmask,
                      n = t.dependencyLib,
                      i = this,
                      a = e && e.detail ? e.detail[0] : arguments[1];
                    void 0 === a && (a = i.inputmask._valueGet(!0)), (0, l.applyInputValue)(i, a, new n.Event("input")), (e.detail && void 0 !== e.detail[1] || void 0 !== arguments[2]) && c.caret.call(t, i, e.detail ? e.detail[1] : arguments[2]);
                  },
                  focusEvent: function focusEvent(e) {
                    var t = this.inputmask,
                      n = t.opts,
                      i = t && t._valueGet();
                    n.showMaskOnFocus && i !== c.getBuffer.call(t).join("") && (0, l.writeBuffer)(this, c.getBuffer.call(t), c.seekNext.call(t, c.getLastValidPosition.call(t))), !0 !== n.positionCaretOnTab || !1 !== t.mouseEnter || u.isComplete.call(t, c.getBuffer.call(t)) && -1 !== c.getLastValidPosition.call(t) || y.clickEvent.apply(this, [e, !0]), t.undoValue = t && t._valueGet(!0);
                  },
                  invalidEvent: function invalidEvent(e) {
                    this.inputmask.validationEvent = !0;
                  },
                  mouseleaveEvent: function mouseleaveEvent() {
                    var e = this.inputmask,
                      t = e.opts,
                      n = this;
                    e.mouseEnter = !1, t.clearMaskOnLostFocus && (n.inputmask.shadowRoot || n.ownerDocument).activeElement !== n && (0, l.HandleNativePlaceholder)(n, e.originalPlaceholder);
                  },
                  clickEvent: function clickEvent(e, t) {
                    var n = this.inputmask;
                    n.clicked++;
                    var i = this;
                    if ((i.inputmask.shadowRoot || i.ownerDocument).activeElement === i) {
                      var a = c.determineNewCaretPosition.call(n, c.caret.call(n, i), t);
                      void 0 !== a && c.caret.call(n, i, a);
                    }
                  },
                  cutEvent: function cutEvent(e) {
                    var t = this.inputmask,
                      n = t.maskset,
                      i = this,
                      a = c.caret.call(t, i),
                      r = t.isRTL ? c.getBuffer.call(t).slice(a.end, a.begin) : c.getBuffer.call(t).slice(a.begin, a.end),
                      f = t.isRTL ? r.reverse().join("") : r.join("");
                    o.default.navigator && o.default.navigator.clipboard ? o.default.navigator.clipboard.writeText(f) : o.default.clipboardData && o.default.clipboardData.getData && o.default.clipboardData.setData("Text", f), u.handleRemove.call(t, i, s.keys.Delete, a), (0, l.writeBuffer)(i, c.getBuffer.call(t), n.p, e, t.undoValue !== t._valueGet(!0));
                  },
                  blurEvent: function blurEvent(e) {
                    var t = this.inputmask,
                      n = t.opts,
                      i = t.dependencyLib;
                    t.clicked = 0;
                    var a = i(this),
                      r = this;
                    if (r.inputmask) {
                      (0, l.HandleNativePlaceholder)(r, t.originalPlaceholder);
                      var o = r.inputmask._valueGet(),
                        s = c.getBuffer.call(t).slice();
                      "" !== o && (n.clearMaskOnLostFocus && (-1 === c.getLastValidPosition.call(t) && o === c.getBufferTemplate.call(t).join("") ? s = [] : l.clearOptionalTail.call(t, s)), !1 === u.isComplete.call(t, s) && (setTimeout(function () {
                        a.trigger("incomplete");
                      }, 0), n.clearIncomplete && (c.resetMaskSet.call(t, !1), s = n.clearMaskOnLostFocus ? [] : c.getBufferTemplate.call(t).slice())), (0, l.writeBuffer)(r, s, void 0, e)), o = t._valueGet(!0), t.undoValue !== o && ("" != o || t.undoValue != c.getBufferTemplate.call(t).join("") || t.undoValue == c.getBufferTemplate.call(t).join("") && t.maskset.validPositions.length > 0) && (t.undoValue = o, a.trigger("change"));
                    }
                  },
                  mouseenterEvent: function mouseenterEvent() {
                    var e = this.inputmask,
                      t = e.opts.showMaskOnHover,
                      n = this;
                    if (e.mouseEnter = !0, (n.inputmask.shadowRoot || n.ownerDocument).activeElement !== n) {
                      var i = (e.isRTL ? c.getBufferTemplate.call(e).slice().reverse() : c.getBufferTemplate.call(e)).join("");
                      t && (0, l.HandleNativePlaceholder)(n, i);
                    }
                  },
                  submitEvent: function submitEvent() {
                    var e = this.inputmask,
                      t = e.opts;
                    e.undoValue !== e._valueGet(!0) && e.$el.trigger("change"), -1 === c.getLastValidPosition.call(e) && e._valueGet && e._valueGet() === c.getBufferTemplate.call(e).join("") && e._valueSet(""), t.clearIncomplete && !1 === u.isComplete.call(e, c.getBuffer.call(e)) && e._valueSet(""), t.removeMaskOnSubmit && (e._valueSet(e.unmaskedvalue(), !0), setTimeout(function () {
                      (0, l.writeBuffer)(e.el, c.getBuffer.call(e));
                    }, 0));
                  },
                  resetEvent: function resetEvent() {
                    var e = this.inputmask;
                    e.refreshValue = !0, setTimeout(function () {
                      (0, l.applyInputValue)(e.el, e._valueGet(!0));
                    }, 0);
                  }
                };
            },
            9716: function _(e, t, n) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.EventRuler = void 0;
              var i,
                a = n(7760),
                r = (i = n(2394)) && i.__esModule ? i : {
                  default: i
                },
                o = n(2839),
                l = n(8711);
              t.EventRuler = {
                on: function on(e, t, n) {
                  var i = e.inputmask.dependencyLib,
                    s = function s(t) {
                      t.originalEvent && (t = t.originalEvent || t, arguments[0] = t);
                      var s,
                        c = this,
                        u = c.inputmask,
                        f = u ? u.opts : void 0;
                      if (void 0 === u && "FORM" !== this.nodeName) {
                        var p = i.data(c, "_inputmask_opts");
                        i(c).off(), p && new r.default(p).mask(c);
                      } else {
                        if (["submit", "reset", "setvalue"].includes(t.type) || "FORM" === this.nodeName || !(c.disabled || c.readOnly && !("keydown" === t.type && t.ctrlKey && t.key === o.keys.c || !1 === f.tabThrough && t.key === o.keys.Tab))) {
                          switch (t.type) {
                            case "input":
                              if (!0 === u.skipInputEvent) return u.skipInputEvent = !1, t.preventDefault();
                              break;
                            case "click":
                            case "focus":
                              return u.validationEvent ? (u.validationEvent = !1, e.blur(), (0, a.HandleNativePlaceholder)(e, (u.isRTL ? l.getBufferTemplate.call(u).slice().reverse() : l.getBufferTemplate.call(u)).join("")), setTimeout(function () {
                                e.focus();
                              }, f.validationEventTimeOut), !1) : (s = arguments, void setTimeout(function () {
                                e.inputmask && n.apply(c, s);
                              }, 0));
                          }
                          var d = n.apply(c, arguments);
                          return !1 === d && (t.preventDefault(), t.stopPropagation()), d;
                        }
                        t.preventDefault();
                      }
                    };
                  ["submit", "reset"].includes(t) ? (s = s.bind(e), null !== e.form && i(e.form).on(t, s)) : i(e).on(t, s), e.inputmask.events[t] = e.inputmask.events[t] || [], e.inputmask.events[t].push(s);
                },
                off: function off(e, t) {
                  if (e.inputmask && e.inputmask.events) {
                    var n = e.inputmask.dependencyLib,
                      i = e.inputmask.events;
                    for (var a in t && ((i = [])[t] = e.inputmask.events[t]), i) {
                      for (var r = i[a]; r.length > 0;) {
                        var o = r.pop();
                        ["submit", "reset"].includes(a) ? null !== e.form && n(e.form).off(a, o) : n(e).off(a, o);
                      }
                      delete e.inputmask.events[a];
                    }
                  }
                }
              };
            },
            219: function _(e, t, n) {
              var i = p(n(7184)),
                a = p(n(2394)),
                r = n(2839),
                o = n(8711),
                l = n(4713);
              function s(e, t) {
                return function (e) {
                  if (Array.isArray(e)) return e;
                }(e) || function (e, t) {
                  var n = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                  if (null != n) {
                    var i,
                      a,
                      r,
                      o,
                      l = [],
                      s = !0,
                      c = !1;
                    try {
                      if (r = (n = n.call(e)).next, 0 === t) ; else for (; !(s = (i = r.call(n)).done) && (l.push(i.value), l.length !== t); s = !0);
                    } catch (e) {
                      c = !0, a = e;
                    } finally {
                      try {
                        if (!s && null != n.return && (o = n.return(), Object(o) !== o)) return;
                      } finally {
                        if (c) throw a;
                      }
                    }
                    return l;
                  }
                }(e, t) || function (e, t) {
                  if (!e) return;
                  if ("string" == typeof e) return c(e, t);
                  var n = Object.prototype.toString.call(e).slice(8, -1);
                  "Object" === n && e.constructor && (n = e.constructor.name);
                  if ("Map" === n || "Set" === n) return Array.from(e);
                  if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return c(e, t);
                }(e, t) || function () {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
              }
              function c(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
                return i;
              }
              function u(e) {
                return u = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
                  return _typeof(e);
                } : function (e) {
                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
                }, u(e);
              }
              function f(e, t) {
                for (var n = 0; n < t.length; n++) {
                  var i = t[n];
                  i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, (a = i.key, r = void 0, r = function (e, t) {
                    if ("object" !== u(e) || null === e) return e;
                    var n = e[Symbol.toPrimitive];
                    if (void 0 !== n) {
                      var i = n.call(e, t || "default");
                      if ("object" !== u(i)) return i;
                      throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === t ? String : Number)(e);
                  }(a, "string"), "symbol" === u(r) ? r : String(r)), i);
                }
                var a, r;
              }
              function p(e) {
                return e && e.__esModule ? e : {
                  default: e
                };
              }
              n(1313);
              var d = a.default.dependencyLib,
                h = function () {
                  function e(t, n, i, a) {
                    !function (e, t) {
                      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                    }(this, e), this.mask = t, this.format = n, this.opts = i, this.inputmask = a, this._date = new Date(1, 0, 1), this.initDateObject(t, this.opts, this.inputmask);
                  }
                  var t, n;
                  return t = e, (n = [{
                    key: "date",
                    get: function get() {
                      return void 0 === this._date && (this._date = new Date(1, 0, 1), this.initDateObject(void 0, this.opts, this.inputmask)), this._date;
                    }
                  }, {
                    key: "initDateObject",
                    value: function value(e, t, n) {
                      var i;
                      for (P(t).lastIndex = 0; i = P(t).exec(this.format);) {
                        var a = /\d+$/.exec(i[0]),
                          r = a ? i[0][0] + "x" : i[0],
                          o = void 0;
                        if (void 0 !== e) {
                          if (a) {
                            var s = P(t).lastIndex,
                              c = j.call(n, i.index, t, n && n.maskset);
                            P(t).lastIndex = s, o = e.slice(0, e.indexOf(c.nextMatch[0]));
                          } else {
                            for (var u = i[0][0], f = i.index; n && (t.placeholder[l.getTest.call(n, f).match.placeholder] || l.getTest.call(n, f).match.placeholder) === u;) f++;
                            var p = f - i.index;
                            o = e.slice(0, p || y[r] && y[r][4] || r.length);
                          }
                          e = e.slice(o.length);
                        }
                        Object.prototype.hasOwnProperty.call(y, r) && this.setValue(this, o, r, y[r][2], y[r][1]);
                      }
                    }
                  }, {
                    key: "setValue",
                    value: function value(e, t, n, i, a) {
                      if (void 0 !== t) switch (i) {
                        case "ampm":
                          e[i] = t, e["raw" + i] = t.replace(/\s/g, "_");
                          break;
                        case "month":
                          if ("mmm" === n || "mmmm" === n) {
                            e[i] = _("mmm" === n ? m.monthNames.slice(0, 12).findIndex(function (e) {
                              return t.toLowerCase() === e.toLowerCase();
                            }) + 1 : m.monthNames.slice(12, 24).findIndex(function (e) {
                              return t.toLowerCase() === e.toLowerCase();
                            }) + 1, 2), e[i] = "00" === e[i] ? "" : e[i].toString(), e["raw" + i] = e[i];
                            break;
                          }
                        default:
                          e[i] = t.replace(/[^0-9]/g, "0"), e["raw" + i] = t.replace(/\s/g, "_");
                      }
                      if (void 0 !== a) {
                        var r = e[i];
                        ("day" === i && 29 === parseInt(r) || "month" === i && 2 === parseInt(r)) && (29 !== parseInt(e.day) || 2 !== parseInt(e.month) || "" !== e.year && void 0 !== e.year || e._date.setFullYear(2012, 1, 29)), "day" === i && (g = !0, 0 === parseInt(r) && (r = 1)), "month" === i && (g = !0), "year" === i && (g = !0, r.length < y[n][4] && (r = _(r, y[n][4], !0))), ("" !== r && !isNaN(r) || "ampm" === i) && a.call(e._date, r);
                      }
                    }
                  }, {
                    key: "reset",
                    value: function value() {
                      this._date = new Date(1, 0, 1);
                    }
                  }, {
                    key: "reInit",
                    value: function value() {
                      this._date = void 0, this.date;
                    }
                  }]) && f(t.prototype, n), Object.defineProperty(t, "prototype", {
                    writable: !1
                  }), e;
                }(),
                v = new Date().getFullYear(),
                m = a.default.prototype.i18n,
                g = !1,
                y = {
                  d: ["[1-9]|[12][0-9]|3[01]", Date.prototype.setDate, "day", Date.prototype.getDate],
                  dd: ["0[1-9]|[12][0-9]|3[01]", Date.prototype.setDate, "day", function () {
                    return _(Date.prototype.getDate.call(this), 2);
                  }],
                  ddd: [""],
                  dddd: [""],
                  m: ["[1-9]|1[012]", function (e) {
                    var t = e ? parseInt(e) : 0;
                    return t > 0 && t--, Date.prototype.setMonth.call(this, t);
                  }, "month", function () {
                    return Date.prototype.getMonth.call(this) + 1;
                  }],
                  mm: ["0[1-9]|1[012]", function (e) {
                    var t = e ? parseInt(e) : 0;
                    return t > 0 && t--, Date.prototype.setMonth.call(this, t);
                  }, "month", function () {
                    return _(Date.prototype.getMonth.call(this) + 1, 2);
                  }],
                  mmm: [m.monthNames.slice(0, 12).join("|"), function (e) {
                    var t = m.monthNames.slice(0, 12).findIndex(function (t) {
                      return e.toLowerCase() === t.toLowerCase();
                    });
                    return -1 !== t && Date.prototype.setMonth.call(this, t);
                  }, "month", function () {
                    return m.monthNames.slice(0, 12)[Date.prototype.getMonth.call(this)];
                  }],
                  mmmm: [m.monthNames.slice(12, 24).join("|"), function (e) {
                    var t = m.monthNames.slice(12, 24).findIndex(function (t) {
                      return e.toLowerCase() === t.toLowerCase();
                    });
                    return -1 !== t && Date.prototype.setMonth.call(this, t);
                  }, "month", function () {
                    return m.monthNames.slice(12, 24)[Date.prototype.getMonth.call(this)];
                  }],
                  yy: ["[0-9]{2}", function (e) {
                    var t = new Date().getFullYear().toString().slice(0, 2);
                    Date.prototype.setFullYear.call(this, "".concat(t).concat(e));
                  }, "year", function () {
                    return _(Date.prototype.getFullYear.call(this), 2);
                  }, 2],
                  yyyy: ["[0-9]{4}", Date.prototype.setFullYear, "year", function () {
                    return _(Date.prototype.getFullYear.call(this), 4);
                  }, 4],
                  h: ["[1-9]|1[0-2]", Date.prototype.setHours, "hours", Date.prototype.getHours],
                  hh: ["0[1-9]|1[0-2]", Date.prototype.setHours, "hours", function () {
                    return _(Date.prototype.getHours.call(this), 2);
                  }],
                  hx: [function (e) {
                    return "[0-9]{".concat(e, "}");
                  }, Date.prototype.setHours, "hours", function (e) {
                    return Date.prototype.getHours;
                  }],
                  H: ["1?[0-9]|2[0-3]", Date.prototype.setHours, "hours", Date.prototype.getHours],
                  HH: ["0[0-9]|1[0-9]|2[0-3]", Date.prototype.setHours, "hours", function () {
                    return _(Date.prototype.getHours.call(this), 2);
                  }],
                  Hx: [function (e) {
                    return "[0-9]{".concat(e, "}");
                  }, Date.prototype.setHours, "hours", function (e) {
                    return function () {
                      return _(Date.prototype.getHours.call(this), e);
                    };
                  }],
                  M: ["[1-5]?[0-9]", Date.prototype.setMinutes, "minutes", Date.prototype.getMinutes],
                  MM: ["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]", Date.prototype.setMinutes, "minutes", function () {
                    return _(Date.prototype.getMinutes.call(this), 2);
                  }],
                  s: ["[1-5]?[0-9]", Date.prototype.setSeconds, "seconds", Date.prototype.getSeconds],
                  ss: ["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]", Date.prototype.setSeconds, "seconds", function () {
                    return _(Date.prototype.getSeconds.call(this), 2);
                  }],
                  l: ["[0-9]{3}", Date.prototype.setMilliseconds, "milliseconds", function () {
                    return _(Date.prototype.getMilliseconds.call(this), 3);
                  }, 3],
                  L: ["[0-9]{2}", Date.prototype.setMilliseconds, "milliseconds", function () {
                    return _(Date.prototype.getMilliseconds.call(this), 2);
                  }, 2],
                  t: ["[ap]", b, "ampm", x, 1],
                  tt: ["[ap]m", b, "ampm", x, 2],
                  T: ["[AP]", b, "ampm", x, 1],
                  TT: ["[AP]M", b, "ampm", x, 2],
                  Z: [".*", void 0, "Z", function () {
                    var e = this.toString().match(/\((.+)\)/)[1];
                    e.includes(" ") && (e = (e = e.replace("-", " ").toUpperCase()).split(" ").map(function (e) {
                      return s(e, 1)[0];
                    }).join(""));
                    return e;
                  }],
                  o: [""],
                  S: [""]
                },
                k = {
                  isoDate: "yyyy-mm-dd",
                  isoTime: "HH:MM:ss",
                  isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
                  isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
                };
              function b(e) {
                var t = this.getHours();
                e.toLowerCase().includes("p") ? this.setHours(t + 12) : e.toLowerCase().includes("a") && t >= 12 && this.setHours(t - 12);
              }
              function x() {
                var e = this.getHours();
                return (e = e || 12) >= 12 ? "PM" : "AM";
              }
              function w(e) {
                var t = /\d+$/.exec(e[0]);
                if (t && void 0 !== t[0]) {
                  var n = y[e[0][0] + "x"].slice("");
                  return n[0] = n[0](t[0]), n[3] = n[3](t[0]), n;
                }
                if (y[e[0]]) return y[e[0]];
              }
              function P(e) {
                if (!e.tokenizer) {
                  var t = [],
                    n = [];
                  for (var i in y) if (/\.*x$/.test(i)) {
                    var a = i[0] + "\\d+";
                    -1 === n.indexOf(a) && n.push(a);
                  } else -1 === t.indexOf(i[0]) && t.push(i[0]);
                  e.tokenizer = "(" + (n.length > 0 ? n.join("|") + "|" : "") + t.join("+|") + ")+?|.", e.tokenizer = new RegExp(e.tokenizer, "g");
                }
                return e.tokenizer;
              }
              function S(e, t, n) {
                if (!g) return !0;
                if (void 0 === e.rawday || !isFinite(e.rawday) && new Date(e.date.getFullYear(), isFinite(e.rawmonth) ? e.month : e.date.getMonth() + 1, 0).getDate() >= e.day || "29" == e.day && (!isFinite(e.rawyear) || void 0 === e.rawyear || "" === e.rawyear) || new Date(e.date.getFullYear(), isFinite(e.rawmonth) ? e.month : e.date.getMonth() + 1, 0).getDate() >= e.day) return t;
                if ("29" == e.day) {
                  var i = j.call(this, t.pos, n, this.maskset);
                  if (i.targetMatch && "yyyy" === i.targetMatch[0] && t.pos - i.targetMatchIndex == 2) return t.remove = t.pos + 1, t;
                } else if (2 == e.date.getMonth() && "30" == e.day && void 0 !== t.c) return e.day = "03", e.date.setDate(3), e.date.setMonth(1), t.insert = [{
                  pos: t.pos,
                  c: "0"
                }, {
                  pos: t.pos + 1,
                  c: t.c
                }], t.caret = o.seekNext.call(this, t.pos + 1), t;
                return !1;
              }
              function O(e, t, n, a) {
                var r,
                  o,
                  l = "",
                  s = 0,
                  c = {};
                for (P(n).lastIndex = 0; r = P(n).exec(e);) {
                  if (void 0 === t) {
                    if (o = w(r)) l += "(" + o[0] + ")", n.placeholder && "" !== n.placeholder ? (c[s] = n.placeholder[r.index % n.placeholder.length], c[n.placeholder[r.index % n.placeholder.length]] = r[0].charAt(0)) : c[s] = r[0].charAt(0);else switch (r[0]) {
                      case "[":
                        l += "(";
                        break;
                      case "]":
                        l += ")?";
                        break;
                      default:
                        l += (0, i.default)(r[0]), c[s] = r[0].charAt(0);
                    }
                  } else if (o = w(r)) {
                    if (!0 !== a && o[3]) l += o[3].call(t.date);else o[2] ? l += t["raw" + o[2]] : l += r[0];
                  } else l += r[0];
                  s++;
                }
                return void 0 === t && (n.placeholder = c), l;
              }
              function _(e, t, n) {
                for (e = String(e), t = t || 2; e.length < t;) e = n ? e + "0" : "0" + e;
                return e;
              }
              function M(e, t, n) {
                return "string" == typeof e ? new h(e, t, n, this) : e && "object" === u(e) && Object.prototype.hasOwnProperty.call(e, "date") ? e : void 0;
              }
              function E(e, t) {
                return O(t.inputFormat, {
                  date: e
                }, t);
              }
              function j(e, t, n) {
                var i,
                  a,
                  r = this,
                  o = n && n.tests[e] ? t.placeholder[n.tests[e][0].match.placeholder] || n.tests[e][0].match.placeholder : "",
                  s = 0,
                  c = 0;
                for (P(t).lastIndex = 0; a = P(t).exec(t.inputFormat);) {
                  var u = /\d+$/.exec(a[0]);
                  if (u) c = parseInt(u[0]);else {
                    for (var f = a[0][0], p = s; r && (t.placeholder[l.getTest.call(r, p).match.placeholder] || l.getTest.call(r, p).match.placeholder) === f;) p++;
                    0 === (c = p - s) && (c = a[0].length);
                  }
                  if (s += c, -1 != a[0].indexOf(o) || s >= e + 1) {
                    i = a, a = P(t).exec(t.inputFormat);
                    break;
                  }
                }
                return {
                  targetMatchIndex: s - c,
                  nextMatch: a,
                  targetMatch: i
                };
              }
              a.default.extendAliases({
                datetime: {
                  mask: function mask(e) {
                    return e.numericInput = !1, y.S = m.ordinalSuffix.join("|"), e.inputFormat = k[e.inputFormat] || e.inputFormat, e.displayFormat = k[e.displayFormat] || e.displayFormat || e.inputFormat, e.outputFormat = k[e.outputFormat] || e.outputFormat || e.inputFormat, e.regex = O(e.inputFormat, void 0, e), e.min = M(e.min, e.inputFormat, e), e.max = M(e.max, e.inputFormat, e), null;
                  },
                  placeholder: "",
                  inputFormat: "isoDateTime",
                  displayFormat: null,
                  outputFormat: null,
                  min: null,
                  max: null,
                  skipOptionalPartCharacter: "",
                  preValidation: function preValidation(e, t, n, i, a, r, o, l) {
                    if (l) return !0;
                    if (isNaN(n) && e[t] !== n) {
                      var s = j.call(this, t, a, r);
                      if (s.nextMatch && s.nextMatch[0] === n && s.targetMatch[0].length > 1) {
                        var c = w(s.targetMatch)[0];
                        if (new RegExp(c).test("0" + e[t - 1])) return e[t] = e[t - 1], e[t - 1] = "0", {
                          fuzzy: !0,
                          buffer: e,
                          refreshFromBuffer: {
                            start: t - 1,
                            end: t + 1
                          },
                          pos: t + 1
                        };
                      }
                    }
                    return !0;
                  },
                  postValidation: function postValidation(e, t, n, i, a, r, o, s) {
                    var c,
                      u,
                      f = this;
                    if (o) return !0;
                    if (!1 === i && (((c = j.call(f, t + 1, a, r)).targetMatch && c.targetMatchIndex === t && c.targetMatch[0].length > 1 && void 0 !== y[c.targetMatch[0]] || (c = j.call(f, t + 2, a, r)).targetMatch && c.targetMatchIndex === t + 1 && c.targetMatch[0].length > 1 && void 0 !== y[c.targetMatch[0]]) && (u = w(c.targetMatch)[0]), void 0 !== u && (void 0 !== r.validPositions[t + 1] && new RegExp(u).test(n + "0") ? (e[t] = n, e[t + 1] = "0", i = {
                      pos: t + 2,
                      caret: t
                    }) : new RegExp(u).test("0" + n) && (e[t] = "0", e[t + 1] = n, i = {
                      pos: t + 2
                    })), !1 === i)) return i;
                    if (i.fuzzy && (e = i.buffer, t = i.pos), (c = j.call(f, t, a, r)).targetMatch && c.targetMatch[0] && void 0 !== y[c.targetMatch[0]]) {
                      var p = w(c.targetMatch);
                      u = p[0];
                      var d = e.slice(c.targetMatchIndex, c.targetMatchIndex + c.targetMatch[0].length);
                      if (!1 === new RegExp(u).test(d.join("")) && 2 === c.targetMatch[0].length && r.validPositions[c.targetMatchIndex] && r.validPositions[c.targetMatchIndex + 1] && (r.validPositions[c.targetMatchIndex + 1].input = "0"), "year" == p[2]) for (var h = l.getMaskTemplate.call(f, !1, 1, void 0, !0), m = t + 1; m < e.length; m++) e[m] = h[m], r.validPositions.splice(t + 1, 1);
                    }
                    var g = i,
                      k = M.call(f, e.join(""), a.inputFormat, a);
                    return g && !isNaN(k.date.getTime()) && (a.prefillYear && (g = function (e, t, n) {
                      if (e.year !== e.rawyear) {
                        var i = v.toString(),
                          a = e.rawyear.replace(/[^0-9]/g, ""),
                          r = i.slice(0, a.length),
                          o = i.slice(a.length);
                        if (2 === a.length && a === r) {
                          var l = new Date(v, e.month - 1, e.day);
                          e.day == l.getDate() && (!n.max || n.max.date.getTime() >= l.getTime()) && (e.date.setFullYear(v), e.year = i, t.insert = [{
                            pos: t.pos + 1,
                            c: o[0]
                          }, {
                            pos: t.pos + 2,
                            c: o[1]
                          }]);
                        }
                      }
                      return t;
                    }(k, g, a)), g = function (e, t, n, i, a) {
                      if (!t) return t;
                      if (t && n.min && !isNaN(n.min.date.getTime())) {
                        var r;
                        for (e.reset(), P(n).lastIndex = 0; r = P(n).exec(n.inputFormat);) {
                          var o;
                          if ((o = w(r)) && o[3]) {
                            for (var l = o[1], s = e[o[2]], c = n.min[o[2]], u = n.max ? n.max[o[2]] : c + 1, f = [], p = !1, d = 0; d < c.length; d++) void 0 !== i.validPositions[d + r.index] || p ? (f[d] = s[d], p = p || s[d] > c[d]) : (d + r.index == 0 && s[d] < c[d] ? (f[d] = s[d], p = !0) : f[d] = c[d], "year" === o[2] && s.length - 1 == d && c != u && (f = (parseInt(f.join("")) + 1).toString().split("")), "ampm" === o[2] && c != u && n.min.date.getTime() > e.date.getTime() && (f[d] = u[d]));
                            l.call(e._date, f.join(""));
                          }
                        }
                        t = n.min.date.getTime() <= e.date.getTime(), e.reInit();
                      }
                      return t && n.max && (isNaN(n.max.date.getTime()) || (t = n.max.date.getTime() >= e.date.getTime())), t;
                    }(k, g = S.call(f, k, g, a), a, r)), void 0 !== t && g && i.pos !== t ? {
                      buffer: O(a.inputFormat, k, a).split(""),
                      refreshFromBuffer: {
                        start: t,
                        end: i.pos
                      },
                      pos: i.caret || i.pos
                    } : g;
                  },
                  onKeyDown: function onKeyDown(e, t, n, i) {
                    e.ctrlKey && e.key === r.keys.ArrowRight && (this.inputmask._valueSet(E(new Date(), i)), d(this).trigger("setvalue"));
                  },
                  onUnMask: function onUnMask(e, t, n) {
                    return t ? O(n.outputFormat, M.call(this, e, n.inputFormat, n), n, !0) : t;
                  },
                  casing: function casing(e, t, n, i) {
                    if (0 == t.nativeDef.indexOf("[ap]")) return e.toLowerCase();
                    if (0 == t.nativeDef.indexOf("[AP]")) return e.toUpperCase();
                    var a = l.getTest.call(this, [n - 1]);
                    return 0 == a.match.def.indexOf("[AP]") || 0 === n || a && a.input === String.fromCharCode(r.keyCode.Space) || a && a.match.def === String.fromCharCode(r.keyCode.Space) ? e.toUpperCase() : e.toLowerCase();
                  },
                  onBeforeMask: function onBeforeMask(e, t) {
                    return "[object Date]" === Object.prototype.toString.call(e) && (e = E(e, t)), e;
                  },
                  insertMode: !1,
                  insertModeVisual: !1,
                  shiftPositions: !1,
                  keepStatic: !1,
                  inputmode: "numeric",
                  prefillYear: !0
                }
              });
            },
            1313: function _(e, t, n) {
              var i,
                a = (i = n(2394)) && i.__esModule ? i : {
                  default: i
                };
              a.default.dependencyLib.extend(!0, a.default.prototype.i18n, {
                dayNames: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
                monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                ordinalSuffix: ["st", "nd", "rd", "th"]
              });
            },
            3851: function _(e, t, n) {
              var i,
                a = (i = n(2394)) && i.__esModule ? i : {
                  default: i
                },
                r = n(8711),
                o = n(4713);
              function l(e) {
                return function (e) {
                  if (Array.isArray(e)) return s(e);
                }(e) || function (e) {
                  if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e);
                }(e) || function (e, t) {
                  if (!e) return;
                  if ("string" == typeof e) return s(e, t);
                  var n = Object.prototype.toString.call(e).slice(8, -1);
                  "Object" === n && e.constructor && (n = e.constructor.name);
                  if ("Map" === n || "Set" === n) return Array.from(e);
                  if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return s(e, t);
                }(e) || function () {
                  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
              }
              function s(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
                return i;
              }
              a.default.extendDefinitions({
                A: {
                  validator: "[A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]",
                  casing: "upper"
                },
                "&": {
                  validator: "[0-9A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]",
                  casing: "upper"
                },
                "#": {
                  validator: "[0-9A-Fa-f]",
                  casing: "upper"
                }
              });
              var c = /25[0-5]|2[0-4][0-9]|[01][0-9][0-9]/;
              function u(e, t, n, i, a) {
                if (n - 1 > -1 && "." !== t.buffer[n - 1] ? (e = t.buffer[n - 1] + e, e = n - 2 > -1 && "." !== t.buffer[n - 2] ? t.buffer[n - 2] + e : "0" + e) : e = "00" + e, a.greedy && parseInt(e) > 255 && c.test("00" + e.charAt(2))) {
                  var r = [].concat(l(t.buffer.slice(0, n)), [".", e.charAt(2)]);
                  if (r.join("").match(/\./g).length < 4) return {
                    refreshFromBuffer: !0,
                    buffer: r,
                    caret: n + 2
                  };
                }
                return c.test(e);
              }
              a.default.extendAliases({
                cssunit: {
                  regex: "[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"
                },
                url: {
                  regex: "(https?|ftp)://.*",
                  autoUnmask: !1,
                  keepStatic: !1,
                  tabThrough: !0
                },
                ip: {
                  mask: "i{1,3}.j{1,3}.k{1,3}.l{1,3}",
                  definitions: {
                    i: {
                      validator: u
                    },
                    j: {
                      validator: u
                    },
                    k: {
                      validator: u
                    },
                    l: {
                      validator: u
                    }
                  },
                  onUnMask: function onUnMask(e, t, n) {
                    return e;
                  },
                  inputmode: "decimal",
                  substitutes: {
                    ",": "."
                  }
                },
                email: {
                  mask: function mask(e) {
                    var t = e.separator,
                      n = e.quantifier,
                      i = "*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",
                      a = i;
                    if (t) for (var r = 0; r < n; r++) a += "[".concat(t).concat(i, "]");
                    return a;
                  },
                  greedy: !1,
                  casing: "lower",
                  separator: null,
                  quantifier: 5,
                  skipOptionalPartCharacter: "",
                  onBeforePaste: function onBeforePaste(e, t) {
                    return (e = e.toLowerCase()).replace("mailto:", "");
                  },
                  definitions: {
                    "*": {
                      validator: "[0-9\uFF11-\uFF19A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5!#$%&'*+/=?^_`{|}~-]"
                    },
                    "-": {
                      validator: "[0-9A-Za-z-]"
                    }
                  },
                  onUnMask: function onUnMask(e, t, n) {
                    return e;
                  },
                  inputmode: "email"
                },
                mac: {
                  mask: "##:##:##:##:##:##"
                },
                vin: {
                  mask: "V{13}9{4}",
                  definitions: {
                    V: {
                      validator: "[A-HJ-NPR-Za-hj-npr-z\\d]",
                      casing: "upper"
                    }
                  },
                  clearIncomplete: !0,
                  autoUnmask: !0
                },
                ssn: {
                  mask: "999-99-9999",
                  postValidation: function postValidation(e, t, n, i, a, l, s) {
                    var c = o.getMaskTemplate.call(this, !0, r.getLastValidPosition.call(this), !0, !0);
                    return /^(?!219-09-9999|078-05-1120)(?!666|000|9.{2}).{3}-(?!00).{2}-(?!0{4}).{4}$/.test(c.join(""));
                  }
                }
              });
            },
            207: function _(e, t, n) {
              var i = l(n(7184)),
                a = l(n(2394)),
                r = n(2839),
                o = n(8711);
              function l(e) {
                return e && e.__esModule ? e : {
                  default: e
                };
              }
              var s = a.default.dependencyLib;
              function c(e, t) {
                for (var n = "", i = 0; i < e.length; i++) a.default.prototype.definitions[e.charAt(i)] || t.definitions[e.charAt(i)] || t.optionalmarker[0] === e.charAt(i) || t.optionalmarker[1] === e.charAt(i) || t.quantifiermarker[0] === e.charAt(i) || t.quantifiermarker[1] === e.charAt(i) || t.groupmarker[0] === e.charAt(i) || t.groupmarker[1] === e.charAt(i) || t.alternatormarker === e.charAt(i) ? n += "\\" + e.charAt(i) : n += e.charAt(i);
                return n;
              }
              function u(e, t, n, i) {
                if (e.length > 0 && t > 0 && (!n.digitsOptional || i)) {
                  var a = e.indexOf(n.radixPoint),
                    r = !1;
                  n.negationSymbol.back === e[e.length - 1] && (r = !0, e.length--), -1 === a && (e.push(n.radixPoint), a = e.length - 1);
                  for (var o = 1; o <= t; o++) isFinite(e[a + o]) || (e[a + o] = "0");
                }
                return r && e.push(n.negationSymbol.back), e;
              }
              function f(e, t) {
                var n = 0;
                for (var i in "+" === e && (n = o.seekNext.call(this, t.validPositions.length - 1)), t.tests) if ((i = parseInt(i)) >= n) for (var a = 0, r = t.tests[i].length; a < r; a++) if ((void 0 === t.validPositions[i] || "-" === e) && t.tests[i][a].match.def === e) return i + (void 0 !== t.validPositions[i] && "-" !== e ? 1 : 0);
                return n;
              }
              function p(e, t) {
                for (var n = -1, i = 0, a = t.validPositions.length; i < a; i++) {
                  var r = t.validPositions[i];
                  if (r && r.match.def === e) {
                    n = i;
                    break;
                  }
                }
                return n;
              }
              function d(e, t, n, i, a) {
                var r = t.buffer ? t.buffer.indexOf(a.radixPoint) : -1,
                  o = (-1 !== r || i && a.jitMasking) && new RegExp(a.definitions[9].validator).test(e);
                return !i && a._radixDance && -1 !== r && o && null == t.validPositions[r] ? {
                  insert: {
                    pos: r === n ? r + 1 : r,
                    c: a.radixPoint
                  },
                  pos: n
                } : o;
              }
              a.default.extendAliases({
                numeric: {
                  mask: function mask(e) {
                    e.repeat = 0, e.groupSeparator === e.radixPoint && e.digits && "0" !== e.digits && ("." === e.radixPoint ? e.groupSeparator = "," : "," === e.radixPoint ? e.groupSeparator = "." : e.groupSeparator = ""), " " === e.groupSeparator && (e.skipOptionalPartCharacter = void 0), e.placeholder.length > 1 && (e.placeholder = e.placeholder.charAt(0)), "radixFocus" === e.positionCaretOnClick && "" === e.placeholder && (e.positionCaretOnClick = "lvp");
                    var t = "0",
                      n = e.radixPoint;
                    !0 === e.numericInput && void 0 === e.__financeInput ? (t = "1", e.positionCaretOnClick = "radixFocus" === e.positionCaretOnClick ? "lvp" : e.positionCaretOnClick, e.digitsOptional = !1, isNaN(e.digits) && (e.digits = 2), e._radixDance = !1, n = "," === e.radixPoint ? "?" : "!", "" !== e.radixPoint && void 0 === e.definitions[n] && (e.definitions[n] = {}, e.definitions[n].validator = "[" + e.radixPoint + "]", e.definitions[n].placeholder = e.radixPoint, e.definitions[n].static = !0, e.definitions[n].generated = !0)) : (e.__financeInput = !1, e.numericInput = !0);
                    var a,
                      r = "[+]";
                    if (r += c(e.prefix, e), "" !== e.groupSeparator ? (void 0 === e.definitions[e.groupSeparator] && (e.definitions[e.groupSeparator] = {}, e.definitions[e.groupSeparator].validator = "[" + e.groupSeparator + "]", e.definitions[e.groupSeparator].placeholder = e.groupSeparator, e.definitions[e.groupSeparator].static = !0, e.definitions[e.groupSeparator].generated = !0), r += e._mask(e)) : r += "9{+}", void 0 !== e.digits && 0 !== e.digits) {
                      var o = e.digits.toString().split(",");
                      isFinite(o[0]) && o[1] && isFinite(o[1]) ? r += n + t + "{" + e.digits + "}" : (isNaN(e.digits) || parseInt(e.digits) > 0) && (e.digitsOptional || e.jitMasking ? (a = r + n + t + "{0," + e.digits + "}", e.keepStatic = !0) : r += n + t + "{" + e.digits + "}");
                    } else e.inputmode = "numeric";
                    return r += c(e.suffix, e), r += "[-]", a && (r = [a + c(e.suffix, e) + "[-]", r]), e.greedy = !1, function (e) {
                      void 0 === e.parseMinMaxOptions && (null !== e.min && (e.min = e.min.toString().replace(new RegExp((0, i.default)(e.groupSeparator), "g"), ""), "," === e.radixPoint && (e.min = e.min.replace(e.radixPoint, ".")), e.min = isFinite(e.min) ? parseFloat(e.min) : NaN, isNaN(e.min) && (e.min = Number.MIN_VALUE)), null !== e.max && (e.max = e.max.toString().replace(new RegExp((0, i.default)(e.groupSeparator), "g"), ""), "," === e.radixPoint && (e.max = e.max.replace(e.radixPoint, ".")), e.max = isFinite(e.max) ? parseFloat(e.max) : NaN, isNaN(e.max) && (e.max = Number.MAX_VALUE)), e.parseMinMaxOptions = "done");
                    }(e), "" !== e.radixPoint && e.substituteRadixPoint && (e.substitutes["." == e.radixPoint ? "," : "."] = e.radixPoint), r;
                  },
                  _mask: function _mask(e) {
                    return "(" + e.groupSeparator + "999){+|1}";
                  },
                  digits: "*",
                  digitsOptional: !0,
                  enforceDigitsOnBlur: !1,
                  radixPoint: ".",
                  positionCaretOnClick: "radixFocus",
                  _radixDance: !0,
                  groupSeparator: "",
                  allowMinus: !0,
                  negationSymbol: {
                    front: "-",
                    back: ""
                  },
                  prefix: "",
                  suffix: "",
                  min: null,
                  max: null,
                  SetMaxOnOverflow: !1,
                  step: 1,
                  inputType: "text",
                  unmaskAsNumber: !1,
                  roundingFN: Math.round,
                  inputmode: "decimal",
                  shortcuts: {
                    k: "1000",
                    m: "1000000"
                  },
                  placeholder: "0",
                  greedy: !1,
                  rightAlign: !0,
                  insertMode: !0,
                  autoUnmask: !1,
                  skipOptionalPartCharacter: "",
                  usePrototypeDefinitions: !1,
                  stripLeadingZeroes: !0,
                  substituteRadixPoint: !0,
                  definitions: {
                    0: {
                      validator: d
                    },
                    1: {
                      validator: d,
                      definitionSymbol: "9"
                    },
                    9: {
                      validator: "[0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9]",
                      definitionSymbol: "*"
                    },
                    "+": {
                      validator: function validator(e, t, n, i, a) {
                        return a.allowMinus && ("-" === e || e === a.negationSymbol.front);
                      }
                    },
                    "-": {
                      validator: function validator(e, t, n, i, a) {
                        return a.allowMinus && e === a.negationSymbol.back;
                      }
                    }
                  },
                  preValidation: function preValidation(e, t, n, i, a, r, o, l) {
                    var s = this;
                    if (!1 !== a.__financeInput && n === a.radixPoint) return !1;
                    var c = e.indexOf(a.radixPoint),
                      u = t;
                    if (t = function (e, t, n, i, a) {
                      return a._radixDance && a.numericInput && t !== a.negationSymbol.back && e <= n && (n > 0 || t == a.radixPoint) && (void 0 === i.validPositions[e - 1] || i.validPositions[e - 1].input !== a.negationSymbol.back) && (e -= 1), e;
                    }(t, n, c, r, a), "-" === n || n === a.negationSymbol.front) {
                      if (!0 !== a.allowMinus) return !1;
                      var d = !1,
                        h = p("+", r),
                        v = p("-", r);
                      return -1 !== h && (d = [h], -1 !== v && d.push(v)), !1 !== d ? {
                        remove: d,
                        caret: u - a.negationSymbol.back.length
                      } : {
                        insert: [{
                          pos: f.call(s, "+", r),
                          c: a.negationSymbol.front,
                          fromIsValid: !0
                        }, {
                          pos: f.call(s, "-", r),
                          c: a.negationSymbol.back,
                          fromIsValid: void 0
                        }],
                        caret: u + a.negationSymbol.back.length
                      };
                    }
                    if (n === a.groupSeparator) return {
                      caret: u
                    };
                    if (l) return !0;
                    if (-1 !== c && !0 === a._radixDance && !1 === i && n === a.radixPoint && void 0 !== a.digits && (isNaN(a.digits) || parseInt(a.digits) > 0) && c !== t) {
                      var m = f.call(s, a.radixPoint, r);
                      return r.validPositions[m] && (r.validPositions[m].generatedInput = r.validPositions[m].generated || !1), {
                        caret: a._radixDance && t === c - 1 ? c + 1 : c
                      };
                    }
                    if (!1 === a.__financeInput) if (i) {
                      if (a.digitsOptional) return {
                        rewritePosition: o.end
                      };
                      if (!a.digitsOptional) {
                        if (o.begin > c && o.end <= c) return n === a.radixPoint ? {
                          insert: {
                            pos: c + 1,
                            c: "0",
                            fromIsValid: !0
                          },
                          rewritePosition: c
                        } : {
                          rewritePosition: c + 1
                        };
                        if (o.begin < c) return {
                          rewritePosition: o.begin - 1
                        };
                      }
                    } else if (!a.showMaskOnHover && !a.showMaskOnFocus && !a.digitsOptional && a.digits > 0 && "" === this.__valueGet.call(this.el)) return {
                      rewritePosition: c
                    };
                    return {
                      rewritePosition: t
                    };
                  },
                  postValidation: function postValidation(e, t, n, i, a, r, o) {
                    if (!1 === i) return i;
                    if (o) return !0;
                    if (null !== a.min || null !== a.max) {
                      var l = a.onUnMask(e.slice().reverse().join(""), void 0, s.extend({}, a, {
                        unmaskAsNumber: !0
                      }));
                      if (null !== a.min && l < a.min && (l.toString().length > a.min.toString().length || l < 0)) return !1;
                      if (null !== a.max && l > a.max) return !!a.SetMaxOnOverflow && {
                        refreshFromBuffer: !0,
                        buffer: u(a.max.toString().replace(".", a.radixPoint).split(""), a.digits, a).reverse()
                      };
                    }
                    return i;
                  },
                  onUnMask: function onUnMask(e, t, n) {
                    if ("" === t && !0 === n.nullable) return t;
                    var a = e.replace(n.prefix, "");
                    return a = (a = a.replace(n.suffix, "")).replace(new RegExp((0, i.default)(n.groupSeparator), "g"), ""), "" !== n.placeholder.charAt(0) && (a = a.replace(new RegExp(n.placeholder.charAt(0), "g"), "0")), n.unmaskAsNumber ? ("" !== n.radixPoint && -1 !== a.indexOf(n.radixPoint) && (a = a.replace(i.default.call(this, n.radixPoint), ".")), a = (a = a.replace(new RegExp("^" + (0, i.default)(n.negationSymbol.front)), "-")).replace(new RegExp((0, i.default)(n.negationSymbol.back) + "$"), ""), Number(a)) : a;
                  },
                  isComplete: function isComplete(e, t) {
                    var n = (t.numericInput ? e.slice().reverse() : e).join("");
                    return n = (n = (n = (n = (n = n.replace(new RegExp("^" + (0, i.default)(t.negationSymbol.front)), "-")).replace(new RegExp((0, i.default)(t.negationSymbol.back) + "$"), "")).replace(t.prefix, "")).replace(t.suffix, "")).replace(new RegExp((0, i.default)(t.groupSeparator) + "([0-9]{3})", "g"), "$1"), "," === t.radixPoint && (n = n.replace((0, i.default)(t.radixPoint), ".")), isFinite(n);
                  },
                  onBeforeMask: function onBeforeMask(e, t) {
                    var n;
                    e = null !== (n = e) && void 0 !== n ? n : "";
                    var a = t.radixPoint || ",";
                    isFinite(t.digits) && (t.digits = parseInt(t.digits)), "number" != typeof e && "number" !== t.inputType || "" === a || (e = e.toString().replace(".", a));
                    var r = "-" === e.charAt(0) || e.charAt(0) === t.negationSymbol.front,
                      o = e.split(a),
                      l = o[0].replace(/[^\-0-9]/g, ""),
                      s = o.length > 1 ? o[1].replace(/[^0-9]/g, "") : "",
                      c = o.length > 1;
                    e = l + ("" !== s ? a + s : s);
                    var f = 0;
                    if ("" !== a && (f = t.digitsOptional ? t.digits < s.length ? t.digits : s.length : t.digits, "" !== s || !t.digitsOptional)) {
                      var p = Math.pow(10, f || 1);
                      e = e.replace((0, i.default)(a), "."), isNaN(parseFloat(e)) || (e = (t.roundingFN(parseFloat(e) * p) / p).toFixed(f)), e = e.toString().replace(".", a);
                    }
                    if (0 === t.digits && -1 !== e.indexOf(a) && (e = e.substring(0, e.indexOf(a))), null !== t.min || null !== t.max) {
                      var d = e.toString().replace(a, ".");
                      null !== t.min && d < t.min ? e = t.min.toString().replace(".", a) : null !== t.max && d > t.max && (e = t.max.toString().replace(".", a));
                    }
                    return r && "-" !== e.charAt(0) && (e = "-" + e), u(e.toString().split(""), f, t, c).join("");
                  },
                  onBeforeWrite: function onBeforeWrite(e, t, n, a) {
                    function r(e, t) {
                      if (!1 !== a.__financeInput || t) {
                        var n = e.indexOf(a.radixPoint);
                        -1 !== n && e.splice(n, 1);
                      }
                      if ("" !== a.groupSeparator) for (; -1 !== (n = e.indexOf(a.groupSeparator));) e.splice(n, 1);
                      return e;
                    }
                    var o, l;
                    if (a.stripLeadingZeroes && (l = function (e, t) {
                      var n = new RegExp("(^" + ("" !== t.negationSymbol.front ? (0, i.default)(t.negationSymbol.front) + "?" : "") + (0, i.default)(t.prefix) + ")(.*)(" + (0, i.default)(t.suffix) + ("" != t.negationSymbol.back ? (0, i.default)(t.negationSymbol.back) + "?" : "") + "$)").exec(e.slice().reverse().join("")),
                        a = n ? n[2] : "",
                        r = !1;
                      return a && (a = a.split(t.radixPoint.charAt(0))[0], r = new RegExp("^[0" + t.groupSeparator + "]*").exec(a)), !(!r || !(r[0].length > 1 || r[0].length > 0 && r[0].length < a.length)) && r;
                    }(t, a))) for (var c = t.join("").lastIndexOf(l[0].split("").reverse().join("")) - (l[0] == l.input ? 0 : 1), f = l[0] == l.input ? 1 : 0, p = l[0].length - f; p > 0; p--) this.maskset.validPositions.splice(c + p, 1), delete t[c + p];
                    if (e) switch (e.type) {
                      case "blur":
                      case "checkval":
                        if (null !== a.min) {
                          var d = a.onUnMask(t.slice().reverse().join(""), void 0, s.extend({}, a, {
                            unmaskAsNumber: !0
                          }));
                          if (null !== a.min && d < a.min) return {
                            refreshFromBuffer: !0,
                            buffer: u(a.min.toString().replace(".", a.radixPoint).split(""), a.digits, a).reverse()
                          };
                        }
                        if (t[t.length - 1] === a.negationSymbol.front) {
                          var h = new RegExp("(^" + ("" != a.negationSymbol.front ? (0, i.default)(a.negationSymbol.front) + "?" : "") + (0, i.default)(a.prefix) + ")(.*)(" + (0, i.default)(a.suffix) + ("" != a.negationSymbol.back ? (0, i.default)(a.negationSymbol.back) + "?" : "") + "$)").exec(r(t.slice(), !0).reverse().join(""));
                          0 == (h ? h[2] : "") && (o = {
                            refreshFromBuffer: !0,
                            buffer: [0]
                          });
                        } else if ("" !== a.radixPoint) {
                          t.indexOf(a.radixPoint) === a.suffix.length && (o && o.buffer ? o.buffer.splice(0, 1 + a.suffix.length) : (t.splice(0, 1 + a.suffix.length), o = {
                            refreshFromBuffer: !0,
                            buffer: r(t)
                          }));
                        }
                        if (a.enforceDigitsOnBlur) {
                          var v = (o = o || {}) && o.buffer || t.slice().reverse();
                          o.refreshFromBuffer = !0, o.buffer = u(v, a.digits, a, !0).reverse();
                        }
                    }
                    return o;
                  },
                  onKeyDown: function onKeyDown(e, t, n, i) {
                    var a,
                      o = s(this);
                    if (3 != e.location) {
                      var l,
                        c = e.key;
                      if ((l = i.shortcuts && i.shortcuts[c]) && l.length > 1) return this.inputmask.__valueSet.call(this, parseFloat(this.inputmask.unmaskedvalue()) * parseInt(l)), o.trigger("setvalue"), !1;
                    }
                    if (e.ctrlKey) switch (e.key) {
                      case r.keys.ArrowUp:
                        return this.inputmask.__valueSet.call(this, parseFloat(this.inputmask.unmaskedvalue()) + parseInt(i.step)), o.trigger("setvalue"), !1;
                      case r.keys.ArrowDown:
                        return this.inputmask.__valueSet.call(this, parseFloat(this.inputmask.unmaskedvalue()) - parseInt(i.step)), o.trigger("setvalue"), !1;
                    }
                    if (!e.shiftKey && (e.key === r.keys.Delete || e.key === r.keys.Backspace || e.key === r.keys.BACKSPACE_SAFARI) && n.begin !== t.length) {
                      if (t[e.key === r.keys.Delete ? n.begin - 1 : n.end] === i.negationSymbol.front) return a = t.slice().reverse(), "" !== i.negationSymbol.front && a.shift(), "" !== i.negationSymbol.back && a.pop(), o.trigger("setvalue", [a.join(""), n.begin]), !1;
                      if (!0 === i._radixDance) {
                        var f,
                          p = t.indexOf(i.radixPoint);
                        if (i.digitsOptional) {
                          if (0 === p) return (a = t.slice().reverse()).pop(), o.trigger("setvalue", [a.join(""), n.begin >= a.length ? a.length : n.begin]), !1;
                        } else if (-1 !== p && (n.begin < p || n.end < p || e.key === r.keys.Delete && (n.begin === p || n.begin - 1 === p))) return n.begin === n.end && (e.key === r.keys.Backspace || e.key === r.keys.BACKSPACE_SAFARI ? n.begin++ : e.key === r.keys.Delete && n.begin - 1 === p && (f = s.extend({}, n), n.begin--, n.end--)), (a = t.slice().reverse()).splice(a.length - n.begin, n.begin - n.end + 1), a = u(a, i.digits, i).join(""), f && (n = f), o.trigger("setvalue", [a, n.begin >= a.length ? p + 1 : n.begin]), !1;
                      }
                    }
                  }
                },
                currency: {
                  prefix: "",
                  groupSeparator: ",",
                  alias: "numeric",
                  digits: 2,
                  digitsOptional: !1
                },
                decimal: {
                  alias: "numeric"
                },
                integer: {
                  alias: "numeric",
                  inputmode: "numeric",
                  digits: 0
                },
                percentage: {
                  alias: "numeric",
                  min: 0,
                  max: 100,
                  suffix: " %",
                  digits: 0,
                  allowMinus: !1
                },
                indianns: {
                  alias: "numeric",
                  _mask: function _mask(e) {
                    return "(" + e.groupSeparator + "99){*|1}(" + e.groupSeparator + "999){1|1}";
                  },
                  groupSeparator: ",",
                  radixPoint: ".",
                  placeholder: "0",
                  digits: 2,
                  digitsOptional: !1
                }
              });
            },
            9380: function _(e, t) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.default = void 0;
              var n = !("undefined" == typeof window || !window.document || !window.document.createElement);
              t.default = n ? window : {};
            },
            7760: function _(e, t, n) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.HandleNativePlaceholder = function (e, t) {
                var n = e ? e.inputmask : this;
                if (i.ie) {
                  if (e.inputmask._valueGet() !== t && (e.placeholder !== t || "" === e.placeholder)) {
                    var a = o.getBuffer.call(n).slice(),
                      r = e.inputmask._valueGet();
                    if (r !== t) {
                      var l = o.getLastValidPosition.call(n);
                      -1 === l && r === o.getBufferTemplate.call(n).join("") ? a = [] : -1 !== l && u.call(n, a), p(e, a);
                    }
                  }
                } else e.placeholder !== t && (e.placeholder = t, "" === e.placeholder && e.removeAttribute("placeholder"));
              }, t.applyInputValue = c, t.checkVal = f, t.clearOptionalTail = u, t.unmaskedvalue = function (e) {
                var t = e ? e.inputmask : this,
                  n = t.opts,
                  i = t.maskset;
                if (e) {
                  if (void 0 === e.inputmask) return e.value;
                  e.inputmask && e.inputmask.refreshValue && c(e, e.inputmask._valueGet(!0));
                }
                for (var a = [], r = i.validPositions, l = 0, s = r.length; l < s; l++) r[l] && r[l].match && (1 != r[l].match.static || Array.isArray(i.metadata) && !0 !== r[l].generatedInput) && a.push(r[l].input);
                var u = 0 === a.length ? "" : (t.isRTL ? a.reverse() : a).join("");
                if ("function" == typeof n.onUnMask) {
                  var f = (t.isRTL ? o.getBuffer.call(t).slice().reverse() : o.getBuffer.call(t)).join("");
                  u = n.onUnMask.call(t, f, u, n);
                }
                return u;
              }, t.writeBuffer = p;
              var i = n(9845),
                a = n(6030),
                r = n(2839),
                o = n(8711),
                l = n(7215),
                s = n(4713);
              function c(e, t, n) {
                var i = e ? e.inputmask : this,
                  a = i.opts;
                e.inputmask.refreshValue = !1, "function" == typeof a.onBeforeMask && (t = a.onBeforeMask.call(i, t, a) || t), f(e, !0, !1, t = (t || "").toString().split(""), n), i.undoValue = i._valueGet(!0), (a.clearMaskOnLostFocus || a.clearIncomplete) && e.inputmask._valueGet() === o.getBufferTemplate.call(i).join("") && -1 === o.getLastValidPosition.call(i) && e.inputmask._valueSet("");
              }
              function u(e) {
                e.length = 0;
                for (var t, n = s.getMaskTemplate.call(this, !0, 0, !0, void 0, !0); void 0 !== (t = n.shift());) e.push(t);
                return e;
              }
              function f(e, t, n, i, r) {
                var c,
                  u = e ? e.inputmask : this,
                  f = u.maskset,
                  d = u.opts,
                  h = u.dependencyLib,
                  v = i.slice(),
                  m = "",
                  g = -1,
                  y = d.skipOptionalPartCharacter;
                d.skipOptionalPartCharacter = "", o.resetMaskSet.call(u, !1), u.clicked = 0, g = d.radixPoint ? o.determineNewCaretPosition.call(u, {
                  begin: 0,
                  end: 0
                }, !1, !1 === d.__financeInput ? "radixFocus" : void 0).begin : 0, f.p = g, u.caretPos = {
                  begin: g
                };
                var k = [],
                  b = u.caretPos;
                if (v.forEach(function (e, t) {
                  if (void 0 !== e) {
                    var i = new h.Event("_checkval");
                    i.key = e, m += e;
                    var r = o.getLastValidPosition.call(u, void 0, !0);
                    !function (e, t) {
                      for (var n = s.getMaskTemplate.call(u, !0, 0).slice(e, o.seekNext.call(u, e, !1, !1)).join("").replace(/'/g, ""), i = n.indexOf(t); i > 0 && " " === n[i - 1];) i--;
                      var a = 0 === i && !o.isMask.call(u, e) && (s.getTest.call(u, e).match.nativeDef === t.charAt(0) || !0 === s.getTest.call(u, e).match.static && s.getTest.call(u, e).match.nativeDef === "'" + t.charAt(0) || " " === s.getTest.call(u, e).match.nativeDef && (s.getTest.call(u, e + 1).match.nativeDef === t.charAt(0) || !0 === s.getTest.call(u, e + 1).match.static && s.getTest.call(u, e + 1).match.nativeDef === "'" + t.charAt(0)));
                      if (!a && i > 0 && !o.isMask.call(u, e, !1, !0)) {
                        var r = o.seekNext.call(u, e);
                        u.caretPos.begin < r && (u.caretPos = {
                          begin: r
                        });
                      }
                      return a;
                    }(g, m) ? (c = a.EventHandlers.keypressEvent.call(u, i, !0, !1, n, u.caretPos.begin)) && (g = u.caretPos.begin + 1, m = "") : c = a.EventHandlers.keypressEvent.call(u, i, !0, !1, n, r + 1), c ? (void 0 !== c.pos && f.validPositions[c.pos] && !0 === f.validPositions[c.pos].match.static && void 0 === f.validPositions[c.pos].alternation && (k.push(c.pos), u.isRTL || (c.forwardPosition = c.pos + 1)), p.call(u, void 0, o.getBuffer.call(u), c.forwardPosition, i, !1), u.caretPos = {
                      begin: c.forwardPosition,
                      end: c.forwardPosition
                    }, b = u.caretPos) : void 0 === f.validPositions[t] && v[t] === s.getPlaceholder.call(u, t) && o.isMask.call(u, t, !0) ? u.caretPos.begin++ : u.caretPos = b;
                  }
                }), k.length > 0) {
                  var x,
                    w,
                    P = o.seekNext.call(u, -1, void 0, !1);
                  if (!l.isComplete.call(u, o.getBuffer.call(u)) && k.length <= P || l.isComplete.call(u, o.getBuffer.call(u)) && k.length > 0 && k.length !== P && 0 === k[0]) for (var S = P; void 0 !== (x = k.shift());) if (x < S) {
                    var O = new h.Event("_checkval");
                    if ((w = f.validPositions[x]).generatedInput = !0, O.key = w.input, (c = a.EventHandlers.keypressEvent.call(u, O, !0, !1, n, S)) && void 0 !== c.pos && c.pos !== x && f.validPositions[c.pos] && !0 === f.validPositions[c.pos].match.static) k.push(c.pos);else if (!c) break;
                    S++;
                  }
                }
                t && p.call(u, e, o.getBuffer.call(u), c ? c.forwardPosition : u.caretPos.begin, r || new h.Event("checkval"), r && ("input" === r.type && u.undoValue !== o.getBuffer.call(u).join("") || "paste" === r.type)), d.skipOptionalPartCharacter = y;
              }
              function p(e, t, n, i, a) {
                var s = e ? e.inputmask : this,
                  c = s.opts,
                  u = s.dependencyLib;
                if (i && "function" == typeof c.onBeforeWrite) {
                  var f = c.onBeforeWrite.call(s, i, t, n, c);
                  if (f) {
                    if (f.refreshFromBuffer) {
                      var p = f.refreshFromBuffer;
                      l.refreshFromBuffer.call(s, !0 === p ? p : p.start, p.end, f.buffer || t), t = o.getBuffer.call(s, !0);
                    }
                    void 0 !== n && (n = void 0 !== f.caret ? f.caret : n);
                  }
                }
                if (void 0 !== e && (e.inputmask._valueSet(t.join("")), void 0 === n || void 0 !== i && "blur" === i.type || o.caret.call(s, e, n, void 0, void 0, void 0 !== i && "keydown" === i.type && (i.key === r.keys.Delete || i.key === r.keys.Backspace)), void 0 === e.inputmask.writeBufferHook || e.inputmask.writeBufferHook(n), !0 === a)) {
                  var d = u(e),
                    h = e.inputmask._valueGet();
                  e.inputmask.skipInputEvent = !0, d.trigger("input"), setTimeout(function () {
                    h === o.getBufferTemplate.call(s).join("") ? d.trigger("cleared") : !0 === l.isComplete.call(s, t) && d.trigger("complete");
                  }, 0);
                }
              }
            },
            2394: function _(e, t, n) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.default = void 0;
              var i = v(n(3976)),
                a = v(n(7392)),
                r = v(n(4963)),
                o = n(9716),
                l = v(n(9380)),
                s = n(7760),
                c = n(157),
                u = n(2391),
                f = n(8711),
                p = n(7215),
                d = n(4713);
              function h(e) {
                return h = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
                  return _typeof(e);
                } : function (e) {
                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
                }, h(e);
              }
              function v(e) {
                return e && e.__esModule ? e : {
                  default: e
                };
              }
              var m = l.default.document,
                g = "_inputmask_opts";
              function y(e, t, n) {
                if (!(this instanceof y)) return new y(e, t, n);
                this.dependencyLib = r.default, this.el = void 0, this.events = {}, this.maskset = void 0, !0 !== n && ("[object Object]" === Object.prototype.toString.call(e) ? t = e : (t = t || {}, e && (t.alias = e)), this.opts = r.default.extend(!0, {}, this.defaults, t), this.noMasksCache = t && void 0 !== t.definitions, this.userOptions = t || {}, k(this.opts.alias, t, this.opts)), this.refreshValue = !1, this.undoValue = void 0, this.$el = void 0, this.skipInputEvent = !1, this.validationEvent = !1, this.ignorable = !1, this.maxLength, this.mouseEnter = !1, this.clicked = 0, this.originalPlaceholder = void 0, this.isComposing = !1, this.hasAlternator = !1;
              }
              function k(e, t, n) {
                var i = y.prototype.aliases[e];
                return i ? (i.alias && k(i.alias, void 0, n), r.default.extend(!0, n, i), r.default.extend(!0, n, t), !0) : (null === n.mask && (n.mask = e), !1);
              }
              y.prototype = {
                dataAttribute: "data-inputmask",
                defaults: i.default,
                definitions: a.default,
                aliases: {},
                masksCache: {},
                i18n: {},
                get isRTL() {
                  return this.opts.isRTL || this.opts.numericInput;
                },
                mask: function mask(e) {
                  var t = this;
                  return "string" == typeof e && (e = m.getElementById(e) || m.querySelectorAll(e)), (e = e.nodeName ? [e] : Array.isArray(e) ? e : [].slice.call(e)).forEach(function (e, n) {
                    var i = r.default.extend(!0, {}, t.opts);
                    if (function (e, t, n, i) {
                      function a(t, a) {
                        var r = "" === i ? t : i + "-" + t;
                        null !== (a = void 0 !== a ? a : e.getAttribute(r)) && ("string" == typeof a && (0 === t.indexOf("on") ? a = l.default[a] : "false" === a ? a = !1 : "true" === a && (a = !0)), n[t] = a);
                      }
                      if (!0 === t.importDataAttributes) {
                        var o,
                          s,
                          c,
                          u,
                          f = e.getAttribute(i);
                        if (f && "" !== f && (f = f.replace(/'/g, '"'), s = JSON.parse("{" + f + "}")), s) for (u in c = void 0, s) if ("alias" === u.toLowerCase()) {
                          c = s[u];
                          break;
                        }
                        for (o in a("alias", c), n.alias && k(n.alias, n, t), t) {
                          if (s) for (u in c = void 0, s) if (u.toLowerCase() === o.toLowerCase()) {
                            c = s[u];
                            break;
                          }
                          a(o, c);
                        }
                      }
                      r.default.extend(!0, t, n), ("rtl" === e.dir || t.rightAlign) && (e.style.textAlign = "right");
                      ("rtl" === e.dir || t.numericInput) && (e.dir = "ltr", e.removeAttribute("dir"), t.isRTL = !0);
                      return Object.keys(n).length;
                    }(e, i, r.default.extend(!0, {}, t.userOptions), t.dataAttribute)) {
                      var a = (0, u.generateMaskSet)(i, t.noMasksCache);
                      void 0 !== a && (void 0 !== e.inputmask && (e.inputmask.opts.autoUnmask = !0, e.inputmask.remove()), e.inputmask = new y(void 0, void 0, !0), e.inputmask.opts = i, e.inputmask.noMasksCache = t.noMasksCache, e.inputmask.userOptions = r.default.extend(!0, {}, t.userOptions), e.inputmask.el = e, e.inputmask.$el = (0, r.default)(e), e.inputmask.maskset = a, r.default.data(e, g, t.userOptions), c.mask.call(e.inputmask));
                    }
                  }), e && e[0] && e[0].inputmask || this;
                },
                option: function option(e, t) {
                  return "string" == typeof e ? this.opts[e] : "object" === h(e) ? (r.default.extend(this.userOptions, e), this.el && !0 !== t && this.mask(this.el), this) : void 0;
                },
                unmaskedvalue: function unmaskedvalue(e) {
                  if (this.maskset = this.maskset || (0, u.generateMaskSet)(this.opts, this.noMasksCache), void 0 === this.el || void 0 !== e) {
                    var t = ("function" == typeof this.opts.onBeforeMask && this.opts.onBeforeMask.call(this, e, this.opts) || e).split("");
                    s.checkVal.call(this, void 0, !1, !1, t), "function" == typeof this.opts.onBeforeWrite && this.opts.onBeforeWrite.call(this, void 0, f.getBuffer.call(this), 0, this.opts);
                  }
                  return s.unmaskedvalue.call(this, this.el);
                },
                remove: function remove() {
                  if (this.el) {
                    r.default.data(this.el, g, null);
                    var e = this.opts.autoUnmask ? (0, s.unmaskedvalue)(this.el) : this._valueGet(this.opts.autoUnmask);
                    e !== f.getBufferTemplate.call(this).join("") ? this._valueSet(e, this.opts.autoUnmask) : this._valueSet(""), o.EventRuler.off(this.el), Object.getOwnPropertyDescriptor && Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.el), "value") && this.__valueGet && Object.defineProperty(this.el, "value", {
                      get: this.__valueGet,
                      set: this.__valueSet,
                      configurable: !0
                    }) : m.__lookupGetter__ && this.el.__lookupGetter__("value") && this.__valueGet && (this.el.__defineGetter__("value", this.__valueGet), this.el.__defineSetter__("value", this.__valueSet)), this.el.inputmask = void 0;
                  }
                  return this.el;
                },
                getemptymask: function getemptymask() {
                  return this.maskset = this.maskset || (0, u.generateMaskSet)(this.opts, this.noMasksCache), (this.isRTL ? f.getBufferTemplate.call(this).reverse() : f.getBufferTemplate.call(this)).join("");
                },
                hasMaskedValue: function hasMaskedValue() {
                  return !this.opts.autoUnmask;
                },
                isComplete: function isComplete() {
                  return this.maskset = this.maskset || (0, u.generateMaskSet)(this.opts, this.noMasksCache), p.isComplete.call(this, f.getBuffer.call(this));
                },
                getmetadata: function getmetadata() {
                  if (this.maskset = this.maskset || (0, u.generateMaskSet)(this.opts, this.noMasksCache), Array.isArray(this.maskset.metadata)) {
                    var e = d.getMaskTemplate.call(this, !0, 0, !1).join("");
                    return this.maskset.metadata.forEach(function (t) {
                      return t.mask !== e || (e = t, !1);
                    }), e;
                  }
                  return this.maskset.metadata;
                },
                isValid: function isValid(e) {
                  if (this.maskset = this.maskset || (0, u.generateMaskSet)(this.opts, this.noMasksCache), e) {
                    var t = ("function" == typeof this.opts.onBeforeMask && this.opts.onBeforeMask.call(this, e, this.opts) || e).split("");
                    s.checkVal.call(this, void 0, !0, !1, t);
                  } else e = this.isRTL ? f.getBuffer.call(this).slice().reverse().join("") : f.getBuffer.call(this).join("");
                  for (var n = f.getBuffer.call(this), i = f.determineLastRequiredPosition.call(this), a = n.length - 1; a > i && !f.isMask.call(this, a); a--);
                  return n.splice(i, a + 1 - i), p.isComplete.call(this, n) && e === (this.isRTL ? f.getBuffer.call(this).slice().reverse().join("") : f.getBuffer.call(this).join(""));
                },
                format: function format(e, t) {
                  this.maskset = this.maskset || (0, u.generateMaskSet)(this.opts, this.noMasksCache);
                  var n = ("function" == typeof this.opts.onBeforeMask && this.opts.onBeforeMask.call(this, e, this.opts) || e).split("");
                  s.checkVal.call(this, void 0, !0, !1, n);
                  var i = this.isRTL ? f.getBuffer.call(this).slice().reverse().join("") : f.getBuffer.call(this).join("");
                  return t ? {
                    value: i,
                    metadata: this.getmetadata()
                  } : i;
                },
                setValue: function setValue(e) {
                  this.el && (0, r.default)(this.el).trigger("setvalue", [e]);
                },
                analyseMask: u.analyseMask
              }, y.extendDefaults = function (e) {
                r.default.extend(!0, y.prototype.defaults, e);
              }, y.extendDefinitions = function (e) {
                r.default.extend(!0, y.prototype.definitions, e);
              }, y.extendAliases = function (e) {
                r.default.extend(!0, y.prototype.aliases, e);
              }, y.format = function (e, t, n) {
                return y(t).format(e, n);
              }, y.unmask = function (e, t) {
                return y(t).unmaskedvalue(e);
              }, y.isValid = function (e, t) {
                return y(t).isValid(e);
              }, y.remove = function (e) {
                "string" == typeof e && (e = m.getElementById(e) || m.querySelectorAll(e)), (e = e.nodeName ? [e] : e).forEach(function (e) {
                  e.inputmask && e.inputmask.remove();
                });
              }, y.setValue = function (e, t) {
                "string" == typeof e && (e = m.getElementById(e) || m.querySelectorAll(e)), (e = e.nodeName ? [e] : e).forEach(function (e) {
                  e.inputmask ? e.inputmask.setValue(t) : (0, r.default)(e).trigger("setvalue", [t]);
                });
              }, y.dependencyLib = r.default, l.default.Inputmask = y;
              t.default = y;
            },
            5296: function _(e, t, n) {
              function i(e) {
                return i = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
                  return _typeof(e);
                } : function (e) {
                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
                }, i(e);
              }
              var a = d(n(9380)),
                r = d(n(2394));
              function o(e, t) {
                for (var n = 0; n < t.length; n++) {
                  var a = t[n];
                  a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, (r = a.key, o = void 0, o = function (e, t) {
                    if ("object" !== i(e) || null === e) return e;
                    var n = e[Symbol.toPrimitive];
                    if (void 0 !== n) {
                      var a = n.call(e, t || "default");
                      if ("object" !== i(a)) return a;
                      throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === t ? String : Number)(e);
                  }(r, "string"), "symbol" === i(o) ? o : String(o)), a);
                }
                var r, o;
              }
              function l(e) {
                var t = u();
                return function () {
                  var n,
                    a = p(e);
                  if (t) {
                    var r = p(this).constructor;
                    n = Reflect.construct(a, arguments, r);
                  } else n = a.apply(this, arguments);
                  return function (e, t) {
                    if (t && ("object" === i(t) || "function" == typeof t)) return t;
                    if (void 0 !== t) throw new TypeError("Derived constructors may only return object or undefined");
                    return function (e) {
                      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                      return e;
                    }(e);
                  }(this, n);
                };
              }
              function s(e) {
                var t = "function" == typeof Map ? new Map() : void 0;
                return s = function s(e) {
                  if (null === e || !function (e) {
                    try {
                      return -1 !== Function.toString.call(e).indexOf("[native code]");
                    } catch (t) {
                      return "function" == typeof e;
                    }
                  }(e)) return e;
                  if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function");
                  if (void 0 !== t) {
                    if (t.has(e)) return t.get(e);
                    t.set(e, n);
                  }
                  function n() {
                    return c(e, arguments, p(this).constructor);
                  }
                  return n.prototype = Object.create(e.prototype, {
                    constructor: {
                      value: n,
                      enumerable: !1,
                      writable: !0,
                      configurable: !0
                    }
                  }), f(n, e);
                }, s(e);
              }
              function c(e, t, n) {
                return c = u() ? Reflect.construct.bind() : function (e, t, n) {
                  var i = [null];
                  i.push.apply(i, t);
                  var a = new (Function.bind.apply(e, i))();
                  return n && f(a, n.prototype), a;
                }, c.apply(null, arguments);
              }
              function u() {
                if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                  return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                } catch (e) {
                  return !1;
                }
              }
              function f(e, t) {
                return f = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (e, t) {
                  return e.__proto__ = t, e;
                }, f(e, t);
              }
              function p(e) {
                return p = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (e) {
                  return e.__proto__ || Object.getPrototypeOf(e);
                }, p(e);
              }
              function d(e) {
                return e && e.__esModule ? e : {
                  default: e
                };
              }
              var h = a.default.document;
              if (h && h.head && h.head.attachShadow && a.default.customElements && void 0 === a.default.customElements.get("input-mask")) {
                var v = function (e) {
                  !function (e, t) {
                    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
                    e.prototype = Object.create(t && t.prototype, {
                      constructor: {
                        value: e,
                        writable: !0,
                        configurable: !0
                      }
                    }), Object.defineProperty(e, "prototype", {
                      writable: !1
                    }), t && f(e, t);
                  }(s, e);
                  var t,
                    n,
                    a = l(s);
                  function s() {
                    var e;
                    !function (e, t) {
                      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                    }(this, s);
                    var t = (e = a.call(this)).getAttributeNames(),
                      n = e.attachShadow({
                        mode: "closed"
                      });
                    for (var i in e.input = h.createElement("input"), e.input.type = "text", n.appendChild(e.input), t) Object.prototype.hasOwnProperty.call(t, i) && e.input.setAttribute(t[i], e.getAttribute(t[i]));
                    var o = new r.default();
                    return o.dataAttribute = "", o.mask(e.input), e.input.inputmask.shadowRoot = n, e;
                  }
                  return t = s, (n = [{
                    key: "attributeChangedCallback",
                    value: function value(e, t, n) {
                      this.input.setAttribute(e, n);
                    }
                  }, {
                    key: "value",
                    get: function get() {
                      return this.input.value;
                    },
                    set: function set(e) {
                      this.input.value = e;
                    }
                  }]) && o(t.prototype, n), Object.defineProperty(t, "prototype", {
                    writable: !1
                  }), s;
                }(s(HTMLElement));
                a.default.customElements.define("input-mask", v);
              }
            },
            2839: function _(e, t) {
              function n(e) {
                return n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
                  return _typeof(e);
                } : function (e) {
                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
                }, n(e);
              }
              function i(e, t) {
                return function (e) {
                  if (Array.isArray(e)) return e;
                }(e) || function (e, t) {
                  var n = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                  if (null != n) {
                    var i,
                      a,
                      r,
                      o,
                      l = [],
                      s = !0,
                      c = !1;
                    try {
                      if (r = (n = n.call(e)).next, 0 === t) ; else for (; !(s = (i = r.call(n)).done) && (l.push(i.value), l.length !== t); s = !0);
                    } catch (e) {
                      c = !0, a = e;
                    } finally {
                      try {
                        if (!s && null != n.return && (o = n.return(), Object(o) !== o)) return;
                      } finally {
                        if (c) throw a;
                      }
                    }
                    return l;
                  }
                }(e, t) || function (e, t) {
                  if (!e) return;
                  if ("string" == typeof e) return a(e, t);
                  var n = Object.prototype.toString.call(e).slice(8, -1);
                  "Object" === n && e.constructor && (n = e.constructor.name);
                  if ("Map" === n || "Set" === n) return Array.from(e);
                  if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return a(e, t);
                }(e, t) || function () {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
              }
              function a(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
                return i;
              }
              function r(e, t) {
                var n = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                  var i = Object.getOwnPropertySymbols(e);
                  t && (i = i.filter(function (t) {
                    return Object.getOwnPropertyDescriptor(e, t).enumerable;
                  })), n.push.apply(n, i);
                }
                return n;
              }
              function o(e, t, i) {
                return (t = function (e) {
                  var t = function (e, t) {
                    if ("object" !== n(e) || null === e) return e;
                    var i = e[Symbol.toPrimitive];
                    if (void 0 !== i) {
                      var a = i.call(e, t || "default");
                      if ("object" !== n(a)) return a;
                      throw new TypeError("@@toPrimitive must return a primitive value.");
                    }
                    return ("string" === t ? String : Number)(e);
                  }(e, "string");
                  return "symbol" === n(t) ? t : String(t);
                }(t)) in e ? Object.defineProperty(e, t, {
                  value: i,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0
                }) : e[t] = i, e;
              }
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.keys = t.keyCode = void 0, t.toKey = function (e, t) {
                return s[e] || (t ? String.fromCharCode(e) : String.fromCharCode(e).toLowerCase());
              }, t.toKeyCode = function (e) {
                return l[e];
              };
              var l = t.keyCode = function (e) {
                  for (var t = 1; t < arguments.length; t++) {
                    var n = null != arguments[t] ? arguments[t] : {};
                    t % 2 ? r(Object(n), !0).forEach(function (t) {
                      o(e, t, n[t]);
                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : r(Object(n)).forEach(function (t) {
                      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
                    });
                  }
                  return e;
                }({
                  c: 67,
                  x: 88,
                  z: 90,
                  BACKSPACE_SAFARI: 127,
                  Enter: 13,
                  Meta_LEFT: 91,
                  Meta_RIGHT: 92,
                  Space: 32
                }, {
                  Alt: 18,
                  AltGraph: 18,
                  ArrowDown: 40,
                  ArrowLeft: 37,
                  ArrowRight: 39,
                  ArrowUp: 38,
                  Backspace: 8,
                  CapsLock: 20,
                  Control: 17,
                  ContextMenu: 93,
                  Dead: 221,
                  Delete: 46,
                  End: 35,
                  Escape: 27,
                  F1: 112,
                  F2: 113,
                  F3: 114,
                  F4: 115,
                  F5: 116,
                  F6: 117,
                  F7: 118,
                  F8: 119,
                  F9: 120,
                  F10: 121,
                  F11: 122,
                  F12: 123,
                  Home: 36,
                  Insert: 45,
                  NumLock: 144,
                  PageDown: 34,
                  PageUp: 33,
                  Pause: 19,
                  PrintScreen: 44,
                  Process: 229,
                  Shift: 16,
                  ScrollLock: 145,
                  Tab: 9,
                  Unidentified: 229
                }),
                s = Object.entries(l).reduce(function (e, t) {
                  var n = i(t, 2),
                    a = n[0],
                    r = n[1];
                  return e[r] = void 0 === e[r] ? a : e[r], e;
                }, {});
              t.keys = Object.entries(l).reduce(function (e, t) {
                var n = i(t, 2),
                  a = n[0];
                n[1];
                return e[a] = "Space" === a ? " " : a, e;
              }, {});
            },
            2391: function _(e, t, n) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.analyseMask = function (e, t, n) {
                var i,
                  a,
                  s,
                  c,
                  u,
                  f,
                  p = /(?:[?*+]|\{[0-9+*]+(?:,[0-9+*]*)?(?:\|[0-9+*]*)?\})|[^.?*+^${[]()|\\]+|./g,
                  d = /\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,
                  h = !1,
                  v = new o.default(),
                  m = [],
                  g = [],
                  y = !1;
                function k(e, i, a) {
                  a = void 0 !== a ? a : e.matches.length;
                  var o = e.matches[a - 1];
                  if (t) {
                    if (0 === i.indexOf("[") || h && /\\d|\\s|\\w|\\p/i.test(i) || "." === i) {
                      var s = n.casing ? "i" : "";
                      /\\p\{.*}/i.test(i) && (s += "u"), e.matches.splice(a++, 0, {
                        fn: new RegExp(i, s),
                        static: !1,
                        optionality: !1,
                        newBlockMarker: void 0 === o ? "master" : o.def !== i,
                        casing: null,
                        def: i,
                        placeholder: "object" === l(n.placeholder) ? n.placeholder[v.matches.length] : void 0,
                        nativeDef: i
                      });
                    } else h && (i = i[i.length - 1]), i.split("").forEach(function (t, i) {
                      o = e.matches[a - 1], e.matches.splice(a++, 0, {
                        fn: /[a-z]/i.test(n.staticDefinitionSymbol || t) ? new RegExp("[" + (n.staticDefinitionSymbol || t) + "]", n.casing ? "i" : "") : null,
                        static: !0,
                        optionality: !1,
                        newBlockMarker: void 0 === o ? "master" : o.def !== t && !0 !== o.static,
                        casing: null,
                        def: n.staticDefinitionSymbol || t,
                        placeholder: void 0 !== n.staticDefinitionSymbol ? t : "object" === l(n.placeholder) ? n.placeholder[v.matches.length] : void 0,
                        nativeDef: (h ? "'" : "") + t
                      });
                    });
                    h = !1;
                  } else {
                    var c = n.definitions && n.definitions[i] || n.usePrototypeDefinitions && r.default.prototype.definitions[i];
                    c && !h ? e.matches.splice(a++, 0, {
                      fn: c.validator ? "string" == typeof c.validator ? new RegExp(c.validator, n.casing ? "i" : "") : new function () {
                        this.test = c.validator;
                      }() : /./,
                      static: c.static || !1,
                      optionality: c.optional || !1,
                      defOptionality: c.optional || !1,
                      newBlockMarker: void 0 === o || c.optional ? "master" : o.def !== (c.definitionSymbol || i),
                      casing: c.casing,
                      def: c.definitionSymbol || i,
                      placeholder: c.placeholder,
                      nativeDef: i,
                      generated: c.generated
                    }) : (e.matches.splice(a++, 0, {
                      fn: /[a-z]/i.test(n.staticDefinitionSymbol || i) ? new RegExp("[" + (n.staticDefinitionSymbol || i) + "]", n.casing ? "i" : "") : null,
                      static: !0,
                      optionality: !1,
                      newBlockMarker: void 0 === o ? "master" : o.def !== i && !0 !== o.static,
                      casing: null,
                      def: n.staticDefinitionSymbol || i,
                      placeholder: void 0 !== n.staticDefinitionSymbol ? i : void 0,
                      nativeDef: (h ? "'" : "") + i
                    }), h = !1);
                  }
                }
                function b() {
                  if (m.length > 0) {
                    if (k(c = m[m.length - 1], a), c.isAlternator) {
                      u = m.pop();
                      for (var e = 0; e < u.matches.length; e++) u.matches[e].isGroup && (u.matches[e].isGroup = !1);
                      m.length > 0 ? (c = m[m.length - 1]).matches.push(u) : v.matches.push(u);
                    }
                  } else k(v, a);
                }
                function x(e) {
                  var t = new o.default(!0);
                  return t.openGroup = !1, t.matches = e, t;
                }
                function w() {
                  if ((s = m.pop()).openGroup = !1, void 0 !== s) {
                    if (m.length > 0) {
                      if ((c = m[m.length - 1]).matches.push(s), c.isAlternator) {
                        u = m.pop();
                        for (var e = 0; e < u.matches.length; e++) u.matches[e].isGroup = !1, u.matches[e].alternatorGroup = !1;
                        m.length > 0 ? (c = m[m.length - 1]).matches.push(u) : v.matches.push(u);
                      }
                    } else v.matches.push(s);
                  } else b();
                }
                function P(e) {
                  var t = e.pop();
                  return t.isQuantifier && (t = x([e.pop(), t])), t;
                }
                t && (n.optionalmarker[0] = void 0, n.optionalmarker[1] = void 0);
                for (; i = t ? d.exec(e) : p.exec(e);) {
                  if (a = i[0], t) {
                    switch (a.charAt(0)) {
                      case "?":
                        a = "{0,1}";
                        break;
                      case "+":
                      case "*":
                        a = "{" + a + "}";
                        break;
                      case "|":
                        if (0 === m.length) {
                          var S = x(v.matches);
                          S.openGroup = !0, m.push(S), v.matches = [], y = !0;
                        }
                    }
                    switch (a) {
                      case "\\d":
                        a = "[0-9]";
                        break;
                      case "\\p":
                        a += d.exec(e)[0], a += d.exec(e)[0];
                    }
                  }
                  if (h) b();else switch (a.charAt(0)) {
                    case "$":
                    case "^":
                      t || b();
                      break;
                    case n.escapeChar:
                      h = !0, t && b();
                      break;
                    case n.optionalmarker[1]:
                    case n.groupmarker[1]:
                      w();
                      break;
                    case n.optionalmarker[0]:
                      m.push(new o.default(!1, !0));
                      break;
                    case n.groupmarker[0]:
                      m.push(new o.default(!0));
                      break;
                    case n.quantifiermarker[0]:
                      var O = new o.default(!1, !1, !0),
                        _ = (a = a.replace(/[{}?]/g, "")).split("|"),
                        M = _[0].split(","),
                        E = isNaN(M[0]) ? M[0] : parseInt(M[0]),
                        j = 1 === M.length ? E : isNaN(M[1]) ? M[1] : parseInt(M[1]),
                        T = isNaN(_[1]) ? _[1] : parseInt(_[1]);
                      "*" !== E && "+" !== E || (E = "*" === j ? 0 : 1), O.quantifier = {
                        min: E,
                        max: j,
                        jit: T
                      };
                      var A = m.length > 0 ? m[m.length - 1].matches : v.matches;
                      (i = A.pop()).isGroup || (i = x([i])), A.push(i), A.push(O);
                      break;
                    case n.alternatormarker:
                      if (m.length > 0) {
                        var D = (c = m[m.length - 1]).matches[c.matches.length - 1];
                        f = c.openGroup && (void 0 === D.matches || !1 === D.isGroup && !1 === D.isAlternator) ? m.pop() : P(c.matches);
                      } else f = P(v.matches);
                      if (f.isAlternator) m.push(f);else if (f.alternatorGroup ? (u = m.pop(), f.alternatorGroup = !1) : u = new o.default(!1, !1, !1, !0), u.matches.push(f), m.push(u), f.openGroup) {
                        f.openGroup = !1;
                        var L = new o.default(!0);
                        L.alternatorGroup = !0, m.push(L);
                      }
                      break;
                    default:
                      b();
                  }
                }
                y && w();
                for (; m.length > 0;) s = m.pop(), v.matches.push(s);
                v.matches.length > 0 && (!function e(i) {
                  i && i.matches && i.matches.forEach(function (a, r) {
                    var o = i.matches[r + 1];
                    (void 0 === o || void 0 === o.matches || !1 === o.isQuantifier) && a && a.isGroup && (a.isGroup = !1, t || (k(a, n.groupmarker[0], 0), !0 !== a.openGroup && k(a, n.groupmarker[1]))), e(a);
                  });
                }(v), g.push(v));
                (n.numericInput || n.isRTL) && function e(t) {
                  for (var i in t.matches = t.matches.reverse(), t.matches) if (Object.prototype.hasOwnProperty.call(t.matches, i)) {
                    var a = parseInt(i);
                    if (t.matches[i].isQuantifier && t.matches[a + 1] && t.matches[a + 1].isGroup) {
                      var r = t.matches[i];
                      t.matches.splice(i, 1), t.matches.splice(a + 1, 0, r);
                    }
                    void 0 !== t.matches[i].matches ? t.matches[i] = e(t.matches[i]) : t.matches[i] = ((o = t.matches[i]) === n.optionalmarker[0] ? o = n.optionalmarker[1] : o === n.optionalmarker[1] ? o = n.optionalmarker[0] : o === n.groupmarker[0] ? o = n.groupmarker[1] : o === n.groupmarker[1] && (o = n.groupmarker[0]), o);
                  }
                  var o;
                  return t;
                }(g[0]);
                return g;
              }, t.generateMaskSet = function (e, t) {
                var n;
                function o(e, t) {
                  var n = t.repeat,
                    i = t.groupmarker,
                    r = t.quantifiermarker,
                    o = t.keepStatic;
                  if (n > 0 || "*" === n || "+" === n) {
                    var l = "*" === n ? 0 : "+" === n ? 1 : n;
                    if (l != n) e = i[0] + e + i[1] + r[0] + l + "," + n + r[1];else for (var c = e, u = 1; u < l; u++) e += c;
                  }
                  if (!0 === o) {
                    var f = e.match(new RegExp("(.)\\[([^\\]]*)\\]", "g"));
                    f && f.forEach(function (t, n) {
                      var i = function (e, t) {
                          return function (e) {
                            if (Array.isArray(e)) return e;
                          }(e) || function (e, t) {
                            var n = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                            if (null != n) {
                              var i,
                                a,
                                r,
                                o,
                                l = [],
                                s = !0,
                                c = !1;
                              try {
                                if (r = (n = n.call(e)).next, 0 === t) ; else for (; !(s = (i = r.call(n)).done) && (l.push(i.value), l.length !== t); s = !0);
                              } catch (e) {
                                c = !0, a = e;
                              } finally {
                                try {
                                  if (!s && null != n.return && (o = n.return(), Object(o) !== o)) return;
                                } finally {
                                  if (c) throw a;
                                }
                              }
                              return l;
                            }
                          }(e, t) || function (e, t) {
                            if (!e) return;
                            if ("string" == typeof e) return s(e, t);
                            var n = Object.prototype.toString.call(e).slice(8, -1);
                            "Object" === n && e.constructor && (n = e.constructor.name);
                            if ("Map" === n || "Set" === n) return Array.from(e);
                            if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return s(e, t);
                          }(e, t) || function () {
                            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                          }();
                        }(t.split("["), 2),
                        r = i[0],
                        o = i[1];
                      o = o.replace("]", ""), e = e.replace(new RegExp("".concat((0, a.default)(r), "\\[").concat((0, a.default)(o), "\\]")), r.charAt(0) === o.charAt(0) ? "(".concat(r, "|").concat(r).concat(o, ")") : "".concat(r, "[").concat(o, "]"));
                    });
                  }
                  return e;
                }
                function c(e, n, a) {
                  var s,
                    c,
                    u = !1;
                  return null !== e && "" !== e || ((u = null !== a.regex) ? e = (e = a.regex).replace(/^(\^)(.*)(\$)$/, "$2") : (u = !0, e = ".*")), 1 === e.length && !1 === a.greedy && 0 !== a.repeat && (a.placeholder = ""), e = o(e, a), c = u ? "regex_" + a.regex : a.numericInput ? e.split("").reverse().join("") : e, null !== a.keepStatic && (c = "ks_" + a.keepStatic + c), "object" === l(a.placeholder) && (c = "ph_" + JSON.stringify(a.placeholder) + c), void 0 === r.default.prototype.masksCache[c] || !0 === t ? (s = {
                    mask: e,
                    maskToken: r.default.prototype.analyseMask(e, u, a),
                    validPositions: [],
                    _buffer: void 0,
                    buffer: void 0,
                    tests: {},
                    excludes: {},
                    metadata: n,
                    maskLength: void 0,
                    jitOffset: {}
                  }, !0 !== t && (r.default.prototype.masksCache[c] = s, s = i.default.extend(!0, {}, r.default.prototype.masksCache[c]))) : s = i.default.extend(!0, {}, r.default.prototype.masksCache[c]), s;
                }
                "function" == typeof e.mask && (e.mask = e.mask(e));
                if (Array.isArray(e.mask)) {
                  if (e.mask.length > 1) {
                    null === e.keepStatic && (e.keepStatic = !0);
                    var u = e.groupmarker[0];
                    return (e.isRTL ? e.mask.reverse() : e.mask).forEach(function (t) {
                      u.length > 1 && (u += e.alternatormarker), void 0 !== t.mask && "function" != typeof t.mask ? u += t.mask : u += t;
                    }), c(u += e.groupmarker[1], e.mask, e);
                  }
                  e.mask = e.mask.pop();
                }
                n = e.mask && void 0 !== e.mask.mask && "function" != typeof e.mask.mask ? c(e.mask.mask, e.mask, e) : c(e.mask, e.mask, e);
                null === e.keepStatic && (e.keepStatic = !1);
                return n;
              };
              var i = c(n(4963)),
                a = c(n(7184)),
                r = c(n(2394)),
                o = c(n(9695));
              function l(e) {
                return l = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
                  return _typeof(e);
                } : function (e) {
                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
                }, l(e);
              }
              function s(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
                return i;
              }
              function c(e) {
                return e && e.__esModule ? e : {
                  default: e
                };
              }
            },
            157: function _(e, t, n) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.mask = function () {
                var e = this,
                  t = this.opts,
                  n = this.el,
                  c = this.dependencyLib;
                r.EventRuler.off(n);
                var u = function (t, n) {
                  var i = t.getAttribute("type"),
                    a = "input" === t.tagName.toLowerCase() && n.supportsInputType.includes(i) || t.isContentEditable || "textarea" === t.tagName.toLowerCase();
                  if (!a) if ("input" === t.tagName.toLowerCase()) {
                    var s = document.createElement("input");
                    s.setAttribute("type", i), a = "text" === s.type, s = null;
                  } else a = "partial";
                  return !1 !== a ? function (t) {
                    var i, a;
                    function s() {
                      return this.inputmask ? this.inputmask.opts.autoUnmask ? this.inputmask.unmaskedvalue() : -1 !== l.getLastValidPosition.call(e) || !0 !== n.nullable ? (this.inputmask.shadowRoot || this.ownerDocument).activeElement === this && n.clearMaskOnLostFocus ? (e.isRTL ? o.clearOptionalTail.call(e, l.getBuffer.call(e).slice()).reverse() : o.clearOptionalTail.call(e, l.getBuffer.call(e).slice())).join("") : i.call(this) : "" : i.call(this);
                    }
                    function u(e) {
                      a.call(this, e), this.inputmask && (0, o.applyInputValue)(this, e);
                    }
                    if (!t.inputmask.__valueGet) {
                      if (!0 !== n.noValuePatching) {
                        if (Object.getOwnPropertyDescriptor) {
                          var f = Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t), "value") : void 0;
                          f && f.get && f.set ? (i = f.get, a = f.set, Object.defineProperty(t, "value", {
                            get: s,
                            set: u,
                            configurable: !0
                          })) : "input" !== t.tagName.toLowerCase() && (i = function i() {
                            return this.textContent;
                          }, a = function a(e) {
                            this.textContent = e;
                          }, Object.defineProperty(t, "value", {
                            get: s,
                            set: u,
                            configurable: !0
                          }));
                        } else document.__lookupGetter__ && t.__lookupGetter__("value") && (i = t.__lookupGetter__("value"), a = t.__lookupSetter__("value"), t.__defineGetter__("value", s), t.__defineSetter__("value", u));
                        t.inputmask.__valueGet = i, t.inputmask.__valueSet = a;
                      }
                      t.inputmask._valueGet = function (t) {
                        return e.isRTL && !0 !== t ? i.call(this.el).split("").reverse().join("") : i.call(this.el);
                      }, t.inputmask._valueSet = function (t, n) {
                        a.call(this.el, null == t ? "" : !0 !== n && e.isRTL ? t.split("").reverse().join("") : t);
                      }, void 0 === i && (i = function i() {
                        return this.value;
                      }, a = function a(e) {
                        this.value = e;
                      }, function (t) {
                        if (c.valHooks && (void 0 === c.valHooks[t] || !0 !== c.valHooks[t].inputmaskpatch)) {
                          var i = c.valHooks[t] && c.valHooks[t].get ? c.valHooks[t].get : function (e) {
                              return e.value;
                            },
                            a = c.valHooks[t] && c.valHooks[t].set ? c.valHooks[t].set : function (e, t) {
                              return e.value = t, e;
                            };
                          c.valHooks[t] = {
                            get: function get(t) {
                              if (t.inputmask) {
                                if (t.inputmask.opts.autoUnmask) return t.inputmask.unmaskedvalue();
                                var a = i(t);
                                return -1 !== l.getLastValidPosition.call(e, void 0, void 0, t.inputmask.maskset.validPositions) || !0 !== n.nullable ? a : "";
                              }
                              return i(t);
                            },
                            set: function set(e, t) {
                              var n = a(e, t);
                              return e.inputmask && (0, o.applyInputValue)(e, t), n;
                            },
                            inputmaskpatch: !0
                          };
                        }
                      }(t.type), function (e) {
                        r.EventRuler.on(e, "mouseenter", function () {
                          var e = this,
                            t = e.inputmask._valueGet(!0);
                          t != (e.inputmask.isRTL ? l.getBuffer.call(e.inputmask).slice().reverse() : l.getBuffer.call(e.inputmask)).join("") && (0, o.applyInputValue)(e, t);
                        });
                      }(t));
                    }
                  }(t) : t.inputmask = void 0, a;
                }(n, t);
                if (!1 !== u) {
                  e.originalPlaceholder = n.placeholder, e.maxLength = void 0 !== n ? n.maxLength : void 0, -1 === e.maxLength && (e.maxLength = void 0), "inputMode" in n && null === n.getAttribute("inputmode") && (n.inputMode = t.inputmode, n.setAttribute("inputmode", t.inputmode)), !0 === u && (t.showMaskOnFocus = t.showMaskOnFocus && -1 === ["cc-number", "cc-exp"].indexOf(n.autocomplete), i.iphone && (t.insertModeVisual = !1, n.setAttribute("autocorrect", "off")), r.EventRuler.on(n, "submit", a.EventHandlers.submitEvent), r.EventRuler.on(n, "reset", a.EventHandlers.resetEvent), r.EventRuler.on(n, "blur", a.EventHandlers.blurEvent), r.EventRuler.on(n, "focus", a.EventHandlers.focusEvent), r.EventRuler.on(n, "invalid", a.EventHandlers.invalidEvent), r.EventRuler.on(n, "click", a.EventHandlers.clickEvent), r.EventRuler.on(n, "mouseleave", a.EventHandlers.mouseleaveEvent), r.EventRuler.on(n, "mouseenter", a.EventHandlers.mouseenterEvent), r.EventRuler.on(n, "paste", a.EventHandlers.pasteEvent), r.EventRuler.on(n, "cut", a.EventHandlers.cutEvent), r.EventRuler.on(n, "complete", t.oncomplete), r.EventRuler.on(n, "incomplete", t.onincomplete), r.EventRuler.on(n, "cleared", t.oncleared), !0 !== t.inputEventOnly && r.EventRuler.on(n, "keydown", a.EventHandlers.keyEvent), (i.mobile || t.inputEventOnly) && n.removeAttribute("maxLength"), r.EventRuler.on(n, "input", a.EventHandlers.inputFallBackEvent)), r.EventRuler.on(n, "setvalue", a.EventHandlers.setValueEvent), void 0 === e.applyMaskHook || e.applyMaskHook(), l.getBufferTemplate.call(e).join(""), e.undoValue = e._valueGet(!0);
                  var f = (n.inputmask.shadowRoot || n.ownerDocument).activeElement;
                  if ("" !== n.inputmask._valueGet(!0) || !1 === t.clearMaskOnLostFocus || f === n) {
                    (0, o.applyInputValue)(n, n.inputmask._valueGet(!0), t);
                    var p = l.getBuffer.call(e).slice();
                    !1 === s.isComplete.call(e, p) && t.clearIncomplete && l.resetMaskSet.call(e, !1), t.clearMaskOnLostFocus && f !== n && (-1 === l.getLastValidPosition.call(e) ? p = [] : o.clearOptionalTail.call(e, p)), (!1 === t.clearMaskOnLostFocus || t.showMaskOnFocus && f === n || "" !== n.inputmask._valueGet(!0)) && (0, o.writeBuffer)(n, p), f === n && l.caret.call(e, n, l.seekNext.call(e, l.getLastValidPosition.call(e)));
                  }
                }
              };
              var i = n(9845),
                a = n(6030),
                r = n(9716),
                o = n(7760),
                l = n(8711),
                s = n(7215);
            },
            9695: function _(e, t) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.default = function (e, t, n, i) {
                this.matches = [], this.openGroup = e || !1, this.alternatorGroup = !1, this.isGroup = e || !1, this.isOptional = t || !1, this.isQuantifier = n || !1, this.isAlternator = i || !1, this.quantifier = {
                  min: 1,
                  max: 1
                };
              };
            },
            3194: function _() {
              Array.prototype.includes || Object.defineProperty(Array.prototype, "includes", {
                value: function value(e, t) {
                  if (null == this) throw new TypeError('"this" is null or not defined');
                  var n = Object(this),
                    i = n.length >>> 0;
                  if (0 === i) return !1;
                  for (var a = 0 | t, r = Math.max(a >= 0 ? a : i - Math.abs(a), 0); r < i;) {
                    if (n[r] === e) return !0;
                    r++;
                  }
                  return !1;
                }
              });
            },
            9302: function _() {
              var e = Function.bind.call(Function.call, Array.prototype.reduce),
                t = Function.bind.call(Function.call, Object.prototype.propertyIsEnumerable),
                n = Function.bind.call(Function.call, Array.prototype.concat),
                i = Object.keys;
              Object.entries || (Object.entries = function (a) {
                return e(i(a), function (e, i) {
                  return n(e, "string" == typeof i && t(a, i) ? [[i, a[i]]] : []);
                }, []);
              });
            },
            7149: function _() {
              function e(t) {
                return e = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
                  return _typeof(e);
                } : function (e) {
                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
                }, e(t);
              }
              "function" != typeof Object.getPrototypeOf && (Object.getPrototypeOf = "object" === e("test".__proto__) ? function (e) {
                return e.__proto__;
              } : function (e) {
                return e.constructor.prototype;
              });
            },
            4013: function _() {
              String.prototype.includes || (String.prototype.includes = function (e, t) {
                return "number" != typeof t && (t = 0), !(t + e.length > this.length) && -1 !== this.indexOf(e, t);
              });
            },
            8711: function _(e, t, n) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.caret = function (e, t, n, i, r) {
                var o,
                  l = this,
                  s = this.opts;
                if (void 0 === t) return "selectionStart" in e && "selectionEnd" in e ? (t = e.selectionStart, n = e.selectionEnd) : a.default.getSelection ? (o = a.default.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode !== e && o.commonAncestorContainer !== e || (t = o.startOffset, n = o.endOffset) : document.selection && document.selection.createRange && (n = (t = 0 - (o = document.selection.createRange()).duplicate().moveStart("character", -e.inputmask._valueGet().length)) + o.text.length), {
                  begin: i ? t : f.call(l, t),
                  end: i ? n : f.call(l, n)
                };
                if (Array.isArray(t) && (n = l.isRTL ? t[0] : t[1], t = l.isRTL ? t[1] : t[0]), void 0 !== t.begin && (n = l.isRTL ? t.begin : t.end, t = l.isRTL ? t.end : t.begin), "number" == typeof t) {
                  t = i ? t : f.call(l, t), n = "number" == typeof (n = i ? n : f.call(l, n)) ? n : t;
                  var c = parseInt(((e.ownerDocument.defaultView || a.default).getComputedStyle ? (e.ownerDocument.defaultView || a.default).getComputedStyle(e, null) : e.currentStyle).fontSize) * n;
                  if (e.scrollLeft = c > e.scrollWidth ? c : 0, e.inputmask.caretPos = {
                    begin: t,
                    end: n
                  }, s.insertModeVisual && !1 === s.insertMode && t === n && (r || n++), e === (e.inputmask.shadowRoot || e.ownerDocument).activeElement) {
                    if ("setSelectionRange" in e) e.setSelectionRange(t, n);else if (a.default.getSelection) {
                      if (o = document.createRange(), void 0 === e.firstChild || null === e.firstChild) {
                        var u = document.createTextNode("");
                        e.appendChild(u);
                      }
                      o.setStart(e.firstChild, t < e.inputmask._valueGet().length ? t : e.inputmask._valueGet().length), o.setEnd(e.firstChild, n < e.inputmask._valueGet().length ? n : e.inputmask._valueGet().length), o.collapse(!0);
                      var p = a.default.getSelection();
                      p.removeAllRanges(), p.addRange(o);
                    } else e.createTextRange && ((o = e.createTextRange()).collapse(!0), o.moveEnd("character", n), o.moveStart("character", t), o.select());
                    void 0 === e.inputmask.caretHook || e.inputmask.caretHook.call(l, {
                      begin: t,
                      end: n
                    });
                  }
                }
              }, t.determineLastRequiredPosition = function (e) {
                var t,
                  n,
                  i = this,
                  a = i.maskset,
                  l = i.dependencyLib,
                  c = s.call(i),
                  u = {},
                  f = a.validPositions[c],
                  p = o.getMaskTemplate.call(i, !0, s.call(i), !0, !0),
                  d = p.length,
                  h = void 0 !== f ? f.locator.slice() : void 0;
                for (t = c + 1; t < p.length; t++) h = (n = o.getTestTemplate.call(i, t, h, t - 1)).locator.slice(), u[t] = l.extend(!0, {}, n);
                var v = f && void 0 !== f.alternation ? f.locator[f.alternation] : void 0;
                for (t = d - 1; t > c && ((n = u[t]).match.optionality || n.match.optionalQuantifier && n.match.newBlockMarker || v && (v !== u[t].locator[f.alternation] && !0 !== n.match.static || !0 === n.match.static && n.locator[f.alternation] && r.checkAlternationMatch.call(i, n.locator[f.alternation].toString().split(","), v.toString().split(",")) && "" !== o.getTests.call(i, t)[0].def)) && p[t] === o.getPlaceholder.call(i, t, n.match); t--) d--;
                return e ? {
                  l: d,
                  def: u[d] ? u[d].match : void 0
                } : d;
              }, t.determineNewCaretPosition = function (e, t, n) {
                var i,
                  a,
                  r,
                  f = this,
                  p = f.maskset,
                  d = f.opts;
                t && (f.isRTL ? e.end = e.begin : e.begin = e.end);
                if (e.begin === e.end) {
                  switch (n = n || d.positionCaretOnClick) {
                    case "none":
                      break;
                    case "select":
                      e = {
                        begin: 0,
                        end: l.call(f).length
                      };
                      break;
                    case "ignore":
                      e.end = e.begin = u.call(f, s.call(f));
                      break;
                    case "radixFocus":
                      if (f.clicked > 1 && 0 === p.validPositions.length) break;
                      if (function (e) {
                        if ("" !== d.radixPoint && 0 !== d.digits) {
                          var t = p.validPositions;
                          if (void 0 === t[e] || void 0 === t[e].input) {
                            if (e < u.call(f, -1)) return !0;
                            var n = l.call(f).indexOf(d.radixPoint);
                            if (-1 !== n) {
                              for (var i = 0, a = t.length; i < a; i++) if (t[i] && n < i && t[i].input !== o.getPlaceholder.call(f, i)) return !1;
                              return !0;
                            }
                          }
                        }
                        return !1;
                      }(e.begin)) {
                        var h = l.call(f).join("").indexOf(d.radixPoint);
                        e.end = e.begin = d.numericInput ? u.call(f, h) : h;
                        break;
                      }
                    default:
                      if (i = e.begin, a = s.call(f, i, !0), i <= (r = u.call(f, -1 !== a || c.call(f, 0) ? a : -1))) e.end = e.begin = c.call(f, i, !1, !0) ? i : u.call(f, i);else {
                        var v = p.validPositions[a],
                          m = o.getTestTemplate.call(f, r, v ? v.match.locator : void 0, v),
                          g = o.getPlaceholder.call(f, r, m.match);
                        if ("" !== g && l.call(f)[r] !== g && !0 !== m.match.optionalQuantifier && !0 !== m.match.newBlockMarker || !c.call(f, r, d.keepStatic, !0) && m.match.def === g) {
                          var y = u.call(f, r);
                          (i >= y || i === r) && (r = y);
                        }
                        e.end = e.begin = r;
                      }
                  }
                  return e;
                }
              }, t.getBuffer = l, t.getBufferTemplate = function () {
                var e = this.maskset;
                void 0 === e._buffer && (e._buffer = o.getMaskTemplate.call(this, !1, 1), void 0 === e.buffer && (e.buffer = e._buffer.slice()));
                return e._buffer;
              }, t.getLastValidPosition = s, t.isMask = c, t.resetMaskSet = function (e) {
                var t = this.maskset;
                t.buffer = void 0, !0 !== e && (t.validPositions = [], t.p = 0);
                !1 === e && (t.tests = {}, t.jitOffset = {});
              }, t.seekNext = u, t.seekPrevious = function (e, t) {
                var n = this,
                  i = e - 1;
                if (e <= 0) return 0;
                for (; i > 0 && (!0 === t && (!0 !== o.getTest.call(n, i).match.newBlockMarker || !c.call(n, i, void 0, !0)) || !0 !== t && !c.call(n, i, void 0, !0));) i--;
                return i;
              }, t.translatePosition = f;
              var i,
                a = (i = n(9380)) && i.__esModule ? i : {
                  default: i
                },
                r = n(7215),
                o = n(4713);
              function l(e) {
                var t = this,
                  n = t.maskset;
                return void 0 !== n.buffer && !0 !== e || (n.buffer = o.getMaskTemplate.call(t, !0, s.call(t), !0), void 0 === n._buffer && (n._buffer = n.buffer.slice())), n.buffer;
              }
              function s(e, t, n) {
                var i = this.maskset,
                  a = -1,
                  r = -1,
                  o = n || i.validPositions;
                void 0 === e && (e = -1);
                for (var l = 0, s = o.length; l < s; l++) o[l] && (t || !0 !== o[l].generatedInput) && (l <= e && (a = l), l >= e && (r = l));
                return -1 === a || a === e ? r : -1 === r || e - a < r - e ? a : r;
              }
              function c(e, t, n) {
                var i = this,
                  a = this.maskset,
                  r = o.getTestTemplate.call(i, e).match;
                if ("" === r.def && (r = o.getTest.call(i, e).match), !0 !== r.static) return r.fn;
                if (!0 === n && void 0 !== a.validPositions[e] && !0 !== a.validPositions[e].generatedInput) return !0;
                if (!0 !== t && e > -1) {
                  if (n) {
                    var l = o.getTests.call(i, e);
                    return l.length > 1 + ("" === l[l.length - 1].match.def ? 1 : 0);
                  }
                  var s = o.determineTestTemplate.call(i, e, o.getTests.call(i, e)),
                    c = o.getPlaceholder.call(i, e, s.match);
                  return s.match.def !== c;
                }
                return !1;
              }
              function u(e, t, n) {
                var i = this;
                void 0 === n && (n = !0);
                for (var a = e + 1; "" !== o.getTest.call(i, a).match.def && (!0 === t && (!0 !== o.getTest.call(i, a).match.newBlockMarker || !c.call(i, a, void 0, !0)) || !0 !== t && !c.call(i, a, void 0, n));) a++;
                return a;
              }
              function f(e) {
                var t = this.opts,
                  n = this.el;
                return !this.isRTL || "number" != typeof e || t.greedy && "" === t.placeholder || !n || (e = this._valueGet().length - e) < 0 && (e = 0), e;
              }
            },
            4713: function _(e, t, n) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.determineTestTemplate = f, t.getDecisionTaker = s, t.getMaskTemplate = function (e, t, n, i, a) {
                var r = this,
                  o = this.opts,
                  l = this.maskset,
                  s = o.greedy;
                a && o.greedy && (o.greedy = !1, r.maskset.tests = {});
                t = t || 0;
                var p,
                  d,
                  v,
                  m,
                  g = [],
                  y = 0;
                do {
                  if (!0 === e && l.validPositions[y]) d = (v = a && l.validPositions[y].match.optionality && void 0 === l.validPositions[y + 1] && (!0 === l.validPositions[y].generatedInput || l.validPositions[y].input == o.skipOptionalPartCharacter && y > 0) ? f.call(r, y, h.call(r, y, p, y - 1)) : l.validPositions[y]).match, p = v.locator.slice(), g.push(!0 === n ? v.input : !1 === n ? d.nativeDef : c.call(r, y, d));else {
                    d = (v = u.call(r, y, p, y - 1)).match, p = v.locator.slice();
                    var k = !0 !== i && (!1 !== o.jitMasking ? o.jitMasking : d.jit);
                    (m = (m || l.validPositions[y - 1]) && d.static && d.def !== o.groupSeparator && null === d.fn) || !1 === k || void 0 === k || "number" == typeof k && isFinite(k) && k > y ? g.push(!1 === n ? d.nativeDef : c.call(r, g.length, d)) : m = !1;
                  }
                  y++;
                } while (!0 !== d.static || "" !== d.def || t > y);
                "" === g[g.length - 1] && g.pop();
                !1 === n && void 0 !== l.maskLength || (l.maskLength = y - 1);
                return o.greedy = s, g;
              }, t.getPlaceholder = c, t.getTest = p, t.getTestTemplate = u, t.getTests = h, t.isSubsetOf = d;
              var i,
                a = (i = n(2394)) && i.__esModule ? i : {
                  default: i
                },
                r = n(8711);
              function o(e) {
                return o = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
                  return _typeof(e);
                } : function (e) {
                  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
                }, o(e);
              }
              function l(e, t) {
                var n = (null != e.alternation ? e.mloc[s(e)] : e.locator).join("");
                if ("" !== n) for (n = n.split(":")[0]; n.length < t;) n += "0";
                return n;
              }
              function s(e) {
                var t = e.locator[e.alternation];
                return "string" == typeof t && t.length > 0 && (t = t.split(",")[0]), void 0 !== t ? t.toString() : "";
              }
              function c(e, t, n) {
                var i = this,
                  a = this.opts,
                  l = this.maskset;
                if (void 0 !== (t = t || p.call(i, e).match).placeholder || !0 === n) {
                  if ("" !== t.placeholder && !0 === t.static && !0 !== t.generated) {
                    var s = r.getLastValidPosition.call(i, e),
                      c = r.seekNext.call(i, s);
                    return (n ? e <= c : e < c) ? a.staticDefinitionSymbol && t.static ? t.nativeDef : t.def : "function" == typeof t.placeholder ? t.placeholder(a) : t.placeholder;
                  }
                  return "function" == typeof t.placeholder ? t.placeholder(a) : t.placeholder;
                }
                if (!0 === t.static) {
                  if (e > -1 && void 0 === l.validPositions[e]) {
                    var u,
                      f = h.call(i, e),
                      d = [];
                    if ("string" == typeof a.placeholder && f.length > 1 + ("" === f[f.length - 1].match.def ? 1 : 0)) for (var v = 0; v < f.length; v++) if ("" !== f[v].match.def && !0 !== f[v].match.optionality && !0 !== f[v].match.optionalQuantifier && (!0 === f[v].match.static || void 0 === u || !1 !== f[v].match.fn.test(u.match.def, l, e, !0, a)) && (d.push(f[v]), !0 === f[v].match.static && (u = f[v]), d.length > 1 && /[0-9a-bA-Z]/.test(d[0].match.def))) return a.placeholder.charAt(e % a.placeholder.length);
                  }
                  return t.def;
                }
                return "object" === o(a.placeholder) ? t.def : a.placeholder.charAt(e % a.placeholder.length);
              }
              function u(e, t, n) {
                return this.maskset.validPositions[e] || f.call(this, e, h.call(this, e, t ? t.slice() : t, n));
              }
              function f(e, t) {
                var n = this.opts,
                  i = 0,
                  a = function (e, t) {
                    var n = 0,
                      i = !1;
                    t.forEach(function (e) {
                      e.match.optionality && (0 !== n && n !== e.match.optionality && (i = !0), (0 === n || n > e.match.optionality) && (n = e.match.optionality));
                    }), n && (0 == e || 1 == t.length ? n = 0 : i || (n = 0));
                    return n;
                  }(e, t);
                e = e > 0 ? e - 1 : 0;
                var r,
                  o,
                  s,
                  c = l(p.call(this, e));
                n.greedy && t.length > 1 && "" === t[t.length - 1].match.def && (i = 1);
                for (var u = 0; u < t.length - i; u++) {
                  var f = t[u];
                  r = l(f, c.length);
                  var d = Math.abs(r - c);
                  (!0 !== f.unMatchedAlternationStopped || t.filter(function (e) {
                    return !0 !== e.unMatchedAlternationStopped;
                  }).length <= 1) && (void 0 === o || "" !== r && d < o || s && !n.greedy && s.match.optionality && s.match.optionality - a > 0 && "master" === s.match.newBlockMarker && (!f.match.optionality || f.match.optionality - a < 1 || !f.match.newBlockMarker) || s && !n.greedy && s.match.optionalQuantifier && !f.match.optionalQuantifier) && (o = d, s = f);
                }
                return s;
              }
              function p(e, t) {
                var n = this.maskset;
                return n.validPositions[e] ? n.validPositions[e] : (t || h.call(this, e))[0];
              }
              function d(e, t, n) {
                function i(e) {
                  for (var t, n = [], i = -1, a = 0, r = e.length; a < r; a++) if ("-" === e.charAt(a)) for (t = e.charCodeAt(a + 1); ++i < t;) n.push(String.fromCharCode(i));else i = e.charCodeAt(a), n.push(e.charAt(a));
                  return n.join("");
                }
                return e.match.def === t.match.nativeDef || !(!(n.regex || e.match.fn instanceof RegExp && t.match.fn instanceof RegExp) || !0 === e.match.static || !0 === t.match.static) && ("." === t.match.fn.source || -1 !== i(t.match.fn.source.replace(/[[\]/]/g, "")).indexOf(i(e.match.fn.source.replace(/[[\]/]/g, ""))));
              }
              function h(e, t, n) {
                var i,
                  r,
                  o = this,
                  l = this.dependencyLib,
                  s = this.maskset,
                  c = this.opts,
                  u = this.el,
                  p = s.maskToken,
                  h = t ? n : 0,
                  v = t ? t.slice() : [0],
                  m = [],
                  g = !1,
                  y = t ? t.join("") : "",
                  k = !1;
                function b(t, n, r, l) {
                  function f(r, l, p) {
                    function v(e, t) {
                      var n = 0 === t.matches.indexOf(e);
                      return n || t.matches.every(function (i, a) {
                        return !0 === i.isQuantifier ? n = v(e, t.matches[a - 1]) : Object.prototype.hasOwnProperty.call(i, "matches") && (n = v(e, i)), !n;
                      }), n;
                    }
                    function w(e, t, n) {
                      var i, a;
                      if ((s.tests[e] || s.validPositions[e]) && (s.validPositions[e] ? [s.validPositions[e]] : s.tests[e]).every(function (e, r) {
                        if (e.mloc[t]) return i = e, !1;
                        var o = void 0 !== n ? n : e.alternation,
                          l = void 0 !== e.locator[o] ? e.locator[o].toString().indexOf(t) : -1;
                        return (void 0 === a || l < a) && -1 !== l && (i = e, a = l), !0;
                      }), i) {
                        var r = i.locator[i.alternation],
                          o = i.mloc[t] || i.mloc[r] || i.locator;
                        if (-1 !== o[o.length - 1].toString().indexOf(":")) o.pop();
                        return o.slice((void 0 !== n ? n : i.alternation) + 1);
                      }
                      return void 0 !== n ? w(e, t) : void 0;
                    }
                    function P(t, n) {
                      return !0 === t.match.static && !0 !== n.match.static && n.match.fn.test(t.match.def, s, e, !1, c, !1);
                    }
                    function S(e, t) {
                      var n = e.alternation,
                        i = void 0 === t || n <= t.alternation && -1 === e.locator[n].toString().indexOf(t.locator[n]);
                      if (!i && n > t.alternation) for (var a = 0; a < n; a++) if (e.locator[a] !== t.locator[a]) {
                        n = a, i = !0;
                        break;
                      }
                      return !!i && function (n) {
                        e.mloc = e.mloc || {};
                        var i = e.locator[n];
                        if (void 0 !== i) {
                          if ("string" == typeof i && (i = i.split(",")[0]), void 0 === e.mloc[i] && (e.mloc[i] = e.locator.slice(), e.mloc[i].push(":".concat(e.alternation))), void 0 !== t) {
                            for (var a in t.mloc) "string" == typeof a && (a = parseInt(a.split(",")[0])), e.mloc[a + 0] = t.mloc[a];
                            e.locator[n] = Object.keys(e.mloc).join(",");
                          }
                          return e.alternation > n && (e.alternation = n), !0;
                        }
                        return e.alternation = void 0, !1;
                      }(n);
                    }
                    function O(e, t) {
                      if (e.locator.length !== t.locator.length) return !1;
                      for (var n = e.alternation + 1; n < e.locator.length; n++) if (e.locator[n] !== t.locator[n]) return !1;
                      return !0;
                    }
                    if (h > e + c._maxTestPos) throw new Error("Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. ".concat(s.mask));
                    if (h === e && void 0 === r.matches) {
                      if (m.push({
                        match: r,
                        locator: l.reverse(),
                        cd: y,
                        mloc: {}
                      }), !r.optionality || void 0 !== p || !(c.definitions && c.definitions[r.nativeDef] && c.definitions[r.nativeDef].optional || a.default.prototype.definitions[r.nativeDef] && a.default.prototype.definitions[r.nativeDef].optional)) return !0;
                      g = !0, h = e;
                    } else if (void 0 !== r.matches) {
                      if (r.isGroup && p !== r) return function () {
                        if (r = f(t.matches[t.matches.indexOf(r) + 1], l, p)) return !0;
                      }();
                      if (r.isOptional) return function () {
                        var t = r,
                          a = m.length;
                        if (r = b(r, n, l, p), m.length > 0) {
                          if (m.forEach(function (e, t) {
                            t >= a && (e.match.optionality = e.match.optionality ? e.match.optionality + 1 : 1);
                          }), i = m[m.length - 1].match, void 0 !== p || !v(i, t)) return r;
                          g = !0, h = e;
                        }
                      }();
                      if (r.isAlternator) return function () {
                        function i(e) {
                          for (var t, n = e.matches[0].matches ? e.matches[0].matches.length : 1, i = 0; i < e.matches.length && n === (t = e.matches[i].matches ? e.matches[i].matches.length : 1); i++);
                          return n !== t;
                        }
                        o.hasAlternator = !0;
                        var a,
                          v = r,
                          y = [],
                          b = m.slice(),
                          x = l.length,
                          _ = n.length > 0 ? n.shift() : -1;
                        if (-1 === _ || "string" == typeof _) {
                          var M,
                            E = h,
                            j = n.slice(),
                            T = [];
                          if ("string" == typeof _) T = _.split(",");else for (M = 0; M < v.matches.length; M++) T.push(M.toString());
                          if (void 0 !== s.excludes[e]) {
                            for (var A = T.slice(), D = 0, L = s.excludes[e].length; D < L; D++) {
                              var C = s.excludes[e][D].toString().split(":");
                              l.length == C[1] && T.splice(T.indexOf(C[0]), 1);
                            }
                            0 === T.length && (delete s.excludes[e], T = A);
                          }
                          (!0 === c.keepStatic || isFinite(parseInt(c.keepStatic)) && E >= c.keepStatic) && (T = T.slice(0, 1));
                          for (var B = 0; B < T.length; B++) {
                            M = parseInt(T[B]), m = [], n = "string" == typeof _ && w(h, M, x) || j.slice();
                            var I = v.matches[M];
                            if (I && f(I, [M].concat(l), p)) r = !0;else if (0 === B && (k = i(v)), I && I.matches && I.matches.length > v.matches[0].matches.length) break;
                            a = m.slice(), h = E, m = [];
                            for (var R = 0; R < a.length; R++) {
                              var F = a[R],
                                N = !1;
                              F.alternation = F.alternation || x, S(F);
                              for (var V = 0; V < y.length; V++) {
                                var G = y[V];
                                if ("string" != typeof _ || void 0 !== F.alternation && T.includes(F.locator[F.alternation].toString())) {
                                  if (F.match.nativeDef === G.match.nativeDef) {
                                    N = !0, S(G, F);
                                    break;
                                  }
                                  if (d(F, G, c)) {
                                    S(F, G) && (N = !0, y.splice(y.indexOf(G), 0, F));
                                    break;
                                  }
                                  if (d(G, F, c)) {
                                    S(G, F);
                                    break;
                                  }
                                  if (P(F, G)) {
                                    O(F, G) || void 0 !== u.inputmask.userOptions.keepStatic ? S(F, G) && (N = !0, y.splice(y.indexOf(G), 0, F)) : c.keepStatic = !0;
                                    break;
                                  }
                                  if (P(G, F)) {
                                    S(G, F);
                                    break;
                                  }
                                }
                              }
                              N || y.push(F);
                            }
                          }
                          m = b.concat(y), h = e, g = m.length > 0 && k, r = y.length > 0 && !k, k && g && !r && m.forEach(function (e, t) {
                            e.unMatchedAlternationStopped = !0;
                          }), n = j.slice();
                        } else r = f(v.matches[_] || t.matches[_], [_].concat(l), p);
                        if (r) return !0;
                      }();
                      if (r.isQuantifier && p !== t.matches[t.matches.indexOf(r) - 1]) return function () {
                        for (var a = r, o = !1, u = n.length > 0 ? n.shift() : 0; u < (isNaN(a.quantifier.max) ? u + 1 : a.quantifier.max) && h <= e; u++) {
                          var p = t.matches[t.matches.indexOf(a) - 1];
                          if (r = f(p, [u].concat(l), p)) {
                            if (m.forEach(function (t, n) {
                              (i = x(p, t.match) ? t.match : m[m.length - 1].match).optionalQuantifier = u >= a.quantifier.min, i.jit = (u + 1) * (p.matches.indexOf(i) + 1) > a.quantifier.jit, i.optionalQuantifier && v(i, p) && (g = !0, h = e, c.greedy && null == s.validPositions[e - 1] && u > a.quantifier.min && -1 != ["*", "+"].indexOf(a.quantifier.max) && (m.pop(), y = void 0), o = !0, r = !1), !o && i.jit && (s.jitOffset[e] = p.matches.length - p.matches.indexOf(i));
                            }), o) break;
                            return !0;
                          }
                        }
                      }();
                      if (r = b(r, n, l, p)) return !0;
                    } else h++;
                  }
                  for (var p = n.length > 0 ? n.shift() : 0; p < t.matches.length; p++) if (!0 !== t.matches[p].isQuantifier) {
                    var v = f(t.matches[p], [p].concat(r), l);
                    if (v && h === e) return v;
                    if (h > e) break;
                  }
                }
                function x(e, t) {
                  var n = -1 != e.matches.indexOf(t);
                  return n || e.matches.forEach(function (e, i) {
                    void 0 === e.matches || n || (n = x(e, t));
                  }), n;
                }
                if (e > -1) {
                  if (void 0 === t) {
                    for (var w, P = e - 1; void 0 === (w = s.validPositions[P] || s.tests[P]) && P > -1;) P--;
                    void 0 !== w && P > -1 && (v = function (e, t) {
                      var n,
                        i = [];
                      return Array.isArray(t) || (t = [t]), t.length > 0 && (void 0 === t[0].alternation || !0 === c.keepStatic ? 0 === (i = f.call(o, e, t.slice()).locator.slice()).length && (i = t[0].locator.slice()) : t.forEach(function (e) {
                        "" !== e.def && (0 === i.length ? (n = e.alternation, i = e.locator.slice()) : e.locator[n] && -1 === i[n].toString().indexOf(e.locator[n]) && (i[n] += "," + e.locator[n]));
                      })), i;
                    }(P, w), y = v.join(""), h = P);
                  }
                  if (s.tests[e] && s.tests[e][0].cd === y) return s.tests[e];
                  for (var S = v.shift(); S < p.length; S++) {
                    if (b(p[S], v, [S]) && h === e || h > e) break;
                  }
                }
                return (0 === m.length || g) && m.push({
                  match: {
                    fn: null,
                    static: !0,
                    optionality: !1,
                    casing: null,
                    def: "",
                    placeholder: ""
                  },
                  locator: k && 0 === m.filter(function (e) {
                    return !0 !== e.unMatchedAlternationStopped;
                  }).length ? [0] : [],
                  mloc: {},
                  cd: y
                }), void 0 !== t && s.tests[e] ? r = l.extend(!0, [], m) : (s.tests[e] = l.extend(!0, [], m), r = s.tests[e]), m.forEach(function (e) {
                  e.match.optionality = e.match.defOptionality || !1;
                }), r;
              }
            },
            7215: function _(e, t, n) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              }), t.alternate = l, t.checkAlternationMatch = function (e, t, n) {
                for (var i, a = this.opts.greedy ? t : t.slice(0, 1), r = !1, o = void 0 !== n ? n.split(",") : [], l = 0; l < o.length; l++) -1 !== (i = e.indexOf(o[l])) && e.splice(i, 1);
                for (var s = 0; s < e.length; s++) if (a.includes(e[s])) {
                  r = !0;
                  break;
                }
                return r;
              }, t.handleRemove = function (e, t, n, i, s) {
                var c = this,
                  u = this.maskset,
                  f = this.opts;
                if ((f.numericInput || c.isRTL) && (t === a.keys.Backspace ? t = a.keys.Delete : t === a.keys.Delete && (t = a.keys.Backspace), c.isRTL)) {
                  var p = n.end;
                  n.end = n.begin, n.begin = p;
                }
                var d,
                  h = r.getLastValidPosition.call(c, void 0, !0);
                n.end >= r.getBuffer.call(c).length && h >= n.end && (n.end = h + 1);
                t === a.keys.Backspace ? n.end - n.begin < 1 && (n.begin = r.seekPrevious.call(c, n.begin)) : t === a.keys.Delete && n.begin === n.end && (n.end = r.isMask.call(c, n.end, !0, !0) ? n.end + 1 : r.seekNext.call(c, n.end) + 1);
                !1 !== (d = v.call(c, n)) && ((!0 !== i && !1 !== f.keepStatic || null !== f.regex && -1 !== o.getTest.call(c, n.begin).match.def.indexOf("|")) && l.call(c, !0), !0 !== i && (u.p = t === a.keys.Delete ? n.begin + d : n.begin, u.p = r.determineNewCaretPosition.call(c, {
                  begin: u.p,
                  end: u.p
                }, !1, !1 === f.insertMode && t === a.keys.Backspace ? "none" : void 0).begin));
              }, t.isComplete = c, t.isSelection = u, t.isValid = f, t.refreshFromBuffer = d, t.revalidateMask = v;
              var i = n(6030),
                a = n(2839),
                r = n(8711),
                o = n(4713);
              function l(e, t, n, i, a, s) {
                var c = this,
                  u = this.dependencyLib,
                  p = this.opts,
                  d = c.maskset;
                if (!c.hasAlternator) return !1;
                var h,
                  v,
                  m,
                  g,
                  y,
                  k,
                  b,
                  x,
                  w,
                  P,
                  S,
                  O = u.extend(!0, [], d.validPositions),
                  _ = u.extend(!0, {}, d.tests),
                  M = !1,
                  E = !1,
                  j = void 0 !== a ? a : r.getLastValidPosition.call(c);
                if (s && (P = s.begin, S = s.end, s.begin > s.end && (P = s.end, S = s.begin)), -1 === j && void 0 === a) h = 0, v = (g = o.getTest.call(c, h)).alternation;else for (; j >= 0; j--) if ((m = d.validPositions[j]) && void 0 !== m.alternation) {
                  if (j <= (e || 0) && g && g.locator[m.alternation] !== m.locator[m.alternation]) break;
                  h = j, v = d.validPositions[h].alternation, g = m;
                }
                if (void 0 !== v) {
                  b = parseInt(h), d.excludes[b] = d.excludes[b] || [], !0 !== e && d.excludes[b].push((0, o.getDecisionTaker)(g) + ":" + g.alternation);
                  var T = [],
                    A = -1;
                  for (y = b; b < r.getLastValidPosition.call(c, void 0, !0) + 1; y++) -1 === A && e <= y && void 0 !== t && (T.push(t), A = T.length - 1), (k = d.validPositions[b]) && !0 !== k.generatedInput && (void 0 === s || y < P || y >= S) && T.push(k.input), d.validPositions.splice(b, 1);
                  for (-1 === A && void 0 !== t && (T.push(t), A = T.length - 1); void 0 !== d.excludes[b] && d.excludes[b].length < 10;) {
                    for (d.tests = {}, r.resetMaskSet.call(c, !0), M = !0, y = 0; y < T.length && (x = M.caret || 0 == p.insertMode && null != x ? r.seekNext.call(c, x) : r.getLastValidPosition.call(c, void 0, !0) + 1, w = T[y], M = f.call(c, x, w, !1, i, !0)); y++) y === A && (E = M), 1 == e && M && (E = {
                      caretPos: y
                    });
                    if (M) break;
                    if (r.resetMaskSet.call(c), g = o.getTest.call(c, b), d.validPositions = u.extend(!0, [], O), d.tests = u.extend(!0, {}, _), !d.excludes[b]) {
                      E = l.call(c, e, t, n, i, b - 1, s);
                      break;
                    }
                    if (null != g.alternation) {
                      var D = (0, o.getDecisionTaker)(g);
                      if (-1 !== d.excludes[b].indexOf(D + ":" + g.alternation)) {
                        E = l.call(c, e, t, n, i, b - 1, s);
                        break;
                      }
                      for (d.excludes[b].push(D + ":" + g.alternation), y = b; y < r.getLastValidPosition.call(c, void 0, !0) + 1; y++) d.validPositions.splice(b);
                    } else delete d.excludes[b];
                  }
                }
                return E && !1 === p.keepStatic || delete d.excludes[b], E;
              }
              function s(e, t, n) {
                var i = this.opts,
                  r = this.maskset;
                switch (i.casing || t.casing) {
                  case "upper":
                    e = e.toUpperCase();
                    break;
                  case "lower":
                    e = e.toLowerCase();
                    break;
                  case "title":
                    var o = r.validPositions[n - 1];
                    e = 0 === n || o && o.input === String.fromCharCode(a.keyCode.Space) ? e.toUpperCase() : e.toLowerCase();
                    break;
                  default:
                    if ("function" == typeof i.casing) {
                      var l = Array.prototype.slice.call(arguments);
                      l.push(r.validPositions), e = i.casing.apply(this, l);
                    }
                }
                return e;
              }
              function c(e) {
                var t = this,
                  n = this.opts,
                  i = this.maskset;
                if ("function" == typeof n.isComplete) return n.isComplete(e, n);
                if ("*" !== n.repeat) {
                  var a = !1,
                    l = r.determineLastRequiredPosition.call(t, !0),
                    s = l.l;
                  if (void 0 === l.def || l.def.newBlockMarker || l.def.optionality || l.def.optionalQuantifier) {
                    a = !0;
                    for (var c = 0; c <= s; c++) {
                      var u = o.getTestTemplate.call(t, c).match;
                      if (!0 !== u.static && void 0 === i.validPositions[c] && (!1 === u.optionality || void 0 === u.optionality || u.optionality && 0 == u.newBlockMarker) && (!1 === u.optionalQuantifier || void 0 === u.optionalQuantifier) || !0 === u.static && "" != u.def && e[c] !== o.getPlaceholder.call(t, c, u)) {
                        a = !1;
                        break;
                      }
                    }
                  }
                  return a;
                }
              }
              function u(e) {
                var t = this.opts.insertMode ? 0 : 1;
                return this.isRTL ? e.begin - e.end > t : e.end - e.begin > t;
              }
              function f(e, t, n, i, a, p, m) {
                var g = this,
                  y = this.dependencyLib,
                  k = this.opts,
                  b = g.maskset;
                n = !0 === n;
                var x = e;
                function w(e) {
                  if (void 0 !== e) {
                    if (void 0 !== e.remove && (Array.isArray(e.remove) || (e.remove = [e.remove]), e.remove.sort(function (e, t) {
                      return g.isRTL ? e.pos - t.pos : t.pos - e.pos;
                    }).forEach(function (e) {
                      v.call(g, {
                        begin: e,
                        end: e + 1
                      });
                    }), e.remove = void 0), void 0 !== e.insert && (Array.isArray(e.insert) || (e.insert = [e.insert]), e.insert.sort(function (e, t) {
                      return g.isRTL ? t.pos - e.pos : e.pos - t.pos;
                    }).forEach(function (e) {
                      "" !== e.c && f.call(g, e.pos, e.c, void 0 === e.strict || e.strict, void 0 !== e.fromIsValid ? e.fromIsValid : i);
                    }), e.insert = void 0), e.refreshFromBuffer && e.buffer) {
                      var t = e.refreshFromBuffer;
                      d.call(g, !0 === t ? t : t.start, t.end, e.buffer), e.refreshFromBuffer = void 0;
                    }
                    void 0 !== e.rewritePosition && (x = e.rewritePosition, e = !0);
                  }
                  return e;
                }
                function P(t, n, a) {
                  var l = !1;
                  return o.getTests.call(g, t).every(function (c, f) {
                    var p = c.match;
                    if (r.getBuffer.call(g, !0), !1 !== (l = (!p.jit || void 0 !== b.validPositions[r.seekPrevious.call(g, t)]) && (null != p.fn ? p.fn.test(n, b, t, a, k, u.call(g, e)) : (n === p.def || n === k.skipOptionalPartCharacter) && "" !== p.def && {
                      c: o.getPlaceholder.call(g, t, p, !0) || p.def,
                      pos: t
                    }))) {
                      var d = void 0 !== l.c ? l.c : n,
                        h = t;
                      return d = d === k.skipOptionalPartCharacter && !0 === p.static ? o.getPlaceholder.call(g, t, p, !0) || p.def : d, !0 !== (l = w(l)) && void 0 !== l.pos && l.pos !== t && (h = l.pos), !0 !== l && void 0 === l.pos && void 0 === l.c ? !1 : (!1 === v.call(g, e, y.extend({}, c, {
                        input: s.call(g, d, p, h)
                      }), i, h) && (l = !1), !1);
                    }
                    return !0;
                  }), l;
                }
                void 0 !== e.begin && (x = g.isRTL ? e.end : e.begin);
                var S = !0,
                  O = y.extend(!0, [], b.validPositions);
                if (!1 === k.keepStatic && void 0 !== b.excludes[x] && !0 !== a && !0 !== i) for (var _ = x; _ < (g.isRTL ? e.begin : e.end); _++) void 0 !== b.excludes[_] && (b.excludes[_] = void 0, delete b.tests[_]);
                if ("function" == typeof k.preValidation && !0 !== i && !0 !== p && (S = w(S = k.preValidation.call(g, r.getBuffer.call(g), x, t, u.call(g, e), k, b, e, n || a))), !0 === S) {
                  if (S = P(x, t, n), (!n || !0 === i) && !1 === S && !0 !== p) {
                    var M = b.validPositions[x];
                    if (!M || !0 !== M.match.static || M.match.def !== t && t !== k.skipOptionalPartCharacter) {
                      if (k.insertMode || void 0 === b.validPositions[r.seekNext.call(g, x)] || e.end > x) {
                        var E = !1;
                        if (b.jitOffset[x] && void 0 === b.validPositions[r.seekNext.call(g, x)] && !1 !== (S = f.call(g, x + b.jitOffset[x], t, !0, !0)) && (!0 !== a && (S.caret = x), E = !0), e.end > x && (b.validPositions[x] = void 0), !E && !r.isMask.call(g, x, k.keepStatic && 0 === x)) for (var j = x + 1, T = r.seekNext.call(g, x, !1, 0 !== x); j <= T; j++) if (!1 !== (S = P(j, t, n))) {
                          S = h.call(g, x, void 0 !== S.pos ? S.pos : j) || S, x = j;
                          break;
                        }
                      }
                    } else S = {
                      caret: r.seekNext.call(g, x)
                    };
                  }
                  g.hasAlternator && !0 !== a && !n && (a = !0, !1 === S && k.keepStatic && (c.call(g, r.getBuffer.call(g)) || 0 === x) ? S = l.call(g, x, t, n, i, void 0, e) : (u.call(g, e) && b.tests[x] && b.tests[x].length > 1 && k.keepStatic || 1 == S && !0 !== k.numericInput && b.tests[x] && b.tests[x].length > 1 && r.getLastValidPosition.call(g, void 0, !0) > x) && (S = l.call(g, !0))), !0 === S && (S = {
                    pos: x
                  });
                }
                if ("function" == typeof k.postValidation && !0 !== i && !0 !== p) {
                  var A = k.postValidation.call(g, r.getBuffer.call(g, !0), void 0 !== e.begin ? g.isRTL ? e.end : e.begin : e, t, S, k, b, n, m);
                  void 0 !== A && (S = !0 === A ? S : A);
                }
                S && void 0 === S.pos && (S.pos = x), !1 === S || !0 === p ? (r.resetMaskSet.call(g, !0), b.validPositions = y.extend(!0, [], O)) : h.call(g, void 0, x, !0);
                var D = w(S);
                void 0 !== g.maxLength && r.getBuffer.call(g).length > g.maxLength && !i && (r.resetMaskSet.call(g, !0), b.validPositions = y.extend(!0, [], O), D = !1);
                return D;
              }
              function p(e, t, n) {
                for (var i = this.maskset, a = !1, r = o.getTests.call(this, e), l = 0; l < r.length; l++) {
                  if (r[l].match && (r[l].match.nativeDef === t.match[n.shiftPositions ? "def" : "nativeDef"] && (!n.shiftPositions || !t.match.static) || r[l].match.nativeDef === t.match.nativeDef || n.regex && !r[l].match.static && r[l].match.fn.test(t.input, i, e, !1, n))) {
                    a = !0;
                    break;
                  }
                  if (r[l].match && r[l].match.def === t.match.nativeDef) {
                    a = void 0;
                    break;
                  }
                }
                return !1 === a && void 0 !== i.jitOffset[e] && (a = p.call(this, e + i.jitOffset[e], t, n)), a;
              }
              function d(e, t, n) {
                var a,
                  o,
                  l = this,
                  s = this.maskset,
                  c = this.opts,
                  u = this.dependencyLib,
                  f = c.skipOptionalPartCharacter,
                  p = l.isRTL ? n.slice().reverse() : n;
                if (c.skipOptionalPartCharacter = "", !0 === e) r.resetMaskSet.call(l, !1), e = 0, t = n.length, o = r.determineNewCaretPosition.call(l, {
                  begin: 0,
                  end: 0
                }, !1).begin;else {
                  for (a = e; a < t; a++) s.validPositions.splice(e, 0);
                  o = e;
                }
                var d = new u.Event("keypress");
                for (a = e; a < t; a++) {
                  d.key = p[a].toString(), l.ignorable = !1;
                  var h = i.EventHandlers.keypressEvent.call(l, d, !0, !1, !1, o);
                  !1 !== h && void 0 !== h && (o = h.forwardPosition);
                }
                c.skipOptionalPartCharacter = f;
              }
              function h(e, t, n) {
                var i = this,
                  a = this.maskset,
                  l = this.dependencyLib;
                if (void 0 === e) for (e = t - 1; e > 0 && !a.validPositions[e]; e--);
                for (var s = e; s < t; s++) {
                  if (void 0 === a.validPositions[s] && !r.isMask.call(i, s, !1)) if (0 == s ? o.getTest.call(i, s) : a.validPositions[s - 1]) {
                    var c = o.getTests.call(i, s).slice();
                    "" === c[c.length - 1].match.def && c.pop();
                    var u,
                      p = o.determineTestTemplate.call(i, s, c);
                    if (p && (!0 !== p.match.jit || "master" === p.match.newBlockMarker && (u = a.validPositions[s + 1]) && !0 === u.match.optionalQuantifier) && ((p = l.extend({}, p, {
                      input: o.getPlaceholder.call(i, s, p.match, !0) || p.match.def
                    })).generatedInput = !0, v.call(i, s, p, !0), !0 !== n)) {
                      var d = a.validPositions[t].input;
                      return a.validPositions[t] = void 0, f.call(i, t, d, !0, !0);
                    }
                  }
                }
              }
              function v(e, t, n, i) {
                var a = this,
                  l = this.maskset,
                  s = this.opts,
                  c = this.dependencyLib;
                function d(e, t, n) {
                  var i = t[e];
                  if (void 0 !== i && !0 === i.match.static && !0 !== i.match.optionality && (void 0 === t[0] || void 0 === t[0].alternation)) {
                    var a = n.begin <= e - 1 ? t[e - 1] && !0 === t[e - 1].match.static && t[e - 1] : t[e - 1],
                      r = n.end > e + 1 ? t[e + 1] && !0 === t[e + 1].match.static && t[e + 1] : t[e + 1];
                    return a && r;
                  }
                  return !1;
                }
                var h = 0,
                  v = void 0 !== e.begin ? e.begin : e,
                  m = void 0 !== e.end ? e.end : e,
                  g = !0;
                if (e.begin > e.end && (v = e.end, m = e.begin), i = void 0 !== i ? i : v, void 0 === n && (v !== m || s.insertMode && void 0 !== l.validPositions[i] || void 0 === t || t.match.optionalQuantifier || t.match.optionality)) {
                  var y,
                    k = c.extend(!0, [], l.validPositions),
                    b = r.getLastValidPosition.call(a, void 0, !0);
                  l.p = v;
                  var x = u.call(a, e) ? v : i;
                  for (y = b; y >= x; y--) l.validPositions.splice(y, 1), void 0 === t && delete l.tests[y + 1];
                  var w,
                    P,
                    S = i,
                    O = S;
                  for (t && (l.validPositions[i] = c.extend(!0, {}, t), O++, S++), null == k[m] && l.jitOffset[m] && (m += l.jitOffset[m] + 1), y = t ? m : m - 1; y <= b; y++) {
                    if (void 0 !== (w = k[y]) && !0 !== w.generatedInput && (y >= m || y >= v && d(y, k, {
                      begin: v,
                      end: m
                    }))) {
                      for (; "" !== o.getTest.call(a, O).match.def;) {
                        if (!1 !== (P = p.call(a, O, w, s)) || "+" === w.match.def) {
                          "+" === w.match.def && r.getBuffer.call(a, !0);
                          var _ = f.call(a, O, w.input, "+" !== w.match.def, !0);
                          if (g = !1 !== _, S = (_.pos || O) + 1, !g && P) break;
                        } else g = !1;
                        if (g) {
                          void 0 === t && w.match.static && y === e.begin && h++;
                          break;
                        }
                        if (!g && r.getBuffer.call(a), O > l.maskLength) break;
                        O++;
                      }
                      "" == o.getTest.call(a, O).match.def && (g = !1), O = S;
                    }
                    if (!g) break;
                  }
                  if (!g) return l.validPositions = c.extend(!0, [], k), r.resetMaskSet.call(a, !0), !1;
                } else t && o.getTest.call(a, i).match.cd === t.match.cd && (l.validPositions[i] = c.extend(!0, {}, t));
                return r.resetMaskSet.call(a, !0), h;
              }
            }
          },
          t = {};
        function n(i) {
          var a = t[i];
          if (void 0 !== a) return a.exports;
          var r = t[i] = {
            exports: {}
          };
          return e[i](r, r.exports, n), r.exports;
        }
        var i = {};
        return function () {
          var e = i;
          Object.defineProperty(e, "__esModule", {
            value: !0
          }), e.default = void 0, n(7149), n(3194), n(9302), n(4013), n(3851), n(219), n(207), n(5296);
          var t,
            a = (t = n(2394)) && t.__esModule ? t : {
              default: t
            };
          e.default = a.default;
        }(), i;
      }();
    });
  })(inputmask);
  var inputmaskExports = inputmask.exports;
  var Inputmask = /*@__PURE__*/getDefaultExportFromCjs(inputmaskExports);

  var ComponentItiDropdown = function () {
    var inputFocusoutHandler = function inputFocusoutHandler(elem) {
      validateItem(elem);
    };
    var inputFocusHandler = function inputFocusHandler(elem) {
      clearError(elem);
    };
    var init = function init(jqWrapElem, optionArr) {
      var currentItiWrap = jqWrapElem;
      var currentItiInput = currentItiWrap.find('.js__itidropdown-input');
      var currentCountry = currentItiInput.data('country');
      currentItiInput.each(function (index) {
        var iti = intlTelInput(this, {
          onlyCountries: ["us", "ca", "ua"],
          // UA only for testing
          countryOrder: ["us", "ca", "ua"],
          initialCountry: "us",
          separateDialCode: true,
          countrySearch: false,
          hiddenInput: function hiddenInput(telInputName) {
            return {
              phone: "phone_full",
              country: "country_code"
            };
          }
        });
        $(this).data('iti', iti);
        if (currentCountry) {
          iti.setCountry(currentCountry);
        }

        // const input = document.querySelector('#phone');
        // const iti = intlTelInput.getInstance(input);
        // iti.setCountry('ca');
        // iti.setNumber('2343242342');

        Inputmask({
          mask: "999-999-9999",
          placeholder: '',
          removeMaskOnSubmit: true,
          showMaskOnHover: false,
          showMaskOnFocus: false
        }).mask(this);
      });
      currentItiInput.on('focusout', function (e) {
        e.preventDefault();
        inputFocusoutHandler($(this));
      });
      currentItiInput.on('focus', function (e) {
        e.preventDefault();
        inputFocusHandler($(this));
      });
    };
    var showError = function showError(itiInput, errorMessage) {
      var currentItiWrap = itiInput.closest('.component__itidropdown');
      var errorElem = currentItiWrap.find('.js-field-error');
      currentItiWrap.addClass('is-invalid');
      itiInput.addClass('is-invalid');
      errorElem.text(errorMessage);
    };
    var clearError = function clearError(itiInput) {
      var currentItiWrap = itiInput.closest('.component__itidropdown');
      var errorElem = currentItiWrap.find('.js-field-error');
      currentItiWrap.removeClass('is-invalid');
      itiInput.removeClass('is-invalid');
      errorElem.text('');
    };
    var validate = function validate(currentItiWrap) {
      var errorArray = [];
      currentItiWrap.each(function () {
        var errors = validateItem($(this).find('.js__itidropdown-input'));
        errorArray = errorArray.concat(errors);
      });
      return errorArray;
    };
    var validateItem = function validateItem(itiInput, isShowError) {
      var currentItiWrap = itiInput.closest('.component__itidropdown');
      var errorMessage = '';
      var errors = [];
      if (currentItiWrap.hasClass('is-required') && itiInput.val() === "") {
        errorMessage = 'Required field';
        errors.push(errorMessage);
        {
          clearError(itiInput);
          showError(itiInput, errorMessage);
        }
      }
      return errors;
    };
    return {
      init: init,
      validate: validate,
      showError: showError
    };
  }();

  var jsPagination = /*#__PURE__*/_createClass(function jsPagination() {
    _classCallCheck(this, jsPagination);
    _defineProperty(this, "updatePagination", function (parentfunction) {
      console.log('js pager');
      $('.pagination-wrapper').each(function () {
        var $paginationNav = $(this);
        console.log('paginationNav', $paginationNav);
        console.log('data', $paginationNav.data());

        // Get the tab name, checking if it exists
        var tabName = $paginationNav.data('name');

        // Add event listeners to pagination links
        $paginationNav.find('a.page-link').on('click', function (e) {
          e.preventDefault(); // Prevent the default link behavior

          console.log(this.href);

          // Check if tabName exists before calling the parent function
          if (tabName) {
            var page = new URL(this.href).searchParams.get('page_' + tabName);
            parentfunction(page, tabName); // Call the parent function with the page number and tab name
          } else {
            var _page = new URL(this.href).searchParams.get('page');
            parentfunction(_page); // Call the parent function with just the page number
          }
        });
      });
    });
  });

  var CasesIntegration = /*#__PURE__*/_createClass(function CasesIntegration() {
    var _this = this;
    _classCallCheck(this, CasesIntegration);
    _defineProperty(this, "updateStyle", function (elem) {
      if (elem.val() !== '') {
        elem.addClass('has-value');
      } else {
        elem.removeClass('has-value');
      }
    });
    _defineProperty(this, "applyFilter", function () {
      console.log("CasesIntegration filter");
      var formData = getFormData$2();

      // Make AJAX request
      $.ajax({
        url: "".concat(SITEURL, "orders/cases/filter"),
        type: "POST",
        headers: {
          "X-CSRF-TOKEN": getCSRFToken()
        },
        data: formData,
        processData: false,
        // Important for FormData
        contentType: false,
        // Important for FormData
        dataType: "json",
        success: function success(data) {
          console.log(data);
          var $CasesTabContent = $("#CasesTabContent");
          $CasesTabContent.empty(); // Clear the container
          $CasesTabContent.append(data.TabContent); // Append the new HTML

          var $SectionOffcanvas = $("#SectionOffcanvas");
          $SectionOffcanvas.empty();
          $SectionOffcanvas.append(data.SectionOffcanvas);
          var _jsPagination = new jsPagination();
          _jsPagination.updatePagination(loadCasesPage);
          //$('#total-results').html(data.total);

          updateTotalResults();
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.error("Error:", textStatus, errorThrown);
        }
      });
    });
    $("#collapseFilter select").on('change', function () {
      console.log("CasesIntegration date filter changed");
      _this.applyFilter();
    });
    $("#casesSearchSubmit").on('click', function () {
      _this.applyFilter();
    });
    var classWrapper = this;
    $(".cases-searches__orderid-input").on('change', function () {
      classWrapper.updateStyle($(this));
    });
    $(".component__autocomplete-input").on('change', function () {
      classWrapper.updateStyle($(this));
    });
    $("#casesFilterDateRange").on('change', function () {
      _this.applyFilter();
    });
    $(".js__cases-filters__reset").on('click', function () {
      resetAllFilters$2($(this));
    });
    var _jsPagination2 = new jsPagination();
    _jsPagination2.updatePagination(loadCasesPage);
  });
  function resetAllFilters$2(elem) {
    var tab = elem.closest('.js__cases-filters-tab');
    var listSelect2 = tab.find('.js__select2');
    listSelect2.val(null).trigger('change');
  }
  function getFormData$2() {
    // Create a FormData object
    var formData = new FormData();

    // Append values to the FormData object
    formData.append("progress_status", $("#casesFilterStatus").val());
    formData.append("ordered_by", $("#casesFilterOrderedBy").val());
    formData.append("report_type", $("#casesFilterReportType").val());
    formData.append("assignee", $("#casesFilterAssignee").val());
    formData.append("order_id", $("#casesSearchByOrderId").val());
    formData.append("search_by_pdnames", $("#casesFilterNames").val());
    formData.append("start_date", $("#casesFilterDateRange_start").val());
    formData.append("end_date", $("#casesFilterDateRange_end").val());
    formData.append("only_my", document.getElementById('casesFilterOnlyMy').checked);
    console.log("formData", formData);
    return formData;
  }
  function loadCasesPage(page) {
    var tabName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var formData = getFormData$2();
    console.log("page", page);
    formData.append("page_" + tabName, page);
    formData.append("tabName", tabName);

    // Make AJAX request
    $.ajax({
      url: SITEURL + "orders/cases/filter",
      type: "POST",
      headers: {
        "X-CSRF-TOKEN": getCSRFToken()
      },
      data: formData,
      processData: false,
      // Important for FormData
      contentType: false,
      // Important for FormData
      dataType: "json",
      success: function success(data) {
        console.log(data);
        var $CasesTabContent = $("#CasesTabContent");
        $CasesTabContent.empty(); // Clear the container
        $CasesTabContent.append(data.TabContent); // Append the new HTML

        var $SectionOffcanvas = $("#SectionOffcanvas");
        $SectionOffcanvas.empty();
        $SectionOffcanvas.append(data.SectionOffcanvas);
        var _jsPagination = new jsPagination();
        _jsPagination.updatePagination(loadCasesPage);
        updateTotalResults();
        //$('#total-results').html(data.total);
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        console.error("Error:", textStatus, errorThrown);
      }
    });
  }

  var TransactionsIntegration = /*#__PURE__*/_createClass(function TransactionsIntegration() {
    var _this = this;
    _classCallCheck(this, TransactionsIntegration);
    _defineProperty(this, "updateStyle", function (elem) {
      if (elem.val() !== '') {
        elem.addClass('has-value');
      } else {
        elem.removeClass('has-value');
      }
    });
    _defineProperty(this, "applyFilter", function () {
      console.log("TransactionsIntegration filter");
      var formData = getFormData$1();

      // Make AJAX request
      $.ajax({
        url: "".concat(SITEURL, "transactions/list/filter"),
        type: "POST",
        headers: {
          "X-CSRF-TOKEN": getCSRFToken()
        },
        data: formData,
        processData: false,
        // Important for FormData
        contentType: false,
        // Important for FormData
        dataType: "json",
        success: function success(data) {
          console.log(data);
          var $ListContent = $("#ListContent");
          $ListContent.empty(); // Clear the container
          $ListContent.append(data.Content); // Append the new HTML

          var $SectionOffcanvas = $("#SectionOffcanvas");
          $SectionOffcanvas.empty();
          $SectionOffcanvas.append(data.SectionOffcanvas);
          var _jsPagination = new jsPagination();
          _jsPagination.updatePagination(loadTransactionsPage);
          updateTotalResults();
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.error("Error:", textStatus, errorThrown);
        }
      });
    });
    $("#collapseFilter select").on('change', function () {
      console.log("TransactionsIntegration date filter changed");
      _this.applyFilter();
    });
    $("#transactionsSearchSubmit").on('click', function () {
      _this.applyFilter();
    });
    var classWrapper = this;
    $(".transactions-searches").find(".transactions-searches__orderid-input").on('change', function () {
      classWrapper.updateStyle($(this));
    });
    $(".transactions-searches").find(".component__autocomplete-input").on('change', function () {
      classWrapper.updateStyle($(this));
    });
    $(".js__transactions-filters__reset").on('click', function () {
      resetAllFilters$1($(this));
    });
    var _jsPagination2 = new jsPagination();
    _jsPagination2.updatePagination(loadTransactionsPage);
  });
  function resetAllFilters$1(elem) {
    var tab = elem.closest('.js__transactions-filters-tab');
    var listSelect2 = tab.find('.js__select2');
    listSelect2.val(null).trigger('change');
  }
  function getFormData$1() {
    // Create a FormData object
    var formData = new FormData();

    // Append values to the FormData object
    formData.append("transaction_type", $("#transactionsFilterTransactionType").val());
    formData.append("case_type", $("#transactionsFilterCaseType").val());
    formData.append("product", $("#transactionsFilterProduct").val());
    formData.append("payment_method", $("#transactionsFilterPaymentMethod").val());
    formData.append("order_id", $("#transactionsSearchByOrderId").val());
    formData.append("search_by_pdnames", $("#transactionsFilterNames").val());
    formData.append("start_date", $("#transactionsFilterDateRange_start").val());
    formData.append("end_date", $("#transactionsFilterDateRange_end").val());
    formData.append("only_my", document.getElementById('transactionsFilterOnlyMy').checked);
    console.log("formData", formData);
    return formData;
  }
  function loadTransactionsPage(page) {
    var formData = getFormData$1();
    console.log("page", page);
    formData.append("page", page);

    // Make AJAX request
    $.ajax({
      url: SITEURL + "transactions/list/filter",
      type: "POST",
      headers: {
        "X-CSRF-TOKEN": getCSRFToken()
      },
      data: formData,
      processData: false,
      // Important for FormData
      contentType: false,
      // Important for FormData
      dataType: "json",
      success: function success(data) {
        console.log(data);
        var $ListContent = $("#ListContent");
        $ListContent.empty(); // Clear the container
        $ListContent.append(data.Content); // Append the new HTML

        // const $SectionOffcanvas = $("#SectionOffcanvas");
        // $SectionOffcanvas.empty();
        // $SectionOffcanvas.append(data.SectionOffcanvas);

        var _jsPagination = new jsPagination();
        _jsPagination.updatePagination(loadTransactionsPage);
        updateTotalResults();
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        console.error("Error:", textStatus, errorThrown);
      }
    });
  }

  var ComponentFormWrapper = function () {
    var init = function init(formElem) {
      ComponentTextInput.init(formElem.find('.form-field'));
      ComponentDropdownSelect2.init(formElem.find('.component__dropdown2'));
      ComponentItiDropdown.init(formElem.find('.component__itidropdown'));
    };
    var validate = function validate(formElem) {
      var result = false;
      var formFieldsList = formElem.find('.js__component-of-form');
      formFieldsList.each(function () {
        result = validateField($(this)) || result;
      });
      return !result;
    };
    var validateField = function validateField(fieldElem) {
      var errors = [];
      switch (true) {
        case fieldElem.hasClass('form-field'):
          errors = ComponentTextInput.validate(fieldElem);
          return !!errors.length;
        case fieldElem.hasClass('component__dropdown2'):
          errors = ComponentDropdownSelect2.validate(fieldElem);
          return !!errors.length;
        case fieldElem.hasClass('component__itidropdown'):
          errors = ComponentItiDropdown.validate(fieldElem);
          return !!errors.length;
        default:
          return true;
      }
    };
    var showErrors = function showErrors(form, data) {
      console.log(data);
      var keys = Object.keys(data);
      keys.forEach(function (key) {
        var field = form.find("[name=\"".concat(key, "\"]"));
        switch (true) {
          case field.hasClass('form-field__input'):
            ComponentTextInput.showError(field, data[key]);
          case field.hasClass('js__select2'):
            ComponentDropdownSelect2.showError(field, data[key]);
          case field.hasClass('component__itidropdown-input'):
            ComponentItiDropdown.showError(field, data[key]);
        }
      });
    };
    return {
      init: init,
      validate: validate,
      showErrors: showErrors
    };
  }();

  var EditUserOffcanvas = /*#__PURE__*/_createClass(function EditUserOffcanvas() {
    var _this = this;
    _classCallCheck(this, EditUserOffcanvas);
    _defineProperty(this, "getFormData", function (formElem) {
      var formData = new FormData();
      var phoneInputItiInstance = formElem.find("#userEditOffcanvasPhone").data("iti");
      var phoneMobileInputItiInstance = formElem.find("#userEditOffcanvasMobilenumber").data("iti");
      formData.append("user_id", formElem.find("#userEditOffcanvasUserId").val());
      formData.append("first_name", formElem.find("#userEditOffcanvasFistName").val());
      formData.append("last_name", formElem.find("#userEditOffcanvasLastName").val());
      formData.append("email", formElem.find("#userEditOffcanvasEmail").val());
      formData.append("role", formElem.find("#userEditOffcanvasRole").val());
      formData.append("phone_number", phoneInputItiInstance.getNumber());
      formData.append("mobile_number", phoneMobileInputItiInstance.getNumber());
      formData.append("employee_id", formElem.find("#userEditOffcanvasEmployeeId").val());
      formData.append("job_title", formElem.find("#userEditOffcanvasJobTitle").val());
      formData.append("office_name", formElem.find("#userEditOffcanvasOfficeName").val());
      return formData;
    });
    _defineProperty(this, "sendForm", function (formElem, formData) {
      var formUrl = formElem.data('action');
      var canvas = formElem.data('canvas');
      $.ajax({
        url: formUrl,
        type: "POST",
        headers: {
          "X-CSRF-TOKEN": getCSRFToken()
        },
        data: formData,
        processData: false,
        contentType: false,
        dataType: "json",
        success: function success(data) {
          ComponentFormWrapper.showErrors($('.offcanvas__edit-user-from'), data);
          $(canvas).replaceWith(data.canvas);
          new Toast$1({
            position: ".offcanvas-end.show .offcanvas-header",
            text: "1 user suspended!",
            type: 'successful'
          });
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.error("Error:", textStatus, errorThrown);
          ComponentFormWrapper.showErrors($('.offcanvas__edit-user-from'), jqXHR.responseJSON.messages);
          new Toast$1({
            position: ".offcanvas-end.show .offcanvas-header",
            text: "Validation error",
            type: 'error'
          });
        }
      });
    });
    $('.js__edit-user-btn-submit').on('click', function () {
      var form = $('.offcanvas__edit-user-from');
      if (ComponentFormWrapper.validate(form)) {
        _this.sendForm(form, _this.getFormData(form));
      } else {
        new Toast$1({
          position: ".offcanvas-end.show .offcanvas-header",
          text: "Validation error",
          type: 'error'
        });
      }
    });
    $(".js__load-edit-user-offcanvas").on('click', function (e) {
      var currentElem = $(this);
      var url = currentElem.data('url');
      var userId = currentElem.data('uid');
      var offcanvasBody = $(currentElem.data('bs-target')).find('#offcanvasEditUserDetailsBody');
      if (url && userId) {
        $.ajax({
          url: url,
          headers: {
            'X-CSRF-TOKEN': getCSRFToken()
          },
          method: 'POST',
          data: {
            user_id: userId
          },
          success: function success(response) {
            offcanvasBody.replaceWith(response.offcanvasContent);
            ComponentFormWrapper.init($('.offcanvas__edit-user-from'));
            new EditUserOffcanvas();
          },
          error: function error(_error) {
            console.log(_error);
          }
        });
      }
    });
  });

  var UserManagementIntegration = /*#__PURE__*/_createClass(function UserManagementIntegration() {
    var _this = this;
    _classCallCheck(this, UserManagementIntegration);
    _defineProperty(this, "updateStyle", function (elem) {
      if (elem.val() !== '') {
        elem.addClass('has-value');
      } else {
        elem.removeClass('has-value');
      }
    });
    _defineProperty(this, "applyFilter", function () {
      console.log("UserManagementIntegration applyFilter");
      var formData = getFormData();

      // Make AJAX request for filtering users
      $.ajax({
        url: "".concat(SITEURL, "user-management/list/filter"),
        // Changed to user management endpoint
        type: "POST",
        headers: {
          "X-CSRF-TOKEN": getCSRFToken()
        },
        data: formData,
        processData: false,
        // Important for FormData
        contentType: false,
        // Important for FormData
        dataType: "json",
        success: function success(data) {
          console.log(data);
          var $ListContent = $("#ListContent");
          $ListContent.empty(); // Clear the container
          $ListContent.append(data.Content); // Append the new HTML content for user list

          var $SectionOffcanvas = $("#SectionOffcanvas");
          $SectionOffcanvas.empty(); // Clear the offcanvas section
          $SectionOffcanvas.append(data.SectionOffcanvas); // Append the new HTML for offcanvas if needed

          new EditUserOffcanvas();
          var _jsPagination = new jsPagination();
          _jsPagination.updatePagination(loadUsersPage); // Update pagination for users

          var tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
          _toConsumableArray(tooltipTriggerList).map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
          });
          updateTotalResults(); // Update the total number of users shown
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.error("Error:", textStatus, errorThrown);
        }
      });
    });
    // Listen for filter changes on the select elements
    $("#collapseFilter select").on('change', function () {
      console.log("UserManagementIntegration filter changed");
      _this.applyFilter();
    });
    $("#usersFilterStatus").on('change', function () {
      console.log("UserManagementIntegration filter changed");
      _this.applyFilter();
    });
    $("#usersSearchSubmit").on('click', function () {
      _this.applyFilter();
    });
    var classWrapper = this;
    $(".users-searches").find(".component__autocomplete-input").on('change', function () {
      classWrapper.updateStyle($(this));
    });
    $(".js__users-filters__reset").on('click', function () {
      resetAllFilters($(this));
    });
    $(".js__users-searches-user").on('input', function (e) {
      e.preventDefault();
      var currentElem = $(this);
      var currentValue = currentElem.val().toLowerCase();
      var wrapperElem = currentElem.closest(".users-searches");
      var listElem = wrapperElem.find(".js__users-searches-user-list");
      var userIdHiddenInput = wrapperElem.find('#usersSearchesSearchUsersByNameEmail');
      var url = listElem.data("url");
      listElem.addClass('_hidden');
      userIdHiddenInput.val('');
      if (currentValue && currentValue.length > 2) {
        if (getGlobalEnvironment() != '') {
          $.ajax({
            url: url,
            headers: {
              'X-CSRF-TOKEN': _getCSRFToken()
            },
            method: 'POST',
            data: {
              search: currentValue
            },
            success: function success(response) {
              listElem.html('');
              listElem.html(response.searchResult);
              listElem.removeClass("_hidden");
              $('.js__users-searches-user-item').on('click', function (e) {
                e.preventDefault();
                var userNames = $(this).data('name');
                var userId = $(this).data('id');
                currentElem.val(userNames);
                userIdHiddenInput.val(userId);
                listElem.addClass("_hidden");
              });
            },
            error: function error(_error) {
              console.log(_error);
            }
          });
        } else {
          listElem.removeClass('_hidden');
        }
      }
    });
    $(document).on('click', function (event) {
      if (!$(event.target).closest('.users-searches__user-search').length && !$(event.target).closest('.js__users-searches-user-list').length) {
        $('#usersSearchesSearchUsersByNameEmail').val('');
        $(".js__users-searches-user-list").addClass('_hidden');
      }
    });

    // Handle Suspend Selection
    $('#suspend-users').on('click', function (e) {
      e.preventDefault();
      var selectedUsers = getSelectedUsers();
      if (selectedUsers.length > 0) {
        // Send AJAX request to suspend users
        $.ajax({
          url: SITEURL + 'user-management/deactivate-users',
          // Backend route for suspension
          type: 'POST',
          data: {
            ids: selectedUsers,
            action: 'suspend'
          },
          success: function success(response) {
            new Toast$1({
              position: ".header .justify-content-end",
              text: 'Selected users suspended successfully',
              type: 'successful',
              class: 'page-toast'
            });
            loadUsersPage(1);
          },
          error: function error(xhr, status, _error2) {
            console.error('Error suspending users:', _error2);
          }
        });
      } else {
        new Toast$1({
          position: ".header .justify-content-end",
          text: 'Please select at least one user.',
          type: 'error',
          class: 'page-toast'
        });
      }
    });

    // Handle Reactivate Selection
    $('#reactivate-users').on('click', function (e) {
      e.preventDefault();
      var selectedUsers = getSelectedUsers();
      if (selectedUsers.length > 0) {
        // Send AJAX request to reactivate users
        $.ajax({
          url: SITEURL + 'user-management/reactivate-users',
          // Backend route for reactivation
          type: 'POST',
          data: {
            ids: selectedUsers,
            action: 'reactivate'
          },
          success: function success(response) {
            new Toast$1({
              position: ".header .justify-content-end",
              text: 'Selected users reactivated successfully',
              type: 'successful',
              class: 'page-toast'
            });
            loadUsersPage(1);
          },
          error: function error(xhr, status, _error3) {
            console.error('Error reactivating users:', _error3);
          }
        });
      } else {
        new Toast$1({
          position: ".header .justify-content-end",
          text: 'Please select at least one user.',
          type: 'error',
          class: 'page-toast'
        });
      }
    });

    // CSV download functionality
    var userManagementDownloadBtn = document.querySelector('.download-btn');
    if (userManagementDownloadBtn) {
      userManagementDownloadBtn.addEventListener('click', function () {
        var filters = new URLSearchParams({
          status: document.querySelector('#usersFilterStatus').value,
          role: document.querySelector('#usersFilterRole').value,
          job_title: document.querySelector('#usersFilterJob').value,
          plaintiff_name: document.querySelector('#usersFilterPlantiffName').value,
          user_name_email: document.querySelector('#usersSearchesSearchUsersByNameEmail').value
        });
        // Construct the URL with filters
        window.location.href = SITEURL + '/user-management/download_csv?' + filters.toString();
      });
    }
    $(document).on('click', '.delete', function () {
      $(this).closest('.card').remove();
    });

    /* Invite  */

    //  TODO - refactor to new  toastr Function to display success toast
    function showSuccessToast(message) {
      $('#successToastMessage').text(message); // Set the dynamic message
      var successToast = new bootstrap.Toast(document.getElementById('successToast'));
      successToast.show(); // Show the toast
    }

    // Function to display error toast
    function showErrorToast(message) {
      $('#errorToastMessage').text(message); // Set the dynamic message
      var errorToast = new bootstrap.Toast(document.getElementById('errorToast'));
      errorToast.show(); // Show the toast
    }
    function _getCSRFToken() {
      var csrfTokenInput = document.querySelector('input[name="csrf_token"]');
      var csrfTokenMeta = document.querySelector('meta[name="csrf_token"]');
      return csrfTokenInput ? csrfTokenInput.value : csrfTokenMeta ? csrfTokenMeta.content : '';
    }

    // Handle showing delete modal with correct job title
    $(document).on('click', '.delete-job-title', function () {
      var jobTitle = $(this).data('job-title');
      var id = $(this).data('id'); // Assuming the job title ID is passed via `data-id`
      $('#jobTitleName').text(jobTitle); // Display job title in modal
      $('#jobTitleName').data('id', id); // Store the ID in the modal for reference
      $('#deleteJobTitle').modal('show'); // Show the delete confirmation modal
    });

    // Handle deletion confirmation
    $('#confirmDelete').click(function () {
      var id = $('#jobTitleName').data('id'); // Get the job title ID from the modal
      var jobTitleName = $('#jobTitleName').text();

      // Make AJAX request to delete the job title
      $.ajax({
        url: SITEURL + "job-title/delete/".concat(id),
        // Your backend URL for deleting job titles
        type: "POST",
        headers: {
          "X-CSRF-TOKEN": _getCSRFToken()
        },
        dataType: "json",
        success: function success(response) {
          // If the deletion was successful, remove the job title from the list
          $('#job-list-item-' + id).remove();

          // Also remove the job title from the select dropdown
          $('#jobTitleSelect_1 option:contains("' + jobTitleName + '")').remove();

          // Close the modal
          $('#deleteJobTitle').modal('hide');

          // Show success toast
          showSuccessToast(response.message);
        },
        error: function error(xhr) {
          // Extract the error message from the API response
          var errorMessage = xhr.responseJSON && xhr.responseJSON.messages ? xhr.responseJSON.messages.error : 'Failed to delete job title. Please try again.';

          // Show the error toast
          showErrorToast(errorMessage);
        }
      });
    });

    // Handle the Add to List button click
    $('#addToList').click(function (e) {
      e.preventDefault(); // Prevent form submission

      var jobTitle = $('#jobTitleInput').val(); // Get job title input

      if (jobTitle === '') {
        showErrorToast('Please enter a job title.'); // Validation error
        return;
      }
      var formData = new FormData();
      formData.append("job_title", jobTitle);

      // Make AJAX request to add the job title
      $.ajax({
        url: SITEURL + 'job-title/add',
        // Backend URL for adding job titles
        headers: {
          "X-CSRF-TOKEN": _getCSRFToken()
        },
        type: "POST",
        data: formData,
        dataType: "json",
        processData: false,
        contentType: false,
        success: function success(response) {
          // Clear the input field
          $('#jobTitleInput').val('');

          // Append the new job title to the list dynamically
          $('#jobTitleList').append("\n                        <tr id=\"job-list-item-".concat(response.id, "\">\n                                <td> ").concat(response.job_title, "</td>\n                                <td class=\"text-end\">\n                                    unassigned\n                                        <button class=\"ms-2 delete-job-title\" type=\"button\" data-bs-target=\"#deleteJobTitle\" data-bs-toggle=\"modal\" \n                                            data-job-title=\"").concat(response.job_title, "\" \n                                            data-id=\"").concat(response.id, "\">\n                                            <svg class=\"icon icon-delete\">\n                                                <use href=\"/assets/themes/default/icon/icons/icons.svg#delete\" />\n                                            </svg>\n                                        </button>\n                                </td>\n                            </tr>\n                    "));

          // Append the new job title to the select dropdown
          $('#jobTitleSelect_1').append("\n                        <option value=\"".concat(response.job_title, "\">").concat(response.job_title, "</option>\n                    "));

          // Show the success toast with a message from the API
          showSuccessToast(response.message || 'Job title added successfully.');
        },
        error: function error(xhr) {
          // Extract the error message from the API response
          var errorMessage = xhr.responseJSON && xhr.responseJSON.messages ? xhr.responseJSON.messages.error : 'Failed to add job title. Please try again.';

          // Show the error toast
          showErrorToast(errorMessage);
        }
      });
    });
    var inviteCount = 1; // Start with one invite form
    var maxInvites = 10; // Limit of 10 invites

    // Function to update the IDs and names of the newly added form
    function updateFormIds(form, count) {
      form.attr('id', "userInviteForm_".concat(count));
      form.find('#firstName_1').attr('id', "firstName_".concat(count)).attr('name', "firstName_".concat(count));
      form.find('#lastName_1').attr('id', "lastName_".concat(count)).attr('name', "lastName_".concat(count));
      form.find('#email_1').attr('id', "email_".concat(count)).attr('name', "email_".concat(count));
      form.find('#role_1').attr('id', "role_".concat(count)).attr('name', "role_".concat(count));
      form.find('#jobTitleSelect_1').attr('id', "jobTitleSelect_".concat(count)).attr('name', "job_title_".concat(count));
    }

    // Handle adding additional user invite forms
    $('#invite_additional').click(function (e) {
      e.preventDefault(); // Prevent the default action

      if (inviteCount < maxInvites) {
        inviteCount++; // Increment the count of invite forms

        // Clone the first form and update its IDs
        var newForm = $('#userInviteForm_1').clone(); // Clone the first form
        updateFormIds(newForm, inviteCount); // Update the IDs for the cloned form

        newForm.find(".delete").removeClass('d-none');
        newForm.find(".select2").remove();
        ComponentDropdownSelect2.init(newForm.find('.component__dropdown2'));

        // Append the new form to the container (before the invite button)
        newForm.insertAfter('#userInviteForm_1').hide().fadeIn(); // Insert and animate

        if (inviteCount === maxInvites) {
          // Disable the "Invite additional user" button if max limit is reached
          $('#invite_additional').addClass('disabled').text('Invite limit reached');
        }
      }
    });

    // Handle form submission
    $('#inviteUsersBtn').click(function (e) {
      e.preventDefault(); // Prevent default form submission

      var allFormsValid = true;

      // Loop through all forms to check for validation
      $('.userInviteForm').each(function () {
        var form = $(this);
        form.addClass('was-validated'); // Add Bootstrap validation class

        // If any field is invalid, prevent the form from being submitted
        console.log(form);
        var first_name = form.find('input[id^="firstName_"]');
        var last_name = form.find('input[id^="lastName_"]');
        if (first_name.val() === null || first_name.val() === "") {
          first_name.closest('.is-required').addClass('_invalid');
          allFormsValid = false;
        } else {
          first_name.closest('.is-required').removeClass('_invalid');
        }
        if (last_name.val() === null || last_name.val() === "") {
          last_name.closest('.is-required').addClass('_invalid');
          allFormsValid = false;
        } else {
          last_name.closest('.is-required').removeClass('_invalid');
        }

        // Validate Work Email
        var emailField = form.find('input[id^="email_"]');
        var email = emailField.val().trim();
        // TODO
        //let emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

        if (!email) {
          emailField.closest('.is-required').addClass('_invalid');
          allFormsValid = false;
        } /*else if (!emailPattern.test(email)) {
            emailField.closest('.is-required').addClass('_invalid');
            emailField.siblings('.form-field__error').text('Invalid email format').show();
            allFormsValid = false;
          }*/else {
          emailField.closest('.is-required').removeClass('_invalid');
          emailField.siblings('.form-field__error').hide();
        }

        // Manually check if select fields have valid values
        var roleSelect = form.find('select[id^="role_"]');
        var jobTitleSelect = form.find('select[id^="jobTitleSelect_"]');

        // Check if the selected value is invalid (default "Select" option)
        if (roleSelect.val() === null || roleSelect.val() === "") {
          roleSelect.addClass('is-invalid');
          allFormsValid = false;
        } else {
          roleSelect.removeClass('is-invalid');
        }
        if (jobTitleSelect.val() === null || jobTitleSelect.val() === "") {
          //jobTitleSelect.addClass('is-invalid');
          allFormsValid = false;
        } else {
          jobTitleSelect.removeClass('is-invalid');
        }
      });
      if (allFormsValid) {
        // Collect all invite form data
        var inviteFormsData = [];
        $('.userInviteForm').each(function () {
          var formId = $(this).attr('id');
          var formData = {
            first_name: $(this).find("#firstName_".concat(formId.split('_')[1])).val(),
            last_name: $(this).find("#lastName_".concat(formId.split('_')[1])).val(),
            email: $(this).find("#email_".concat(formId.split('_')[1])).val(),
            role: $(this).find("#role_".concat(formId.split('_')[1])).val(),
            job_title: $(this).find("#jobTitleSelect_".concat(formId.split('_')[1])).val()
          };
          inviteFormsData.push(formData);
        });

        // Send the collected form data via AJAX to the backend
        $.ajax({
          url: SITEURL + 'accounts/invite-users',
          type: 'POST',
          headers: {
            'X-CSRF-TOKEN': _getCSRFToken()
          },
          contentType: 'application/json',
          data: JSON.stringify({
            invites: inviteFormsData
          }),
          success: function success(response) {
            new Toast$1({
              position: ".offcanvas-end.show .offcanvas-header",
              text: 'Invitations (' + inviteFormsData.length + ') sent successfully',
              type: 'successful'
            });

            // Remove all forms except the first one
            $('.userInviteForm').not(':first').remove();
            $('#userInviteForm_1').removeClass('was-validated');
            // Clear the first form fields
            $('.userInviteForm:first').find('input, select').val('').removeClass('was-validated');
            $('#role_1').val(null).trigger('change');
            $('#jobTitleSelect_1').val(null).trigger('change');

            // update last users
            loadUsers();
          },
          error: function error(xhr) {
            var errorMessage = xhr.responseJSON && xhr.responseJSON.messages ? xhr.responseJSON.messages.error : 'Failed to send invitations. Please try again.';
            new Toast$1({
              position: ".offcanvas-end.show .offcanvas-header",
              text: errorMessage,
              type: 'error'
            });
          }
        });
      } else {
        new Toast$1({
          position: ".offcanvas-end.show .offcanvas-header",
          text: 'Please fill in all required fields.',
          type: 'error'
        });
      }
    });

    // Listen for the offcanvas 'shown' event
    $('#invite_users_sidebar').on('shown.bs.offcanvas', function () {
      console.log('Invite Users sidebar is now open');
      // You can trigger any additional logic here
      $('#firstName_1').focus();
    });
    $('#invite_users_sidebar').on('shown.bs.offcanvas', function () {
      loadUsers();
    });

    // Function to load both registered and invited users
    function loadUsers() {
      $.ajax({
        url: SITEURL + 'user-management/get-last-users',
        type: 'GET',
        dataType: 'json',
        success: function success(response) {
          var registeredUsers = response.registeredUsers; // Get registered users from response
          var invitedUsers = response.invitedUsers; // Get invited users from response

          var registeredContainer = $('#registeredUsersList');
          var invitedContainer = $('#invitedUsersList');

          // Clear existing content
          registeredContainer.empty();
          invitedContainer.empty();

          // Populate registered users
          if (registeredUsers.length > 0) {
            registeredUsers.forEach(function (user) {
              registeredContainer.append("\n                                <div class=\"card p-3 mb-2 rounded-3\">\n                                    <div class=\"d-flex align-items-center justify-content-between\">\n                                        <div class=\"d-flex align-items-center gap-2\">\n                                            <picture class=\"photo__image\">\n                                                <img src=\"/user/profile-avatar/".concat(user.id, "?width=52&height=52\" alt=\"img\" class=\"photo__img\" width=\"52\" height=\"52\" />\n                                            </picture>\n\n                                            <div>\n                                                <p class=\"fw-medium\">").concat(user.first_name, " ").concat(user.last_name, "</p>\n                                                <p class=\"fs-12\">").concat(user.email, "</p>\n                                            </div>\n                                        </div>\n                                        <div class=\"text-end\">\n                                            <p class=\"fs-12 fw-medium\">").concat(user.group_name, "</p>\n                                            <p class=\"fs-12\">").concat(user.company_name, "</p>\n                                        </div>\n                                    </div>\n                                </div>\n                            "));
            });
          } else {
            registeredContainer.append('<p class="text-muted">No registered users available at the moment.</p>');
          }

          // Populate invited users
          if (invitedUsers.length > 0) {
            invitedUsers.forEach(function (user) {
              invitedContainer.append("\n                                    <div class=\"card p-3 mb-2 rounded-3\">\n                                        <div class=\"d-flex align-items-center justify-content-between\">\n                                            <div class=\"d-flex align-items-center gap-2\">\n                                                <picture class=\"photo__image\">\n                                                    <img src=\"/user/profile-avatar/".concat(user.id, "?width=52&height=52\" alt=\"img\" class=\"photo__img\" width=\"52\" height=\"52\" />\n                                                </picture>\n\n                                                <div>\n                                                    <p class=\"fw-medium\">").concat(user.first_name, " ").concat(user.last_name, "</p>\n                                                    <p class=\"fs-12\">").concat(user.email, "</p>\n                                                </div>\n                                            </div>\n                                            <div class=\"text-end\">\n                                                <p class=\"fs-12 fw-medium\">").concat(user.group_name, "</p>\n                                                <p class=\"fs-12\">").concat(user.company_name, "</p>\n                                            </div>\n                                        </div>\n                                    </div>\n                            "));
            });
          } else {
            invitedContainer.append('<p class="text-muted">No invited users available at the moment.</p>');
          }

          // Update badges with the number of users
          $('#registered-tab .counter').text(registeredUsers.length);
          $('#invited-tab .counter').text(invitedUsers.length);
        },
        error: function error() {
          $('#registeredUsersList').html('<p class="text-danger">Failed to load registered users.</p>');
          $('#invitedUsersList').html('<p class="text-danger">Failed to load invited users.</p>');
        }
      });
    }

    /* END Invite  */

    // Initialize pagination
    var _jsPagination2 = new jsPagination();
    _jsPagination2.updatePagination(loadUsersPage); // Changed to load users page
  });
  function resetAllFilters(elem) {
    var tab = elem.closest('.js__users-filters-tab');
    var listSelect2 = tab.find('.js__select2');
    listSelect2.val(null).trigger('change');
  }
  function getFormData() {
    // Create a FormData object for user management filters
    var formData = new FormData();

    // Append values from filters to the FormData object
    formData.append("status", $("#usersFilterStatus").val());
    formData.append("role", $("#usersFilterRole").val());
    formData.append("job_title", $("#usersFilterJob").val());
    formData.append("plaintiff_name", $("#usersFilterPlantiffName").val());
    formData.append("user_name_email", $("#usersSearchesSearchUsersByNameEmail").val());
    console.log("formData", formData);
    return formData;
  }
  function loadUsersPage(page) {
    var formData = getFormData();
    console.log("page", page);
    formData.append("page", page);

    // Make AJAX request to load paginated users
    $.ajax({
      url: SITEURL + "user-management/list/filter",
      // Changed to user management endpoint
      type: "POST",
      headers: {
        "X-CSRF-TOKEN": getCSRFToken()
      },
      data: formData,
      processData: false,
      // Important for FormData
      contentType: false,
      // Important for FormData
      dataType: "json",
      success: function success(data) {
        console.log(data);
        var $ListContent = $("#ListContent");
        $ListContent.empty(); // Clear the container
        $ListContent.append(data.Content); // Append the new HTML content for user list

        var $SectionOffcanvas = $("#SectionOffcanvas");
        $SectionOffcanvas.empty(); // Clear the offcanvas section
        $SectionOffcanvas.append(data.SectionOffcanvas); // Append the new HTML for offcanvas if needed

        new EditUserOffcanvas();
        var _jsPagination = new jsPagination();
        _jsPagination.updatePagination(loadUsersPage); // Update pagination for users

        var tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
        _toConsumableArray(tooltipTriggerList).map(function (tooltipTriggerEl) {
          return new bootstrap.Tooltip(tooltipTriggerEl);
        });
        updateTotalResults(); // Update the total number of users shown
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        console.error("Error:", textStatus, errorThrown);
      }
    });
  }

  // Function to get selected user IDs
  function getSelectedUsers() {
    var selectedUsers = [];
    $("input.user:checked").each(function () {
      selectedUsers.push($(this).val());
    });
    return selectedUsers;
  }

  //toast
  var toastFormInvite = document.querySelector(".invite-users .js-toast");
  if (toastFormInvite) {
    $('.invite-users .js-toast-btn').click(function (event) {
      new Toast$1({
        position: ".offcanvas-end.show .offcanvas-header",
        text: toastFormInvite.getAttribute("data-toast"),
        type: toastFormInvite.getAttribute("data-toast-status"),
        class: toastFormInvite.getAttribute("data-toast-class")
      });
    });
  }
  var toastFormJobTitle = document.querySelector(".job-title .js-toast");
  if (toastFormJobTitle) {
    $('.job-title .js-toast-btn').click(function (event) {
      new Toast$1({
        position: ".offcanvas-end.show .offcanvas-header",
        text: toastFormJobTitle.getAttribute("data-toast"),
        type: toastFormJobTitle.getAttribute("data-toast-status")
      });
    });
  }

  function itemMarkup(fileName, fileSize, fileId) {
    var sizeInMB = (fileSize / (1024 * 1024)).toFixed(2);
    var wrap = document.createElement("div");
    wrap.classList.add("medical-chronology-request-form-upload-file__item");
    wrap.innerHTML = "\n  <div class=\"medical-chronology-request-form-upload-file__item-main\">\n    <div class=\"medical-chronology-request-form-upload-file__item-icon\">\n      <svg class=\"icon icon-document\">\n        <use href=\"/assets/themes/default/icon/icons/icons.svg#document\"></use>\n      </svg>\n    </div>\n    <div class=\"medical-chronology-request-form-upload-file__item-info-heading\">\n      <div class=\"medical-chronology-request-form-upload-file__item-name js-upload-file-name\">".concat(fileName, "</div>\n      <div class=\"medical-chronology-request-form-upload-file__item-size js-upload-file-size\">").concat(sizeInMB, " MB</div>\n    </div>\n    <button type=\"button\" class=\"medical-chronology-request-form-upload-file__item-delete js-upload-file-delete-btn\" data-item-id=\"").concat(fileId, "\">  \n      <svg class=\"icon icon-trash\">\n        <use href=\"/assets/themes/default/icon/icons/icons.svg#trash\"></use>\n      </svg>\n    </button>\n  </div>");
    return wrap;
  }

  var uploadFileField = /*#__PURE__*/function () {
    function uploadFileField(fileInput, formInstance) {
      var _this = this;
      _classCallCheck(this, uploadFileField);
      _defineProperty(this, "updateCounter", function () {
        var totalLoaded = _this.itemsList.querySelectorAll(".medical-chronology-request-form-upload-file__item").length;
        //this.filesCounter.innerText = totalLoaded
        if (totalLoaded < 1) {
          _this.resetFields();
          _this.fileLoadSection.classList.remove("_show");
          _this.uploadInput.value = "";
          _this.formInstance.files = [];
          _this.formInstance.checkisFormFilled();
        }
      });
      _defineProperty(this, "resetFields", function () {
        _this.progressWrap.classList.remove("_show");
        _this.progressFill.style.width = "0%";
        _this.progressCounter.innerText = "0%";
      });
      // handlers =========================================
      _defineProperty(this, "handleRemove", function (event) {
        var _self = _this;
        if (event.target.classList.contains("js-upload-file-delete-btn")) {
          // Attach event listener for delete buttons

          var $button = $(event.target);
          var fileId = $button.data('item-id'); // Retrieve the file ID
          console.log(fileId);

          // Confirm the deletion action (optional)
          // if (!confirm("Are you sure you want to delete this file?")) {
          //     return;
          // }

          // AJAX request to delete the file
          $.ajax({
            url: SITEURL + 'orders/delete-exhibit',
            // Endpoint for file deletion
            type: 'POST',
            data: JSON.stringify({
              file_id: fileId
            }),
            headers: {
              "X-CSRF-TOKEN": getCSRFToken()
            },
            contentType: 'application/json',
            dataType: 'json',
            success: function success(response) {
              if (response.success) {
                // Remove the file item from the DOM
                $button.closest('.medical-chronology-request-form-upload-file__item').remove();
                console.log("File deleted successfully.");
                $('.cost-amount').html(response.total_cost);
                $('.total-exhibits').html(response.exhibit_count);
                $('.total-pages').html(response.total_pages);
                _self.updateCounter();
                new Toast({
                  position: ".header .justify-content-end",
                  text: 'File deleted successfully.',
                  type: 'successful',
                  class: 'page-toast'
                });
              } else {
                new Toast({
                  position: ".header .justify-content-end",
                  text: 'Failed to delete file. Please try again.',
                  type: 'error',
                  class: 'page-toast'
                });
              }
            },
            error: function error(xhr) {
              console.error("Error deleting file:", xhr.responseText);
              new Toast({
                position: ".header .justify-content-end",
                text: 'An error occurred while deleting the file. Please try again.',
                type: 'error',
                class: 'page-toast'
              });
            }
          });

          //event.target.closest(".medical-chronology-request-form-upload-file__item").remove()
        }
      });
      _defineProperty(this, "changeFileHandle", function (event) {
        var files = event.target.files;

        // Check and filter PDF files
        var pdfFiles = Array.from(files).filter(function (file) {
          return file.type === "application/pdf";
        });
        if (pdfFiles.length === 0) {
          console.warn("No PDF files selected. Please upload files in PDF format.");
          return;
        }
        pdfFiles.forEach(function (file) {
          var fileSize = file.size;
          var fileName = file.name.replace(/_/g, ' ').replace(/-/g, ' ');
          console.log("Uploading: ".concat(fileName, ", Size: ").concat(fileSize, " bytes"));

          // Create FormData for each file
          var formData = new FormData();
          var nameForRequest = _this.uploadInput.getAttribute("name");
          var orderNumber = $('#medical-chronology-request-order-number').val();
          var reportType = $('#report_type').val();
          formData.append(nameForRequest, file);
          formData.append('order_number', orderNumber);
          formData.append('report_type', reportType);

          // Show progress for each file
          _this.progressWrap.classList.add("_show");
          _this.formInstance.files.push(file);

          // Perform AJAX upload with progress handling for each file
          $.ajax({
            url: "".concat(SITEURL, "orders/upload-exhibits"),
            type: "POST",
            data: formData,
            processData: false,
            contentType: false,
            xhr: function xhr() {
              var xhr = new window.XMLHttpRequest();
              xhr.upload.onprogress = function (event) {
                if (event.lengthComputable) {
                  var percent = Math.round(event.loaded / event.total * 100);
                  console.log("Upload progress for ".concat(fileName, ": ").concat(percent, "%"));
                  _this.progressFill.style.width = "".concat(percent, "%");
                  setTimeout(function () {
                    _this.progressCounter.innerText = "".concat(percent, "%");
                  }, 10);
                  if (event.loaded === event.total) {
                    setTimeout(function () {
                      return _this.resetFields();
                    }, 2000);
                  }
                }
              };
              return xhr;
            },
            success: function success(response) {
              console.log("Upload successful for ".concat(fileName));
              console.log(response);
              new Toast({
                position: ".header .justify-content-end",
                text: 'Exhibit(s) uploaded successfully!',
                type: 'successful',
                class: 'page-toast'
              });
              _this.fileLoadSection.classList.add("_show");
              _this.itemsList.append(itemMarkup(fileName, fileSize, response.fileHash));
              $('.cost-amount').html(response.total_cost);
              $('.total-exhibits').html(response.exhibit_count);
              $('.total-pages').html(response.total_pages);
              $('#user_order_number').html(response.order_number);
              $('#medical-chronology-request-order-number').val(response.order_number);
            },
            error: function error(response) {
              console.error("Upload failed for ".concat(fileName));
              console.log(response);
              // Error: Please upload PDF file(s). The file(s) you uploaded are not in the correct format.
              // Upload Failed: One or more files are duplicates and have already been uploaded.
              // Upload Failed: Unable to upload the file(s) due to server issues. Please try again later.
              // Upload Failed: The PDF file you uploaded is corrupt and cannot be processed.
              new Toast({
                position: ".header .justify-content-end",
                text: "Upload failed for ".concat(fileName),
                type: 'error',
                class: 'page-toast'
              });
            },
            complete: function complete() {
              _this.progressWrap.classList.remove("_show");
              _this.updateCounter();
            }
          });
        });
      });
      /*
      
        changeFileHandle = (event) => {
          const file = event.target.files[0];
      
          // Check if the file is a PDF
          if (file.type !== "application/pdf") {
            console.warn(`The selected file type is ${file.type}. Only 'application/pdf' is allowed.`);
            return;
          }
      
          const fileSize = file.size;
          const fileName = file.name.replace(/_/g, ' ').replace(/-/g, ' ');
          console.log(`Uploading: ${fileName}, Size: ${fileSize} bytes`);
      
          // Show file section and append the file to the list
          this.fileLoadSection.classList.add("_show");
          this.itemsList.append(itemMarkup(fileName, fileSize));
      
          // Prepare form data for upload
          const formData = new FormData();
      
          const formData = new FormData()
          let nameForRequest = "file_name"
          if (this.uploadInput.hasAttribute("name")) {
            nameForRequest = this.uploadInput.getAttribute("name")
          }
          formData.append(nameForRequest, file)
          // Show progress bar
          this.progressWrap.classList.add("_show");
      
          // Perform AJAX upload with progress handling
          $.ajax({
            url: `${SITEURL}orders/upload-exhibits`,
            type: "POST",
            data: formData,
            processData: false,
            contentType: false,
            xhr: () => {
              const xhr = new window.XMLHttpRequest();
              xhr.upload.onprogress = (event) => {
                if (event.lengthComputable) {
                  const percent = Math.round((event.loaded / event.total) * 100);
                  console.log(`Upload progress: ${percent}%`);
                  this.progressFill.style.width = `${percent}%`;
                  setTimeout(() => {
                    this.progressCounter.innerText = `${percent}%`;
                  }, 50);
      
                  if (event.loaded === event.total) {
                    setTimeout(() => this.resetFields(), 1500);
                  }
                }
              };
              return xhr;
            },
            success: () => {
              console.log("Upload successful");
              // Additional success handling if needed
            },
            error: () => {
              console.error("Upload failed");
              // Additional error handling if needed
            },
            complete: () => {
              this.progressWrap.classList.remove("_show");
              this.updateCounter();
            }
          });
        };
        */
      // changeFileHandle = (event) => {
      //   const file = event.target.files[0]
      //   if (file.type !== "application/pdf") {
      //     console.warn(`your file type is ${file.type} not match to 'application/pdf'`)
      //   }
      //   console.log(file)
      //   /*this.formInstance.files.push(file)*/
      //   /*this.formInstance.checkisFormFilled()*/
      //   const fileSize = file.size
      //   const fileName = file.name.replace(/_/g, ' ').replace(/-/g, ' ')
      //   console.log(fileName);
      //   this.fileLoadSection.classList.add("_show")
      //   this.itemsList.append(itemMarkup(fileName, fileSize))
      //   const formData = new FormData()
      //   let nameForRequest = "file_name"
      //   if (this.uploadInput.hasAttribute("name")) {
      //     nameForRequest = this.uploadInput.getAttribute("name")
      //   }
      //   formData.append(nameForRequest, file)
      //   const xhr = new XMLHttpRequest()
      //   this.progressWrap.classList.add("_show")
      //   xhr.upload.onprogress = (event) => {
      //     if (event.lengthComputable) {
      //       const percent = Math.round((event.loaded / event.total) * 100)
      //       console.log(`Upload progress: ${percent}%`)
      //       this.progressFill.style.width = `${percent}%`
      //       setTimeout(() => {
      //         this.progressCounter.innerText = `${percent}%`
      //       }, 700)
      //       if (event.loaded === event.total) {
      //         setTimeout(() => {
      //           this.resetFields()
      //         }, 1500)
      //       }
      //     }
      //   }
      //   xhr.onload = function () {
      //     this.progressWrap.classList.remove("_show")
      //     if (xhr.status === 201) {
      //       console.log("Upload successful")
      //       // if success todo
      //     } else {
      //       console.error("Upload failed")
      //       // if error todo
      //     }
      //   }
      //   this.updateCounter()
      //   xhr.open("POST", SITEURL+"orders/upload-exhibits", true)
      //   xhr.send(formData)
      // }
      _defineProperty(this, "submitFileFormHandle", function (e) {
        e.preventDefault();
      });
      this.uploadInput = fileInput;
      this.form = this.uploadInput.closest(".js-upload-file-form");
      this.formInstance = formInstance;
      this.progressWrap = this.form.querySelector(".js-upload-file-progress-wrap");
      this.progressFill = this.form.querySelector(".js-upload-file-progressline-fill");
      this.progressCounter = this.form.querySelector(".js-upload-file-progressline-counter");
      this.fileLoadSection = this.form.querySelector(".js-upload-file-loadbox");
      this.filesCounter = this.form.querySelector(".js-upload-file-files-counter");
      this.itemsList = this.form.querySelector(".js-upload-file-items");
      this.validStatusForm = true;
      this.init();
    }
    return _createClass(uploadFileField, [{
      key: "init",
      value:
      // handlers end =====================================

      function init() {
        var _this2 = this;
        this.uploadInput.addEventListener("change", function (event) {
          _this2.changeFileHandle(event);
        });
        this.itemsList.addEventListener("click", this.handleRemove);
      }
    }]);
  }();

  function createDropdownData(wrap) {
    return {
      wrap: wrap,
      input: wrap.querySelector(".js-medical-chronology-request-dropdown-input") || null,
      trigger: wrap.querySelector(".js-medical-chronology-request-dropdown-trigger"),
      triggerValueContainer: wrap.querySelector(".js-medical-chronology-request-dropdown-trigger .value"),
      listWrap: wrap.querySelector(".js-medical-chronology-request-dropdown-list-wrap"),
      list: wrap.querySelector(".js-medical-chronology-request-dropdown-list"),
      activeItem: null,
      isValid: false,
      hiddenDropdown: wrap.closest(".js-medical-chronology-request-hidden-dropdown") || null
    };
  }
  function createInputData(input) {
    return {
      input: input,
      isValidation: input.dataset.isRequired === "true",
      type: input.type,
      value: input.value,
      isValid: false
    };
  }

  function resetSelectedCheckboxes(context) {
    var checkboxes = context.selectedInjuriesList.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(function (checkbox) {
      var iconClass = checkbox.dataset.iconClass;
      document.querySelectorAll(".".concat(iconClass)).forEach(function (group) {
        return group.classList.remove("active");
      });
      checkbox.checked = false;
      checkbox.closest(".selected-injury-item").classList.remove("active");
    });
  }

  function checkSelectedCheckboxes(wrap) {
    return _toConsumableArray(wrap.querySelectorAll('input[type="checkbox"]')).some(function (item) {
      return item.checked;
    });
  }
  function setBodyAreas() {
    var checkboxes = document.querySelectorAll(".js-injury-item-checkbox");
    var bodyAreas = document.querySelectorAll(".js-body-area");
    bodyAreas.forEach(function (area) {
      area.classList.remove("active");
    });
    checkboxes.forEach(function (checkbox) {
      if (checkbox.checked) {
        var iconClass = checkbox.dataset.iconClass;
        document.querySelectorAll(".".concat(iconClass)).forEach(function (group) {
          return group.classList.add("active");
        });
      }
    });
  }

  function checkInputs(context) {
    var requiredInputs = _toConsumableArray(context.section.querySelectorAll('.js-medical-chronology-request__input'));
    var isFilled = requiredInputs.every(function (input) {
      return Boolean(input.value.length);
    });
    return isFilled;
  }
  function checkDropdownInputs(context) {
    var keysWithInput = _toConsumableArray(Object.keys(context.dropdowns)).filter(function (key) {
      return context.dropdowns[key].input;
    });
    context.isDropdownsSelected = keysWithInput.every(function (key) {
      return context.dropdowns[key].input.value;
    });
  }
  function checkIsBodyInjuriesSelected(context) {
    var bodyInjuriesValue = "bodily_injury";
    var claimTypeDropdownInput = document.querySelector("#medical_chronology_request_claim_type");
    if (claimTypeDropdownInput.value === bodyInjuriesValue) ;
  }

  function handleTriggerClick(event, dropdown, context) {
    dropdown.wrap;
      dropdown.input;
      dropdown.trigger;
      var listWrap = dropdown.listWrap;
      dropdown.list;
      dropdown.isValid;
    var currentTarget = event.currentTarget;
    Object.keys(context.dropdowns);
    currentTarget.classList.toggle("active");
    listWrap.classList.toggle("active");
  }
  function handleListClick(event, dropdown, context) {
    dropdown.wrap;
      var input = dropdown.input,
      trigger = dropdown.trigger,
      triggerValueContainer = dropdown.triggerValueContainer,
      listWrap = dropdown.listWrap;
      dropdown.list;
      dropdown.isValid;
      var activeItem = dropdown.activeItem;
    var target = event.target;
      event.currentTarget;
    activeItem && activeItem.classList.remove("active");
    dropdown.activeItem = target;
    target.classList.add("active");
    listWrap.classList.remove("active");
    trigger.classList.remove("active");
    triggerValueContainer.innerText = target.dataset.value;
    input.value = target.dataset.itemId;
    checkDropdownInputs(context);
    if (target.dataset.gender) {
      context.bodyAreas.classList.remove("male", "female");
      context.bodyAreas.classList.add(target.dataset.gender);
    }
    if (listWrap.classList.contains("claim-list-wrap") && target.dataset.target) {
      context.bodyAreas.classList.add("active");
      var targetId = target.dataset.targetId;
      context.dropdowns[targetId].hiddenDropdown.classList.add("active");
      context.isBodyAreas = true;
    }
    if (listWrap.classList.contains("claim-list-wrap") && !target.dataset.target) {
      context.bodyAreas.classList.remove("active");
      var _targetId = target.dataset.targetId;
      context.dropdowns[_targetId].hiddenDropdown.classList.remove("active");
      context.dropdowns[_targetId].list.querySelectorAll('input[type="checkbox"]').forEach(function (check) {
        var _check$dataset = check.dataset,
          selectedCheckId = _check$dataset.target;
          _check$dataset.iconClass;
        var selectedCheck = context.selectedInjuriesList.querySelector("#".concat(selectedCheckId));
        var event = new Event("change");
        check.dispatchEvent(event);
        selectedCheck.dispatchEvent(event);
        check.checked = false;
        selectedCheck.checked = false;
      });
      context.isBodyAreas = false;
    }
    checkIsBodyInjuriesSelected();
    context.checkisFormFilled();
  }
  function handleAddIjnuries(event, context, listWrap, trigger) {
    var list = event.currentTarget.closest(".js-medical-chronology-request-dropdown-list");
    resetSelectedCheckboxes(context);
    var selectedCheckboxes = _toConsumableArray(list.querySelectorAll('input[type="checkbox"]')).filter(function (item) {
      return item.checked;
    });
    if (selectedCheckboxes && selectedCheckboxes.length) {
      context.selectedInjuriesList.parentNode.classList.add("active");
      selectedCheckboxes.forEach(function (checkbox) {
        var _checkbox$dataset = checkbox.dataset,
          target = _checkbox$dataset.target,
          iconClass = _checkbox$dataset.iconClass;
        var selectedInput = context.selectedInjuriesList.querySelector("#".concat(target));
        selectedInput.closest(".selected-injury-item").classList.add("active");
        document.querySelectorAll("g.".concat(iconClass)).forEach(function (group) {
          return group.classList.add("active");
        });
        selectedInput.checked = true;
      });
    }
    context.checkisFormFilled();
    listWrap.classList.remove("active");
    trigger.classList.remove("active");
  }
  function handleSelectedInjuiesCheck(event, wrap, context) {
    var _event$target$dataset = event.target.dataset,
      itemId = _event$target$dataset.itemId,
      iconClass = _event$target$dataset.iconClass;
    if (!event.target.checked) {
      event.target.closest(".selected-injury-item").classList.remove("active");
      document.querySelector("#".concat(itemId)).checked = false;
      document.querySelectorAll(".".concat(iconClass)).forEach(function (group) {
        return group.classList.remove("active");
      });
    }
    setBodyAreas();
    context.checkisFormFilled();
    var isEmptyList = !checkSelectedCheckboxes(wrap);
    if (isEmptyList) {
      wrap.classList.remove("active");
    }
  }
  function handleInput(event, context) {
    context.inputs[event.target.name].input.value = event.target.value;
    context.inputs[event.target.name].value = event.target.value;
    context.isInputsFilled = checkInputs(context);
    context.checkisFormFilled();
  }
  function handleAreaClick(event, context) {
    var currentTarget = event.currentTarget;
    var bodyPart = currentTarget.dataset.bodyPart;
    context.section.querySelectorAll("g[data-body-part=\"".concat(bodyPart, "\"]")).forEach(function (part) {
      part.classList.add("clicked");
    });
    // currentTarget.classList.add('clicked')

    var popup = context.section.querySelector(".js-injury-popup-wrap[data-popup-id=\"".concat(bodyPart, "\"]"));
    popup.classList.add("active");
  }
  function handlePopupButtonClick(event, context) {
    var targetId = event.currentTarget.dataset.targetId;
    var popup = context.section.querySelector(".js-injury-popup-wrap[data-popup-id=\"".concat(targetId, "\"]"));
    popup.classList.remove("active");
    document.querySelectorAll(".js-body-area").forEach(function (group) {
      return group.classList.remove("clicked");
    });
    var targetCheckbox = context.section.querySelector(".js-injury-item-checkbox[data-icon-class=\"".concat(targetId, "\"]"));
    var addBtn = context.section.querySelector(".js-injury-add-btn");
    targetCheckbox.checked = !targetCheckbox.checked;
    addBtn.click();
    context.checkisFormFilled();
  }

  function initSelectedCheckboxes(wrap, context) {
    wrap.querySelectorAll('input[type="checkbox"]').forEach(function (checkbox) {
      checkbox.addEventListener("change", function (event) {
        return handleSelectedInjuiesCheck(event, wrap, context);
      });
    });
  }

  function initDropdowns(dropdowns, context) {
    var keys = Object.keys(dropdowns);
    keys.forEach(function (key) {
      return initDropdown(dropdowns[key], context);
    });
  }
  function initDropdown(dropdown, context) {
    var wrap = dropdown.wrap;
      dropdown.input;
      var trigger = dropdown.trigger,
      listWrap = dropdown.listWrap,
      list = dropdown.list;
      dropdown.isValid;
    var type = list.dataset.type;
    trigger.addEventListener("click", function (event) {
      return handleTriggerClick(event, dropdown, context);
    });
    if (type === "button") {
      list.addEventListener("click", function (event) {
        return handleListClick(event, dropdown, context);
      });
    }
    if (type === "check") {
      initCheckboxesDropdown(list, listWrap, trigger, context);
    }
    window.addEventListener("click", function (event) {
      var isWrapClosest = event.target.closest(".js-medical-chronology-request__dropdown");
      if (!isWrapClosest || isWrapClosest !== wrap) {
        listWrap.classList.remove("active");
        trigger.classList.remove("active");
      }
    });
  }
  function initCheckboxesDropdown(list, listWrap, trigger, context) {
    var addBtn = list.querySelector(".js-injury-add-btn");
    addBtn.addEventListener("click", function (event) {
      return handleAddIjnuries(event, context, listWrap, trigger);
    });
    var selectedListWrap = document.querySelector(".js-medical-chronology-request-selected-injuries-list-wrap");
    initSelectedCheckboxes(selectedListWrap, context);
  }

  function initInputs(inputs, context) {
    var keys = Object.keys(inputs);
    keys.forEach(function (key) {
      context.inputs[key].input.addEventListener("input", function (event) {
        return handleInput(event, context);
      });
    });
  }

  function initSvgAreas(areas, context) {
    areas.forEach(function (area) {
      area.addEventListener("click", function (event) {
        return handleAreaClick(event, context);
      });
    });
  }

  function initInjuriesPopups(popups, context) {
    popups.forEach(function (popup) {
      var popupBtn = popup.querySelector('.js-injury-popup-button');
      popupBtn.addEventListener('click', function (event) {
        return handlePopupButtonClick(event, context);
      });
      window.addEventListener('click', function (event) {
        var isPopupActive = popup.classList.contains('active');
        var isClickOnPopup = event.target.closest('.js-injury-popup-wrap') === popup;
        var isClickedOnBodyArea = event.target.closest('.js-human-body-svg');
        if (isPopupActive && !isClickOnPopup && !isClickedOnBodyArea) {
          popup.classList.remove("active");
          document.querySelectorAll('.js-body-area').forEach(function (group) {
            return group.classList.remove('clicked');
          });
        }
        if (isClickedOnBodyArea) {
          var bodyPart = event.target.closest('g').dataset.bodyPart;
          var currentClicked = document.querySelector(".js-injury-popup-wrap[data-popup-id='".concat(bodyPart, "']"));
          popups.forEach(function (popup) {
            popup.classList[currentClicked === popup ? 'add' : 'remove']('active');
          });
          document.querySelectorAll('.js-body-area').forEach(function (group) {
            var isCurrent = group.classList.contains(bodyPart);
            group.classList[isCurrent ? 'add' : 'remove']('clicked');
          });
        }
      });
    });
  }

  var _MedicalChronologyForm_brand = /*#__PURE__*/new WeakSet();
  var MedicalChronologyForm = /*#__PURE__*/function () {
    function MedicalChronologyForm(section) {
      _classCallCheck(this, MedicalChronologyForm);
      _classPrivateMethodInitSpec(this, _MedicalChronologyForm_brand);
      this.section = section;
      this.files = [];
      this.inputs = _toConsumableArray(section.querySelectorAll(".js-medical-chronology-request__input")).reduce(function (obj, item) {
        return _objectSpread2(_objectSpread2({}, obj), {}, _defineProperty({}, item.name, createInputData(item)));
      }, {});
      this.dropdowns = _toConsumableArray(section.querySelectorAll(".js-medical-chronology-request__dropdown")).reduce(function (obj, item) {
        return _objectSpread2(_objectSpread2({}, obj), {}, _defineProperty({}, item.dataset.name, createDropdownData(item)));
      }, {});
      this.selectedInjuriesList = section.querySelector(".js-medical-chronology-request-selected-injuries-list");
      this.bodyAreasCheckboxes = _toConsumableArray(section.querySelectorAll(".js-injury-item-checkbox"));
      this.bodyAreas = section.querySelector(".js-human-body-areas-wrap");
      this.popups = _toConsumableArray(section.querySelectorAll('.js-injury-popup-wrap'));
      this.submitBtn = section.querySelector(".js-medical-chronology-request-submit-btn");
      this.svgGroupAreas = section.querySelectorAll(".js-body-area");
      this.isInputsFilled = false;
      this.isDropdownsSelected = false;
      this.isBodyAreas = false;
      this.isFormFilled = false;
      _assertClassBrand(_MedicalChronologyForm_brand, this, _init).call(this);
    }
    return _createClass(MedicalChronologyForm, [{
      key: "checkisFormFilled",
      value: function checkisFormFilled() {
        if (this.isBodyAreas) {
          var isAnyCheck = this.bodyAreasCheckboxes.some(function (check) {
            return check.checked;
          });
          this.isFormFilled = Boolean(this.files.length) && /*this.isInputsFilled &&*/
          this.isDropdownsSelected && this.isBodyAreas && isAnyCheck;
        } else {
          console.log(this.files);
          console.log(this.files.length);
          console.log(this.isDropdownsSelected);
          this.isFormFilled = Boolean(this.files.length) && this.isDropdownsSelected;
        }
        if (this.isFormFilled) {
          this.submitBtn.removeAttribute("disabled");
        } else {
          this.submitBtn.setAttribute("disabled", true);
        }
      }
    }, {
      key: "handleSubmit",
      value: function handleSubmit(event) {
        event.preventDefault(); // Prevent default form submission

        // Initialize a new FormData object
        var formData = new FormData();

        // Gather all inputs
        $(".js-medical-chronology-request-form-with-inputs :input").each(function () {
          var input = $(this);
          if (input.attr("name") === '' || input.attr("name") === undefined) {
            return;
          }
          if (input.attr("type") === "checkbox") {
            // Handle checkboxes (for injury areas)
            if (input.is(":checked")) {
              formData.append(input.attr("name"), input.val());
            }
          } else if (input.attr("type") === "radio") {
            // Handle radio buttons
            if (input.is(":checked")) {
              formData.append(input.attr("name"), input.val());
            }
          } else {
            // Handle all other input types
            formData.append(input.attr("name"), input.val());
            //console.log(input.attr("name"));
          }
        });

        // Additional data to submit
        formData.append("order_number", $("#medical-chronology-request-order-number").val());

        // Submit data using AJAX
        $.ajax({
          url: "".concat(SITEURL, "orders/save-medical-chronology-request"),
          type: "POST",
          data: formData,
          contentType: false,
          processData: false,
          headers: {
            "X-CSRF-TOKEN": getCSRFToken()
          },
          success: function success(response) {
            // Handle successful submission
            console.log("Form submitted successfully:", response);

            //window.location.href = `${SITEURL}orders/medical-chronology-review/` + response.order_id
            var form_section = $('.js-medical-chronology-request-section');
            form_section.hide();
            form_section.after(response.review_html);
            // scroll to top
            $('html, body').animate({
              scrollTop: 0
            }, 'slow');
          },
          error: function error(xhr, status, _error) {
            // Handle submission error
            console.error("Form submission failed:", _error);
          }
        });
      }
    }, {
      key: "caseName",
      value: function caseName() {
        medical_chronology_request_plaintiff_first_name.addEventListener('input', joinValues, false);
        medical_chronology_request_plaintiff_last_name.addEventListener('input', joinValues, false);
        defendant_first_name.addEventListener('input', joinValues, false);
        defendant_last_name.addEventListener('input', joinValues, false);
        defendant_company_name.addEventListener('input', joinValues, false);
        function joinValues() {
          medical_chronology_request_case_name.value = medical_chronology_request_plaintiff_first_name.value + ' ' + medical_chronology_request_plaintiff_last_name.value + ' vs. ' + defendant_first_name.value + ' ' + defendant_last_name.value + '  ' + defendant_company_name.value;
        }
      }
    }]);
  }();

  // case name input
  function _init() {
    console.log(this);
    initDropdowns(this.dropdowns, this);
    initInputs(this.inputs, this);
    initSvgAreas(this.svgGroupAreas, this);
    initInjuriesPopups(this.popups, this);
    this.submitBtn.addEventListener('click', this.handleSubmit);
    this.caseName();
  }

  var ComponentAutocomplete = function () {
    var inputInputHandler = function inputInputHandler(input) {
      var currentInputWrap = input.closest('.component__autocomplete');
      var list = currentInputWrap.find('.component__autocomplete-list');
      var url = currentInputWrap.data('url');
      var query = input.val().toLowerCase();
      list.empty();
      function successResponseHandler(names) {
        names.forEach(function (name) {
          var item = $('<div>').addClass('component__autocomplete-list-item').text(name);
          item.on('click', function () {
            input.val(name);
            list.addClass('d-none');
          });
          list.append(item);
        });
        if (names.length) {
          list.removeClass('d-none');
        } else {
          list.addClass('d-none');
        }
      }
      var errorResponseHandler = function errorResponseHandler() {
        var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        console.error("Error fetching data: ".concat(error));
        list.addClass('d-none');
      };
      if (getGlobalEnvironment() != '') {
        if (query) {
          $.ajax({
            url: url,
            headers: {
              'X-CSRF-TOKEN': getCSRFToken()
            },
            method: 'POST',
            data: {
              search: query
            },
            success: function success(response) {
              successResponseHandler(response);
            },
            error: function error(_error) {
              errorResponseHandler(_error);
            }
          });
        } else {
          errorResponseHandler("Query is empty");
        }
      } else {
        var demo_names = ["Evangeline Davis", "Eve Taylor", "Eve Wilson", "Evelyn Jones", "Evelyn Richards", "Evette Smith", "Adam Everhart", "Jeremy Eve"];
        successResponseHandler(demo_names);
      }
    };

    // const inputFocusinHandler = (input) => {
    //     if (!input.closest('#autocomplete-input').length) {
    //         $list.addClass('d-none');
    //     }
    // }

    var init = function init(jqWrapElem) {
      var currentInput = jqWrapElem.find('.js__autocomplete-input');
      var list = jqWrapElem.find('.component__autocomplete-list');
      currentInput.each(function () {
        $(this).on('input', function (e) {
          inputInputHandler($(this));
        });

        // $(this).on('focusin', function (e) {
        //     inputFocusinHandler($(this));
        // });
      });
      $(document).on('click', function (e) {
        if (!$(e.target).closest('.js__autocomplete-input').length) {
          list.addClass('d-none');
        }
      });
    };
    return {
      init: init
    };
  }();

  function commonjsRequire(path) {
  	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }

  var moment$1 = {exports: {}};

  (function (module, exports) {
    (function (global, factory) {
      module.exports = factory() ;
    })(commonjsGlobal, function () {

      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }

      // This is done to register the method called with moment()
      // without creating circular dependencies.
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
      }
      function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
      }
      function map(arr, fn) {
        var res = [],
          i,
          arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
      }
      function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function some(fun) {
          var t = Object(this),
            len = t.length >>> 0,
            i;
          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m) {
        var flags = null,
          parsedParts = false,
          isNowValid = m._d && !isNaN(m._d.getTime());
        if (isNowValid) {
          flags = getParsingFlags(m);
          parsedParts = some.call(flags.parsedDateParts, function (i) {
            return i != null;
          });
          isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
          }
        }
        if (Object.isFrozen == null || !Object.isFrozen(m)) {
          m._isValid = isNowValid;
        } else {
          return isNowValid;
        }
        return m._isValid;
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }
        return m;
      }

      // Plugins that add properties should also add the key here (null value),
      // so we can properly clone ourselves.
      var momentProperties = hooks.momentProperties = [],
        updateInProgress = false;
      function copyConfig(to, from) {
        var i,
          prop,
          val,
          momentPropertiesLen = momentProperties.length;
        if (!isUndefined(from._isAMomentObject)) {
          to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
          to._i = from._i;
        }
        if (!isUndefined(from._f)) {
          to._f = from._f;
        }
        if (!isUndefined(from._l)) {
          to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
          to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
          to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
          to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
          to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
          to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
          to._locale = from._locale;
        }
        if (momentPropertiesLen > 0) {
          for (i = 0; i < momentPropertiesLen; i++) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
              to[prop] = val;
            }
          }
        }
        return to;
      }

      // Moment prototype object
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
          console.warn('Deprecation warning: ' + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [],
              arg,
              i,
              key,
              argLen = arguments.length;
            for (i = 0; i < argLen; i++) {
              arg = '';
              if (_typeof(arguments[i]) === 'object') {
                arg += '\n[' + i + '] ';
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ': ' + arguments[0][key] + ', ';
                  }
                }
                arg = arg.slice(0, -2); // Remove trailing comma and space
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
      }
      function set(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) {
              this[i] = prop;
            } else {
              this['_' + i] = prop;
            }
          }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
          prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function keys(obj) {
          var i,
            res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
      };
      function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
          zerosToFill = targetLength - absNumber.length,
          sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

      // token:    'M'
      // padded:   ['MM', 2]
      // ordinal:  'Mo'
      // callback: function () { this.month() + 1 }
      function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
          func = function func() {
            return this[callback]();
          };
        }
        if (token) {
          formatTokenFunctions[token] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal) {
          formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
      }
      function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
          i,
          length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }
        return function (mom) {
          var output = '',
            i;
          for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
          }
          return output;
        };
      }

      // format date using native date object
      function formatMoment(m, format) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
      }
      function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
          format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }
        return format;
      }
      var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
      };
      function longDateFormat(key) {
        var format = this._longDateFormat[key],
          formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) {
          return format;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function (tok) {
          if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {
            return tok.slice(1);
          }
          return tok;
        }).join('');
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = 'Invalid date';
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace('%d', number);
      }
      var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
      }
      var aliases = {
        D: 'date',
        dates: 'date',
        date: 'date',
        d: 'day',
        days: 'day',
        day: 'day',
        e: 'weekday',
        weekdays: 'weekday',
        weekday: 'weekday',
        E: 'isoWeekday',
        isoweekdays: 'isoWeekday',
        isoweekday: 'isoWeekday',
        DDD: 'dayOfYear',
        dayofyears: 'dayOfYear',
        dayofyear: 'dayOfYear',
        h: 'hour',
        hours: 'hour',
        hour: 'hour',
        ms: 'millisecond',
        milliseconds: 'millisecond',
        millisecond: 'millisecond',
        m: 'minute',
        minutes: 'minute',
        minute: 'minute',
        M: 'month',
        months: 'month',
        month: 'month',
        Q: 'quarter',
        quarters: 'quarter',
        quarter: 'quarter',
        s: 'second',
        seconds: 'second',
        second: 'second',
        gg: 'weekYear',
        weekyears: 'weekYear',
        weekyear: 'weekYear',
        GG: 'isoWeekYear',
        isoweekyears: 'isoWeekYear',
        isoweekyear: 'isoWeekYear',
        w: 'week',
        weeks: 'week',
        week: 'week',
        W: 'isoWeek',
        isoweeks: 'isoWeek',
        isoweek: 'isoWeek',
        y: 'year',
        years: 'year',
        year: 'year'
      };
      function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
          normalizedProp,
          prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {
        date: 9,
        day: 11,
        weekday: 11,
        isoWeekday: 11,
        dayOfYear: 4,
        hour: 13,
        millisecond: 16,
        minute: 14,
        month: 8,
        quarter: 7,
        second: 15,
        weekYear: 1,
        isoWeekYear: 1,
        week: 5,
        isoWeek: 5,
        year: 1
      };
      function getPrioritizedUnits(unitsObj) {
        var units = [],
          u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({
              unit: u,
              priority: priorities[u]
            });
          }
        }
        units.sort(function (a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      var match1 = /\d/,
        //       0 - 9
        match2 = /\d\d/,
        //      00 - 99
        match3 = /\d{3}/,
        //     000 - 999
        match4 = /\d{4}/,
        //    0000 - 9999
        match6 = /[+-]?\d{6}/,
        // -999999 - 999999
        match1to2 = /\d\d?/,
        //       0 - 99
        match3to4 = /\d\d\d\d?/,
        //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/,
        //   99999 - 999999
        match1to3 = /\d{1,3}/,
        //       0 - 999
        match1to4 = /\d{1,4}/,
        //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/,
        // -999999 - 999999
        matchUnsigned = /\d+/,
        //       0 - inf
        matchSigned = /[+-]?\d+/,
        //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi,
        // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi,
        // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/,
        // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        match1to2NoLeadingZero = /^[1-9]\d?/,
        //         1-99
        match1to2HasZero = /^([1-9]\d|\d)/,
        //           0-99
        regexes;
      regexes = {};
      function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
          return new RegExp(unescapeFormat(token));
        }
        return regexes[token](config._strict, config._locale);
      }

      // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
      function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        }));
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      }
      function absFloor(number) {
        if (number < 0) {
          // -0 -> 0
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
          value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      var tokens = {};
      function addParseToken(token, callback) {
        var i,
          func = callback,
          tokenLen;
        if (typeof token === 'string') {
          token = [token];
        }
        if (isNumber(callback)) {
          func = function func(input, array) {
            array[callback] = toInt(input);
          };
        }
        tokenLen = token.length;
        for (i = 0; i < tokenLen; i++) {
          tokens[token[i]] = func;
        }
      }
      function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
          config._w = config._w || {};
          callback(input, config._w, config, token);
        });
      }
      function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
          tokens[token](input, config._a, config, token);
        }
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

      // FORMATTING

      addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
      });
      addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
      });
      addFormatToken(0, ['YYYY', 4], 0, 'year');
      addFormatToken(0, ['YYYYY', 5], 0, 'year');
      addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

      // PARSING

      addRegexToken('Y', matchSigned);
      addRegexToken('YY', match1to2, match2);
      addRegexToken('YYYY', match1to4, match4);
      addRegexToken('YYYYY', match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);
      addParseToken(['YYYYY', 'YYYYYY'], YEAR);
      addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
      });

      // HELPERS

      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }

      // HOOKS

      hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
      };

      // MOMENTS

      var getSetYear = makeGetSet('FullYear', true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function makeGetSet(unit, keepTime) {
        return function (value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        if (!mom.isValid()) {
          return NaN;
        }
        var d = mom._d,
          isUTC = mom._isUTC;
        switch (unit) {
          case 'Milliseconds':
            return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
          case 'Seconds':
            return isUTC ? d.getUTCSeconds() : d.getSeconds();
          case 'Minutes':
            return isUTC ? d.getUTCMinutes() : d.getMinutes();
          case 'Hours':
            return isUTC ? d.getUTCHours() : d.getHours();
          case 'Date':
            return isUTC ? d.getUTCDate() : d.getDate();
          case 'Day':
            return isUTC ? d.getUTCDay() : d.getDay();
          case 'Month':
            return isUTC ? d.getUTCMonth() : d.getMonth();
          case 'FullYear':
            return isUTC ? d.getUTCFullYear() : d.getFullYear();
          default:
            return NaN;
          // Just in case
        }
      }
      function set$1(mom, unit, value) {
        var d, isUTC, year, month, date;
        if (!mom.isValid() || isNaN(value)) {
          return;
        }
        d = mom._d;
        isUTC = mom._isUTC;
        switch (unit) {
          case 'Milliseconds':
            return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
          case 'Seconds':
            return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
          case 'Minutes':
            return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
          case 'Hours':
            return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
          case 'Date':
            return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
          // case 'Day': // Not real
          //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
          // case 'Month': // Not used because we need to pass two variables
          //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
          case 'FullYear':
            break;
          // See below ...
          default:
            return;
          // Just in case
        }
        year = value;
        month = mom.month();
        date = mom.date();
        date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
        void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));
      }

      // MOMENTS

      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (_typeof(units) === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units),
            i,
            prioritizedLen = prioritized.length;
          for (i = 0; i < prioritizedLen; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      function mod(n, x) {
        return (n % x + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function indexOf(o) {
          // I know
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }

      // FORMATTING

      addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
      });
      addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
      });
      addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
      });

      // PARSING

      addRegexToken('M', match1to2, match1to2NoLeadingZero);
      addRegexToken('MM', match1to2, match2);
      addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
      });
      addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
      });
      addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });

      // LOCALES

      var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;
      function localeMonths(m, format) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
      }
      function localeMonthsShort(m, format) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
      }
      function handleStrictParse(monthName, format, strict) {
        var i,
          ii,
          mom,
          llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          // this is not used
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
          }
          if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          // test the regex
          if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }

      // MOMENTS

      function setMonth(mom, value) {
        if (!mom.isValid()) {
          // No op
          return mom;
        }
        if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        var month = value,
          date = mom.date();
        date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
        void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, 'Month');
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [],
          longPieces = [],
          mixedPieces = [],
          i,
          mom,
          shortP,
          longP;
        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          shortP = regexEscape(this.monthsShort(mom, ''));
          longP = regexEscape(this.months(mom, ''));
          shortPieces.push(shortP);
          longPieces.push(longP);
          mixedPieces.push(longP);
          mixedPieces.push(shortP);
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      }
      function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          // preserve leap years using a full 400 year cycle, then reset
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }

      // start-of-first-week - start-of-year
      function firstWeekOffset(year, dow, doy) {
        var
          // first-week day -- which january is always in the first week (4 for iso, 1 for other)
          fwd = 7 + dow - doy,
          // first-week day local weekday -- which local weekday is fwd
          fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }

      // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
          weekOffset = firstWeekOffset(year, dow, doy),
          dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
          resYear,
          resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
          week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
          resWeek,
          resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
          weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }

      // FORMATTING

      addFormatToken('w', ['ww', 2], 'wo', 'week');
      addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

      // PARSING

      addRegexToken('w', match1to2, match1to2NoLeadingZero);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W', match1to2, match1to2NoLeadingZero);
      addRegexToken('WW', match1to2, match2);
      addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
      });

      // HELPERS

      // LOCALES

      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6 // The week that contains Jan 6th is the first week of the year.
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }

      // MOMENTS

      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
      }

      // FORMATTING

      addFormatToken('d', 0, 'do', 'day');
      addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
      });
      addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
      });
      addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
      });
      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday');

      // PARSING

      addRegexToken('d', match1to2);
      addRegexToken('e', match1to2);
      addRegexToken('E', match1to2);
      addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
      });
      addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
      });
      addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
      });
      addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
      });

      // HELPERS

      function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
          return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }

      // LOCALES
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }
      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format, strict) {
        var i,
          ii,
          mom,
          llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already

          mom = createUTC([2000, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
          }
          if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          // test the regex
          if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }

      // MOMENTS

      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = get(this, 'Day');
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd');
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [],
          shortPieces = [],
          longPieces = [],
          mixedPieces = [],
          i,
          mom,
          minp,
          shortp,
          longp;
        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ''));
          shortp = regexEscape(this.weekdaysShort(mom, ''));
          longp = regexEscape(this.weekdays(mom, ''));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
      }

      // FORMATTING

      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken('H', ['HH', 2], 0, 'hour');
      addFormatToken('h', ['hh', 2], 0, hFormat);
      addFormatToken('k', ['kk', 2], 0, kFormat);
      addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }
      meridiem('a', true);
      meridiem('A', false);

      // PARSING

      function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
      }
      addRegexToken('a', matchMeridiem);
      addRegexToken('A', matchMeridiem);
      addRegexToken('H', match1to2, match1to2HasZero);
      addRegexToken('h', match1to2, match1to2NoLeadingZero);
      addRegexToken('k', match1to2, match1to2NoLeadingZero);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);
      addRegexToken('kk', match1to2, match2);
      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);
      addParseToken(['H', 'HH'], HOUR);
      addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
          pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
          pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });

      // LOCALES

      function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);
      function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
          return isLower ? 'pm' : 'PM';
        } else {
          return isLower ? 'am' : 'AM';
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };

      // internal storage for locale config files
      var locales = {},
        localeFamilies = {},
        globalLocale;
      function commonPrefix(arr1, arr2) {
        var i,
          minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
      }

      // pick the locale from the array
      // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
      // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
      function chooseLocale(names) {
        var i = 0,
          j,
          next,
          locale,
          split;
        while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;
          while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
              return locale;
            }
            if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
              //the next array item is better than a shallower substring of this one
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale;
      }
      function isLocaleNameSane(name) {
        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
        // Ensure name is available and function returns boolean
        return !!(name && name.match('^[^/\\\\]*$'));
      }
      function loadLocale(name) {
        var oldLocale = null,
          aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (locales[name] === undefined && 'object' !== 'undefined' && module && module.exports && isLocaleNameSane(name)) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = commonjsRequire;
            aliasedRequire('./locale/' + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            // mark as not found to avoid repeating expensive file require call causing high CPU
            // when trying to find en-US, en_US, en-us for every format call
            locales[name] = null; // null means not found
          }
        }
        return locales[name];
      }

      // This function will load locale and then set the global locale.  If
      // no arguments are passed in, it will simply return the current global
      // locale key.
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }
          if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
          } else {
            if (typeof console !== 'undefined' && console.warn) {
              //warn user if arguments are passed but the locale could not be set
              console.warn('Locale ' + key + ' not found. Did you forget to load it?');
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale,
            parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale = loadLocale(config.parentLocale);
              if (locale != null) {
                parentConfig = locale._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name: name,
                  config: config
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
              defineLocale(x.name, x.config);
            });
          }

          // backwards compat for now: also set the locale
          // make sure we set the locale AFTER all child locales have been
          // created, so we won't end up with the child locale set.
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          // useful for testing
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale,
            tmpLocale,
            parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            // Update existing child locale in-place to avoid memory-leaks
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              // updateLocale is called for creating a new locale
              // Set abbr so it will have a name (getters return
              // undefined otherwise).
              config.abbr = name;
            }
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;
          }

          // backwards compat for now: also set the locale
          getSetGlobalLocale(name);
        } else {
          // pass null for config to unupdate, useful for tests
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }

      // returns locale data
      function getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray(key)) {
          //short-circuit everything else
          locale = loadLocale(key);
          if (locale) {
            return locale;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m) {
        var overflow,
          a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m).overflow = overflow;
        }
        return m;
      }

      // iso 8601 regex
      // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/], ['YYYYMM', /\d{6}/, false], ['YYYY', /\d{4}/, false]],
        // iso time formats and regexes
        isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
          UT: 0,
          GMT: 0,
          EDT: -4 * 60,
          EST: -5 * 60,
          CDT: -5 * 60,
          CST: -6 * 60,
          MDT: -6 * 60,
          MST: -7 * 60,
          PDT: -7 * 60,
          PST: -8 * 60
        };

      // date from iso format
      function configFromISO(config) {
        var i,
          l,
          string = config._i,
          match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
          allowTime,
          dateFormat,
          timeFormat,
          tzFormat,
          isoDatesLen = isoDates.length,
          isoTimesLen = isoTimes.length;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDatesLen; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimesLen; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                // match[2] should be 'T' or space
                timeFormat = (match[2] || ' ') + isoTimes[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = 'Z';
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2000 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^()]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
            weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          // the only allowed military tz is Z
          return 0;
        } else {
          var hm = parseInt(numOffset, 10),
            m = hm % 100,
            h = (hm - m) / 100;
          return h * 60 + m;
        }
      }

      // date and time from ref 2822 format
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
          parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }

      // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          // Final attempt, use Input Fallback
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
      });

      // Pick the first defined of two or three arguments.
      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }

      // convert an array to a date.
      // the array should mirror the parameters below
      // note: all values past the year are optional and will default to the lowest possible value.
      // [year, month, day , hour, minute, second, millisecond]
      function configFromArray(config) {
        var i,
          date,
          input = [],
          currentDate,
          expectedWeekday,
          yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;

          // TODO: We need to take the current isoWeekYear, but that depends on
          // how we interpret now (local, utc, fixed offset). So create
          // a now version of current config (take local/utc/offset flags, and
          // create now).
          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

          // Default to current week.
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            // local weekday -- counting starts from beginning of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            // default to beginning of week
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }

      // constant that refers to the ISO standard
      hooks.ISO_8601 = function () {};

      // constant that refers to the RFC 2822 form
      hooks.RFC_2822 = function () {};

      // date from string and format string
      function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
          i,
          parsedInput,
          tokens,
          token,
          skipped,
          stringLength = string.length,
          totalParsedInputLength = 0,
          era,
          tokenLen;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens.length;
        for (i = 0; i < tokenLen; i++) {
          token = tokens[i];
          parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          }
          // don't parse if it's not a known token
          if (formatTokenFunctions[token]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
          }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = undefined;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) {
          // nothing to do
          return hour;
        }
        if (locale.meridiemHour != null) {
          return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
          // Fallback
          isPm = locale.isPM(meridiem);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          // this is not supposed to happen
          return hour;
        }
      }

      // date from string and array of format strings
      function configFromStringAndArray(config) {
        var tempConfig,
          bestMoment,
          scoreToBeat,
          i,
          currentScore,
          validFormatFound,
          bestFormatIsValid = false,
          configfLen = config._f.length;
        if (configfLen === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }
        for (i = 0; i < configfLen; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }

          // if there is any input that was not parsed add a penalty for that format
          currentScore += getParsingFlags(tempConfig).charsLeftOver;

          //or tokens
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i = normalizeObjectUnits(config._i),
          dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
          return obj && parseInt(obj, 10);
        });
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          // Adding is smart enough around DST
          res.add(1, 'd');
          res._nextDay = undefined;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i,
          format = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format === undefined && input === '') {
          return createInvalid({
            nullInput: true
          });
        }
        if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format)) {
          configFromStringAndArray(config);
        } else if (format) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          // from milliseconds
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};
        if (format === true || format === false) {
          strict = format;
          format = undefined;
        }
        if (locale === true || locale === false) {
          strict = locale;
          locale = undefined;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
      }
      function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
      }
      var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
          } else {
            return createInvalid();
          }
        }),
        prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
          } else {
            return createInvalid();
          }
        });

      // Pick a moment m from moments so that m[fn](other) is true for all
      // other. This relies on the function fn to be transitive.
      //
      // moments should either be an array of moment objects or an array, whose
      // first element is an array of moment objects.
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }

      // TODO: Use [].sort instead?
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
      }
      var now = function now() {
        return Date.now ? Date.now() : +new Date();
      };
      var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
      function isDurationValid(m) {
        var key,
          unitHasDecimal = false,
          i,
          orderLen = ordering.length;
        for (key in m) {
          if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }
        for (i = 0; i < orderLen; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false; // only allow non-integers for smallest unit
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
          years = normalizedInput.year || 0,
          quarters = normalizedInput.quarter || 0,
          months = normalizedInput.month || 0,
          weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
          days = normalizedInput.day || 0,
          hours = normalizedInput.hour || 0,
          minutes = normalizedInput.minute || 0,
          seconds = normalizedInput.second || 0,
          milliseconds = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds + seconds * 1e3 +
        // 1000
        minutes * 6e4 +
        // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }

      // compare two arrays, return the number of differences
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
          lengthDiff = Math.abs(array1.length - array2.length),
          diffs = 0,
          i;
        for (i = 0; i < len; i++) {
          if (toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }

      // FORMATTING

      function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
          var offset = this.utcOffset(),
            sign = '+';
          if (offset < 0) {
            offset = -offset;
            sign = '-';
          }
          return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
      }
      offset('Z', ':');
      offset('ZZ', '');

      // PARSING

      addRegexToken('Z', matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });

      // HELPERS

      // timezone chunker
      // '+10:00' > ['10',  '00']
      // '-1530'  > ['-15', '30']
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
          chunk,
          parts,
          minutes;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
      }

      // Return a moment from input, that is local/utc/zone equivalent to model.
      function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
          res = model.clone();
          diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          // Use low-level api, because this fn is low-level api.
          res._d.setTime(res._d.valueOf() + diff);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
      }

      // HOOKS

      // This function will be called whenever a moment is mutated.
      // It is intended to keep the offset in sync with the timezone.
      hooks.updateOffset = function () {};

      // MOMENTS

      // keepLocalTime = true means only change the timezone, without
      // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
      // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
      // +0200, so we adjust the time as needed, to be valid.
      //
      // Keeping the time actually adds/subtracts (one hour)
      // from the actual represented time. That is why we call updateOffset
      // a second time. In case it wants us to change the offset again
      // _changeInProgress == true case, then we have to adjust, because
      // there is no such time in the given timezone.
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
          localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, 'm');
          }
          if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== 'string') {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {},
          other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }

      // ASP.NET json date format regex
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input,
          // matching against regexp is expensive, do it on demand
          match = null,
          sign,
          ret,
          diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex.exec(input)) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign,
            h: toInt(match[HOUR]) * sign,
            m: toInt(match[MINUTE]) * sign,
            s: toInt(match[SECOND]) * sign,
            ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
          };
        } else if (match = isoRegex.exec(input)) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign),
            M: parseIso(match[3], sign),
            w: parseIso(match[4], sign),
            d: parseIso(match[5], sign),
            h: parseIso(match[6], sign),
            m: parseIso(match[7], sign),
            s: parseIso(match[8], sign)
          };
        } else if (duration == null) {
          // checks for null or undefined
          duration = {};
        } else if (_typeof(duration) === 'object' && ('from' in duration || 'to' in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return {
            milliseconds: 0,
            months: 0
          };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }

      // TODO: remove 'name' arg after deprecation is removed
      function createAdder(direction, name) {
        return function (val, period) {
          var dur, tmp;
          //invert the arguments, but complain about it
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
          days = absRound(duration._days),
          months = absRound(duration._months);
        if (!mom.isValid()) {
          // No op
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months) {
          setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
          set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
          mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days || months);
        }
      }
      var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');
      function isString(input) {
        return typeof input === 'string' || input instanceof String;
      }

      // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
      function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
          propertyTest = false,
          properties = ['years', 'year', 'y', 'months', 'month', 'M', 'days', 'day', 'd', 'dates', 'date', 'D', 'hours', 'hour', 'h', 'minutes', 'minute', 'm', 'seconds', 'second', 's', 'milliseconds', 'millisecond', 'ms'],
          i,
          property,
          propertyLen = properties.length;
        for (i = 0; i < propertyLen; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
          dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function (item) {
            return !isNumber(item) && isString(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
          propertyTest = false,
          properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
          i,
          property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
      }
      function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = undefined;
            formats = undefined;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = undefined;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = undefined;
          }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
          sod = cloneWithOffset(now, this).startOf('day'),
          format = hooks.calendarFormat(this, sod) || 'sameElse',
          output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
      }
      function clone() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
          localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
          inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case 'year':
            output = monthDiff(this, that) / 12;
            break;
          case 'month':
            output = monthDiff(this, that);
            break;
          case 'quarter':
            output = monthDiff(this, that) / 3;
            break;
          case 'second':
            output = (this - that) / 1e3;
            break;
          // 1000
          case 'minute':
            output = (this - that) / 6e4;
            break;
          // 1000 * 60
          case 'hour':
            output = (this - that) / 36e5;
            break;
          // 1000 * 60 * 60
          case 'day':
            output = (this - that - zoneDelta) / 864e5;
            break;
          // 1000 * 60 * 60 * 24, negate dst
          case 'week':
            output = (this - that - zoneDelta) / 6048e5;
            break;
          // 1000 * 60 * 60 * 24 * 7, negate dst
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          // end-of-month calculations work correct when the start month has more
          // days than the end month.
          return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
          // b is in (anchor - 1 month, anchor + 1 month)
          anchor = a.clone().add(wholeMonthDiff, 'months'),
          anchor2,
          adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
      function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true,
          m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
          // native implementation is ~50x faster, use it when we can
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
          }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
      }

      /**
       * Return a human readable representation of a moment that can
       * also be evaluated to get a new moment which is the same
       *
       * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
       */
      function inspect() {
        if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
          zone = '',
          prefix,
          year,
          datetime,
          suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            to: this,
            from: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            from: this,
            to: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }

      // If passed a locale key, it will set the locale for this
      // instance.  Otherwise, it will return the locale configuration
      // variables for this instance.
      function locale(key) {
        var newLocaleData;
        if (key === undefined) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      });
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

      // actual modulo - handles negative numbers (for dates before 1970):
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case 'year':
            time = startOfDate(this.year(), 0, 1);
            break;
          case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;
          case 'month':
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;
          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;
          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case 'hour':
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;
          case 'minute':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case 'second':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case 'year':
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;
          case 'month':
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;
          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;
          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case 'hour':
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;
          case 'minute':
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case 'second':
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1000);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }
      function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken('N', 0, 0, 'eraAbbr');
      addFormatToken('NN', 0, 0, 'eraAbbr');
      addFormatToken('NNN', 0, 0, 'eraAbbr');
      addFormatToken('NNNN', 0, 0, 'eraName');
      addFormatToken('NNNNN', 0, 0, 'eraNarrow');
      addFormatToken('y', ['y', 1], 'yo', 'eraYear');
      addFormatToken('y', ['yy', 2], 0, 'eraYear');
      addFormatToken('y', ['yyy', 3], 0, 'eraYear');
      addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
      addRegexToken('N', matchEraAbbr);
      addRegexToken('NN', matchEraAbbr);
      addRegexToken('NNN', matchEraAbbr);
      addRegexToken('NNNN', matchEraName);
      addRegexToken('NNNNN', matchEraNarrow);
      addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      });
      addRegexToken('y', matchUnsigned);
      addRegexToken('yy', matchUnsigned);
      addRegexToken('yyy', matchUnsigned);
      addRegexToken('yyyy', matchUnsigned);
      addRegexToken('yo', matchEraYearOrdinal);
      addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
      addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m, format) {
        var i,
          l,
          date,
          eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (_typeof(eras[i].since)) {
            case 'string':
              // truncate time
              date = hooks(eras[i].since).startOf('day');
              eras[i].since = date.valueOf();
              break;
          }
          switch (_typeof(eras[i].until)) {
            case 'undefined':
              eras[i].until = +Infinity;
              break;
            case 'string':
              // truncate time
              date = hooks(eras[i].until).startOf('day').valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format, strict) {
        var i,
          l,
          eras = this.eras(),
          name,
          abbr,
          narrow;
        eraName = eraName.toUpperCase();
        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();
          if (strict) {
            switch (format) {
              case 'N':
              case 'NN':
              case 'NNN':
                if (abbr === eraName) {
                  return eras[i];
                }
                break;
              case 'NNNN':
                if (name === eraName) {
                  return eras[i];
                }
                break;
              case 'NNNNN':
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i,
          l,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          // truncate time
          val = this.clone().startOf('day').valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }
        return '';
      }
      function getEraNarrow() {
        var i,
          l,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          // truncate time
          val = this.clone().startOf('day').valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }
        return '';
      }
      function getEraAbbr() {
        var i,
          l,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          // truncate time
          val = this.clone().startOf('day').valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }
        return '';
      }
      function getEraYear() {
        var i,
          l,
          dir,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? +1 : -1;

          // truncate time
          val = this.clone().startOf('day').valueOf();
          if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
            return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [],
          namePieces = [],
          narrowPieces = [],
          mixedPieces = [],
          i,
          l,
          erasName,
          erasAbbr,
          erasNarrow,
          eras = this.eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          erasName = regexEscape(eras[i].name);
          erasAbbr = regexEscape(eras[i].abbr);
          erasNarrow = regexEscape(eras[i].narrow);
          namePieces.push(erasName);
          abbrPieces.push(erasAbbr);
          narrowPieces.push(erasNarrow);
          mixedPieces.push(erasName);
          mixedPieces.push(erasAbbr);
          mixedPieces.push(erasNarrow);
        }
        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
      }

      // FORMATTING

      addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
      }
      addWeekYearFormatToken('gggg', 'weekYear');
      addWeekYearFormatToken('ggggg', 'weekYear');
      addWeekYearFormatToken('GGGG', 'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear');

      // ALIASES

      // PARSING

      addRegexToken('G', matchSigned);
      addRegexToken('g', matchSigned);
      addRegexToken('GG', match1to2, match2);
      addRegexToken('gg', match1to2, match2);
      addRegexToken('GGGG', match1to4, match4);
      addRegexToken('gggg', match1to4, match4);
      addRegexToken('GGGGG', match1to6, match6);
      addRegexToken('ggggg', match1to6, match6);
      addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
      });

      // MOMENTS

      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday() + this.localeData()._week.dow, this.localeData()._week.dow, this.localeData()._week.doy);
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
          date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }

      // FORMATTING

      addFormatToken('Q', 0, 'Qo', 'quarter');

      // PARSING

      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });

      // MOMENTS

      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }

      // FORMATTING

      addFormatToken('D', ['DD', 2], 'Do', 'date');

      // PARSING

      addRegexToken('D', match1to2, match1to2NoLeadingZero);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(['D', 'DD'], DATE);
      addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });

      // MOMENTS

      var getSetDayOfMonth = makeGetSet('Date', true);

      // FORMATTING

      addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

      // PARSING

      addRegexToken('DDD', match1to3);
      addRegexToken('DDDD', match3);
      addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
      });

      // HELPERS

      // MOMENTS

      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
      }

      // FORMATTING

      addFormatToken('m', ['mm', 2], 0, 'minute');

      // PARSING

      addRegexToken('m', match1to2, match1to2HasZero);
      addRegexToken('mm', match1to2, match2);
      addParseToken(['m', 'mm'], MINUTE);

      // MOMENTS

      var getSetMinute = makeGetSet('Minutes', false);

      // FORMATTING

      addFormatToken('s', ['ss', 2], 0, 'second');

      // PARSING

      addRegexToken('s', match1to2, match1to2HasZero);
      addRegexToken('ss', match1to2, match2);
      addParseToken(['s', 'ss'], SECOND);

      // MOMENTS

      var getSetSecond = makeGetSet('Seconds', false);

      // FORMATTING

      addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ['SSS', 3], 0, 'millisecond');
      addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
      });
      addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
      });
      addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
      });
      addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
      });

      // PARSING

      addRegexToken('S', match1to3, match1);
      addRegexToken('SS', match1to3, match2);
      addRegexToken('SSS', match1to3, match3);
      var token, getSetMillisecond;
      for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
      }
      for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet('Milliseconds', false);

      // FORMATTING

      addFormatToken('z', 0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName');

      // MOMENTS

      function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
      }
      function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
          return 'Moment<' + this.format() + '>';
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
      proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
      proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
      proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
      proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
      function createUnix(input) {
        return createLocal(input * 1000);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string) {
        return string;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format, index, field, setter) {
        var locale = getLocale(),
          utc = createUTC().set(setter, index);
        return locale[field](utc, format);
      }
      function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
          index = format;
          format = undefined;
        }
        format = format || '';
        if (index != null) {
          return get$1(format, index, field, 'month');
        }
        var i,
          out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format, i, field, 'month');
        }
        return out;
      }

      // ()
      // (5)
      // (fmt, 5)
      // (fmt)
      // (true)
      // (true, 5)
      // (true, fmt, 5)
      // (true, fmt)
      function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
          if (isNumber(format)) {
            index = format;
            format = undefined;
          }
          format = format || '';
        } else {
          format = localeSorted;
          index = format;
          localeSorted = false;
          if (isNumber(format)) {
            index = format;
            format = undefined;
          }
          format = format || '';
        }
        var locale = getLocale(),
          shift = localeSorted ? locale._week.dow : 0,
          i,
          out = [];
        if (index != null) {
          return get$1(format, (index + shift) % 7, field, 'day');
        }
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
      }
      function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
      }
      function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
      }
      function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
      }
      function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
      }
      function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
      }
      getSetGlobalLocale('en', {
        eras: [{
          since: '0001-01-01',
          until: +Infinity,
          offset: 1,
          name: 'Anno Domini',
          narrow: 'AD',
          abbr: 'AD'
        }, {
          since: '0000-12-31',
          until: -Infinity,
          offset: 1,
          name: 'Before Christ',
          narrow: 'BC',
          abbr: 'BC'
        }],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function ordinal(number) {
          var b = number % 10,
            output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output;
        }
      });

      // Side effect imports

      hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
      hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }

      // supports only 2.0-style add(1, 's') or add(duration)
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }

      // supports only 2.0-style subtract(1, 's') or subtract(duration)
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds = this._milliseconds,
          days = this._days,
          months = this._months,
          data = this._data,
          seconds,
          minutes,
          hours,
          years,
          monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
          milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
          days = 0;
          months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
      }
      function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
      }
      function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days,
          months,
          milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === 'month' || units === 'quarter' || units === 'year') {
          days = this._days + milliseconds / 864e5;
          months = this._months + daysToMonths(days);
          switch (units) {
            case 'month':
              return months;
            case 'quarter':
              return months / 3;
            case 'year':
              return months / 12;
          }
        } else {
          // handle milliseconds separately because of floating point math errors (issue #1867)
          days = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case 'week':
              return days / 7 + milliseconds / 6048e5;
            case 'day':
              return days + milliseconds / 864e5;
            case 'hour':
              return days * 24 + milliseconds / 36e5;
            case 'minute':
              return days * 1440 + milliseconds / 6e4;
            case 'second':
              return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond':
              return Math.floor(days * 864e5) + milliseconds;
            default:
              throw new Error('Unknown unit ' + units);
          }
        }
      }
      function makeAs(alias) {
        return function () {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y'),
        valueOf$1 = asMilliseconds;
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
      }
      function makeGetter(name) {
        return function () {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round,
        thresholds = {
          ss: 44,
          // a few seconds to seconds
          s: 45,
          // seconds to minute
          m: 45,
          // minutes to hour
          h: 22,
          // hours to day
          d: 26,
          // days to month/week
          w: null,
          // weeks to month
          M: 11 // months to year
        };

      // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
          seconds = round(duration.as('s')),
          minutes = round(duration.as('m')),
          hours = round(duration.as('h')),
          days = round(duration.as('d')),
          months = round(duration.as('M')),
          weeks = round(duration.as('w')),
          years = round(duration.as('y')),
          a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days];
        if (thresholds.w != null) {
          a = a || weeks <= 1 && ['w'] || weeks < thresholds.w && ['ww', weeks];
        }
        a = a || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
      }

      // This function allows you to set the rounding function for relative time strings
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
          return round;
        }
        if (typeof roundingFunction === 'function') {
          round = roundingFunction;
          return true;
        }
        return false;
      }

      // This function allows you to set a threshold for relative time strings
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
          return false;
        }
        if (limit === undefined) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false,
          th = thresholds,
          locale,
          output;
        if (_typeof(argWithSuffix) === 'object') {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
          withSuffix = argWithSuffix;
        }
        if (_typeof(argThresholds) === 'object') {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);
        if (withSuffix) {
          output = locale.pastFuture(+this, output);
        }
        return locale.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds = abs$1(this._milliseconds) / 1000,
          days = abs$1(this._days),
          months = abs$1(this._months),
          minutes,
          hours,
          years,
          s,
          total = this.asSeconds(),
          totalSign,
          ymSign,
          daysSign,
          hmsSign;
        if (!total) {
          // this is the same as C#'s (Noda) and python (isodate)...
          // but not other JS (goog.date)
          return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
        return totalSign + 'P' + (years ? ymSign + years + 'Y' : '') + (months ? ymSign + months + 'M' : '') + (days ? daysSign + days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hmsSign + hours + 'H' : '') + (minutes ? hmsSign + minutes + 'M' : '') + (seconds ? hmsSign + s + 'S' : '');
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
      proto$2.lang = lang;

      // FORMATTING

      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf');

      // PARSING

      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
      });
      addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
      });

      //! moment.js

      hooks.version = '2.30.1';
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;

      // currently HTML5 input type only supports 24-hour formats
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
        // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
        // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
        // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',
        // <input type="date" />
        TIME: 'HH:mm',
        // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',
        // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',
        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',
        // <input type="week" />
        MONTH: 'YYYY-MM' // <input type="month" />
      };
      return hooks;
    });
  })(moment$1);
  var momentExports = moment$1.exports;
  var moment = /*@__PURE__*/getDefaultExportFromCjs(momentExports);

  var daterangepicker = {exports: {}};

  var jquery = {exports: {}};

  var hasRequiredJquery;
  function requireJquery() {
    if (hasRequiredJquery) return jquery.exports;
    hasRequiredJquery = 1;
    (function (module) {
      (function (global, factory) {

        {
          // For CommonJS and CommonJS-like environments where a proper `window`
          // is present, execute the factory and get jQuery.
          // For environments that do not have a `window` with a `document`
          // (such as Node.js), expose a factory as module.exports.
          // This accentuates the need for the creation of a real `window`.
          // e.g. var jQuery = require("jquery")(window);
          // See ticket trac-14549 for more info.
          module.exports = global.document ? factory(global, true) : function (w) {
            if (!w.document) {
              throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
          };
        }

        // Pass this if window is not defined yet
      })(typeof window !== "undefined" ? window : commonjsGlobal, function (window, noGlobal) {

        var arr = [];
        var getProto = Object.getPrototypeOf;
        var _slice = arr.slice;
        var flat = arr.flat ? function (array) {
          return arr.flat.call(array);
        } : function (array) {
          return arr.concat.apply([], array);
        };
        var push = arr.push;
        var indexOf = arr.indexOf;
        var class2type = {};
        var toString = class2type.toString;
        var hasOwn = class2type.hasOwnProperty;
        var fnToString = hasOwn.toString;
        var ObjectFunctionString = fnToString.call(Object);
        var support = {};
        var isFunction = function isFunction(obj) {
          // Support: Chrome <=57, Firefox <=52
          // In some browsers, typeof returns "function" for HTML <object> elements
          // (i.e., `typeof document.createElement( "object" ) === "function"`).
          // We don't want to classify *any* DOM node as a function.
          // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
          // Plus for old WebKit, typeof returns "function" for HTML collections
          // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
          return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
        };
        var isWindow = function isWindow(obj) {
          return obj != null && obj === obj.window;
        };
        var document = window.document;
        var preservedScriptAttributes = {
          type: true,
          src: true,
          nonce: true,
          noModule: true
        };
        function DOMEval(code, node, doc) {
          doc = doc || document;
          var i,
            val,
            script = doc.createElement("script");
          script.text = code;
          if (node) {
            for (i in preservedScriptAttributes) {
              // Support: Firefox 64+, Edge 18+
              // Some browsers don't support the "nonce" property on scripts.
              // On the other hand, just using `getAttribute` is not enough as
              // the `nonce` attribute is reset to an empty string whenever it
              // becomes browsing-context connected.
              // See https://github.com/whatwg/html/issues/2369
              // See https://html.spec.whatwg.org/#nonce-attributes
              // The `node.getAttribute` check was added for the sake of
              // `jQuery.globalEval` so that it can fake a nonce-containing node
              // via an object.
              val = node[i] || node.getAttribute && node.getAttribute(i);
              if (val) {
                script.setAttribute(i, val);
              }
            }
          }
          doc.head.appendChild(script).parentNode.removeChild(script);
        }
        function toType(obj) {
          if (obj == null) {
            return obj + "";
          }

          // Support: Android <=2.3 only (functionish RegExp)
          return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
        }
        /* global Symbol */
        // Defining this global in .eslintrc.json would create a danger of using the global
        // unguarded in another place, it seems safer to define global only for this module

        var version = "3.7.1",
          rhtmlSuffix = /HTML$/i,
          // Define a local copy of jQuery
          _jQuery2 = function jQuery(selector, context) {
            // The jQuery object is actually just the init constructor 'enhanced'
            // Need init if jQuery is called (just allow error to be thrown if not included)
            return new _jQuery2.fn.init(selector, context);
          };
        _jQuery2.fn = _jQuery2.prototype = {
          // The current version of jQuery being used
          jquery: version,
          constructor: _jQuery2,
          // The default length of a jQuery object is 0
          length: 0,
          toArray: function toArray() {
            return _slice.call(this);
          },
          // Get the Nth element in the matched element set OR
          // Get the whole matched element set as a clean array
          get: function get(num) {
            // Return all the elements in a clean array
            if (num == null) {
              return _slice.call(this);
            }

            // Return just the one element from the set
            return num < 0 ? this[num + this.length] : this[num];
          },
          // Take an array of elements and push it onto the stack
          // (returning the new matched element set)
          pushStack: function pushStack(elems) {
            // Build a new jQuery matched element set
            var ret = _jQuery2.merge(this.constructor(), elems);

            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;

            // Return the newly-formed element set
            return ret;
          },
          // Execute a callback for every element in the matched set.
          each: function each(callback) {
            return _jQuery2.each(this, callback);
          },
          map: function map(callback) {
            return this.pushStack(_jQuery2.map(this, function (elem, i) {
              return callback.call(elem, i, elem);
            }));
          },
          slice: function slice() {
            return this.pushStack(_slice.apply(this, arguments));
          },
          first: function first() {
            return this.eq(0);
          },
          last: function last() {
            return this.eq(-1);
          },
          even: function even() {
            return this.pushStack(_jQuery2.grep(this, function (_elem, i) {
              return (i + 1) % 2;
            }));
          },
          odd: function odd() {
            return this.pushStack(_jQuery2.grep(this, function (_elem, i) {
              return i % 2;
            }));
          },
          eq: function eq(i) {
            var len = this.length,
              j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
          },
          end: function end() {
            return this.prevObject || this.constructor();
          },
          // For internal use only.
          // Behaves like an Array's method, not like a jQuery method.
          push: push,
          sort: arr.sort,
          splice: arr.splice
        };
        _jQuery2.extend = _jQuery2.fn.extend = function () {
          var options,
            name,
            src,
            copy,
            copyIsArray,
            clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

          // Handle a deep copy situation
          if (typeof target === "boolean") {
            deep = target;

            // Skip the boolean and the target
            target = arguments[i] || {};
            i++;
          }

          // Handle case when target is a string or something (possible in deep copy)
          if (_typeof(target) !== "object" && !isFunction(target)) {
            target = {};
          }

          // Extend jQuery itself if only one argument is passed
          if (i === length) {
            target = this;
            i--;
          }
          for (; i < length; i++) {
            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) {
              // Extend the base object
              for (name in options) {
                copy = options[name];

                // Prevent Object.prototype pollution
                // Prevent never-ending loop
                if (name === "__proto__" || target === copy) {
                  continue;
                }

                // Recurse if we're merging plain objects or arrays
                if (deep && copy && (_jQuery2.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                  src = target[name];

                  // Ensure proper type for the source value
                  if (copyIsArray && !Array.isArray(src)) {
                    clone = [];
                  } else if (!copyIsArray && !_jQuery2.isPlainObject(src)) {
                    clone = {};
                  } else {
                    clone = src;
                  }
                  copyIsArray = false;

                  // Never move original objects, clone them
                  target[name] = _jQuery2.extend(deep, clone, copy);

                  // Don't bring in undefined values
                } else if (copy !== undefined) {
                  target[name] = copy;
                }
              }
            }
          }

          // Return the modified object
          return target;
        };
        _jQuery2.extend({
          // Unique for each copy of jQuery on the page
          expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
          // Assume jQuery is ready without the ready module
          isReady: true,
          error: function error(msg) {
            throw new Error(msg);
          },
          noop: function noop() {},
          isPlainObject: function isPlainObject(obj) {
            var proto, Ctor;

            // Detect obvious negatives
            // Use toString instead of jQuery.type to catch host objects
            if (!obj || toString.call(obj) !== "[object Object]") {
              return false;
            }
            proto = getProto(obj);

            // Objects with no prototype (e.g., `Object.create( null )`) are plain
            if (!proto) {
              return true;
            }

            // Objects with prototype are plain iff they were constructed by a global Object function
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
          },
          isEmptyObject: function isEmptyObject(obj) {
            var name;
            for (name in obj) {
              return false;
            }
            return true;
          },
          // Evaluates a script in a provided context; falls back to the global one
          // if not specified.
          globalEval: function globalEval(code, options, doc) {
            DOMEval(code, {
              nonce: options && options.nonce
            }, doc);
          },
          each: function each(obj, callback) {
            var length,
              i = 0;
            if (isArrayLike(obj)) {
              length = obj.length;
              for (; i < length; i++) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            }
            return obj;
          },
          // Retrieve the text value of an array of DOM nodes
          text: function text(elem) {
            var node,
              ret = "",
              i = 0,
              nodeType = elem.nodeType;
            if (!nodeType) {
              // If no nodeType, this is expected to be an array
              while (node = elem[i++]) {
                // Do not traverse comment nodes
                ret += _jQuery2.text(node);
              }
            }
            if (nodeType === 1 || nodeType === 11) {
              return elem.textContent;
            }
            if (nodeType === 9) {
              return elem.documentElement.textContent;
            }
            if (nodeType === 3 || nodeType === 4) {
              return elem.nodeValue;
            }

            // Do not include comment or processing instruction nodes

            return ret;
          },
          // results is for internal usage only
          makeArray: function makeArray(arr, results) {
            var ret = results || [];
            if (arr != null) {
              if (isArrayLike(Object(arr))) {
                _jQuery2.merge(ret, typeof arr === "string" ? [arr] : arr);
              } else {
                push.call(ret, arr);
              }
            }
            return ret;
          },
          inArray: function inArray(elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
          },
          isXMLDoc: function isXMLDoc(elem) {
            var namespace = elem && elem.namespaceURI,
              docElem = elem && (elem.ownerDocument || elem).documentElement;

            // Assume HTML when documentElement doesn't yet exist, such as inside
            // document fragments.
            return !rhtmlSuffix.test(namespace || docElem && docElem.nodeName || "HTML");
          },
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          merge: function merge(first, second) {
            var len = +second.length,
              j = 0,
              i = first.length;
            for (; j < len; j++) {
              first[i++] = second[j];
            }
            first.length = i;
            return first;
          },
          grep: function grep(elems, callback, invert) {
            var callbackInverse,
              matches = [],
              i = 0,
              length = elems.length,
              callbackExpect = !invert;

            // Go through the array, only saving the items
            // that pass the validator function
            for (; i < length; i++) {
              callbackInverse = !callback(elems[i], i);
              if (callbackInverse !== callbackExpect) {
                matches.push(elems[i]);
              }
            }
            return matches;
          },
          // arg is for internal usage only
          map: function map(elems, callback, arg) {
            var length,
              value,
              i = 0,
              ret = [];

            // Go through the array, translating each of the items to their new values
            if (isArrayLike(elems)) {
              length = elems.length;
              for (; i < length; i++) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }

              // Go through every key on the object,
            } else {
              for (i in elems) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            }

            // Flatten any nested arrays
            return flat(ret);
          },
          // A global GUID counter for objects
          guid: 1,
          // jQuery.support is not used in Core but other projects attach their
          // properties to it so it needs to exist.
          support: support
        });
        if (typeof Symbol === "function") {
          _jQuery2.fn[Symbol.iterator] = arr[Symbol.iterator];
        }

        // Populate the class2type map
        _jQuery2.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {
          class2type["[object " + name + "]"] = name.toLowerCase();
        });
        function isArrayLike(obj) {
          // Support: real iOS 8.2 only (not reproducible in simulator)
          // `in` check used to prevent JIT error (gh-2145)
          // hasOwn isn't used here due to false negatives
          // regarding Nodelist length in IE
          var length = !!obj && "length" in obj && obj.length,
            type = toType(obj);
          if (isFunction(obj) || isWindow(obj)) {
            return false;
          }
          return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
        }
        function nodeName(elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        }
        var pop = arr.pop;
        var sort = arr.sort;
        var splice = arr.splice;
        var whitespace = "[\\x20\\t\\r\\n\\f]";
        var rtrimCSS = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g");

        // Note: an element does not contain itself
        _jQuery2.contains = function (a, b) {
          var bup = b && b.parentNode;
          return a === bup || !!(bup && bup.nodeType === 1 && (
          // Support: IE 9 - 11+
          // IE doesn't have `contains` on SVG.
          a.contains ? a.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
        };

        // CSS string/identifier serialization
        // https://drafts.csswg.org/cssom/#common-serializing-idioms
        var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
        function fcssescape(ch, asCodePoint) {
          if (asCodePoint) {
            // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
            if (ch === "\0") {
              return "\uFFFD";
            }

            // Control characters and (dependent upon position) numbers get escaped as code points
            return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
          }

          // Other potentially-special ASCII characters get backslash-escaped
          return "\\" + ch;
        }
        _jQuery2.escapeSelector = function (sel) {
          return (sel + "").replace(rcssescape, fcssescape);
        };
        var preferredDoc = document,
          pushNative = push;
        (function () {
          var i,
            Expr,
            outermostContext,
            sortInput,
            hasDuplicate,
            push = pushNative,
            // Local document vars
            document,
            documentElement,
            documentIsHTML,
            rbuggyQSA,
            matches,
            // Instance-specific data
            expando = _jQuery2.expando,
            dirruns = 0,
            done = 0,
            classCache = createCache(),
            tokenCache = createCache(),
            compilerCache = createCache(),
            nonnativeSelectorCache = createCache(),
            sortOrder = function sortOrder(a, b) {
              if (a === b) {
                hasDuplicate = true;
              }
              return 0;
            },
            booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" + "loop|multiple|open|readonly|required|scoped",
            // Regular expressions

            // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
            identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
            // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
            attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
            // Operator (capture 2)
            "*([*^$|!~]?=)" + whitespace +
            // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
            "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
            pseudos = ":(" + identifier + ")(?:\\((" +
            // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
            // 1. quoted (capture 3; capture 4 or capture 5)
            "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
            // 2. simple (capture 6)
            "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
            // 3. anything else (capture 2)
            ".*" + ")\\)|)",
            // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
            rwhitespace = new RegExp(whitespace + "+", "g"),
            rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
            rleadingCombinator = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
            rdescend = new RegExp(whitespace + "|>"),
            rpseudo = new RegExp(pseudos),
            ridentifier = new RegExp("^" + identifier + "$"),
            matchExpr = {
              ID: new RegExp("^#(" + identifier + ")"),
              CLASS: new RegExp("^\\.(" + identifier + ")"),
              TAG: new RegExp("^(" + identifier + "|[*])"),
              ATTR: new RegExp("^" + attributes),
              PSEUDO: new RegExp("^" + pseudos),
              CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
              bool: new RegExp("^(?:" + booleans + ")$", "i"),
              // For use in libraries implementing .is()
              // We use this for POS matching in `select`
              needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
            },
            rinputs = /^(?:input|select|textarea|button)$/i,
            rheader = /^h\d$/i,
            // Easily-parseable/retrievable ID or TAG or CLASS selectors
            rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            rsibling = /[+~]/,
            // CSS escapes
            // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
            runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"),
            funescape = function funescape(escape, nonHex) {
              var high = "0x" + escape.slice(1) - 0x10000;
              if (nonHex) {
                // Strip the backslash prefix from a non-hex escape sequence
                return nonHex;
              }

              // Replace a hexadecimal escape sequence with the encoded Unicode code point
              // Support: IE <=11+
              // For values outside the Basic Multilingual Plane (BMP), manually construct a
              // surrogate pair
              return high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
            },
            // Used for iframes; see `setDocument`.
            // Support: IE 9 - 11+, Edge 12 - 18+
            // Removing the function wrapper causes a "Permission Denied"
            // error in IE/Edge.
            unloadHandler = function unloadHandler() {
              setDocument();
            },
            inDisabledFieldset = addCombinator(function (elem) {
              return elem.disabled === true && nodeName(elem, "fieldset");
            }, {
              dir: "parentNode",
              next: "legend"
            });

          // Support: IE <=9 only
          // Accessing document.activeElement can throw unexpectedly
          // https://bugs.jquery.com/ticket/13393
          function safeActiveElement() {
            try {
              return document.activeElement;
            } catch (err) {}
          }

          // Optimize for push.apply( _, NodeList )
          try {
            push.apply(arr = _slice.call(preferredDoc.childNodes), preferredDoc.childNodes);

            // Support: Android <=4.0
            // Detect silently failing push.apply
            // eslint-disable-next-line no-unused-expressions
            arr[preferredDoc.childNodes.length].nodeType;
          } catch (e) {
            push = {
              apply: function apply(target, els) {
                pushNative.apply(target, _slice.call(els));
              },
              call: function call(target) {
                pushNative.apply(target, _slice.call(arguments, 1));
              }
            };
          }
          function find(selector, context, results, seed) {
            var m,
              i,
              elem,
              nid,
              match,
              groups,
              newSelector,
              newContext = context && context.ownerDocument,
              // nodeType defaults to 9, since context defaults to document
              nodeType = context ? context.nodeType : 9;
            results = results || [];

            // Return early from calls with invalid selector or context
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
              return results;
            }

            // Try to shortcut find operations (as opposed to filters) in HTML documents
            if (!seed) {
              setDocument(context);
              context = context || document;
              if (documentIsHTML) {
                // If the selector is sufficiently simple, try using a "get*By*" DOM method
                // (excepting DocumentFragment context, where the methods don't exist)
                if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                  // ID selector
                  if (m = match[1]) {
                    // Document context
                    if (nodeType === 9) {
                      if (elem = context.getElementById(m)) {
                        // Support: IE 9 only
                        // getElementById can match elements by name instead of ID
                        if (elem.id === m) {
                          push.call(results, elem);
                          return results;
                        }
                      } else {
                        return results;
                      }

                      // Element context
                    } else {
                      // Support: IE 9 only
                      // getElementById can match elements by name instead of ID
                      if (newContext && (elem = newContext.getElementById(m)) && find.contains(context, elem) && elem.id === m) {
                        push.call(results, elem);
                        return results;
                      }
                    }

                    // Type selector
                  } else if (match[2]) {
                    push.apply(results, context.getElementsByTagName(selector));
                    return results;

                    // Class selector
                  } else if ((m = match[3]) && context.getElementsByClassName) {
                    push.apply(results, context.getElementsByClassName(m));
                    return results;
                  }
                }

                // Take advantage of querySelectorAll
                if (!nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                  newSelector = selector;
                  newContext = context;

                  // qSA considers elements outside a scoping root when evaluating child or
                  // descendant combinators, which is not what we want.
                  // In such cases, we work around the behavior by prefixing every selector in the
                  // list with an ID selector referencing the scope context.
                  // The technique has to be used as well when a leading combinator is used
                  // as such selectors are not recognized by querySelectorAll.
                  // Thanks to Andrew Dupont for this technique.
                  if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {
                    // Expand context for sibling selectors
                    newContext = rsibling.test(selector) && testContext(context.parentNode) || context;

                    // We can use :scope instead of the ID hack if the browser
                    // supports it & if we're not changing the context.
                    // Support: IE 11+, Edge 17 - 18+
                    // IE/Edge sometimes throw a "Permission denied" error when
                    // strict-comparing two documents; shallow comparisons work.
                    // eslint-disable-next-line eqeqeq
                    if (newContext != context || !support.scope) {
                      // Capture the context ID, setting it first if necessary
                      if (nid = context.getAttribute("id")) {
                        nid = _jQuery2.escapeSelector(nid);
                      } else {
                        context.setAttribute("id", nid = expando);
                      }
                    }

                    // Prefix every selector in the list
                    groups = tokenize(selector);
                    i = groups.length;
                    while (i--) {
                      groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
                    }
                    newSelector = groups.join(",");
                  }
                  try {
                    push.apply(results, newContext.querySelectorAll(newSelector));
                    return results;
                  } catch (qsaError) {
                    nonnativeSelectorCache(selector, true);
                  } finally {
                    if (nid === expando) {
                      context.removeAttribute("id");
                    }
                  }
                }
              }
            }

            // All others
            return select(selector.replace(rtrimCSS, "$1"), context, results, seed);
          }

          /**
           * Create key-value caches of limited size
           * @returns {function(string, object)} Returns the Object data after storing it on itself with
           *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
           *	deleting the oldest entry
           */
          function createCache() {
            var keys = [];
            function cache(key, value) {
              // Use (key + " ") to avoid collision with native prototype properties
              // (see https://github.com/jquery/sizzle/issues/157)
              if (keys.push(key + " ") > Expr.cacheLength) {
                // Only keep the most recent entries
                delete cache[keys.shift()];
              }
              return cache[key + " "] = value;
            }
            return cache;
          }

          /**
           * Mark a function for special use by jQuery selector module
           * @param {Function} fn The function to mark
           */
          function markFunction(fn) {
            fn[expando] = true;
            return fn;
          }

          /**
           * Support testing using an element
           * @param {Function} fn Passed the created element and returns a boolean result
           */
          function assert(fn) {
            var el = document.createElement("fieldset");
            try {
              return !!fn(el);
            } catch (e) {
              return false;
            } finally {
              // Remove from its parent by default
              if (el.parentNode) {
                el.parentNode.removeChild(el);
              }

              // release memory in IE
              el = null;
            }
          }

          /**
           * Returns a function to use in pseudos for input types
           * @param {String} type
           */
          function createInputPseudo(type) {
            return function (elem) {
              return nodeName(elem, "input") && elem.type === type;
            };
          }

          /**
           * Returns a function to use in pseudos for buttons
           * @param {String} type
           */
          function createButtonPseudo(type) {
            return function (elem) {
              return (nodeName(elem, "input") || nodeName(elem, "button")) && elem.type === type;
            };
          }

          /**
           * Returns a function to use in pseudos for :enabled/:disabled
           * @param {Boolean} disabled true for :disabled; false for :enabled
           */
          function createDisabledPseudo(disabled) {
            // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
            return function (elem) {
              // Only certain elements can match :enabled or :disabled
              // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
              // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
              if ("form" in elem) {
                // Check for inherited disabledness on relevant non-disabled elements:
                // * listed form-associated elements in a disabled fieldset
                //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                // * option elements in a disabled optgroup
                //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                // All such elements have a "form" property.
                if (elem.parentNode && elem.disabled === false) {
                  // Option elements defer to a parent optgroup if present
                  if ("label" in elem) {
                    if ("label" in elem.parentNode) {
                      return elem.parentNode.disabled === disabled;
                    } else {
                      return elem.disabled === disabled;
                    }
                  }

                  // Support: IE 6 - 11+
                  // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                  return elem.isDisabled === disabled ||
                  // Where there is no isDisabled, check manually
                  elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                }
                return elem.disabled === disabled;

                // Try to winnow out elements that can't be disabled before trusting the disabled property.
                // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                // even exist on them, let alone have a boolean value.
              } else if ("label" in elem) {
                return elem.disabled === disabled;
              }

              // Remaining elements are neither :enabled nor :disabled
              return false;
            };
          }

          /**
           * Returns a function to use in pseudos for positionals
           * @param {Function} fn
           */
          function createPositionalPseudo(fn) {
            return markFunction(function (argument) {
              argument = +argument;
              return markFunction(function (seed, matches) {
                var j,
                  matchIndexes = fn([], seed.length, argument),
                  i = matchIndexes.length;

                // Match elements found at the specified indexes
                while (i--) {
                  if (seed[j = matchIndexes[i]]) {
                    seed[j] = !(matches[j] = seed[j]);
                  }
                }
              });
            });
          }

          /**
           * Checks a node for validity as a jQuery selector context
           * @param {Element|Object=} context
           * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
           */
          function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
          }

          /**
           * Sets document-related variables once based on the current document
           * @param {Element|Object} [node] An element or document object to use to set the document
           * @returns {Object} Returns the current document
           */
          function setDocument(node) {
            var subWindow,
              doc = node ? node.ownerDocument || node : preferredDoc;

            // Return early if doc is invalid or already selected
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
              return document;
            }

            // Update global variables
            document = doc;
            documentElement = document.documentElement;
            documentIsHTML = !_jQuery2.isXMLDoc(document);

            // Support: iOS 7 only, IE 9 - 11+
            // Older browsers didn't support unprefixed `matches`.
            matches = documentElement.matches || documentElement.webkitMatchesSelector || documentElement.msMatchesSelector;

            // Support: IE 9 - 11+, Edge 12 - 18+
            // Accessing iframe documents after unload throws "permission denied" errors
            // (see trac-13936).
            // Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,
            // all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.
            if (documentElement.msMatchesSelector &&
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
              // Support: IE 9 - 11+, Edge 12 - 18+
              subWindow.addEventListener("unload", unloadHandler);
            }

            // Support: IE <10
            // Check if getElementById returns elements by name
            // The broken getElementById methods don't pick up programmatically-set names,
            // so use a roundabout getElementsByName test
            support.getById = assert(function (el) {
              documentElement.appendChild(el).id = _jQuery2.expando;
              return !document.getElementsByName || !document.getElementsByName(_jQuery2.expando).length;
            });

            // Support: IE 9 only
            // Check to see if it's possible to do matchesSelector
            // on a disconnected node.
            support.disconnectedMatch = assert(function (el) {
              return matches.call(el, "*");
            });

            // Support: IE 9 - 11+, Edge 12 - 18+
            // IE/Edge don't support the :scope pseudo-class.
            support.scope = assert(function () {
              return document.querySelectorAll(":scope");
            });

            // Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
            // Make sure the `:has()` argument is parsed unforgivingly.
            // We include `*` in the test to detect buggy implementations that are
            // _selectively_ forgiving (specifically when the list includes at least
            // one valid selector).
            // Note that we treat complete lack of support for `:has()` as if it were
            // spec-compliant support, which is fine because use of `:has()` in such
            // environments will fail in the qSA path and fall back to jQuery traversal
            // anyway.
            support.cssHas = assert(function () {
              try {
                document.querySelector(":has(*,:jqfake)");
                return false;
              } catch (e) {
                return true;
              }
            });

            // ID filter and find
            if (support.getById) {
              Expr.filter.ID = function (id) {
                var attrId = id.replace(runescape, funescape);
                return function (elem) {
                  return elem.getAttribute("id") === attrId;
                };
              };
              Expr.find.ID = function (id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                  var elem = context.getElementById(id);
                  return elem ? [elem] : [];
                }
              };
            } else {
              Expr.filter.ID = function (id) {
                var attrId = id.replace(runescape, funescape);
                return function (elem) {
                  var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                  return node && node.value === attrId;
                };
              };

              // Support: IE 6 - 7 only
              // getElementById is not reliable as a find shortcut
              Expr.find.ID = function (id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                  var node,
                    i,
                    elems,
                    elem = context.getElementById(id);
                  if (elem) {
                    // Verify the id attribute
                    node = elem.getAttributeNode("id");
                    if (node && node.value === id) {
                      return [elem];
                    }

                    // Fall back on getElementsByName
                    elems = context.getElementsByName(id);
                    i = 0;
                    while (elem = elems[i++]) {
                      node = elem.getAttributeNode("id");
                      if (node && node.value === id) {
                        return [elem];
                      }
                    }
                  }
                  return [];
                }
              };
            }

            // Tag
            Expr.find.TAG = function (tag, context) {
              if (typeof context.getElementsByTagName !== "undefined") {
                return context.getElementsByTagName(tag);

                // DocumentFragment nodes don't have gEBTN
              } else {
                return context.querySelectorAll(tag);
              }
            };

            // Class
            Expr.find.CLASS = function (className, context) {
              if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                return context.getElementsByClassName(className);
              }
            };

            /* QSA/matchesSelector
            ---------------------------------------------------------------------- */

            // QSA and matchesSelector support

            rbuggyQSA = [];

            // Build QSA regex
            // Regex strategy adopted from Diego Perini
            assert(function (el) {
              var input;
              documentElement.appendChild(el).innerHTML = "<a id='" + expando + "' href='' disabled='disabled'></a>" + "<select id='" + expando + "-\r\\' disabled='disabled'>" + "<option selected=''></option></select>";

              // Support: iOS <=7 - 8 only
              // Boolean attributes and "value" are not treated correctly in some XML documents
              if (!el.querySelectorAll("[selected]").length) {
                rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
              }

              // Support: iOS <=7 - 8 only
              if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                rbuggyQSA.push("~=");
              }

              // Support: iOS 8 only
              // https://bugs.webkit.org/show_bug.cgi?id=136851
              // In-page `selector#id sibling-combinator selector` fails
              if (!el.querySelectorAll("a#" + expando + "+*").length) {
                rbuggyQSA.push(".#.+[+~]");
              }

              // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
              // In some of the document kinds, these selectors wouldn't work natively.
              // This is probably OK but for backwards compatibility we want to maintain
              // handling them through jQuery traversal in jQuery 3.x.
              if (!el.querySelectorAll(":checked").length) {
                rbuggyQSA.push(":checked");
              }

              // Support: Windows 8 Native Apps
              // The type and name attributes are restricted during .innerHTML assignment
              input = document.createElement("input");
              input.setAttribute("type", "hidden");
              el.appendChild(input).setAttribute("name", "D");

              // Support: IE 9 - 11+
              // IE's :disabled selector does not pick up the children of disabled fieldsets
              // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
              // In some of the document kinds, these selectors wouldn't work natively.
              // This is probably OK but for backwards compatibility we want to maintain
              // handling them through jQuery traversal in jQuery 3.x.
              documentElement.appendChild(el).disabled = true;
              if (el.querySelectorAll(":disabled").length !== 2) {
                rbuggyQSA.push(":enabled", ":disabled");
              }

              // Support: IE 11+, Edge 15 - 18+
              // IE 11/Edge don't find elements on a `[name='']` query in some cases.
              // Adding a temporary attribute to the document before the selection works
              // around the issue.
              // Interestingly, IE 10 & older don't seem to have the issue.
              input = document.createElement("input");
              input.setAttribute("name", "");
              el.appendChild(input);
              if (!el.querySelectorAll("[name='']").length) {
                rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
              }
            });
            if (!support.cssHas) {
              // Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
              // Our regular `try-catch` mechanism fails to detect natively-unsupported
              // pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
              // in browsers that parse the `:has()` argument as a forgiving selector list.
              // https://drafts.csswg.org/selectors/#relational now requires the argument
              // to be parsed unforgivingly, but browsers have not yet fully adjusted.
              rbuggyQSA.push(":has");
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));

            /* Sorting
            ---------------------------------------------------------------------- */

            // Document order sorting
            sortOrder = function sortOrder(a, b) {
              // Flag for duplicate removal
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }

              // Sort on method existence if only one input has compareDocumentPosition
              var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
              if (compare) {
                return compare;
              }

              // Calculate position if both inputs belong to the same document
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) :
              // Otherwise we know they are disconnected
              1;

              // Disconnected nodes
              if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                // Choose the first element that is related to our preferred document
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (a === document || a.ownerDocument == preferredDoc && find.contains(preferredDoc, a)) {
                  return -1;
                }

                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (b === document || b.ownerDocument == preferredDoc && find.contains(preferredDoc, b)) {
                  return 1;
                }

                // Maintain original order
                return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
              }
              return compare & 4 ? -1 : 1;
            };
            return document;
          }
          find.matches = function (expr, elements) {
            return find(expr, null, null, elements);
          };
          find.matchesSelector = function (elem, expr) {
            setDocument(elem);
            if (documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
              try {
                var ret = matches.call(elem, expr);

                // IE 9's matchesSelector returns false on disconnected nodes
                if (ret || support.disconnectedMatch ||
                // As well, disconnected nodes are said to be in a document
                // fragment in IE 9
                elem.document && elem.document.nodeType !== 11) {
                  return ret;
                }
              } catch (e) {
                nonnativeSelectorCache(expr, true);
              }
            }
            return find(expr, document, null, [elem]).length > 0;
          };
          find.contains = function (context, elem) {
            // Set document vars if needed
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            if ((context.ownerDocument || context) != document) {
              setDocument(context);
            }
            return _jQuery2.contains(context, elem);
          };
          find.attr = function (elem, name) {
            // Set document vars if needed
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            if ((elem.ownerDocument || elem) != document) {
              setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()],
              // Don't get fooled by Object.prototype properties (see trac-13807)
              val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            if (val !== undefined) {
              return val;
            }
            return elem.getAttribute(name);
          };
          find.error = function (msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
          };

          /**
           * Document sorting and removing duplicates
           * @param {ArrayLike} results
           */
          _jQuery2.uniqueSort = function (results) {
            var elem,
              duplicates = [],
              j = 0,
              i = 0;

            // Unless we *know* we can detect duplicates, assume their presence
            //
            // Support: Android <=4.0+
            // Testing for detecting duplicates is unpredictable so instead assume we can't
            // depend on duplicate detection in all browsers without a stable sort.
            hasDuplicate = !support.sortStable;
            sortInput = !support.sortStable && _slice.call(results, 0);
            sort.call(results, sortOrder);
            if (hasDuplicate) {
              while (elem = results[i++]) {
                if (elem === results[i]) {
                  j = duplicates.push(i);
                }
              }
              while (j--) {
                splice.call(results, duplicates[j], 1);
              }
            }

            // Clear input after sorting to release objects
            // See https://github.com/jquery/sizzle/pull/225
            sortInput = null;
            return results;
          };
          _jQuery2.fn.uniqueSort = function () {
            return this.pushStack(_jQuery2.uniqueSort(_slice.apply(this)));
          };
          Expr = _jQuery2.expr = {
            // Can be adjusted by the user
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
              ">": {
                dir: "parentNode",
                first: true
              },
              " ": {
                dir: "parentNode"
              },
              "+": {
                dir: "previousSibling",
                first: true
              },
              "~": {
                dir: "previousSibling"
              }
            },
            preFilter: {
              ATTR: function ATTR(match) {
                match[1] = match[1].replace(runescape, funescape);

                // Move the given value to match[3] whether quoted or unquoted
                match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                if (match[2] === "~=") {
                  match[3] = " " + match[3] + " ";
                }
                return match.slice(0, 4);
              },
              CHILD: function CHILD(match) {
                /* matches from matchExpr["CHILD"]
                	1 type (only|nth|...)
                	2 what (child|of-type)
                	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                	4 xn-component of xn+y argument ([+-]?\d*n|)
                	5 sign of xn-component
                	6 x of xn-component
                	7 sign of y-component
                	8 y of y-component
                */
                match[1] = match[1].toLowerCase();
                if (match[1].slice(0, 3) === "nth") {
                  // nth-* requires argument
                  if (!match[3]) {
                    find.error(match[0]);
                  }

                  // numeric x and y parameters for Expr.filter.CHILD
                  // remember that false/true cast respectively to 0/1
                  match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                  match[5] = +(match[7] + match[8] || match[3] === "odd");

                  // other types prohibit arguments
                } else if (match[3]) {
                  find.error(match[0]);
                }
                return match;
              },
              PSEUDO: function PSEUDO(match) {
                var excess,
                  unquoted = !match[6] && match[2];
                if (matchExpr.CHILD.test(match[0])) {
                  return null;
                }

                // Accept quoted arguments as-is
                if (match[3]) {
                  match[2] = match[4] || match[5] || "";

                  // Strip excess characters from unquoted arguments
                } else if (unquoted && rpseudo.test(unquoted) && (
                // Get excess from tokenize (recursively)
                excess = tokenize(unquoted, true)) && (
                // advance to the next closing parenthesis
                excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                  // excess is a negative index
                  match[0] = match[0].slice(0, excess);
                  match[2] = unquoted.slice(0, excess);
                }

                // Return only captures needed by the pseudo filter method (type and argument)
                return match.slice(0, 3);
              }
            },
            filter: {
              TAG: function TAG(nodeNameSelector) {
                var expectedNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                return nodeNameSelector === "*" ? function () {
                  return true;
                } : function (elem) {
                  return nodeName(elem, expectedNodeName);
                };
              },
              CLASS: function CLASS(className) {
                var pattern = classCache[className + " "];
                return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
                  return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                });
              },
              ATTR: function ATTR(name, operator, check) {
                return function (elem) {
                  var result = find.attr(elem, name);
                  if (result == null) {
                    return operator === "!=";
                  }
                  if (!operator) {
                    return true;
                  }
                  result += "";
                  if (operator === "=") {
                    return result === check;
                  }
                  if (operator === "!=") {
                    return result !== check;
                  }
                  if (operator === "^=") {
                    return check && result.indexOf(check) === 0;
                  }
                  if (operator === "*=") {
                    return check && result.indexOf(check) > -1;
                  }
                  if (operator === "$=") {
                    return check && result.slice(-check.length) === check;
                  }
                  if (operator === "~=") {
                    return (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1;
                  }
                  if (operator === "|=") {
                    return result === check || result.slice(0, check.length + 1) === check + "-";
                  }
                  return false;
                };
              },
              CHILD: function CHILD(type, what, _argument, first, last) {
                var simple = type.slice(0, 3) !== "nth",
                  forward = type.slice(-4) !== "last",
                  ofType = what === "of-type";
                return first === 1 && last === 0 ?
                // Shortcut for :nth-*(n)
                function (elem) {
                  return !!elem.parentNode;
                } : function (elem, _context, xml) {
                  var cache,
                    outerCache,
                    node,
                    nodeIndex,
                    start,
                    dir = simple !== forward ? "nextSibling" : "previousSibling",
                    parent = elem.parentNode,
                    name = ofType && elem.nodeName.toLowerCase(),
                    useCache = !xml && !ofType,
                    diff = false;
                  if (parent) {
                    // :(first|last|only)-(child|of-type)
                    if (simple) {
                      while (dir) {
                        node = elem;
                        while (node = node[dir]) {
                          if (ofType ? nodeName(node, name) : node.nodeType === 1) {
                            return false;
                          }
                        }

                        // Reverse direction for :only-* (if we haven't yet done so)
                        start = dir = type === "only" && !start && "nextSibling";
                      }
                      return true;
                    }
                    start = [forward ? parent.firstChild : parent.lastChild];

                    // non-xml :nth-child(...) stores cache data on `parent`
                    if (forward && useCache) {
                      // Seek `elem` from a previously-cached index
                      outerCache = parent[expando] || (parent[expando] = {});
                      cache = outerCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex && cache[2];
                      node = nodeIndex && parent.childNodes[nodeIndex];
                      while (node = ++nodeIndex && node && node[dir] || (
                      // Fallback to seeking `elem` from the start
                      diff = nodeIndex = 0) || start.pop()) {
                        // When found, cache indexes on `parent` and break
                        if (node.nodeType === 1 && ++diff && node === elem) {
                          outerCache[type] = [dirruns, nodeIndex, diff];
                          break;
                        }
                      }
                    } else {
                      // Use previously-cached element index if available
                      if (useCache) {
                        outerCache = elem[expando] || (elem[expando] = {});
                        cache = outerCache[type] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = nodeIndex;
                      }

                      // xml :nth-child(...)
                      // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                      if (diff === false) {
                        // Use the same loop as above to seek `elem` from the start
                        while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                          if ((ofType ? nodeName(node, name) : node.nodeType === 1) && ++diff) {
                            // Cache the index of each encountered element
                            if (useCache) {
                              outerCache = node[expando] || (node[expando] = {});
                              outerCache[type] = [dirruns, diff];
                            }
                            if (node === elem) {
                              break;
                            }
                          }
                        }
                      }
                    }

                    // Incorporate the offset, then check against cycle size
                    diff -= last;
                    return diff === first || diff % first === 0 && diff / first >= 0;
                  }
                };
              },
              PSEUDO: function PSEUDO(pseudo, argument) {
                // pseudo-class names are case-insensitive
                // https://www.w3.org/TR/selectors/#pseudo-classes
                // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                // Remember that setFilters inherits from pseudos
                var args,
                  fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || find.error("unsupported pseudo: " + pseudo);

                // The user may use createPseudo to indicate that
                // arguments are needed to create the filter function
                // just as jQuery does
                if (fn[expando]) {
                  return fn(argument);
                }

                // But maintain support for old signatures
                if (fn.length > 1) {
                  args = [pseudo, pseudo, "", argument];
                  return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                    var idx,
                      matched = fn(seed, argument),
                      i = matched.length;
                    while (i--) {
                      idx = indexOf.call(seed, matched[i]);
                      seed[idx] = !(matches[idx] = matched[i]);
                    }
                  }) : function (elem) {
                    return fn(elem, 0, args);
                  };
                }
                return fn;
              }
            },
            pseudos: {
              // Potentially complex pseudos
              not: markFunction(function (selector) {
                // Trim the selector passed to compile
                // to avoid treating leading and trailing
                // spaces as combinators
                var input = [],
                  results = [],
                  matcher = compile(selector.replace(rtrimCSS, "$1"));
                return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {
                  var elem,
                    unmatched = matcher(seed, null, xml, []),
                    i = seed.length;

                  // Match elements unmatched by `matcher`
                  while (i--) {
                    if (elem = unmatched[i]) {
                      seed[i] = !(matches[i] = elem);
                    }
                  }
                }) : function (elem, _context, xml) {
                  input[0] = elem;
                  matcher(input, null, xml, results);

                  // Don't keep the element
                  // (see https://github.com/jquery/sizzle/issues/299)
                  input[0] = null;
                  return !results.pop();
                };
              }),
              has: markFunction(function (selector) {
                return function (elem) {
                  return find(selector, elem).length > 0;
                };
              }),
              contains: markFunction(function (text) {
                text = text.replace(runescape, funescape);
                return function (elem) {
                  return (elem.textContent || _jQuery2.text(elem)).indexOf(text) > -1;
                };
              }),
              // "Whether an element is represented by a :lang() selector
              // is based solely on the element's language value
              // being equal to the identifier C,
              // or beginning with the identifier C immediately followed by "-".
              // The matching of C against the element's language value is performed case-insensitively.
              // The identifier C does not have to be a valid language name."
              // https://www.w3.org/TR/selectors/#lang-pseudo
              lang: markFunction(function (lang) {
                // lang value must be a valid identifier
                if (!ridentifier.test(lang || "")) {
                  find.error("unsupported lang: " + lang);
                }
                lang = lang.replace(runescape, funescape).toLowerCase();
                return function (elem) {
                  var elemLang;
                  do {
                    if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                      elemLang = elemLang.toLowerCase();
                      return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                    }
                  } while ((elem = elem.parentNode) && elem.nodeType === 1);
                  return false;
                };
              }),
              // Miscellaneous
              target: function target(elem) {
                var hash = window.location && window.location.hash;
                return hash && hash.slice(1) === elem.id;
              },
              root: function root(elem) {
                return elem === documentElement;
              },
              focus: function focus(elem) {
                return elem === safeActiveElement() && document.hasFocus() && !!(elem.type || elem.href || ~elem.tabIndex);
              },
              // Boolean properties
              enabled: createDisabledPseudo(false),
              disabled: createDisabledPseudo(true),
              checked: function checked(elem) {
                // In CSS3, :checked should return both checked and selected elements
                // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                return nodeName(elem, "input") && !!elem.checked || nodeName(elem, "option") && !!elem.selected;
              },
              selected: function selected(elem) {
                // Support: IE <=11+
                // Accessing the selectedIndex property
                // forces the browser to treat the default option as
                // selected when in an optgroup.
                if (elem.parentNode) {
                  // eslint-disable-next-line no-unused-expressions
                  elem.parentNode.selectedIndex;
                }
                return elem.selected === true;
              },
              // Contents
              empty: function empty(elem) {
                // https://www.w3.org/TR/selectors/#empty-pseudo
                // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                //   but not by others (comment: 8; processing instruction: 7; etc.)
                // nodeType < 6 works because attributes (2) do not appear as children
                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                  if (elem.nodeType < 6) {
                    return false;
                  }
                }
                return true;
              },
              parent: function parent(elem) {
                return !Expr.pseudos.empty(elem);
              },
              // Element/input types
              header: function header(elem) {
                return rheader.test(elem.nodeName);
              },
              input: function input(elem) {
                return rinputs.test(elem.nodeName);
              },
              button: function button(elem) {
                return nodeName(elem, "input") && elem.type === "button" || nodeName(elem, "button");
              },
              text: function text(elem) {
                var attr;
                return nodeName(elem, "input") && elem.type === "text" && (
                // Support: IE <10 only
                // New HTML5 attribute values (e.g., "search") appear
                // with elem.type === "text"
                (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
              },
              // Position-in-collection
              first: createPositionalPseudo(function () {
                return [0];
              }),
              last: createPositionalPseudo(function (_matchIndexes, length) {
                return [length - 1];
              }),
              eq: createPositionalPseudo(function (_matchIndexes, length, argument) {
                return [argument < 0 ? argument + length : argument];
              }),
              even: createPositionalPseudo(function (matchIndexes, length) {
                var i = 0;
                for (; i < length; i += 2) {
                  matchIndexes.push(i);
                }
                return matchIndexes;
              }),
              odd: createPositionalPseudo(function (matchIndexes, length) {
                var i = 1;
                for (; i < length; i += 2) {
                  matchIndexes.push(i);
                }
                return matchIndexes;
              }),
              lt: createPositionalPseudo(function (matchIndexes, length, argument) {
                var i;
                if (argument < 0) {
                  i = argument + length;
                } else if (argument > length) {
                  i = length;
                } else {
                  i = argument;
                }
                for (; --i >= 0;) {
                  matchIndexes.push(i);
                }
                return matchIndexes;
              }),
              gt: createPositionalPseudo(function (matchIndexes, length, argument) {
                var i = argument < 0 ? argument + length : argument;
                for (; ++i < length;) {
                  matchIndexes.push(i);
                }
                return matchIndexes;
              })
            }
          };
          Expr.pseudos.nth = Expr.pseudos.eq;

          // Add button/input type pseudos
          for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
          }) {
            Expr.pseudos[i] = createInputPseudo(i);
          }
          for (i in {
            submit: true,
            reset: true
          }) {
            Expr.pseudos[i] = createButtonPseudo(i);
          }

          // Easy API for creating new setFilters
          function setFilters() {}
          setFilters.prototype = Expr.filters = Expr.pseudos;
          Expr.setFilters = new setFilters();
          function tokenize(selector, parseOnly) {
            var matched,
              match,
              tokens,
              type,
              soFar,
              groups,
              preFilters,
              cached = tokenCache[selector + " "];
            if (cached) {
              return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
              // Comma and first run
              if (!matched || (match = rcomma.exec(soFar))) {
                if (match) {
                  // Don't consume trailing commas as valid
                  soFar = soFar.slice(match[0].length) || soFar;
                }
                groups.push(tokens = []);
              }
              matched = false;

              // Combinators
              if (match = rleadingCombinator.exec(soFar)) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  // Cast descendant combinators to space
                  type: match[0].replace(rtrimCSS, " ")
                });
                soFar = soFar.slice(matched.length);
              }

              // Filters
              for (type in Expr.filter) {
                if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                  matched = match.shift();
                  tokens.push({
                    value: matched,
                    type: type,
                    matches: match
                  });
                  soFar = soFar.slice(matched.length);
                }
              }
              if (!matched) {
                break;
              }
            }

            // Return the length of the invalid excess
            // if we're just parsing
            // Otherwise, throw an error or return tokens
            if (parseOnly) {
              return soFar.length;
            }
            return soFar ? find.error(selector) :
            // Cache the tokens
            tokenCache(selector, groups).slice(0);
          }
          function toSelector(tokens) {
            var i = 0,
              len = tokens.length,
              selector = "";
            for (; i < len; i++) {
              selector += tokens[i].value;
            }
            return selector;
          }
          function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir,
              skip = combinator.next,
              key = skip || dir,
              checkNonElements = base && key === "parentNode",
              doneName = done++;
            return combinator.first ?
            // Check against closest ancestor/preceding element
            function (elem, context, xml) {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  return matcher(elem, context, xml);
                }
              }
              return false;
            } :
            // Check against all ancestor/preceding elements
            function (elem, context, xml) {
              var oldCache,
                outerCache,
                newCache = [dirruns, doneName];

              // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
              if (xml) {
                while (elem = elem[dir]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    if (matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              } else {
                while (elem = elem[dir]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});
                    if (skip && nodeName(elem, skip)) {
                      elem = elem[dir] || elem;
                    } else if ((oldCache = outerCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                      // Assign to newCache so results back-propagate to previous elements
                      return newCache[2] = oldCache[2];
                    } else {
                      // Reuse newcache so results back-propagate to previous elements
                      outerCache[key] = newCache;

                      // A match means we're done; a fail means we have to keep checking
                      if (newCache[2] = matcher(elem, context, xml)) {
                        return true;
                      }
                    }
                  }
                }
              }
              return false;
            };
          }
          function elementMatcher(matchers) {
            return matchers.length > 1 ? function (elem, context, xml) {
              var i = matchers.length;
              while (i--) {
                if (!matchers[i](elem, context, xml)) {
                  return false;
                }
              }
              return true;
            } : matchers[0];
          }
          function multipleContexts(selector, contexts, results) {
            var i = 0,
              len = contexts.length;
            for (; i < len; i++) {
              find(selector, contexts[i], results);
            }
            return results;
          }
          function condense(unmatched, map, filter, context, xml) {
            var elem,
              newUnmatched = [],
              i = 0,
              len = unmatched.length,
              mapped = map != null;
            for (; i < len; i++) {
              if (elem = unmatched[i]) {
                if (!filter || filter(elem, context, xml)) {
                  newUnmatched.push(elem);
                  if (mapped) {
                    map.push(i);
                  }
                }
              }
            }
            return newUnmatched;
          }
          function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
              postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
              postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function (seed, results, context, xml) {
              var temp,
                i,
                elem,
                matcherOut,
                preMap = [],
                postMap = [],
                preexisting = results.length,
                // Get initial elements from seed or context
                elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
                // Prefilter to get matcher input, preserving a map for seed-results synchronization
                matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems;
              if (matcher) {
                // If we have a postFinder, or filtered seed, or non-seed postFilter
                // or preexisting results,
                matcherOut = postFinder || (seed ? preFilter : preexisting || postFilter) ?
                // ...intermediate processing is necessary
                [] :
                // ...otherwise use results directly
                results;

                // Find primary matches
                matcher(matcherIn, matcherOut, context, xml);
              } else {
                matcherOut = matcherIn;
              }

              // Apply postFilter
              if (postFilter) {
                temp = condense(matcherOut, postMap);
                postFilter(temp, [], context, xml);

                // Un-match failing elements by moving them back to matcherIn
                i = temp.length;
                while (i--) {
                  if (elem = temp[i]) {
                    matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                  }
                }
              }
              if (seed) {
                if (postFinder || preFilter) {
                  if (postFinder) {
                    // Get the final matcherOut by condensing this intermediate into postFinder contexts
                    temp = [];
                    i = matcherOut.length;
                    while (i--) {
                      if (elem = matcherOut[i]) {
                        // Restore matcherIn since elem is not yet a final match
                        temp.push(matcherIn[i] = elem);
                      }
                    }
                    postFinder(null, matcherOut = [], temp, xml);
                  }

                  // Move matched elements from seed to results to keep them synchronized
                  i = matcherOut.length;
                  while (i--) {
                    if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                      seed[temp] = !(results[temp] = elem);
                    }
                  }
                }

                // Add elements to results, through postFinder if defined
              } else {
                matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                if (postFinder) {
                  postFinder(null, results, matcherOut, xml);
                } else {
                  push.apply(results, matcherOut);
                }
              }
            });
          }
          function matcherFromTokens(tokens) {
            var checkContext,
              matcher,
              j,
              len = tokens.length,
              leadingRelative = Expr.relative[tokens[0].type],
              implicitRelative = leadingRelative || Expr.relative[" "],
              i = leadingRelative ? 1 : 0,
              // The foundational matcher ensures that elements are reachable from top-level context(s)
              matchContext = addCombinator(function (elem) {
                return elem === checkContext;
              }, implicitRelative, true),
              matchAnyContext = addCombinator(function (elem) {
                return indexOf.call(checkContext, elem) > -1;
              }, implicitRelative, true),
              matchers = [function (elem, context, xml) {
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                var ret = !leadingRelative && (xml || context != outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));

                // Avoid hanging onto element
                // (see https://github.com/jquery/sizzle/issues/299)
                checkContext = null;
                return ret;
              }];
            for (; i < len; i++) {
              if (matcher = Expr.relative[tokens[i].type]) {
                matchers = [addCombinator(elementMatcher(matchers), matcher)];
              } else {
                matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

                // Return special upon seeing a positional matcher
                if (matcher[expando]) {
                  // Find the next relative operator (if any) for proper handling
                  j = ++i;
                  for (; j < len; j++) {
                    if (Expr.relative[tokens[j].type]) {
                      break;
                    }
                  }
                  return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
                  // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                  tokens.slice(0, i - 1).concat({
                    value: tokens[i - 2].type === " " ? "*" : ""
                  })).replace(rtrimCSS, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                }
                matchers.push(matcher);
              }
            }
            return elementMatcher(matchers);
          }
          function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0,
              byElement = elementMatchers.length > 0,
              superMatcher = function superMatcher(seed, context, xml, results, outermost) {
                var elem,
                  j,
                  matcher,
                  matchedCount = 0,
                  i = "0",
                  unmatched = seed && [],
                  setMatched = [],
                  contextBackup = outermostContext,
                  // We must always have either seed elements or outermost context
                  elems = seed || byElement && Expr.find.TAG("*", outermost),
                  // Use integer dirruns iff this is the outermost matcher
                  dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
                  len = elems.length;
                if (outermost) {
                  // Support: IE 11+, Edge 17 - 18+
                  // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                  // two documents; shallow comparisons work.
                  // eslint-disable-next-line eqeqeq
                  outermostContext = context == document || context || outermost;
                }

                // Add elements passing elementMatchers directly to results
                // Support: iOS <=7 - 9 only
                // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
                // elements by id. (see trac-14142)
                for (; i !== len && (elem = elems[i]) != null; i++) {
                  if (byElement && elem) {
                    j = 0;

                    // Support: IE 11+, Edge 17 - 18+
                    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                    // two documents; shallow comparisons work.
                    // eslint-disable-next-line eqeqeq
                    if (!context && elem.ownerDocument != document) {
                      setDocument(elem);
                      xml = !documentIsHTML;
                    }
                    while (matcher = elementMatchers[j++]) {
                      if (matcher(elem, context || document, xml)) {
                        push.call(results, elem);
                        break;
                      }
                    }
                    if (outermost) {
                      dirruns = dirrunsUnique;
                    }
                  }

                  // Track unmatched elements for set filters
                  if (bySet) {
                    // They will have gone through all possible matchers
                    if (elem = !matcher && elem) {
                      matchedCount--;
                    }

                    // Lengthen the array for every element, matched or not
                    if (seed) {
                      unmatched.push(elem);
                    }
                  }
                }

                // `i` is now the count of elements visited above, and adding it to `matchedCount`
                // makes the latter nonnegative.
                matchedCount += i;

                // Apply set filters to unmatched elements
                // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                // no element matchers and no seed.
                // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                // numerically zero.
                if (bySet && i !== matchedCount) {
                  j = 0;
                  while (matcher = setMatchers[j++]) {
                    matcher(unmatched, setMatched, context, xml);
                  }
                  if (seed) {
                    // Reintegrate element matches to eliminate the need for sorting
                    if (matchedCount > 0) {
                      while (i--) {
                        if (!(unmatched[i] || setMatched[i])) {
                          setMatched[i] = pop.call(results);
                        }
                      }
                    }

                    // Discard index placeholder values to get only actual matches
                    setMatched = condense(setMatched);
                  }

                  // Add matches to results
                  push.apply(results, setMatched);

                  // Seedless set matches succeeding multiple successful matchers stipulate sorting
                  if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                    _jQuery2.uniqueSort(results);
                  }
                }

                // Override manipulation of globals by nested matchers
                if (outermost) {
                  dirruns = dirrunsUnique;
                  outermostContext = contextBackup;
                }
                return unmatched;
              };
            return bySet ? markFunction(superMatcher) : superMatcher;
          }
          function compile(selector, match /* Internal Use Only */) {
            var i,
              setMatchers = [],
              elementMatchers = [],
              cached = compilerCache[selector + " "];
            if (!cached) {
              // Generate a function of recursive functions that can be used to check each element
              if (!match) {
                match = tokenize(selector);
              }
              i = match.length;
              while (i--) {
                cached = matcherFromTokens(match[i]);
                if (cached[expando]) {
                  setMatchers.push(cached);
                } else {
                  elementMatchers.push(cached);
                }
              }

              // Cache the compiled function
              cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

              // Save selector and tokenization
              cached.selector = selector;
            }
            return cached;
          }

          /**
           * A low-level selection function that works with jQuery's compiled
           *  selector functions
           * @param {String|Function} selector A selector or a pre-compiled
           *  selector function built with jQuery selector compile
           * @param {Element} context
           * @param {Array} [results]
           * @param {Array} [seed] A set of elements to match against
           */
          function select(selector, context, results, seed) {
            var i,
              tokens,
              token,
              type,
              find,
              compiled = typeof selector === "function" && selector,
              match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];

            // Try to minimize operations if there is only one selector in the list and no seed
            // (the latter of which guarantees us context)
            if (match.length === 1) {
              // Reduce context if the leading compound selector is an ID
              tokens = match[0] = match[0].slice(0);
              if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                context = (Expr.find.ID(token.matches[0].replace(runescape, funescape), context) || [])[0];
                if (!context) {
                  return results;

                  // Precompiled matchers will still verify ancestry, so step up a level
                } else if (compiled) {
                  context = context.parentNode;
                }
                selector = selector.slice(tokens.shift().value.length);
              }

              // Fetch a seed set for right-to-left matching
              i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
              while (i--) {
                token = tokens[i];

                // Abort if we hit a combinator
                if (Expr.relative[type = token.type]) {
                  break;
                }
                if (find = Expr.find[type]) {
                  // Search, expanding context for leading sibling combinators
                  if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                    // If seed is empty or no tokens remain, we can return early
                    tokens.splice(i, 1);
                    selector = seed.length && toSelector(tokens);
                    if (!selector) {
                      push.apply(results, seed);
                      return results;
                    }
                    break;
                  }
                }
              }
            }

            // Compile and execute a filtering function if one is not provided
            // Provide `match` to avoid retokenization if we modified the selector above
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
          }

          // One-time assignments

          // Support: Android <=4.0 - 4.1+
          // Sort stability
          support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

          // Initialize against the default document
          setDocument();

          // Support: Android <=4.0 - 4.1+
          // Detached nodes confoundingly follow *each other*
          support.sortDetached = assert(function (el) {
            // Should return 1, but returns 4 (following)
            return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
          });
          _jQuery2.find = find;

          // Deprecated
          _jQuery2.expr[":"] = _jQuery2.expr.pseudos;
          _jQuery2.unique = _jQuery2.uniqueSort;

          // These have always been private, but they used to be documented as part of
          // Sizzle so let's maintain them for now for backwards compatibility purposes.
          find.compile = compile;
          find.select = select;
          find.setDocument = setDocument;
          find.tokenize = tokenize;
          find.escape = _jQuery2.escapeSelector;
          find.getText = _jQuery2.text;
          find.isXML = _jQuery2.isXMLDoc;
          find.selectors = _jQuery2.expr;
          find.support = _jQuery2.support;
          find.uniqueSort = _jQuery2.uniqueSort;

          /* eslint-enable */
        })();
        var dir = function dir(elem, _dir, until) {
          var matched = [],
            truncate = until !== undefined;
          while ((elem = elem[_dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
              if (truncate && _jQuery2(elem).is(until)) {
                break;
              }
              matched.push(elem);
            }
          }
          return matched;
        };
        var _siblings = function siblings(n, elem) {
          var matched = [];
          for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
              matched.push(n);
            }
          }
          return matched;
        };
        var rneedsContext = _jQuery2.expr.match.needsContext;
        var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

        // Implement the identical functionality for filter and not
        function winnow(elements, qualifier, not) {
          if (isFunction(qualifier)) {
            return _jQuery2.grep(elements, function (elem, i) {
              return !!qualifier.call(elem, i, elem) !== not;
            });
          }

          // Single element
          if (qualifier.nodeType) {
            return _jQuery2.grep(elements, function (elem) {
              return elem === qualifier !== not;
            });
          }

          // Arraylike of elements (jQuery, arguments, Array)
          if (typeof qualifier !== "string") {
            return _jQuery2.grep(elements, function (elem) {
              return indexOf.call(qualifier, elem) > -1 !== not;
            });
          }

          // Filtered directly for both simple and complex selectors
          return _jQuery2.filter(qualifier, elements, not);
        }
        _jQuery2.filter = function (expr, elems, not) {
          var elem = elems[0];
          if (not) {
            expr = ":not(" + expr + ")";
          }
          if (elems.length === 1 && elem.nodeType === 1) {
            return _jQuery2.find.matchesSelector(elem, expr) ? [elem] : [];
          }
          return _jQuery2.find.matches(expr, _jQuery2.grep(elems, function (elem) {
            return elem.nodeType === 1;
          }));
        };
        _jQuery2.fn.extend({
          find: function find(selector) {
            var i,
              ret,
              len = this.length,
              self = this;
            if (typeof selector !== "string") {
              return this.pushStack(_jQuery2(selector).filter(function () {
                for (i = 0; i < len; i++) {
                  if (_jQuery2.contains(self[i], this)) {
                    return true;
                  }
                }
              }));
            }
            ret = this.pushStack([]);
            for (i = 0; i < len; i++) {
              _jQuery2.find(selector, self[i], ret);
            }
            return len > 1 ? _jQuery2.uniqueSort(ret) : ret;
          },
          filter: function filter(selector) {
            return this.pushStack(winnow(this, selector || [], false));
          },
          not: function not(selector) {
            return this.pushStack(winnow(this, selector || [], true));
          },
          is: function is(selector) {
            return !!winnow(this,
            // If this is a positional/relative selector, check membership in the returned set
            // so $("p:first").is("p:last") won't return true for a doc with two "p".
            typeof selector === "string" && rneedsContext.test(selector) ? _jQuery2(selector) : selector || [], false).length;
          }
        });

        // Initialize a jQuery object

        // A central reference to the root jQuery(document)
        var rootjQuery,
          // A simple way to check for HTML strings
          // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
          // Strict HTML recognition (trac-11290: must start with <)
          // Shortcut simple #id case for speed
          rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
          init = _jQuery2.fn.init = function (selector, context, root) {
            var match, elem;

            // HANDLE: $(""), $(null), $(undefined), $(false)
            if (!selector) {
              return this;
            }

            // Method init() accepts an alternate rootjQuery
            // so migrate can support jQuery.sub (gh-2101)
            root = root || rootjQuery;

            // Handle HTML strings
            if (typeof selector === "string") {
              if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
                // Assume that strings that start and end with <> are HTML and skip the regex check
                match = [null, selector, null];
              } else {
                match = rquickExpr.exec(selector);
              }

              // Match html or make sure no context is specified for #id
              if (match && (match[1] || !context)) {
                // HANDLE: $(html) -> $(array)
                if (match[1]) {
                  context = context instanceof _jQuery2 ? context[0] : context;

                  // Option to run scripts is true for back-compat
                  // Intentionally let the error be thrown if parseHTML is not present
                  _jQuery2.merge(this, _jQuery2.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

                  // HANDLE: $(html, props)
                  if (rsingleTag.test(match[1]) && _jQuery2.isPlainObject(context)) {
                    for (match in context) {
                      // Properties of context are called as methods if possible
                      if (isFunction(this[match])) {
                        this[match](context[match]);

                        // ...and otherwise set as attributes
                      } else {
                        this.attr(match, context[match]);
                      }
                    }
                  }
                  return this;

                  // HANDLE: $(#id)
                } else {
                  elem = document.getElementById(match[2]);
                  if (elem) {
                    // Inject the element directly into the jQuery object
                    this[0] = elem;
                    this.length = 1;
                  }
                  return this;
                }

                // HANDLE: $(expr, $(...))
              } else if (!context || context.jquery) {
                return (context || root).find(selector);

                // HANDLE: $(expr, context)
                // (which is just equivalent to: $(context).find(expr)
              } else {
                return this.constructor(context).find(selector);
              }

              // HANDLE: $(DOMElement)
            } else if (selector.nodeType) {
              this[0] = selector;
              this.length = 1;
              return this;

              // HANDLE: $(function)
              // Shortcut for document ready
            } else if (isFunction(selector)) {
              return root.ready !== undefined ? root.ready(selector) :
              // Execute immediately if ready is not present
              selector(_jQuery2);
            }
            return _jQuery2.makeArray(selector, this);
          };

        // Give the init function the jQuery prototype for later instantiation
        init.prototype = _jQuery2.fn;

        // Initialize central reference
        rootjQuery = _jQuery2(document);
        var rparentsprev = /^(?:parents|prev(?:Until|All))/,
          // Methods guaranteed to produce a unique set when starting from a unique set
          guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
          };
        _jQuery2.fn.extend({
          has: function has(target) {
            var targets = _jQuery2(target, this),
              l = targets.length;
            return this.filter(function () {
              var i = 0;
              for (; i < l; i++) {
                if (_jQuery2.contains(this, targets[i])) {
                  return true;
                }
              }
            });
          },
          closest: function closest(selectors, context) {
            var cur,
              i = 0,
              l = this.length,
              matched = [],
              targets = typeof selectors !== "string" && _jQuery2(selectors);

            // Positional selectors never match, since there's no _selection_ context
            if (!rneedsContext.test(selectors)) {
              for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                  // Always skip document fragments
                  if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :
                  // Don't pass non-elements to jQuery#find
                  cur.nodeType === 1 && _jQuery2.find.matchesSelector(cur, selectors))) {
                    matched.push(cur);
                    break;
                  }
                }
              }
            }
            return this.pushStack(matched.length > 1 ? _jQuery2.uniqueSort(matched) : matched);
          },
          // Determine the position of an element within the set
          index: function index(elem) {
            // No argument, return index in parent
            if (!elem) {
              return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }

            // Index in selector
            if (typeof elem === "string") {
              return indexOf.call(_jQuery2(elem), this[0]);
            }

            // Locate the position of the desired element
            return indexOf.call(this,
            // If it receives a jQuery object, the first element is used
            elem.jquery ? elem[0] : elem);
          },
          add: function add(selector, context) {
            return this.pushStack(_jQuery2.uniqueSort(_jQuery2.merge(this.get(), _jQuery2(selector, context))));
          },
          addBack: function addBack(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
          }
        });
        function sibling(cur, dir) {
          while ((cur = cur[dir]) && cur.nodeType !== 1) {}
          return cur;
        }
        _jQuery2.each({
          parent: function parent(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
          },
          parents: function parents(elem) {
            return dir(elem, "parentNode");
          },
          parentsUntil: function parentsUntil(elem, _i, until) {
            return dir(elem, "parentNode", until);
          },
          next: function next(elem) {
            return sibling(elem, "nextSibling");
          },
          prev: function prev(elem) {
            return sibling(elem, "previousSibling");
          },
          nextAll: function nextAll(elem) {
            return dir(elem, "nextSibling");
          },
          prevAll: function prevAll(elem) {
            return dir(elem, "previousSibling");
          },
          nextUntil: function nextUntil(elem, _i, until) {
            return dir(elem, "nextSibling", until);
          },
          prevUntil: function prevUntil(elem, _i, until) {
            return dir(elem, "previousSibling", until);
          },
          siblings: function siblings(elem) {
            return _siblings((elem.parentNode || {}).firstChild, elem);
          },
          children: function children(elem) {
            return _siblings(elem.firstChild);
          },
          contents: function contents(elem) {
            if (elem.contentDocument != null &&
            // Support: IE 11+
            // <object> elements with no `data` attribute has an object
            // `contentDocument` with a `null` prototype.
            getProto(elem.contentDocument)) {
              return elem.contentDocument;
            }

            // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
            // Treat the template element as a regular one in browsers that
            // don't support it.
            if (nodeName(elem, "template")) {
              elem = elem.content || elem;
            }
            return _jQuery2.merge([], elem.childNodes);
          }
        }, function (name, fn) {
          _jQuery2.fn[name] = function (until, selector) {
            var matched = _jQuery2.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
              selector = until;
            }
            if (selector && typeof selector === "string") {
              matched = _jQuery2.filter(selector, matched);
            }
            if (this.length > 1) {
              // Remove duplicates
              if (!guaranteedUnique[name]) {
                _jQuery2.uniqueSort(matched);
              }

              // Reverse order for parents* and prev-derivatives
              if (rparentsprev.test(name)) {
                matched.reverse();
              }
            }
            return this.pushStack(matched);
          };
        });
        var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

        // Convert String-formatted options into Object-formatted ones
        function createOptions(options) {
          var object = {};
          _jQuery2.each(options.match(rnothtmlwhite) || [], function (_, flag) {
            object[flag] = true;
          });
          return object;
        }

        /*
         * Create a callback list using the following parameters:
         *
         *	options: an optional list of space-separated options that will change how
         *			the callback list behaves or a more traditional option object
         *
         * By default a callback list will act like an event callback list and can be
         * "fired" multiple times.
         *
         * Possible options:
         *
         *	once:			will ensure the callback list can only be fired once (like a Deferred)
         *
         *	memory:			will keep track of previous values and will call any callback added
         *					after the list has been fired right away with the latest "memorized"
         *					values (like a Deferred)
         *
         *	unique:			will ensure a callback can only be added once (no duplicate in the list)
         *
         *	stopOnFalse:	interrupt callings when a callback returns false
         *
         */
        _jQuery2.Callbacks = function (options) {
          // Convert options from String-formatted to Object-formatted if needed
          // (we check in cache first)
          options = typeof options === "string" ? createOptions(options) : _jQuery2.extend({}, options);
          var
            // Flag to know if list is currently firing
            firing,
            // Last fire value for non-forgettable lists
            memory,
            // Flag to know if list was already fired
            _fired,
            // Flag to prevent firing
            _locked,
            // Actual callback list
            list = [],
            // Queue of execution data for repeatable lists
            queue = [],
            // Index of currently firing callback (modified by add/remove as needed)
            firingIndex = -1,
            // Fire callbacks
            fire = function fire() {
              // Enforce single-firing
              _locked = _locked || options.once;

              // Execute callbacks for all pending executions,
              // respecting firingIndex overrides and runtime changes
              _fired = firing = true;
              for (; queue.length; firingIndex = -1) {
                memory = queue.shift();
                while (++firingIndex < list.length) {
                  // Run callback and check for early termination
                  if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                    // Jump to end and forget the data so .add doesn't re-fire
                    firingIndex = list.length;
                    memory = false;
                  }
                }
              }

              // Forget the data if we're done with it
              if (!options.memory) {
                memory = false;
              }
              firing = false;

              // Clean up if we're done firing for good
              if (_locked) {
                // Keep an empty list if we have data for future add calls
                if (memory) {
                  list = [];

                  // Otherwise, this object is spent
                } else {
                  list = "";
                }
              }
            },
            // Actual Callbacks object
            self = {
              // Add a callback or a collection of callbacks to the list
              add: function add() {
                if (list) {
                  // If we have memory from a past run, we should fire after adding
                  if (memory && !firing) {
                    firingIndex = list.length - 1;
                    queue.push(memory);
                  }
                  (function add(args) {
                    _jQuery2.each(args, function (_, arg) {
                      if (isFunction(arg)) {
                        if (!options.unique || !self.has(arg)) {
                          list.push(arg);
                        }
                      } else if (arg && arg.length && toType(arg) !== "string") {
                        // Inspect recursively
                        add(arg);
                      }
                    });
                  })(arguments);
                  if (memory && !firing) {
                    fire();
                  }
                }
                return this;
              },
              // Remove a callback from the list
              remove: function remove() {
                _jQuery2.each(arguments, function (_, arg) {
                  var index;
                  while ((index = _jQuery2.inArray(arg, list, index)) > -1) {
                    list.splice(index, 1);

                    // Handle firing indexes
                    if (index <= firingIndex) {
                      firingIndex--;
                    }
                  }
                });
                return this;
              },
              // Check if a given callback is in the list.
              // If no argument is given, return whether or not list has callbacks attached.
              has: function has(fn) {
                return fn ? _jQuery2.inArray(fn, list) > -1 : list.length > 0;
              },
              // Remove all callbacks from the list
              empty: function empty() {
                if (list) {
                  list = [];
                }
                return this;
              },
              // Disable .fire and .add
              // Abort any current/pending executions
              // Clear all callbacks and values
              disable: function disable() {
                _locked = queue = [];
                list = memory = "";
                return this;
              },
              disabled: function disabled() {
                return !list;
              },
              // Disable .fire
              // Also disable .add unless we have memory (since it would have no effect)
              // Abort any pending executions
              lock: function lock() {
                _locked = queue = [];
                if (!memory && !firing) {
                  list = memory = "";
                }
                return this;
              },
              locked: function locked() {
                return !!_locked;
              },
              // Call all callbacks with the given context and arguments
              fireWith: function fireWith(context, args) {
                if (!_locked) {
                  args = args || [];
                  args = [context, args.slice ? args.slice() : args];
                  queue.push(args);
                  if (!firing) {
                    fire();
                  }
                }
                return this;
              },
              // Call all the callbacks with the given arguments
              fire: function fire() {
                self.fireWith(this, arguments);
                return this;
              },
              // To know if the callbacks have already been called at least once
              fired: function fired() {
                return !!_fired;
              }
            };
          return self;
        };
        function Identity(v) {
          return v;
        }
        function Thrower(ex) {
          throw ex;
        }
        function adoptValue(value, resolve, reject, noValue) {
          var method;
          try {
            // Check for promise aspect first to privilege synchronous behavior
            if (value && isFunction(method = value.promise)) {
              method.call(value).done(resolve).fail(reject);

              // Other thenables
            } else if (value && isFunction(method = value.then)) {
              method.call(value, resolve, reject);

              // Other non-thenables
            } else {
              // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
              // * false: [ value ].slice( 0 ) => resolve( value )
              // * true: [ value ].slice( 1 ) => resolve()
              resolve.apply(undefined, [value].slice(noValue));
            }

            // For Promises/A+, convert exceptions into rejections
            // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
            // Deferred#then to conditionally suppress rejection.
          } catch (value) {
            // Support: Android 4.0 only
            // Strict mode functions invoked without .call/.apply get global-object context
            reject.apply(undefined, [value]);
          }
        }
        _jQuery2.extend({
          Deferred: function Deferred(func) {
            var tuples = [
              // action, add listener, callbacks,
              // ... .then handlers, argument index, [final state]
              ["notify", "progress", _jQuery2.Callbacks("memory"), _jQuery2.Callbacks("memory"), 2], ["resolve", "done", _jQuery2.Callbacks("once memory"), _jQuery2.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", _jQuery2.Callbacks("once memory"), _jQuery2.Callbacks("once memory"), 1, "rejected"]],
              _state = "pending",
              _promise = {
                state: function state() {
                  return _state;
                },
                always: function always() {
                  deferred.done(arguments).fail(arguments);
                  return this;
                },
                "catch": function _catch(fn) {
                  return _promise.then(null, fn);
                },
                // Keep pipe for back-compat
                pipe: function pipe(/* fnDone, fnFail, fnProgress */
                ) {
                  var fns = arguments;
                  return _jQuery2.Deferred(function (newDefer) {
                    _jQuery2.each(tuples, function (_i, tuple) {
                      // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                      var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                      // deferred.progress(function() { bind to newDefer or newDefer.notify })
                      // deferred.done(function() { bind to newDefer or newDefer.resolve })
                      // deferred.fail(function() { bind to newDefer or newDefer.reject })
                      deferred[tuple[1]](function () {
                        var returned = fn && fn.apply(this, arguments);
                        if (returned && isFunction(returned.promise)) {
                          returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                        } else {
                          newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                        }
                      });
                    });
                    fns = null;
                  }).promise();
                },
                then: function then(onFulfilled, onRejected, onProgress) {
                  var maxDepth = 0;
                  function resolve(depth, deferred, handler, special) {
                    return function () {
                      var that = this,
                        args = arguments,
                        mightThrow = function mightThrow() {
                          var returned, then;

                          // Support: Promises/A+ section 2.3.3.3.3
                          // https://promisesaplus.com/#point-59
                          // Ignore double-resolution attempts
                          if (depth < maxDepth) {
                            return;
                          }
                          returned = handler.apply(that, args);

                          // Support: Promises/A+ section 2.3.1
                          // https://promisesaplus.com/#point-48
                          if (returned === deferred.promise()) {
                            throw new TypeError("Thenable self-resolution");
                          }

                          // Support: Promises/A+ sections 2.3.3.1, 3.5
                          // https://promisesaplus.com/#point-54
                          // https://promisesaplus.com/#point-75
                          // Retrieve `then` only once
                          then = returned && (
                          // Support: Promises/A+ section 2.3.4
                          // https://promisesaplus.com/#point-64
                          // Only check objects and functions for thenability
                          _typeof(returned) === "object" || typeof returned === "function") && returned.then;

                          // Handle a returned thenable
                          if (isFunction(then)) {
                            // Special processors (notify) just wait for resolution
                            if (special) {
                              then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

                              // Normal processors (resolve) also hook into progress
                            } else {
                              // ...and disregard older resolution values
                              maxDepth++;
                              then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                            }

                            // Handle all other returned values
                          } else {
                            // Only substitute handlers pass on context
                            // and multiple values (non-spec behavior)
                            if (handler !== Identity) {
                              that = undefined;
                              args = [returned];
                            }

                            // Process the value(s)
                            // Default process is resolve
                            (special || deferred.resolveWith)(that, args);
                          }
                        },
                        // Only normal processors (resolve) catch and reject exceptions
                        process = special ? mightThrow : function () {
                          try {
                            mightThrow();
                          } catch (e) {
                            if (_jQuery2.Deferred.exceptionHook) {
                              _jQuery2.Deferred.exceptionHook(e, process.error);
                            }

                            // Support: Promises/A+ section 2.3.3.3.4.1
                            // https://promisesaplus.com/#point-61
                            // Ignore post-resolution exceptions
                            if (depth + 1 >= maxDepth) {
                              // Only substitute handlers pass on context
                              // and multiple values (non-spec behavior)
                              if (handler !== Thrower) {
                                that = undefined;
                                args = [e];
                              }
                              deferred.rejectWith(that, args);
                            }
                          }
                        };

                      // Support: Promises/A+ section 2.3.3.3.1
                      // https://promisesaplus.com/#point-57
                      // Re-resolve promises immediately to dodge false rejection from
                      // subsequent errors
                      if (depth) {
                        process();
                      } else {
                        // Call an optional hook to record the error, in case of exception
                        // since it's otherwise lost when execution goes async
                        if (_jQuery2.Deferred.getErrorHook) {
                          process.error = _jQuery2.Deferred.getErrorHook();

                          // The deprecated alias of the above. While the name suggests
                          // returning the stack, not an error instance, jQuery just passes
                          // it directly to `console.warn` so both will work; an instance
                          // just better cooperates with source maps.
                        } else if (_jQuery2.Deferred.getStackHook) {
                          process.error = _jQuery2.Deferred.getStackHook();
                        }
                        window.setTimeout(process);
                      }
                    };
                  }
                  return _jQuery2.Deferred(function (newDefer) {
                    // progress_handlers.add( ... )
                    tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

                    // fulfilled_handlers.add( ... )
                    tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));

                    // rejected_handlers.add( ... )
                    tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
                  }).promise();
                },
                // Get a promise for this deferred
                // If obj is provided, the promise aspect is added to the object
                promise: function promise(obj) {
                  return obj != null ? _jQuery2.extend(obj, _promise) : _promise;
                }
              },
              deferred = {};

            // Add list-specific methods
            _jQuery2.each(tuples, function (i, tuple) {
              var list = tuple[2],
                stateString = tuple[5];

              // promise.progress = list.add
              // promise.done = list.add
              // promise.fail = list.add
              _promise[tuple[1]] = list.add;

              // Handle state
              if (stateString) {
                list.add(function () {
                  // state = "resolved" (i.e., fulfilled)
                  // state = "rejected"
                  _state = stateString;
                },
                // rejected_callbacks.disable
                // fulfilled_callbacks.disable
                tuples[3 - i][2].disable,
                // rejected_handlers.disable
                // fulfilled_handlers.disable
                tuples[3 - i][3].disable,
                // progress_callbacks.lock
                tuples[0][2].lock,
                // progress_handlers.lock
                tuples[0][3].lock);
              }

              // progress_handlers.fire
              // fulfilled_handlers.fire
              // rejected_handlers.fire
              list.add(tuple[3].fire);

              // deferred.notify = function() { deferred.notifyWith(...) }
              // deferred.resolve = function() { deferred.resolveWith(...) }
              // deferred.reject = function() { deferred.rejectWith(...) }
              deferred[tuple[0]] = function () {
                deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
                return this;
              };

              // deferred.notifyWith = list.fireWith
              // deferred.resolveWith = list.fireWith
              // deferred.rejectWith = list.fireWith
              deferred[tuple[0] + "With"] = list.fireWith;
            });

            // Make the deferred a promise
            _promise.promise(deferred);

            // Call given func if any
            if (func) {
              func.call(deferred, deferred);
            }

            // All done!
            return deferred;
          },
          // Deferred helper
          when: function when(singleValue) {
            var
              // count of uncompleted subordinates
              remaining = arguments.length,
              // count of unprocessed arguments
              i = remaining,
              // subordinate fulfillment data
              resolveContexts = Array(i),
              resolveValues = _slice.call(arguments),
              // the primary Deferred
              primary = _jQuery2.Deferred(),
              // subordinate callback factory
              updateFunc = function updateFunc(i) {
                return function (value) {
                  resolveContexts[i] = this;
                  resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;
                  if (! --remaining) {
                    primary.resolveWith(resolveContexts, resolveValues);
                  }
                };
              };

            // Single- and empty arguments are adopted like Promise.resolve
            if (remaining <= 1) {
              adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);

              // Use .then() to unwrap secondary thenables (cf. gh-3000)
              if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
                return primary.then();
              }
            }

            // Multiple arguments are aggregated like Promise.all array elements
            while (i--) {
              adoptValue(resolveValues[i], updateFunc(i), primary.reject);
            }
            return primary.promise();
          }
        });

        // These usually indicate a programmer mistake during development,
        // warn about them ASAP rather than swallowing them by default.
        var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

        // If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
        // captured before the async barrier to get the original error cause
        // which may otherwise be hidden.
        _jQuery2.Deferred.exceptionHook = function (error, asyncError) {
          // Support: IE 8 - 9 only
          // Console exists when dev tools are open, which can happen at any time
          if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
            window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, asyncError);
          }
        };
        _jQuery2.readyException = function (error) {
          window.setTimeout(function () {
            throw error;
          });
        };

        // The deferred used on DOM ready
        var readyList = _jQuery2.Deferred();
        _jQuery2.fn.ready = function (fn) {
          readyList.then(fn)

          // Wrap jQuery.readyException in a function so that the lookup
          // happens at the time of error handling instead of callback
          // registration.
          .catch(function (error) {
            _jQuery2.readyException(error);
          });
          return this;
        };
        _jQuery2.extend({
          // Is the DOM ready to be used? Set to true once it occurs.
          isReady: false,
          // A counter to track how many items to wait for before
          // the ready event fires. See trac-6781
          readyWait: 1,
          // Handle when the DOM is ready
          ready: function ready(wait) {
            // Abort if there are pending holds or we're already ready
            if (wait === true ? --_jQuery2.readyWait : _jQuery2.isReady) {
              return;
            }

            // Remember that the DOM is ready
            _jQuery2.isReady = true;

            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --_jQuery2.readyWait > 0) {
              return;
            }

            // If there are functions bound, to execute
            readyList.resolveWith(document, [_jQuery2]);
          }
        });
        _jQuery2.ready.then = readyList.then;

        // The ready event handler and self cleanup method
        function completed() {
          document.removeEventListener("DOMContentLoaded", completed);
          window.removeEventListener("load", completed);
          _jQuery2.ready();
        }

        // Catch cases where $(document).ready() is called
        // after the browser event has already occurred.
        // Support: IE <=9 - 10 only
        // Older IE sometimes signals "interactive" too soon
        if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
          // Handle it asynchronously to allow scripts the opportunity to delay ready
          window.setTimeout(_jQuery2.ready);
        } else {
          // Use the handy event callback
          document.addEventListener("DOMContentLoaded", completed);

          // A fallback to window.onload, that will always work
          window.addEventListener("load", completed);
        }

        // Multifunctional method to get and set values of a collection
        // The value/s can optionally be executed if it's a function
        var _access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
          var i = 0,
            len = elems.length,
            bulk = key == null;

          // Sets many values
          if (toType(key) === "object") {
            chainable = true;
            for (i in key) {
              _access(elems, fn, i, key[i], true, emptyGet, raw);
            }

            // Sets one value
          } else if (value !== undefined) {
            chainable = true;
            if (!isFunction(value)) {
              raw = true;
            }
            if (bulk) {
              // Bulk operations run against the entire set
              if (raw) {
                fn.call(elems, value);
                fn = null;

                // ...except when executing function values
              } else {
                bulk = fn;
                fn = function fn(elem, _key, value) {
                  return bulk.call(_jQuery2(elem), value);
                };
              }
            }
            if (fn) {
              for (; i < len; i++) {
                fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
              }
            }
          }
          if (chainable) {
            return elems;
          }

          // Gets
          if (bulk) {
            return fn.call(elems);
          }
          return len ? fn(elems[0], key) : emptyGet;
        };

        // Matches dashed string for camelizing
        var rmsPrefix = /^-ms-/,
          rdashAlpha = /-([a-z])/g;

        // Used by camelCase as callback to replace()
        function fcamelCase(_all, letter) {
          return letter.toUpperCase();
        }

        // Convert dashed to camelCase; used by the css and data modules
        // Support: IE <=9 - 11, Edge 12 - 15
        // Microsoft forgot to hump their vendor prefix (trac-9572)
        function camelCase(string) {
          return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        }
        var acceptData = function acceptData(owner) {
          // Accepts only:
          //  - Node
          //    - Node.ELEMENT_NODE
          //    - Node.DOCUMENT_NODE
          //  - Object
          //    - Any
          return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
        };
        function Data() {
          this.expando = _jQuery2.expando + Data.uid++;
        }
        Data.uid = 1;
        Data.prototype = {
          cache: function cache(owner) {
            // Check if the owner object already has a cache
            var value = owner[this.expando];

            // If not, create one
            if (!value) {
              value = {};

              // We can accept data for non-element nodes in modern browsers,
              // but we should not, see trac-8335.
              // Always return an empty object.
              if (acceptData(owner)) {
                // If it is a node unlikely to be stringify-ed or looped over
                // use plain assignment
                if (owner.nodeType) {
                  owner[this.expando] = value;

                  // Otherwise secure it in a non-enumerable property
                  // configurable must be true to allow the property to be
                  // deleted when data is removed
                } else {
                  Object.defineProperty(owner, this.expando, {
                    value: value,
                    configurable: true
                  });
                }
              }
            }
            return value;
          },
          set: function set(owner, data, value) {
            var prop,
              cache = this.cache(owner);

            // Handle: [ owner, key, value ] args
            // Always use camelCase key (gh-2257)
            if (typeof data === "string") {
              cache[camelCase(data)] = value;

              // Handle: [ owner, { properties } ] args
            } else {
              // Copy the properties one-by-one to the cache object
              for (prop in data) {
                cache[camelCase(prop)] = data[prop];
              }
            }
            return cache;
          },
          get: function get(owner, key) {
            return key === undefined ? this.cache(owner) :
            // Always use camelCase key (gh-2257)
            owner[this.expando] && owner[this.expando][camelCase(key)];
          },
          access: function access(owner, key, value) {
            // In cases where either:
            //
            //   1. No key was specified
            //   2. A string key was specified, but no value provided
            //
            // Take the "read" path and allow the get method to determine
            // which value to return, respectively either:
            //
            //   1. The entire cache object
            //   2. The data stored at the key
            //
            if (key === undefined || key && typeof key === "string" && value === undefined) {
              return this.get(owner, key);
            }

            // When the key is not a string, or both a key and value
            // are specified, set or extend (existing objects) with either:
            //
            //   1. An object of properties
            //   2. A key and value
            //
            this.set(owner, key, value);

            // Since the "set" path can have two possible entry points
            // return the expected data based on which path was taken[*]
            return value !== undefined ? value : key;
          },
          remove: function remove(owner, key) {
            var i,
              cache = owner[this.expando];
            if (cache === undefined) {
              return;
            }
            if (key !== undefined) {
              // Support array or space separated string of keys
              if (Array.isArray(key)) {
                // If key is an array of keys...
                // We always set camelCase keys, so remove that.
                key = key.map(camelCase);
              } else {
                key = camelCase(key);

                // If a key with the spaces exists, use it.
                // Otherwise, create an array by matching non-whitespace
                key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
              }
              i = key.length;
              while (i--) {
                delete cache[key[i]];
              }
            }

            // Remove the expando if there's no more data
            if (key === undefined || _jQuery2.isEmptyObject(cache)) {
              // Support: Chrome <=35 - 45
              // Webkit & Blink performance suffers when deleting properties
              // from DOM nodes, so set to undefined instead
              // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
              if (owner.nodeType) {
                owner[this.expando] = undefined;
              } else {
                delete owner[this.expando];
              }
            }
          },
          hasData: function hasData(owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !_jQuery2.isEmptyObject(cache);
          }
        };
        var dataPriv = new Data();
        var dataUser = new Data();

        //	Implementation Summary
        //
        //	1. Enforce API surface and semantic compatibility with 1.9.x branch
        //	2. Improve the module's maintainability by reducing the storage
        //		paths to a single mechanism.
        //	3. Use the same single mechanism to support "private" and "user" data.
        //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
        //	5. Avoid exposing implementation details on user objects (eg. expando properties)
        //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

        var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
          rmultiDash = /[A-Z]/g;
        function getData(data) {
          if (data === "true") {
            return true;
          }
          if (data === "false") {
            return false;
          }
          if (data === "null") {
            return null;
          }

          // Only convert to a number if it doesn't change the string
          if (data === +data + "") {
            return +data;
          }
          if (rbrace.test(data)) {
            return JSON.parse(data);
          }
          return data;
        }
        function dataAttr(elem, key, data) {
          var name;

          // If nothing was found internally, try to fetch any
          // data from the HTML5 data-* attribute
          if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
              try {
                data = getData(data);
              } catch (e) {}

              // Make sure we set the data so it isn't changed later
              dataUser.set(elem, key, data);
            } else {
              data = undefined;
            }
          }
          return data;
        }
        _jQuery2.extend({
          hasData: function hasData(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
          },
          data: function data(elem, name, _data) {
            return dataUser.access(elem, name, _data);
          },
          removeData: function removeData(elem, name) {
            dataUser.remove(elem, name);
          },
          // TODO: Now that all calls to _data and _removeData have been replaced
          // with direct calls to dataPriv methods, these can be deprecated.
          _data: function _data(elem, name, data) {
            return dataPriv.access(elem, name, data);
          },
          _removeData: function _removeData(elem, name) {
            dataPriv.remove(elem, name);
          }
        });
        _jQuery2.fn.extend({
          data: function data(key, value) {
            var i,
              name,
              data,
              elem = this[0],
              attrs = elem && elem.attributes;

            // Gets all values
            if (key === undefined) {
              if (this.length) {
                data = dataUser.get(elem);
                if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                  i = attrs.length;
                  while (i--) {
                    // Support: IE 11 only
                    // The attrs elements can be null (trac-14894)
                    if (attrs[i]) {
                      name = attrs[i].name;
                      if (name.indexOf("data-") === 0) {
                        name = camelCase(name.slice(5));
                        dataAttr(elem, name, data[name]);
                      }
                    }
                  }
                  dataPriv.set(elem, "hasDataAttrs", true);
                }
              }
              return data;
            }

            // Sets multiple values
            if (_typeof(key) === "object") {
              return this.each(function () {
                dataUser.set(this, key);
              });
            }
            return _access(this, function (value) {
              var data;

              // The calling jQuery object (element matches) is not empty
              // (and therefore has an element appears at this[ 0 ]) and the
              // `value` parameter was not undefined. An empty jQuery object
              // will result in `undefined` for elem = this[ 0 ] which will
              // throw an exception if an attempt to read a data cache is made.
              if (elem && value === undefined) {
                // Attempt to get data from the cache
                // The key will always be camelCased in Data
                data = dataUser.get(elem, key);
                if (data !== undefined) {
                  return data;
                }

                // Attempt to "discover" the data in
                // HTML5 custom data-* attrs
                data = dataAttr(elem, key);
                if (data !== undefined) {
                  return data;
                }

                // We tried really hard, but the data doesn't exist.
                return;
              }

              // Set the data...
              this.each(function () {
                // We always store the camelCased key
                dataUser.set(this, key, value);
              });
            }, null, value, arguments.length > 1, null, true);
          },
          removeData: function removeData(key) {
            return this.each(function () {
              dataUser.remove(this, key);
            });
          }
        });
        _jQuery2.extend({
          queue: function queue(elem, type, data) {
            var queue;
            if (elem) {
              type = (type || "fx") + "queue";
              queue = dataPriv.get(elem, type);

              // Speed up dequeue by getting out quickly if this is just a lookup
              if (data) {
                if (!queue || Array.isArray(data)) {
                  queue = dataPriv.access(elem, type, _jQuery2.makeArray(data));
                } else {
                  queue.push(data);
                }
              }
              return queue || [];
            }
          },
          dequeue: function dequeue(elem, type) {
            type = type || "fx";
            var queue = _jQuery2.queue(elem, type),
              startLength = queue.length,
              fn = queue.shift(),
              hooks = _jQuery2._queueHooks(elem, type),
              next = function next() {
                _jQuery2.dequeue(elem, type);
              };

            // If the fx queue is dequeued, always remove the progress sentinel
            if (fn === "inprogress") {
              fn = queue.shift();
              startLength--;
            }
            if (fn) {
              // Add a progress sentinel to prevent the fx queue from being
              // automatically dequeued
              if (type === "fx") {
                queue.unshift("inprogress");
              }

              // Clear up the last queue stop function
              delete hooks.stop;
              fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
              hooks.empty.fire();
            }
          },
          // Not public - generate a queueHooks object, or return the current one
          _queueHooks: function _queueHooks(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
              empty: _jQuery2.Callbacks("once memory").add(function () {
                dataPriv.remove(elem, [type + "queue", key]);
              })
            });
          }
        });
        _jQuery2.fn.extend({
          queue: function queue(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
              data = type;
              type = "fx";
              setter--;
            }
            if (arguments.length < setter) {
              return _jQuery2.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function () {
              var queue = _jQuery2.queue(this, type, data);

              // Ensure a hooks for this queue
              _jQuery2._queueHooks(this, type);
              if (type === "fx" && queue[0] !== "inprogress") {
                _jQuery2.dequeue(this, type);
              }
            });
          },
          dequeue: function dequeue(type) {
            return this.each(function () {
              _jQuery2.dequeue(this, type);
            });
          },
          clearQueue: function clearQueue(type) {
            return this.queue(type || "fx", []);
          },
          // Get a promise resolved when queues of a certain type
          // are emptied (fx is the type by default)
          promise: function promise(type, obj) {
            var tmp,
              count = 1,
              defer = _jQuery2.Deferred(),
              elements = this,
              i = this.length,
              resolve = function resolve() {
                if (! --count) {
                  defer.resolveWith(elements, [elements]);
                }
              };
            if (typeof type !== "string") {
              obj = type;
              type = undefined;
            }
            type = type || "fx";
            while (i--) {
              tmp = dataPriv.get(elements[i], type + "queueHooks");
              if (tmp && tmp.empty) {
                count++;
                tmp.empty.add(resolve);
              }
            }
            resolve();
            return defer.promise(obj);
          }
        });
        var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
        var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
        var cssExpand = ["Top", "Right", "Bottom", "Left"];
        var documentElement = document.documentElement;
        var isAttached = function isAttached(elem) {
            return _jQuery2.contains(elem.ownerDocument, elem);
          },
          composed = {
            composed: true
          };

        // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
        // Check attachment across shadow DOM boundaries when possible (gh-3504)
        // Support: iOS 10.0-10.2 only
        // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
        // leading to errors. We need to check for `getRootNode`.
        if (documentElement.getRootNode) {
          isAttached = function isAttached(elem) {
            return _jQuery2.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
          };
        }
        var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
          // isHiddenWithinTree might be called from jQuery#filter function;
          // in that case, element will be second argument
          elem = el || elem;

          // Inline style trumps all
          return elem.style.display === "none" || elem.style.display === "" &&
          // Otherwise, check computed style
          // Support: Firefox <=43 - 45
          // Disconnected elements can have computed display: none, so first confirm that elem is
          // in the document.
          isAttached(elem) && _jQuery2.css(elem, "display") === "none";
        };
        function adjustCSS(elem, prop, valueParts, tween) {
          var adjusted,
            scale,
            maxIterations = 20,
            currentValue = tween ? function () {
              return tween.cur();
            } : function () {
              return _jQuery2.css(elem, prop, "");
            },
            initial = currentValue(),
            unit = valueParts && valueParts[3] || (_jQuery2.cssNumber[prop] ? "" : "px"),
            // Starting value computation is required for potential unit mismatches
            initialInUnit = elem.nodeType && (_jQuery2.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(_jQuery2.css(elem, prop));
          if (initialInUnit && initialInUnit[3] !== unit) {
            // Support: Firefox <=54
            // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
            initial = initial / 2;

            // Trust units reported by jQuery.css
            unit = unit || initialInUnit[3];

            // Iteratively approximate from a nonzero starting point
            initialInUnit = +initial || 1;
            while (maxIterations--) {
              // Evaluate and update our best guess (doubling guesses that zero out).
              // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
              _jQuery2.style(elem, prop, initialInUnit + unit);
              if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                maxIterations = 0;
              }
              initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            _jQuery2.style(elem, prop, initialInUnit + unit);

            // Make sure we update the tween properties later on
            valueParts = valueParts || [];
          }
          if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;

            // Apply relative offset (+=/-=) if specified
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
              tween.unit = unit;
              tween.start = initialInUnit;
              tween.end = adjusted;
            }
          }
          return adjusted;
        }
        var defaultDisplayMap = {};
        function getDefaultDisplay(elem) {
          var temp,
            doc = elem.ownerDocument,
            nodeName = elem.nodeName,
            display = defaultDisplayMap[nodeName];
          if (display) {
            return display;
          }
          temp = doc.body.appendChild(doc.createElement(nodeName));
          display = _jQuery2.css(temp, "display");
          temp.parentNode.removeChild(temp);
          if (display === "none") {
            display = "block";
          }
          defaultDisplayMap[nodeName] = display;
          return display;
        }
        function showHide(elements, show) {
          var display,
            elem,
            values = [],
            index = 0,
            length = elements.length;

          // Determine new display value for elements that need to change
          for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
              continue;
            }
            display = elem.style.display;
            if (show) {
              // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
              // check is required in this first loop unless we have a nonempty display value (either
              // inline or about-to-be-restored)
              if (display === "none") {
                values[index] = dataPriv.get(elem, "display") || null;
                if (!values[index]) {
                  elem.style.display = "";
                }
              }
              if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                values[index] = getDefaultDisplay(elem);
              }
            } else {
              if (display !== "none") {
                values[index] = "none";

                // Remember what we're overwriting
                dataPriv.set(elem, "display", display);
              }
            }
          }

          // Set the display of the elements in a second loop to avoid constant reflow
          for (index = 0; index < length; index++) {
            if (values[index] != null) {
              elements[index].style.display = values[index];
            }
          }
          return elements;
        }
        _jQuery2.fn.extend({
          show: function show() {
            return showHide(this, true);
          },
          hide: function hide() {
            return showHide(this);
          },
          toggle: function toggle(state) {
            if (typeof state === "boolean") {
              return state ? this.show() : this.hide();
            }
            return this.each(function () {
              if (isHiddenWithinTree(this)) {
                _jQuery2(this).show();
              } else {
                _jQuery2(this).hide();
              }
            });
          }
        });
        var rcheckableType = /^(?:checkbox|radio)$/i;
        var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
        var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
        (function () {
          var fragment = document.createDocumentFragment(),
            div = fragment.appendChild(document.createElement("div")),
            input = document.createElement("input");

          // Support: Android 4.0 - 4.3 only
          // Check state lost if the name is set (trac-11217)
          // Support: Windows Web Apps (WWA)
          // `name` and `type` must use .setAttribute for WWA (trac-14901)
          input.setAttribute("type", "radio");
          input.setAttribute("checked", "checked");
          input.setAttribute("name", "t");
          div.appendChild(input);

          // Support: Android <=4.1 only
          // Older WebKit doesn't clone checked state correctly in fragments
          support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

          // Support: IE <=11 only
          // Make sure textarea (and checkbox) defaultValue is properly cloned
          div.innerHTML = "<textarea>x</textarea>";
          support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

          // Support: IE <=9 only
          // IE <=9 replaces <option> tags with their contents when inserted outside of
          // the select element.
          div.innerHTML = "<option></option>";
          support.option = !!div.lastChild;
        })();

        // We have to close these tags to support XHTML (trac-13200)
        var wrapMap = {
          // XHTML parsers do not magically insert elements in the
          // same way that tag soup parsers do. So we cannot shorten
          // this by omitting <tbody> or other required elements.
          thead: [1, "<table>", "</table>"],
          col: [2, "<table><colgroup>", "</colgroup></table>"],
          tr: [2, "<table><tbody>", "</tbody></table>"],
          td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
          _default: [0, "", ""]
        };
        wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
        wrapMap.th = wrapMap.td;

        // Support: IE <=9 only
        if (!support.option) {
          wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
        }
        function getAll(context, tag) {
          // Support: IE <=9 - 11 only
          // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
          var ret;
          if (typeof context.getElementsByTagName !== "undefined") {
            ret = context.getElementsByTagName(tag || "*");
          } else if (typeof context.querySelectorAll !== "undefined") {
            ret = context.querySelectorAll(tag || "*");
          } else {
            ret = [];
          }
          if (tag === undefined || tag && nodeName(context, tag)) {
            return _jQuery2.merge([context], ret);
          }
          return ret;
        }

        // Mark scripts as having already been evaluated
        function setGlobalEval(elems, refElements) {
          var i = 0,
            l = elems.length;
          for (; i < l; i++) {
            dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
          }
        }
        var rhtml = /<|&#?\w+;/;
        function buildFragment(elems, context, scripts, selection, ignored) {
          var elem,
            tmp,
            tag,
            wrap,
            attached,
            j,
            fragment = context.createDocumentFragment(),
            nodes = [],
            i = 0,
            l = elems.length;
          for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
              // Add nodes directly
              if (toType(elem) === "object") {
                // Support: Android <=4.0 only, PhantomJS 1 only
                // push.apply(_, arraylike) throws on ancient WebKit
                _jQuery2.merge(nodes, elem.nodeType ? [elem] : elem);

                // Convert non-html into a text node
              } else if (!rhtml.test(elem)) {
                nodes.push(context.createTextNode(elem));

                // Convert html into DOM nodes
              } else {
                tmp = tmp || fragment.appendChild(context.createElement("div"));

                // Deserialize a standard representation
                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                wrap = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap[1] + _jQuery2.htmlPrefilter(elem) + wrap[2];

                // Descend through wrappers to the right content
                j = wrap[0];
                while (j--) {
                  tmp = tmp.lastChild;
                }

                // Support: Android <=4.0 only, PhantomJS 1 only
                // push.apply(_, arraylike) throws on ancient WebKit
                _jQuery2.merge(nodes, tmp.childNodes);

                // Remember the top-level container
                tmp = fragment.firstChild;

                // Ensure the created nodes are orphaned (trac-12392)
                tmp.textContent = "";
              }
            }
          }

          // Remove wrapper from fragment
          fragment.textContent = "";
          i = 0;
          while (elem = nodes[i++]) {
            // Skip elements already in the context collection (trac-4087)
            if (selection && _jQuery2.inArray(elem, selection) > -1) {
              if (ignored) {
                ignored.push(elem);
              }
              continue;
            }
            attached = isAttached(elem);

            // Append to fragment
            tmp = getAll(fragment.appendChild(elem), "script");

            // Preserve script evaluation history
            if (attached) {
              setGlobalEval(tmp);
            }

            // Capture executables
            if (scripts) {
              j = 0;
              while (elem = tmp[j++]) {
                if (rscriptType.test(elem.type || "")) {
                  scripts.push(elem);
                }
              }
            }
          }
          return fragment;
        }
        var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
        function returnTrue() {
          return true;
        }
        function returnFalse() {
          return false;
        }
        function _on(elem, types, selector, data, fn, one) {
          var origFn, type;

          // Types can be a map of types/handlers
          if (_typeof(types) === "object") {
            // ( types-Object, selector, data )
            if (typeof selector !== "string") {
              // ( types-Object, data )
              data = data || selector;
              selector = undefined;
            }
            for (type in types) {
              _on(elem, type, selector, data, types[type], one);
            }
            return elem;
          }
          if (data == null && fn == null) {
            // ( types, fn )
            fn = selector;
            data = selector = undefined;
          } else if (fn == null) {
            if (typeof selector === "string") {
              // ( types, selector, fn )
              fn = data;
              data = undefined;
            } else {
              // ( types, data, fn )
              fn = data;
              data = selector;
              selector = undefined;
            }
          }
          if (fn === false) {
            fn = returnFalse;
          } else if (!fn) {
            return elem;
          }
          if (one === 1) {
            origFn = fn;
            fn = function fn(event) {
              // Can use an empty set, since event contains the info
              _jQuery2().off(event);
              return origFn.apply(this, arguments);
            };

            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || (origFn.guid = _jQuery2.guid++);
          }
          return elem.each(function () {
            _jQuery2.event.add(this, types, fn, data, selector);
          });
        }

        /*
         * Helper functions for managing events -- not part of the public interface.
         * Props to Dean Edwards' addEvent library for many of the ideas.
         */
        _jQuery2.event = {
          global: {},
          add: function add(elem, types, handler, data, selector) {
            var handleObjIn,
              eventHandle,
              tmp,
              events,
              t,
              handleObj,
              special,
              handlers,
              type,
              namespaces,
              origType,
              elemData = dataPriv.get(elem);

            // Only attach events to objects that accept data
            if (!acceptData(elem)) {
              return;
            }

            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
              handleObjIn = handler;
              handler = handleObjIn.handler;
              selector = handleObjIn.selector;
            }

            // Ensure that invalid selectors throw exceptions at attach time
            // Evaluate against documentElement in case elem is a non-element node (e.g., document)
            if (selector) {
              _jQuery2.find.matchesSelector(documentElement, selector);
            }

            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) {
              handler.guid = _jQuery2.guid++;
            }

            // Init the element's event structure and main handler, if this is the first
            if (!(events = elemData.events)) {
              events = elemData.events = Object.create(null);
            }
            if (!(eventHandle = elemData.handle)) {
              eventHandle = elemData.handle = function (e) {
                // Discard the second event of a jQuery.event.trigger() and
                // when an event is called after a page has unloaded
                return typeof _jQuery2 !== "undefined" && _jQuery2.event.triggered !== e.type ? _jQuery2.event.dispatch.apply(elem, arguments) : undefined;
              };
            }

            // Handle multiple events separated by a space
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();

              // There *must* be a type, no attaching namespace-only handlers
              if (!type) {
                continue;
              }

              // If event changes its type, use the special event handlers for the changed type
              special = _jQuery2.event.special[type] || {};

              // If selector defined, determine special event api type, otherwise given type
              type = (selector ? special.delegateType : special.bindType) || type;

              // Update special based on newly reset type
              special = _jQuery2.event.special[type] || {};

              // handleObj is passed to all event handlers
              handleObj = _jQuery2.extend({
                type: type,
                origType: origType,
                data: data,
                handler: handler,
                guid: handler.guid,
                selector: selector,
                needsContext: selector && _jQuery2.expr.match.needsContext.test(selector),
                namespace: namespaces.join(".")
              }, handleObjIn);

              // Init the event handler queue if we're the first
              if (!(handlers = events[type])) {
                handlers = events[type] = [];
                handlers.delegateCount = 0;

                // Only use addEventListener if the special events handler returns false
                if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                  if (elem.addEventListener) {
                    elem.addEventListener(type, eventHandle);
                  }
                }
              }
              if (special.add) {
                special.add.call(elem, handleObj);
                if (!handleObj.handler.guid) {
                  handleObj.handler.guid = handler.guid;
                }
              }

              // Add to the element's handler list, delegates in front
              if (selector) {
                handlers.splice(handlers.delegateCount++, 0, handleObj);
              } else {
                handlers.push(handleObj);
              }

              // Keep track of which events have ever been used, for event optimization
              _jQuery2.event.global[type] = true;
            }
          },
          // Detach an event or set of events from an element
          remove: function remove(elem, types, handler, selector, mappedTypes) {
            var j,
              origCount,
              tmp,
              events,
              t,
              handleObj,
              special,
              handlers,
              type,
              namespaces,
              origType,
              elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
              return;
            }

            // Once for each type.namespace in types; type may be omitted
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();

              // Unbind all events (on this namespace, if provided) for the element
              if (!type) {
                for (type in events) {
                  _jQuery2.event.remove(elem, type + types[t], handler, selector, true);
                }
                continue;
              }
              special = _jQuery2.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              handlers = events[type] || [];
              tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

              // Remove matching events
              origCount = j = handlers.length;
              while (j--) {
                handleObj = handlers[j];
                if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                  handlers.splice(j, 1);
                  if (handleObj.selector) {
                    handlers.delegateCount--;
                  }
                  if (special.remove) {
                    special.remove.call(elem, handleObj);
                  }
                }
              }

              // Remove generic event handler if we removed something and no more handlers exist
              // (avoids potential for endless recursion during removal of special event handlers)
              if (origCount && !handlers.length) {
                if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                  _jQuery2.removeEvent(elem, type, elemData.handle);
                }
                delete events[type];
              }
            }

            // Remove data and the expando if it's no longer used
            if (_jQuery2.isEmptyObject(events)) {
              dataPriv.remove(elem, "handle events");
            }
          },
          dispatch: function dispatch(nativeEvent) {
            var i,
              j,
              ret,
              matched,
              handleObj,
              handlerQueue,
              args = new Array(arguments.length),
              // Make a writable jQuery.Event from the native event object
              event = _jQuery2.event.fix(nativeEvent),
              handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],
              special = _jQuery2.event.special[event.type] || {};

            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
              args[i] = arguments[i];
            }
            event.delegateTarget = this;

            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
              return;
            }

            // Determine handlers
            handlerQueue = _jQuery2.event.handlers.call(this, event, handlers);

            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
              event.currentTarget = matched.elem;
              j = 0;
              while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                // If the event is namespaced, then each handler is only invoked if it is
                // specially universal or its namespaces are a superset of the event's.
                if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                  event.handleObj = handleObj;
                  event.data = handleObj.data;
                  ret = ((_jQuery2.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                  if (ret !== undefined) {
                    if ((event.result = ret) === false) {
                      event.preventDefault();
                      event.stopPropagation();
                    }
                  }
                }
              }
            }

            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) {
              special.postDispatch.call(this, event);
            }
            return event.result;
          },
          handlers: function handlers(event, _handlers) {
            var i,
              handleObj,
              sel,
              matchedHandlers,
              matchedSelectors,
              handlerQueue = [],
              delegateCount = _handlers.delegateCount,
              cur = event.target;

            // Find delegate handlers
            if (delegateCount &&
            // Support: IE <=9
            // Black-hole SVG <use> instance trees (trac-13180)
            cur.nodeType &&
            // Support: Firefox <=42
            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
            // Support: IE 11 only
            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
            !(event.type === "click" && event.button >= 1)) {
              for (; cur !== this; cur = cur.parentNode || this) {
                // Don't check non-elements (trac-13208)
                // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
                if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                  matchedHandlers = [];
                  matchedSelectors = {};
                  for (i = 0; i < delegateCount; i++) {
                    handleObj = _handlers[i];

                    // Don't conflict with Object.prototype properties (trac-13203)
                    sel = handleObj.selector + " ";
                    if (matchedSelectors[sel] === undefined) {
                      matchedSelectors[sel] = handleObj.needsContext ? _jQuery2(sel, this).index(cur) > -1 : _jQuery2.find(sel, this, null, [cur]).length;
                    }
                    if (matchedSelectors[sel]) {
                      matchedHandlers.push(handleObj);
                    }
                  }
                  if (matchedHandlers.length) {
                    handlerQueue.push({
                      elem: cur,
                      handlers: matchedHandlers
                    });
                  }
                }
              }
            }

            // Add the remaining (directly-bound) handlers
            cur = this;
            if (delegateCount < _handlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: _handlers.slice(delegateCount)
              });
            }
            return handlerQueue;
          },
          addProp: function addProp(name, hook) {
            Object.defineProperty(_jQuery2.Event.prototype, name, {
              enumerable: true,
              configurable: true,
              get: isFunction(hook) ? function () {
                if (this.originalEvent) {
                  return hook(this.originalEvent);
                }
              } : function () {
                if (this.originalEvent) {
                  return this.originalEvent[name];
                }
              },
              set: function set(value) {
                Object.defineProperty(this, name, {
                  enumerable: true,
                  configurable: true,
                  writable: true,
                  value: value
                });
              }
            });
          },
          fix: function fix(originalEvent) {
            return originalEvent[_jQuery2.expando] ? originalEvent : new _jQuery2.Event(originalEvent);
          },
          special: {
            load: {
              // Prevent triggered image.load events from bubbling to window.load
              noBubble: true
            },
            click: {
              // Utilize native event to ensure correct state for checkable inputs
              setup: function setup(data) {
                // For mutual compressibility with _default, replace `this` access with a local var.
                // `|| data` is dead code meant only to preserve the variable through minification.
                var el = this || data;

                // Claim the first handler
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  // dataPriv.set( el, "click", ... )
                  leverageNative(el, "click", true);
                }

                // Return false to allow normal processing in the caller
                return false;
              },
              trigger: function trigger(data) {
                // For mutual compressibility with _default, replace `this` access with a local var.
                // `|| data` is dead code meant only to preserve the variable through minification.
                var el = this || data;

                // Force setup before triggering a click
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click");
                }

                // Return non-false to allow normal event-path propagation
                return true;
              },
              // For cross-browser consistency, suppress native .click() on links
              // Also prevent it if we're currently inside a leveraged native-event stack
              _default: function _default(event) {
                var target = event.target;
                return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
              }
            },
            beforeunload: {
              postDispatch: function postDispatch(event) {
                // Support: Firefox 20+
                // Firefox doesn't alert if the returnValue field is not set.
                if (event.result !== undefined && event.originalEvent) {
                  event.originalEvent.returnValue = event.result;
                }
              }
            }
          }
        };

        // Ensure the presence of an event listener that handles manually-triggered
        // synthetic events by interrupting progress until reinvoked in response to
        // *native* events that it fires directly, ensuring that state changes have
        // already occurred before other listeners are invoked.
        function leverageNative(el, type, isSetup) {
          // Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
          if (!isSetup) {
            if (dataPriv.get(el, type) === undefined) {
              _jQuery2.event.add(el, type, returnTrue);
            }
            return;
          }

          // Register the controller as a special universal handler for all event namespaces
          dataPriv.set(el, type, false);
          _jQuery2.event.add(el, type, {
            namespace: false,
            handler: function handler(event) {
              var result,
                saved = dataPriv.get(this, type);
              if (event.isTrigger & 1 && this[type]) {
                // Interrupt processing of the outer synthetic .trigger()ed event
                if (!saved) {
                  // Store arguments for use when handling the inner native event
                  // There will always be at least one argument (an event object), so this array
                  // will not be confused with a leftover capture object.
                  saved = _slice.call(arguments);
                  dataPriv.set(this, type, saved);

                  // Trigger the native event and capture its result
                  this[type]();
                  result = dataPriv.get(this, type);
                  dataPriv.set(this, type, false);
                  if (saved !== result) {
                    // Cancel the outer synthetic event
                    event.stopImmediatePropagation();
                    event.preventDefault();
                    return result;
                  }

                  // If this is an inner synthetic event for an event with a bubbling surrogate
                  // (focus or blur), assume that the surrogate already propagated from triggering
                  // the native event and prevent that from happening again here.
                  // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                  // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                  // less bad than duplication.
                } else if ((_jQuery2.event.special[type] || {}).delegateType) {
                  event.stopPropagation();
                }

                // If this is a native event triggered above, everything is now in order
                // Fire an inner synthetic event with the original arguments
              } else if (saved) {
                // ...and capture the result
                dataPriv.set(this, type, _jQuery2.event.trigger(saved[0], saved.slice(1), this));

                // Abort handling of the native event by all jQuery handlers while allowing
                // native handlers on the same element to run. On target, this is achieved
                // by stopping immediate propagation just on the jQuery event. However,
                // the native event is re-wrapped by a jQuery one on each level of the
                // propagation so the only way to stop it for jQuery is to stop it for
                // everyone via native `stopPropagation()`. This is not a problem for
                // focus/blur which don't bubble, but it does also stop click on checkboxes
                // and radios. We accept this limitation.
                event.stopPropagation();
                event.isImmediatePropagationStopped = returnTrue;
              }
            }
          });
        }
        _jQuery2.removeEvent = function (elem, type, handle) {
          // This "if" is needed for plain objects
          if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
          }
        };
        _jQuery2.Event = function (src, props) {
          // Allow instantiation without the 'new' keyword
          if (!(this instanceof _jQuery2.Event)) {
            return new _jQuery2.Event(src, props);
          }

          // Event object
          if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;

            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&
            // Support: Android <=2.3 only
            src.returnValue === false ? returnTrue : returnFalse;

            // Create target properties
            // Support: Safari <=6 - 7 only
            // Target should not be a text node (trac-504, trac-13143)
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;

            // Event type
          } else {
            this.type = src;
          }

          // Put explicitly provided properties onto the event object
          if (props) {
            _jQuery2.extend(this, props);
          }

          // Create a timestamp if incoming event doesn't have one
          this.timeStamp = src && src.timeStamp || Date.now();

          // Mark it as fixed
          this[_jQuery2.expando] = true;
        };

        // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
        // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
        _jQuery2.Event.prototype = {
          constructor: _jQuery2.Event,
          isDefaultPrevented: returnFalse,
          isPropagationStopped: returnFalse,
          isImmediatePropagationStopped: returnFalse,
          isSimulated: false,
          preventDefault: function preventDefault() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
              e.preventDefault();
            }
          },
          stopPropagation: function stopPropagation() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopPropagation();
            }
          },
          stopImmediatePropagation: function stopImmediatePropagation() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopImmediatePropagation();
            }
            this.stopPropagation();
          }
        };

        // Includes all common event props including KeyEvent and MouseEvent specific props
        _jQuery2.each({
          altKey: true,
          bubbles: true,
          cancelable: true,
          changedTouches: true,
          ctrlKey: true,
          detail: true,
          eventPhase: true,
          metaKey: true,
          pageX: true,
          pageY: true,
          shiftKey: true,
          view: true,
          "char": true,
          code: true,
          charCode: true,
          key: true,
          keyCode: true,
          button: true,
          buttons: true,
          clientX: true,
          clientY: true,
          offsetX: true,
          offsetY: true,
          pointerId: true,
          pointerType: true,
          screenX: true,
          screenY: true,
          targetTouches: true,
          toElement: true,
          touches: true,
          which: true
        }, _jQuery2.event.addProp);
        _jQuery2.each({
          focus: "focusin",
          blur: "focusout"
        }, function (type, delegateType) {
          function focusMappedHandler(nativeEvent) {
            if (document.documentMode) {
              // Support: IE 11+
              // Attach a single focusin/focusout handler on the document while someone wants
              // focus/blur. This is because the former are synchronous in IE while the latter
              // are async. In other browsers, all those handlers are invoked synchronously.

              // `handle` from private data would already wrap the event, but we need
              // to change the `type` here.
              var handle = dataPriv.get(this, "handle"),
                event = _jQuery2.event.fix(nativeEvent);
              event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
              event.isSimulated = true;

              // First, handle focusin/focusout
              handle(nativeEvent);

              // ...then, handle focus/blur
              //
              // focus/blur don't bubble while focusin/focusout do; simulate the former by only
              // invoking the handler at the lower level.
              if (event.target === event.currentTarget) {
                // The setup part calls `leverageNative`, which, in turn, calls
                // `jQuery.event.add`, so event handle will already have been set
                // by this point.
                handle(event);
              }
            } else {
              // For non-IE browsers, attach a single capturing handler on the document
              // while someone wants focusin/focusout.
              _jQuery2.event.simulate(delegateType, nativeEvent.target, _jQuery2.event.fix(nativeEvent));
            }
          }
          _jQuery2.event.special[type] = {
            // Utilize native event if possible so blur/focus sequence is correct
            setup: function setup() {
              var attaches;

              // Claim the first handler
              // dataPriv.set( this, "focus", ... )
              // dataPriv.set( this, "blur", ... )
              leverageNative(this, type, true);
              if (document.documentMode) {
                // Support: IE 9 - 11+
                // We use the same native handler for focusin & focus (and focusout & blur)
                // so we need to coordinate setup & teardown parts between those events.
                // Use `delegateType` as the key as `type` is already used by `leverageNative`.
                attaches = dataPriv.get(this, delegateType);
                if (!attaches) {
                  this.addEventListener(delegateType, focusMappedHandler);
                }
                dataPriv.set(this, delegateType, (attaches || 0) + 1);
              } else {
                // Return false to allow normal processing in the caller
                return false;
              }
            },
            trigger: function trigger() {
              // Force setup before trigger
              leverageNative(this, type);

              // Return non-false to allow normal event-path propagation
              return true;
            },
            teardown: function teardown() {
              var attaches;
              if (document.documentMode) {
                attaches = dataPriv.get(this, delegateType) - 1;
                if (!attaches) {
                  this.removeEventListener(delegateType, focusMappedHandler);
                  dataPriv.remove(this, delegateType);
                } else {
                  dataPriv.set(this, delegateType, attaches);
                }
              } else {
                // Return false to indicate standard teardown should be applied
                return false;
              }
            },
            // Suppress native focus or blur if we're currently inside
            // a leveraged native-event stack
            _default: function _default(event) {
              return dataPriv.get(event.target, type);
            },
            delegateType: delegateType
          };

          // Support: Firefox <=44
          // Firefox doesn't have focus(in | out) events
          // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
          //
          // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
          // focus(in | out) events fire after focus & blur events,
          // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
          // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
          //
          // Support: IE 9 - 11+
          // To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
          // attach a single handler for both events in IE.
          _jQuery2.event.special[delegateType] = {
            setup: function setup() {
              // Handle: regular nodes (via `this.ownerDocument`), window
              // (via `this.document`) & document (via `this`).
              var doc = this.ownerDocument || this.document || this,
                dataHolder = document.documentMode ? this : doc,
                attaches = dataPriv.get(dataHolder, delegateType);

              // Support: IE 9 - 11+
              // We use the same native handler for focusin & focus (and focusout & blur)
              // so we need to coordinate setup & teardown parts between those events.
              // Use `delegateType` as the key as `type` is already used by `leverageNative`.
              if (!attaches) {
                if (document.documentMode) {
                  this.addEventListener(delegateType, focusMappedHandler);
                } else {
                  doc.addEventListener(type, focusMappedHandler, true);
                }
              }
              dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
            },
            teardown: function teardown() {
              var doc = this.ownerDocument || this.document || this,
                dataHolder = document.documentMode ? this : doc,
                attaches = dataPriv.get(dataHolder, delegateType) - 1;
              if (!attaches) {
                if (document.documentMode) {
                  this.removeEventListener(delegateType, focusMappedHandler);
                } else {
                  doc.removeEventListener(type, focusMappedHandler, true);
                }
                dataPriv.remove(dataHolder, delegateType);
              } else {
                dataPriv.set(dataHolder, delegateType, attaches);
              }
            }
          };
        });

        // Create mouseenter/leave events using mouseover/out and event-time checks
        // so that event delegation works in jQuery.
        // Do the same for pointerenter/pointerleave and pointerover/pointerout
        //
        // Support: Safari 7 only
        // Safari sends mouseenter too often; see:
        // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
        // for the description of the bug (it existed in older Chrome versions as well).
        _jQuery2.each({
          mouseenter: "mouseover",
          mouseleave: "mouseout",
          pointerenter: "pointerover",
          pointerleave: "pointerout"
        }, function (orig, fix) {
          _jQuery2.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function handle(event) {
              var ret,
                target = this,
                related = event.relatedTarget,
                handleObj = event.handleObj;

              // For mouseenter/leave call the handler if related is outside the target.
              // NB: No relatedTarget if the mouse left/entered the browser window
              if (!related || related !== target && !_jQuery2.contains(target, related)) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply(this, arguments);
                event.type = fix;
              }
              return ret;
            }
          };
        });
        _jQuery2.fn.extend({
          on: function on(types, selector, data, fn) {
            return _on(this, types, selector, data, fn);
          },
          one: function one(types, selector, data, fn) {
            return _on(this, types, selector, data, fn, 1);
          },
          off: function off(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
              // ( event )  dispatched jQuery.Event
              handleObj = types.handleObj;
              _jQuery2(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
              return this;
            }
            if (_typeof(types) === "object") {
              // ( types-object [, selector] )
              for (type in types) {
                this.off(type, selector, types[type]);
              }
              return this;
            }
            if (selector === false || typeof selector === "function") {
              // ( types [, fn] )
              fn = selector;
              selector = undefined;
            }
            if (fn === false) {
              fn = returnFalse;
            }
            return this.each(function () {
              _jQuery2.event.remove(this, types, fn, selector);
            });
          }
        });
        var
          // Support: IE <=10 - 11, Edge 12 - 13 only
          // In IE/Edge using regex groups here causes severe slowdowns.
          // See https://connect.microsoft.com/IE/feedback/details/1736512/
          rnoInnerhtml = /<script|<style|<link/i,
          // checked="checked" or checked
          rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
          rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

        // Prefer a tbody over its parent table for containing new rows
        function manipulationTarget(elem, content) {
          if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
            return _jQuery2(elem).children("tbody")[0] || elem;
          }
          return elem;
        }

        // Replace/restore the type attribute of script elements for safe DOM manipulation
        function disableScript(elem) {
          elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
          return elem;
        }
        function restoreScript(elem) {
          if ((elem.type || "").slice(0, 5) === "true/") {
            elem.type = elem.type.slice(5);
          } else {
            elem.removeAttribute("type");
          }
          return elem;
        }
        function cloneCopyEvent(src, dest) {
          var i, l, type, pdataOld, udataOld, udataCur, events;
          if (dest.nodeType !== 1) {
            return;
          }

          // 1. Copy private data: events, handlers, etc.
          if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.get(src);
            events = pdataOld.events;
            if (events) {
              dataPriv.remove(dest, "handle events");
              for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                  _jQuery2.event.add(dest, type, events[type][i]);
                }
              }
            }
          }

          // 2. Copy user data
          if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = _jQuery2.extend({}, udataOld);
            dataUser.set(dest, udataCur);
          }
        }

        // Fix IE bugs, see support tests
        function fixInput(src, dest) {
          var nodeName = dest.nodeName.toLowerCase();

          // Fails to persist the checked state of a cloned checkbox or radio button.
          if (nodeName === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;

            // Fails to return the selected option to the default selected state when cloning options
          } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
          }
        }
        function domManip(collection, args, callback, ignored) {
          // Flatten any nested arrays
          args = flat(args);
          var fragment,
            first,
            scripts,
            hasScripts,
            node,
            doc,
            i = 0,
            l = collection.length,
            iNoClone = l - 1,
            value = args[0],
            valueIsFunction = isFunction(value);

          // We can't cloneNode fragments that contain checked, in WebKit
          if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
            return collection.each(function (index) {
              var self = collection.eq(index);
              if (valueIsFunction) {
                args[0] = value.call(this, index, self.html());
              }
              domManip(self, args, callback, ignored);
            });
          }
          if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
              fragment = first;
            }

            // Require either new content or an interest in ignored elements to invoke the callback
            if (first || ignored) {
              scripts = _jQuery2.map(getAll(fragment, "script"), disableScript);
              hasScripts = scripts.length;

              // Use the original fragment for the last item
              // instead of the first because it can end up
              // being emptied incorrectly in certain situations (trac-8070).
              for (; i < l; i++) {
                node = fragment;
                if (i !== iNoClone) {
                  node = _jQuery2.clone(node, true, true);

                  // Keep references to cloned scripts for later restoration
                  if (hasScripts) {
                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    _jQuery2.merge(scripts, getAll(node, "script"));
                  }
                }
                callback.call(collection[i], node, i);
              }
              if (hasScripts) {
                doc = scripts[scripts.length - 1].ownerDocument;

                // Re-enable scripts
                _jQuery2.map(scripts, restoreScript);

                // Evaluate executable scripts on first document insertion
                for (i = 0; i < hasScripts; i++) {
                  node = scripts[i];
                  if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && _jQuery2.contains(doc, node)) {
                    if (node.src && (node.type || "").toLowerCase() !== "module") {
                      // Optional AJAX dependency, but won't run scripts if not present
                      if (_jQuery2._evalUrl && !node.noModule) {
                        _jQuery2._evalUrl(node.src, {
                          nonce: node.nonce || node.getAttribute("nonce")
                        }, doc);
                      }
                    } else {
                      // Unwrap a CDATA section containing script contents. This shouldn't be
                      // needed as in XML documents they're already not visible when
                      // inspecting element contents and in HTML documents they have no
                      // meaning but we're preserving that logic for backwards compatibility.
                      // This will be removed completely in 4.0. See gh-4904.
                      DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                    }
                  }
                }
              }
            }
          }
          return collection;
        }
        function _remove(elem, selector, keepData) {
          var node,
            nodes = selector ? _jQuery2.filter(selector, elem) : elem,
            i = 0;
          for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
              _jQuery2.cleanData(getAll(node));
            }
            if (node.parentNode) {
              if (keepData && isAttached(node)) {
                setGlobalEval(getAll(node, "script"));
              }
              node.parentNode.removeChild(node);
            }
          }
          return elem;
        }
        _jQuery2.extend({
          htmlPrefilter: function htmlPrefilter(html) {
            return html;
          },
          clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
            var i,
              l,
              srcElements,
              destElements,
              clone = elem.cloneNode(true),
              inPage = isAttached(elem);

            // Fix IE cloning issues
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !_jQuery2.isXMLDoc(elem)) {
              // We eschew jQuery#find here for performance reasons:
              // https://jsperf.com/getall-vs-sizzle/2
              destElements = getAll(clone);
              srcElements = getAll(elem);
              for (i = 0, l = srcElements.length; i < l; i++) {
                fixInput(srcElements[i], destElements[i]);
              }
            }

            // Copy the events from the original to the clone
            if (dataAndEvents) {
              if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0, l = srcElements.length; i < l; i++) {
                  cloneCopyEvent(srcElements[i], destElements[i]);
                }
              } else {
                cloneCopyEvent(elem, clone);
              }
            }

            // Preserve script evaluation history
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
              setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }

            // Return the cloned set
            return clone;
          },
          cleanData: function cleanData(elems) {
            var data,
              elem,
              type,
              special = _jQuery2.event.special,
              i = 0;
            for (; (elem = elems[i]) !== undefined; i++) {
              if (acceptData(elem)) {
                if (data = elem[dataPriv.expando]) {
                  if (data.events) {
                    for (type in data.events) {
                      if (special[type]) {
                        _jQuery2.event.remove(elem, type);

                        // This is a shortcut to avoid jQuery.event.remove's overhead
                      } else {
                        _jQuery2.removeEvent(elem, type, data.handle);
                      }
                    }
                  }

                  // Support: Chrome <=35 - 45+
                  // Assign undefined instead of using delete, see Data#remove
                  elem[dataPriv.expando] = undefined;
                }
                if (elem[dataUser.expando]) {
                  // Support: Chrome <=35 - 45+
                  // Assign undefined instead of using delete, see Data#remove
                  elem[dataUser.expando] = undefined;
                }
              }
            }
          }
        });
        _jQuery2.fn.extend({
          detach: function detach(selector) {
            return _remove(this, selector, true);
          },
          remove: function remove(selector) {
            return _remove(this, selector);
          },
          text: function text(value) {
            return _access(this, function (value) {
              return value === undefined ? _jQuery2.text(this) : this.empty().each(function () {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  this.textContent = value;
                }
              });
            }, null, value, arguments.length);
          },
          append: function append() {
            return domManip(this, arguments, function (elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.appendChild(elem);
              }
            });
          },
          prepend: function prepend() {
            return domManip(this, arguments, function (elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.insertBefore(elem, target.firstChild);
              }
            });
          },
          before: function before() {
            return domManip(this, arguments, function (elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this);
              }
            });
          },
          after: function after() {
            return domManip(this, arguments, function (elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this.nextSibling);
              }
            });
          },
          empty: function empty() {
            var elem,
              i = 0;
            for (; (elem = this[i]) != null; i++) {
              if (elem.nodeType === 1) {
                // Prevent memory leaks
                _jQuery2.cleanData(getAll(elem, false));

                // Remove any remaining nodes
                elem.textContent = "";
              }
            }
            return this;
          },
          clone: function clone(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
              return _jQuery2.clone(this, dataAndEvents, deepDataAndEvents);
            });
          },
          html: function html(value) {
            return _access(this, function (value) {
              var elem = this[0] || {},
                i = 0,
                l = this.length;
              if (value === undefined && elem.nodeType === 1) {
                return elem.innerHTML;
              }

              // See if we can take a shortcut and just use innerHTML
              if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                value = _jQuery2.htmlPrefilter(value);
                try {
                  for (; i < l; i++) {
                    elem = this[i] || {};

                    // Remove element nodes and prevent memory leaks
                    if (elem.nodeType === 1) {
                      _jQuery2.cleanData(getAll(elem, false));
                      elem.innerHTML = value;
                    }
                  }
                  elem = 0;

                  // If using innerHTML throws an exception, use the fallback method
                } catch (e) {}
              }
              if (elem) {
                this.empty().append(value);
              }
            }, null, value, arguments.length);
          },
          replaceWith: function replaceWith() {
            var ignored = [];

            // Make the changes, replacing each non-ignored context element with the new content
            return domManip(this, arguments, function (elem) {
              var parent = this.parentNode;
              if (_jQuery2.inArray(this, ignored) < 0) {
                _jQuery2.cleanData(getAll(this));
                if (parent) {
                  parent.replaceChild(elem, this);
                }
              }

              // Force callback invocation
            }, ignored);
          }
        });
        _jQuery2.each({
          appendTo: "append",
          prependTo: "prepend",
          insertBefore: "before",
          insertAfter: "after",
          replaceAll: "replaceWith"
        }, function (name, original) {
          _jQuery2.fn[name] = function (selector) {
            var elems,
              ret = [],
              insert = _jQuery2(selector),
              last = insert.length - 1,
              i = 0;
            for (; i <= last; i++) {
              elems = i === last ? this : this.clone(true);
              _jQuery2(insert[i])[original](elems);

              // Support: Android <=4.0 only, PhantomJS 1 only
              // .get() because push.apply(_, arraylike) throws on ancient WebKit
              push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
          };
        });
        var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
        var rcustomProp = /^--/;
        var getStyles = function getStyles(elem) {
          // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
          // IE throws on elements created in popups
          // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
          var view = elem.ownerDocument.defaultView;
          if (!view || !view.opener) {
            view = window;
          }
          return view.getComputedStyle(elem);
        };
        var swap = function swap(elem, options, callback) {
          var ret,
            name,
            old = {};

          // Remember the old values, and insert the new ones
          for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
          }
          ret = callback.call(elem);

          // Revert the old values
          for (name in options) {
            elem.style[name] = old[name];
          }
          return ret;
        };
        var rboxStyle = new RegExp(cssExpand.join("|"), "i");
        (function () {
          // Executing both pixelPosition & boxSizingReliable tests require only one layout
          // so they're executed at the same time to save the second computation.
          function computeStyleTests() {
            // This is a singleton, we need to execute it only once
            if (!div) {
              return;
            }
            container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";

            // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

            // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
            // Some styles come back with percentage values, even though they shouldn't
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

            // Support: IE 9 - 11 only
            // Detect misreporting of content dimensions for box-sizing:border-box elements
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

            // Support: IE 9 only
            // Detect overflow:scroll screwiness (gh-3699)
            // Support: Chrome <=64
            // Don't get tricked when zoom affects offsetWidth (gh-4029)
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
            documentElement.removeChild(container);

            // Nullify the div so it wouldn't be stored in the memory and
            // it will also be a sign that checks already performed
            div = null;
          }
          function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
          }
          var pixelPositionVal,
            boxSizingReliableVal,
            scrollboxSizeVal,
            pixelBoxStylesVal,
            reliableTrDimensionsVal,
            reliableMarginLeftVal,
            container = document.createElement("div"),
            div = document.createElement("div");

          // Finish early in limited (non-browser) environments
          if (!div.style) {
            return;
          }

          // Support: IE <=9 - 11 only
          // Style of cloned element affects source element cloned (trac-8908)
          div.style.backgroundClip = "content-box";
          div.cloneNode(true).style.backgroundClip = "";
          support.clearCloneStyle = div.style.backgroundClip === "content-box";
          _jQuery2.extend(support, {
            boxSizingReliable: function boxSizingReliable() {
              computeStyleTests();
              return boxSizingReliableVal;
            },
            pixelBoxStyles: function pixelBoxStyles() {
              computeStyleTests();
              return pixelBoxStylesVal;
            },
            pixelPosition: function pixelPosition() {
              computeStyleTests();
              return pixelPositionVal;
            },
            reliableMarginLeft: function reliableMarginLeft() {
              computeStyleTests();
              return reliableMarginLeftVal;
            },
            scrollboxSize: function scrollboxSize() {
              computeStyleTests();
              return scrollboxSizeVal;
            },
            // Support: IE 9 - 11+, Edge 15 - 18+
            // IE/Edge misreport `getComputedStyle` of table rows with width/height
            // set in CSS while `offset*` properties report correct values.
            // Behavior in IE 9 is more subtle than in newer versions & it passes
            // some versions of this test; make sure not to make it pass there!
            //
            // Support: Firefox 70+
            // Only Firefox includes border widths
            // in computed dimensions. (gh-4529)
            reliableTrDimensions: function reliableTrDimensions() {
              var table, tr, trChild, trStyle;
              if (reliableTrDimensionsVal == null) {
                table = document.createElement("table");
                tr = document.createElement("tr");
                trChild = document.createElement("div");
                table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                tr.style.cssText = "box-sizing:content-box;border:1px solid";

                // Support: Chrome 86+
                // Height set through cssText does not get applied.
                // Computed height then comes back as 0.
                tr.style.height = "1px";
                trChild.style.height = "9px";

                // Support: Android 8 Chrome 86+
                // In our bodyBackground.html iframe,
                // display for all div elements is set to "inline",
                // which causes a problem only in Android 8 Chrome 86.
                // Ensuring the div is `display: block`
                // gets around this issue.
                trChild.style.display = "block";
                documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
                trStyle = window.getComputedStyle(tr);
                reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
                documentElement.removeChild(table);
              }
              return reliableTrDimensionsVal;
            }
          });
        })();
        function curCSS(elem, name, computed) {
          var width,
            minWidth,
            maxWidth,
            ret,
            isCustomProp = rcustomProp.test(name),
            // Support: Firefox 51+
            // Retrieving style before computed somehow
            // fixes an issue with getting wrong values
            // on detached elements
            style = elem.style;
          computed = computed || getStyles(elem);

          // getPropertyValue is needed for:
          //   .css('filter') (IE 9 only, trac-12537)
          //   .css('--customProperty) (gh-3144)
          if (computed) {
            // Support: IE <=9 - 11+
            // IE only supports `"float"` in `getPropertyValue`; in computed styles
            // it's only available as `"cssFloat"`. We no longer modify properties
            // sent to `.css()` apart from camelCasing, so we need to check both.
            // Normally, this would create difference in behavior: if
            // `getPropertyValue` returns an empty string, the value returned
            // by `.css()` would be `undefined`. This is usually the case for
            // disconnected elements. However, in IE even disconnected elements
            // with no styles return `"none"` for `getPropertyValue( "float" )`
            ret = computed.getPropertyValue(name) || computed[name];
            if (isCustomProp && ret) {
              // Support: Firefox 105+, Chrome <=105+
              // Spec requires trimming whitespace for custom properties (gh-4926).
              // Firefox only trims leading whitespace. Chrome just collapses
              // both leading & trailing whitespace to a single space.
              //
              // Fall back to `undefined` if empty string returned.
              // This collapses a missing definition with property defined
              // and set to an empty string but there's no standard API
              // allowing us to differentiate them without a performance penalty
              // and returning `undefined` aligns with older jQuery.
              //
              // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
              // as whitespace while CSS does not, but this is not a problem
              // because CSS preprocessing replaces them with U+000A LINE FEED
              // (which *is* CSS whitespace)
              // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
              ret = ret.replace(rtrimCSS, "$1") || undefined;
            }
            if (ret === "" && !isAttached(elem)) {
              ret = _jQuery2.style(elem, name);
            }

            // A tribute to the "awesome hack by Dean Edwards"
            // Android Browser returns percentage for some values,
            // but width seems to be reliably pixels.
            // This is against the CSSOM draft spec:
            // https://drafts.csswg.org/cssom/#resolved-values
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
              // Remember the original values
              width = style.width;
              minWidth = style.minWidth;
              maxWidth = style.maxWidth;

              // Put in the new values to get a computed value out
              style.minWidth = style.maxWidth = style.width = ret;
              ret = computed.width;

              // Revert the changed values
              style.width = width;
              style.minWidth = minWidth;
              style.maxWidth = maxWidth;
            }
          }
          return ret !== undefined ?
          // Support: IE <=9 - 11 only
          // IE returns zIndex value as an integer.
          ret + "" : ret;
        }
        function addGetHookIf(conditionFn, hookFn) {
          // Define the hook, we'll check on the first run if it's really needed.
          return {
            get: function get() {
              if (conditionFn()) {
                // Hook not needed (or it's not possible to use it due
                // to missing dependency), remove it.
                delete this.get;
                return;
              }

              // Hook needed; redefine it so that the support test is not executed again.
              return (this.get = hookFn).apply(this, arguments);
            }
          };
        }
        var cssPrefixes = ["Webkit", "Moz", "ms"],
          emptyStyle = document.createElement("div").style,
          vendorProps = {};

        // Return a vendor-prefixed property or undefined
        function vendorPropName(name) {
          // Check for vendor prefixed names
          var capName = name[0].toUpperCase() + name.slice(1),
            i = cssPrefixes.length;
          while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
              return name;
            }
          }
        }

        // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
        function finalPropName(name) {
          var final = _jQuery2.cssProps[name] || vendorProps[name];
          if (final) {
            return final;
          }
          if (name in emptyStyle) {
            return name;
          }
          return vendorProps[name] = vendorPropName(name) || name;
        }
        var
          // Swappable if display is none or starts with table
          // except "table", "table-cell", or "table-caption"
          // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
          rdisplayswap = /^(none|table(?!-c[ea]).+)/,
          cssShow = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
          },
          cssNormalTransform = {
            letterSpacing: "0",
            fontWeight: "400"
          };
        function setPositiveNumber(_elem, value, subtract) {
          // Any relative (+/-) values have already been
          // normalized at this point
          var matches = rcssNum.exec(value);
          return matches ?
          // Guard against undefined "subtract", e.g., when used as in cssHooks
          Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
        }
        function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
          var i = dimension === "width" ? 1 : 0,
            extra = 0,
            delta = 0,
            marginDelta = 0;

          // Adjustment may not be necessary
          if (box === (isBorderBox ? "border" : "content")) {
            return 0;
          }
          for (; i < 4; i += 2) {
            // Both box models exclude margin
            // Count margin delta separately to only add it after scroll gutter adjustment.
            // This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
            if (box === "margin") {
              marginDelta += _jQuery2.css(elem, box + cssExpand[i], true, styles);
            }

            // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
            if (!isBorderBox) {
              // Add padding
              delta += _jQuery2.css(elem, "padding" + cssExpand[i], true, styles);

              // For "border" or "margin", add border
              if (box !== "padding") {
                delta += _jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);

                // But still keep track of it otherwise
              } else {
                extra += _jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              }

              // If we get here with a border-box (content + padding + border), we're seeking "content" or
              // "padding" or "margin"
            } else {
              // For "content", subtract padding
              if (box === "content") {
                delta -= _jQuery2.css(elem, "padding" + cssExpand[i], true, styles);
              }

              // For "content" or "padding", subtract border
              if (box !== "margin") {
                delta -= _jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              }
            }
          }

          // Account for positive content-box scroll gutter when requested by providing computedVal
          if (!isBorderBox && computedVal >= 0) {
            // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
            // Assuming integer scroll gutter, subtract the rest and round down
            delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5

            // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
            // Use an explicit zero to avoid NaN (gh-3964)
            )) || 0;
          }
          return delta + marginDelta;
        }
        function getWidthOrHeight(elem, dimension, extra) {
          // Start with computed style
          var styles = getStyles(elem),
            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
            // Fake content-box until we know it's needed to know the true value.
            boxSizingNeeded = !support.boxSizingReliable() || extra,
            isBorderBox = boxSizingNeeded && _jQuery2.css(elem, "boxSizing", false, styles) === "border-box",
            valueIsBorderBox = isBorderBox,
            val = curCSS(elem, dimension, styles),
            offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);

          // Support: Firefox <=54
          // Return a confounding non-pixel value or feign ignorance, as appropriate.
          if (rnumnonpx.test(val)) {
            if (!extra) {
              return val;
            }
            val = "auto";
          }

          // Support: IE 9 - 11 only
          // Use offsetWidth/offsetHeight for when box sizing is unreliable.
          // In those cases, the computed value can be trusted to be border-box.
          if ((!support.boxSizingReliable() && isBorderBox ||
          // Support: IE 10 - 11+, Edge 15 - 18+
          // IE/Edge misreport `getComputedStyle` of table rows with width/height
          // set in CSS while `offset*` properties report correct values.
          // Interestingly, in some cases IE 9 doesn't suffer from this issue.
          !support.reliableTrDimensions() && nodeName(elem, "tr") ||
          // Fall back to offsetWidth/offsetHeight when value is "auto"
          // This happens for inline elements with no explicit setting (gh-3571)
          val === "auto" ||
          // Support: Android <=4.1 - 4.3 only
          // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
          !parseFloat(val) && _jQuery2.css(elem, "display", false, styles) === "inline") &&
          // Make sure the element is visible & connected
          elem.getClientRects().length) {
            isBorderBox = _jQuery2.css(elem, "boxSizing", false, styles) === "border-box";

            // Where available, offsetWidth/offsetHeight approximate border box dimensions.
            // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
            // retrieved value as a content box dimension.
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) {
              val = elem[offsetProp];
            }
          }

          // Normalize "" and auto
          val = parseFloat(val) || 0;

          // Adjust for the element's box model
          return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles,
          // Provide the current computed size to request scroll gutter calculation (gh-3589)
          val) + "px";
        }
        _jQuery2.extend({
          // Add in style property hooks for overriding the default
          // behavior of getting and setting a style property
          cssHooks: {
            opacity: {
              get: function get(elem, computed) {
                if (computed) {
                  // We should always get a number back from opacity
                  var ret = curCSS(elem, "opacity");
                  return ret === "" ? "1" : ret;
                }
              }
            }
          },
          // Don't automatically add "px" to these possibly-unitless properties
          cssNumber: {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageSlice: true,
            columnCount: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            gridArea: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnStart: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowStart: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            scale: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeMiterlimit: true,
            strokeOpacity: true
          },
          // Add in properties whose names you wish to fix before
          // setting or getting the value
          cssProps: {},
          // Get and set the style property on a DOM Node
          style: function style(elem, name, value, extra) {
            // Don't set styles on text and comment nodes
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
              return;
            }

            // Make sure that we're working with the right name
            var ret,
              type,
              hooks,
              origName = camelCase(name),
              isCustomProp = rcustomProp.test(name),
              style = elem.style;

            // Make sure that we're working with the right name. We don't
            // want to query the value if it is a CSS custom property
            // since they are user-defined.
            if (!isCustomProp) {
              name = finalPropName(origName);
            }

            // Gets hook for the prefixed version, then unprefixed version
            hooks = _jQuery2.cssHooks[name] || _jQuery2.cssHooks[origName];

            // Check if we're setting a value
            if (value !== undefined) {
              type = _typeof(value);

              // Convert "+=" or "-=" to relative numbers (trac-7345)
              if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                value = adjustCSS(elem, name, ret);

                // Fixes bug trac-9237
                type = "number";
              }

              // Make sure that null and NaN values aren't set (trac-7116)
              if (value == null || value !== value) {
                return;
              }

              // If a number was passed in, add the unit (except for certain CSS properties)
              // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
              // "px" to a few hardcoded values.
              if (type === "number" && !isCustomProp) {
                value += ret && ret[3] || (_jQuery2.cssNumber[origName] ? "" : "px");
              }

              // background-* props affect original clone's values
              if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                style[name] = "inherit";
              }

              // If a hook was provided, use that value, otherwise just set the specified value
              if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                if (isCustomProp) {
                  style.setProperty(name, value);
                } else {
                  style[name] = value;
                }
              }
            } else {
              // If a hook was provided get the non-computed value from there
              if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                return ret;
              }

              // Otherwise just get the value from the style object
              return style[name];
            }
          },
          css: function css(elem, name, extra, styles) {
            var val,
              num,
              hooks,
              origName = camelCase(name),
              isCustomProp = rcustomProp.test(name);

            // Make sure that we're working with the right name. We don't
            // want to modify the value if it is a CSS custom property
            // since they are user-defined.
            if (!isCustomProp) {
              name = finalPropName(origName);
            }

            // Try prefixed name followed by the unprefixed name
            hooks = _jQuery2.cssHooks[name] || _jQuery2.cssHooks[origName];

            // If a hook was provided get the computed value from there
            if (hooks && "get" in hooks) {
              val = hooks.get(elem, true, extra);
            }

            // Otherwise, if a way to get the computed value exists, use that
            if (val === undefined) {
              val = curCSS(elem, name, styles);
            }

            // Convert "normal" to computed value
            if (val === "normal" && name in cssNormalTransform) {
              val = cssNormalTransform[name];
            }

            // Make numeric if forced or a qualifier was provided and val looks numeric
            if (extra === "" || extra) {
              num = parseFloat(val);
              return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
          }
        });
        _jQuery2.each(["height", "width"], function (_i, dimension) {
          _jQuery2.cssHooks[dimension] = {
            get: function get(elem, computed, extra) {
              if (computed) {
                // Certain elements can have dimension info if we invisibly show them
                // but it must have a current display style that would benefit
                return rdisplayswap.test(_jQuery2.css(elem, "display")) && (
                // Support: Safari 8+
                // Table columns in Safari have non-zero offsetWidth & zero
                // getBoundingClientRect().width unless display is changed.
                // Support: IE <=11 only
                // Running getBoundingClientRect on a disconnected node
                // in IE throws an error.
                !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
                  return getWidthOrHeight(elem, dimension, extra);
                }) : getWidthOrHeight(elem, dimension, extra);
              }
            },
            set: function set(elem, value, extra) {
              var matches,
                styles = getStyles(elem),
                // Only read styles.position if the test has a chance to fail
                // to avoid forcing a reflow.
                scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",
                // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
                boxSizingNeeded = scrollboxSizeBuggy || extra,
                isBorderBox = boxSizingNeeded && _jQuery2.css(elem, "boxSizing", false, styles) === "border-box",
                subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;

              // Account for unreliable border-box dimensions by comparing offset* to computed and
              // faking a content-box to get border and padding (gh-3699)
              if (isBorderBox && scrollboxSizeBuggy) {
                subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
              }

              // Convert to pixels if value adjustment is needed
              if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
                elem.style[dimension] = value;
                value = _jQuery2.css(elem, dimension);
              }
              return setPositiveNumber(elem, value, subtract);
            }
          };
        });
        _jQuery2.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
          if (computed) {
            return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
              marginLeft: 0
            }, function () {
              return elem.getBoundingClientRect().left;
            })) + "px";
          }
        });

        // These hooks are used by animate to expand properties
        _jQuery2.each({
          margin: "",
          padding: "",
          border: "Width"
        }, function (prefix, suffix) {
          _jQuery2.cssHooks[prefix + suffix] = {
            expand: function expand(value) {
              var i = 0,
                expanded = {},
                // Assumes a single number if not a string
                parts = typeof value === "string" ? value.split(" ") : [value];
              for (; i < 4; i++) {
                expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
              }
              return expanded;
            }
          };
          if (prefix !== "margin") {
            _jQuery2.cssHooks[prefix + suffix].set = setPositiveNumber;
          }
        });
        _jQuery2.fn.extend({
          css: function css(name, value) {
            return _access(this, function (elem, name, value) {
              var styles,
                len,
                map = {},
                i = 0;
              if (Array.isArray(name)) {
                styles = getStyles(elem);
                len = name.length;
                for (; i < len; i++) {
                  map[name[i]] = _jQuery2.css(elem, name[i], false, styles);
                }
                return map;
              }
              return value !== undefined ? _jQuery2.style(elem, name, value) : _jQuery2.css(elem, name);
            }, name, value, arguments.length > 1);
          }
        });
        function Tween(elem, options, prop, end, easing) {
          return new Tween.prototype.init(elem, options, prop, end, easing);
        }
        _jQuery2.Tween = Tween;
        Tween.prototype = {
          constructor: Tween,
          init: function init(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || _jQuery2.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (_jQuery2.cssNumber[prop] ? "" : "px");
          },
          cur: function cur() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
          },
          run: function run(percent) {
            var eased,
              hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
              this.pos = eased = _jQuery2.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
              this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
              this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
              hooks.set(this);
            } else {
              Tween.propHooks._default.set(this);
            }
            return this;
          }
        };
        Tween.prototype.init.prototype = Tween.prototype;
        Tween.propHooks = {
          _default: {
            get: function get(tween) {
              var result;

              // Use a property on the element directly when it is not a DOM element,
              // or when there is no matching style property that exists.
              if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                return tween.elem[tween.prop];
              }

              // Passing an empty string as a 3rd parameter to .css will automatically
              // attempt a parseFloat and fallback to a string if the parse fails.
              // Simple values such as "10px" are parsed to Float;
              // complex values such as "rotate(1rad)" are returned as-is.
              result = _jQuery2.css(tween.elem, tween.prop, "");

              // Empty strings, null, undefined and "auto" are converted to 0.
              return !result || result === "auto" ? 0 : result;
            },
            set: function set(tween) {
              // Use step hook for back compat.
              // Use cssHook if its there.
              // Use .style if available and use plain properties where available.
              if (_jQuery2.fx.step[tween.prop]) {
                _jQuery2.fx.step[tween.prop](tween);
              } else if (tween.elem.nodeType === 1 && (_jQuery2.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
                _jQuery2.style(tween.elem, tween.prop, tween.now + tween.unit);
              } else {
                tween.elem[tween.prop] = tween.now;
              }
            }
          }
        };

        // Support: IE <=9 only
        // Panic based approach to setting things on disconnected nodes
        Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
          set: function set(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
              tween.elem[tween.prop] = tween.now;
            }
          }
        };
        _jQuery2.easing = {
          linear: function linear(p) {
            return p;
          },
          swing: function swing(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
          },
          _default: "swing"
        };
        _jQuery2.fx = Tween.prototype.init;

        // Back compat <1.8 extension point
        _jQuery2.fx.step = {};
        var fxNow,
          inProgress,
          rfxtypes = /^(?:toggle|show|hide)$/,
          rrun = /queueHooks$/;
        function schedule() {
          if (inProgress) {
            if (document.hidden === false && window.requestAnimationFrame) {
              window.requestAnimationFrame(schedule);
            } else {
              window.setTimeout(schedule, _jQuery2.fx.interval);
            }
            _jQuery2.fx.tick();
          }
        }

        // Animations created synchronously will run synchronously
        function createFxNow() {
          window.setTimeout(function () {
            fxNow = undefined;
          });
          return fxNow = Date.now();
        }

        // Generate parameters to create a standard animation
        function genFx(type, includeWidth) {
          var which,
            i = 0,
            attrs = {
              height: type
            };

          // If we include width, step value is 1 to do all cssExpand values,
          // otherwise step value is 2 to skip over Left and Right
          includeWidth = includeWidth ? 1 : 0;
          for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
          }
          if (includeWidth) {
            attrs.opacity = attrs.width = type;
          }
          return attrs;
        }
        function createTween(value, prop, animation) {
          var tween,
            collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
            index = 0,
            length = collection.length;
          for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
              // We're done with this property
              return tween;
            }
          }
        }
        function defaultPrefilter(elem, props, opts) {
          var prop,
            value,
            toggle,
            hooks,
            oldfire,
            propTween,
            restoreDisplay,
            display,
            isBox = "width" in props || "height" in props,
            anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHiddenWithinTree(elem),
            dataShow = dataPriv.get(elem, "fxshow");

          // Queue-skipping animations hijack the fx hooks
          if (!opts.queue) {
            hooks = _jQuery2._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
              hooks.unqueued = 0;
              oldfire = hooks.empty.fire;
              hooks.empty.fire = function () {
                if (!hooks.unqueued) {
                  oldfire();
                }
              };
            }
            hooks.unqueued++;
            anim.always(function () {
              // Ensure the complete handler is called before this completes
              anim.always(function () {
                hooks.unqueued--;
                if (!_jQuery2.queue(elem, "fx").length) {
                  hooks.empty.fire();
                }
              });
            });
          }

          // Detect show/hide animations
          for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
              delete props[prop];
              toggle = toggle || value === "toggle";
              if (value === (hidden ? "hide" : "show")) {
                // Pretend to be hidden if this is a "show" and
                // there is still data from a stopped show/hide
                if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                  hidden = true;

                  // Ignore all other no-op show/hide data
                } else {
                  continue;
                }
              }
              orig[prop] = dataShow && dataShow[prop] || _jQuery2.style(elem, prop);
            }
          }

          // Bail out if this is a no-op like .hide().hide()
          propTween = !_jQuery2.isEmptyObject(props);
          if (!propTween && _jQuery2.isEmptyObject(orig)) {
            return;
          }

          // Restrict "overflow" and "display" styles during box animations
          if (isBox && elem.nodeType === 1) {
            // Support: IE <=9 - 11, Edge 12 - 15
            // Record all 3 overflow attributes because IE does not infer the shorthand
            // from identically-valued overflowX and overflowY and Edge just mirrors
            // the overflowX value there.
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];

            // Identify a display type, preferring old show/hide data over the CSS cascade
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
              restoreDisplay = dataPriv.get(elem, "display");
            }
            display = _jQuery2.css(elem, "display");
            if (display === "none") {
              if (restoreDisplay) {
                display = restoreDisplay;
              } else {
                // Get nonempty value(s) by temporarily forcing visibility
                showHide([elem], true);
                restoreDisplay = elem.style.display || restoreDisplay;
                display = _jQuery2.css(elem, "display");
                showHide([elem]);
              }
            }

            // Animate inline elements as inline-block
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
              if (_jQuery2.css(elem, "float") === "none") {
                // Restore the original display value at the end of pure show/hide animations
                if (!propTween) {
                  anim.done(function () {
                    style.display = restoreDisplay;
                  });
                  if (restoreDisplay == null) {
                    display = style.display;
                    restoreDisplay = display === "none" ? "" : display;
                  }
                }
                style.display = "inline-block";
              }
            }
          }
          if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function () {
              style.overflow = opts.overflow[0];
              style.overflowX = opts.overflow[1];
              style.overflowY = opts.overflow[2];
            });
          }

          // Implement show/hide animations
          propTween = false;
          for (prop in orig) {
            // General show/hide setup for this element animation
            if (!propTween) {
              if (dataShow) {
                if ("hidden" in dataShow) {
                  hidden = dataShow.hidden;
                }
              } else {
                dataShow = dataPriv.access(elem, "fxshow", {
                  display: restoreDisplay
                });
              }

              // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
              if (toggle) {
                dataShow.hidden = !hidden;
              }

              // Show elements before animating them
              if (hidden) {
                showHide([elem], true);
              }

              /* eslint-disable no-loop-func */

              anim.done(function () {
                /* eslint-enable no-loop-func */

                // The final step of a "hide" animation is actually hiding the element
                if (!hidden) {
                  showHide([elem]);
                }
                dataPriv.remove(elem, "fxshow");
                for (prop in orig) {
                  _jQuery2.style(elem, prop, orig[prop]);
                }
              });
            }

            // Per-property setup
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
              dataShow[prop] = propTween.start;
              if (hidden) {
                propTween.end = propTween.start;
                propTween.start = 0;
              }
            }
          }
        }
        function propFilter(props, specialEasing) {
          var index, name, easing, value, hooks;

          // camelCase, specialEasing and expand cssHook pass
          for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
              easing = value[1];
              value = props[index] = value[0];
            }
            if (index !== name) {
              props[name] = value;
              delete props[index];
            }
            hooks = _jQuery2.cssHooks[name];
            if (hooks && "expand" in hooks) {
              value = hooks.expand(value);
              delete props[name];

              // Not quite $.extend, this won't overwrite existing keys.
              // Reusing 'index' because we have the correct "name"
              for (index in value) {
                if (!(index in props)) {
                  props[index] = value[index];
                  specialEasing[index] = easing;
                }
              }
            } else {
              specialEasing[name] = easing;
            }
          }
        }
        function Animation(elem, properties, options) {
          var result,
            stopped,
            index = 0,
            length = Animation.prefilters.length,
            deferred = _jQuery2.Deferred().always(function () {
              // Don't match elem in the :animated selector
              delete tick.elem;
            }),
            tick = function tick() {
              if (stopped) {
                return false;
              }
              var currentTime = fxNow || createFxNow(),
                remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
                // Support: Android 2.3 only
                // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
                temp = remaining / animation.duration || 0,
                percent = 1 - temp,
                index = 0,
                length = animation.tweens.length;
              for (; index < length; index++) {
                animation.tweens[index].run(percent);
              }
              deferred.notifyWith(elem, [animation, percent, remaining]);

              // If there's more to do, yield
              if (percent < 1 && length) {
                return remaining;
              }

              // If this was an empty animation, synthesize a final progress notification
              if (!length) {
                deferred.notifyWith(elem, [animation, 1, 0]);
              }

              // Resolve the animation and report its conclusion
              deferred.resolveWith(elem, [animation]);
              return false;
            },
            animation = deferred.promise({
              elem: elem,
              props: _jQuery2.extend({}, properties),
              opts: _jQuery2.extend(true, {
                specialEasing: {},
                easing: _jQuery2.easing._default
              }, options),
              originalProperties: properties,
              originalOptions: options,
              startTime: fxNow || createFxNow(),
              duration: options.duration,
              tweens: [],
              createTween: function createTween(prop, end) {
                var tween = _jQuery2.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
              },
              stop: function stop(gotoEnd) {
                var index = 0,
                  // If we are going to the end, we want to run all the tweens
                  // otherwise we skip this part
                  length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) {
                  return this;
                }
                stopped = true;
                for (; index < length; index++) {
                  animation.tweens[index].run(1);
                }

                // Resolve when we played the last frame; otherwise, reject
                if (gotoEnd) {
                  deferred.notifyWith(elem, [animation, 1, 0]);
                  deferred.resolveWith(elem, [animation, gotoEnd]);
                } else {
                  deferred.rejectWith(elem, [animation, gotoEnd]);
                }
                return this;
              }
            }),
            props = animation.props;
          propFilter(props, animation.opts.specialEasing);
          for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
              if (isFunction(result.stop)) {
                _jQuery2._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
              }
              return result;
            }
          }
          _jQuery2.map(props, createTween, animation);
          if (isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
          }

          // Attach callbacks from options
          animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
          _jQuery2.fx.timer(_jQuery2.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
          }));
          return animation;
        }
        _jQuery2.Animation = _jQuery2.extend(Animation, {
          tweeners: {
            "*": [function (prop, value) {
              var tween = this.createTween(prop, value);
              adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
              return tween;
            }]
          },
          tweener: function tweener(props, callback) {
            if (isFunction(props)) {
              callback = props;
              props = ["*"];
            } else {
              props = props.match(rnothtmlwhite);
            }
            var prop,
              index = 0,
              length = props.length;
            for (; index < length; index++) {
              prop = props[index];
              Animation.tweeners[prop] = Animation.tweeners[prop] || [];
              Animation.tweeners[prop].unshift(callback);
            }
          },
          prefilters: [defaultPrefilter],
          prefilter: function prefilter(callback, prepend) {
            if (prepend) {
              Animation.prefilters.unshift(callback);
            } else {
              Animation.prefilters.push(callback);
            }
          }
        });
        _jQuery2.speed = function (speed, easing, fn) {
          var opt = speed && _typeof(speed) === "object" ? _jQuery2.extend({}, speed) : {
            complete: fn || !fn && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
          };

          // Go to the end state if fx are off
          if (_jQuery2.fx.off) {
            opt.duration = 0;
          } else {
            if (typeof opt.duration !== "number") {
              if (opt.duration in _jQuery2.fx.speeds) {
                opt.duration = _jQuery2.fx.speeds[opt.duration];
              } else {
                opt.duration = _jQuery2.fx.speeds._default;
              }
            }
          }

          // Normalize opt.queue - true/undefined/null -> "fx"
          if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
          }

          // Queueing
          opt.old = opt.complete;
          opt.complete = function () {
            if (isFunction(opt.old)) {
              opt.old.call(this);
            }
            if (opt.queue) {
              _jQuery2.dequeue(this, opt.queue);
            }
          };
          return opt;
        };
        _jQuery2.fn.extend({
          fadeTo: function fadeTo(speed, to, easing, callback) {
            // Show any hidden elements after setting opacity to 0
            return this.filter(isHiddenWithinTree).css("opacity", 0).show()

            // Animate to the value specified
            .end().animate({
              opacity: to
            }, speed, easing, callback);
          },
          animate: function animate(prop, speed, easing, callback) {
            var empty = _jQuery2.isEmptyObject(prop),
              optall = _jQuery2.speed(speed, easing, callback),
              doAnimation = function doAnimation() {
                // Operate on a copy of prop so per-property easing won't be lost
                var anim = Animation(this, _jQuery2.extend({}, prop), optall);

                // Empty animations, or finishing resolves immediately
                if (empty || dataPriv.get(this, "finish")) {
                  anim.stop(true);
                }
              };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
          },
          stop: function stop(type, clearQueue, gotoEnd) {
            var stopQueue = function stopQueue(hooks) {
              var stop = hooks.stop;
              delete hooks.stop;
              stop(gotoEnd);
            };
            if (typeof type !== "string") {
              gotoEnd = clearQueue;
              clearQueue = type;
              type = undefined;
            }
            if (clearQueue) {
              this.queue(type || "fx", []);
            }
            return this.each(function () {
              var dequeue = true,
                index = type != null && type + "queueHooks",
                timers = _jQuery2.timers,
                data = dataPriv.get(this);
              if (index) {
                if (data[index] && data[index].stop) {
                  stopQueue(data[index]);
                }
              } else {
                for (index in data) {
                  if (data[index] && data[index].stop && rrun.test(index)) {
                    stopQueue(data[index]);
                  }
                }
              }
              for (index = timers.length; index--;) {
                if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                  timers[index].anim.stop(gotoEnd);
                  dequeue = false;
                  timers.splice(index, 1);
                }
              }

              // Start the next in the queue if the last step wasn't forced.
              // Timers currently will call their complete callbacks, which
              // will dequeue but only if they were gotoEnd.
              if (dequeue || !gotoEnd) {
                _jQuery2.dequeue(this, type);
              }
            });
          },
          finish: function finish(type) {
            if (type !== false) {
              type = type || "fx";
            }
            return this.each(function () {
              var index,
                data = dataPriv.get(this),
                queue = data[type + "queue"],
                hooks = data[type + "queueHooks"],
                timers = _jQuery2.timers,
                length = queue ? queue.length : 0;

              // Enable finishing flag on private data
              data.finish = true;

              // Empty the queue first
              _jQuery2.queue(this, type, []);
              if (hooks && hooks.stop) {
                hooks.stop.call(this, true);
              }

              // Look for any active animations, and finish them
              for (index = timers.length; index--;) {
                if (timers[index].elem === this && timers[index].queue === type) {
                  timers[index].anim.stop(true);
                  timers.splice(index, 1);
                }
              }

              // Look for any animations in the old queue and finish them
              for (index = 0; index < length; index++) {
                if (queue[index] && queue[index].finish) {
                  queue[index].finish.call(this);
                }
              }

              // Turn off finishing flag
              delete data.finish;
            });
          }
        });
        _jQuery2.each(["toggle", "show", "hide"], function (_i, name) {
          var cssFn = _jQuery2.fn[name];
          _jQuery2.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
          };
        });

        // Generate shortcuts for custom animations
        _jQuery2.each({
          slideDown: genFx("show"),
          slideUp: genFx("hide"),
          slideToggle: genFx("toggle"),
          fadeIn: {
            opacity: "show"
          },
          fadeOut: {
            opacity: "hide"
          },
          fadeToggle: {
            opacity: "toggle"
          }
        }, function (name, props) {
          _jQuery2.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
          };
        });
        _jQuery2.timers = [];
        _jQuery2.fx.tick = function () {
          var timer,
            i = 0,
            timers = _jQuery2.timers;
          fxNow = Date.now();
          for (; i < timers.length; i++) {
            timer = timers[i];

            // Run the timer and safely remove it when done (allowing for external removal)
            if (!timer() && timers[i] === timer) {
              timers.splice(i--, 1);
            }
          }
          if (!timers.length) {
            _jQuery2.fx.stop();
          }
          fxNow = undefined;
        };
        _jQuery2.fx.timer = function (timer) {
          _jQuery2.timers.push(timer);
          _jQuery2.fx.start();
        };
        _jQuery2.fx.interval = 13;
        _jQuery2.fx.start = function () {
          if (inProgress) {
            return;
          }
          inProgress = true;
          schedule();
        };
        _jQuery2.fx.stop = function () {
          inProgress = null;
        };
        _jQuery2.fx.speeds = {
          slow: 600,
          fast: 200,
          // Default speed
          _default: 400
        };

        // Based off of the plugin by Clint Helfers, with permission.
        _jQuery2.fn.delay = function (time, type) {
          time = _jQuery2.fx ? _jQuery2.fx.speeds[time] || time : time;
          type = type || "fx";
          return this.queue(type, function (next, hooks) {
            var timeout = window.setTimeout(next, time);
            hooks.stop = function () {
              window.clearTimeout(timeout);
            };
          });
        };
        (function () {
          var input = document.createElement("input"),
            select = document.createElement("select"),
            opt = select.appendChild(document.createElement("option"));
          input.type = "checkbox";

          // Support: Android <=4.3 only
          // Default value for a checkbox should be "on"
          support.checkOn = input.value !== "";

          // Support: IE <=11 only
          // Must access selectedIndex to make default options select
          support.optSelected = opt.selected;

          // Support: IE <=11 only
          // An input loses its value after becoming a radio
          input = document.createElement("input");
          input.value = "t";
          input.type = "radio";
          support.radioValue = input.value === "t";
        })();
        var boolHook,
          attrHandle = _jQuery2.expr.attrHandle;
        _jQuery2.fn.extend({
          attr: function attr(name, value) {
            return _access(this, _jQuery2.attr, name, value, arguments.length > 1);
          },
          removeAttr: function removeAttr(name) {
            return this.each(function () {
              _jQuery2.removeAttr(this, name);
            });
          }
        });
        _jQuery2.extend({
          attr: function attr(elem, name, value) {
            var ret,
              hooks,
              nType = elem.nodeType;

            // Don't get/set attributes on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }

            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === "undefined") {
              return _jQuery2.prop(elem, name, value);
            }

            // Attribute hooks are determined by the lowercase version
            // Grab necessary hook if one is defined
            if (nType !== 1 || !_jQuery2.isXMLDoc(elem)) {
              hooks = _jQuery2.attrHooks[name.toLowerCase()] || (_jQuery2.expr.match.bool.test(name) ? boolHook : undefined);
            }
            if (value !== undefined) {
              if (value === null) {
                _jQuery2.removeAttr(elem, name);
                return;
              }
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                return ret;
              }
              elem.setAttribute(name, value + "");
              return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            ret = _jQuery2.find.attr(elem, name);

            // Non-existent attributes return null, we normalize to undefined
            return ret == null ? undefined : ret;
          },
          attrHooks: {
            type: {
              set: function set(elem, value) {
                if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                  var val = elem.value;
                  elem.setAttribute("type", value);
                  if (val) {
                    elem.value = val;
                  }
                  return value;
                }
              }
            }
          },
          removeAttr: function removeAttr(elem, value) {
            var name,
              i = 0,
              // Attribute names can contain non-HTML whitespace characters
              // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
              attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
              while (name = attrNames[i++]) {
                elem.removeAttribute(name);
              }
            }
          }
        });

        // Hooks for boolean attributes
        boolHook = {
          set: function set(elem, value, name) {
            if (value === false) {
              // Remove boolean attributes when set to false
              _jQuery2.removeAttr(elem, name);
            } else {
              elem.setAttribute(name, name);
            }
            return name;
          }
        };
        _jQuery2.each(_jQuery2.expr.match.bool.source.match(/\w+/g), function (_i, name) {
          var getter = attrHandle[name] || _jQuery2.find.attr;
          attrHandle[name] = function (elem, name, isXML) {
            var ret,
              handle,
              lowercaseName = name.toLowerCase();
            if (!isXML) {
              // Avoid an infinite loop by temporarily removing this function from the getter
              handle = attrHandle[lowercaseName];
              attrHandle[lowercaseName] = ret;
              ret = getter(elem, name, isXML) != null ? lowercaseName : null;
              attrHandle[lowercaseName] = handle;
            }
            return ret;
          };
        });
        var rfocusable = /^(?:input|select|textarea|button)$/i,
          rclickable = /^(?:a|area)$/i;
        _jQuery2.fn.extend({
          prop: function prop(name, value) {
            return _access(this, _jQuery2.prop, name, value, arguments.length > 1);
          },
          removeProp: function removeProp(name) {
            return this.each(function () {
              delete this[_jQuery2.propFix[name] || name];
            });
          }
        });
        _jQuery2.extend({
          prop: function prop(elem, name, value) {
            var ret,
              hooks,
              nType = elem.nodeType;

            // Don't get/set properties on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (nType !== 1 || !_jQuery2.isXMLDoc(elem)) {
              // Fix name and attach hooks
              name = _jQuery2.propFix[name] || name;
              hooks = _jQuery2.propHooks[name];
            }
            if (value !== undefined) {
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                return ret;
              }
              return elem[name] = value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            return elem[name];
          },
          propHooks: {
            tabIndex: {
              get: function get(elem) {
                // Support: IE <=9 - 11 only
                // elem.tabIndex doesn't always return the
                // correct value when it hasn't been explicitly set
                // Use proper attribute retrieval (trac-12072)
                var tabindex = _jQuery2.find.attr(elem, "tabindex");
                if (tabindex) {
                  return parseInt(tabindex, 10);
                }
                if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                  return 0;
                }
                return -1;
              }
            }
          },
          propFix: {
            "for": "htmlFor",
            "class": "className"
          }
        });

        // Support: IE <=11 only
        // Accessing the selectedIndex property
        // forces the browser to respect setting selected
        // on the option
        // The getter ensures a default option is selected
        // when in an optgroup
        // eslint rule "no-unused-expressions" is disabled for this code
        // since it considers such accessions noop
        if (!support.optSelected) {
          _jQuery2.propHooks.selected = {
            get: function get(elem) {
              /* eslint no-unused-expressions: "off" */

              var parent = elem.parentNode;
              if (parent && parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
              return null;
            },
            set: function set(elem) {
              /* eslint no-unused-expressions: "off" */

              var parent = elem.parentNode;
              if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) {
                  parent.parentNode.selectedIndex;
                }
              }
            }
          };
        }
        _jQuery2.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
          _jQuery2.propFix[this.toLowerCase()] = this;
        });

        // Strip and collapse whitespace according to HTML spec
        // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
        function stripAndCollapse(value) {
          var tokens = value.match(rnothtmlwhite) || [];
          return tokens.join(" ");
        }
        function getClass(elem) {
          return elem.getAttribute && elem.getAttribute("class") || "";
        }
        function classesToArray(value) {
          if (Array.isArray(value)) {
            return value;
          }
          if (typeof value === "string") {
            return value.match(rnothtmlwhite) || [];
          }
          return [];
        }
        _jQuery2.fn.extend({
          addClass: function addClass(value) {
            var classNames, cur, curValue, className, i, finalValue;
            if (isFunction(value)) {
              return this.each(function (j) {
                _jQuery2(this).addClass(value.call(this, j, getClass(this)));
              });
            }
            classNames = classesToArray(value);
            if (classNames.length) {
              return this.each(function () {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i = 0; i < classNames.length; i++) {
                    className = classNames[i];
                    if (cur.indexOf(" " + className + " ") < 0) {
                      cur += className + " ";
                    }
                  }

                  // Only assign if different to avoid unneeded rendering.
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          removeClass: function removeClass(value) {
            var classNames, cur, curValue, className, i, finalValue;
            if (isFunction(value)) {
              return this.each(function (j) {
                _jQuery2(this).removeClass(value.call(this, j, getClass(this)));
              });
            }
            if (!arguments.length) {
              return this.attr("class", "");
            }
            classNames = classesToArray(value);
            if (classNames.length) {
              return this.each(function () {
                curValue = getClass(this);

                // This expression is here for better compressibility (see addClass)
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i = 0; i < classNames.length; i++) {
                    className = classNames[i];

                    // Remove *all* instances
                    while (cur.indexOf(" " + className + " ") > -1) {
                      cur = cur.replace(" " + className + " ", " ");
                    }
                  }

                  // Only assign if different to avoid unneeded rendering.
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          toggleClass: function toggleClass(value, stateVal) {
            var classNames,
              className,
              i,
              self,
              type = _typeof(value),
              isValidValue = type === "string" || Array.isArray(value);
            if (isFunction(value)) {
              return this.each(function (i) {
                _jQuery2(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
              });
            }
            if (typeof stateVal === "boolean" && isValidValue) {
              return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            classNames = classesToArray(value);
            return this.each(function () {
              if (isValidValue) {
                // Toggle individual class names
                self = _jQuery2(this);
                for (i = 0; i < classNames.length; i++) {
                  className = classNames[i];

                  // Check each className given, space separated list
                  if (self.hasClass(className)) {
                    self.removeClass(className);
                  } else {
                    self.addClass(className);
                  }
                }

                // Toggle whole class name
              } else if (value === undefined || type === "boolean") {
                className = getClass(this);
                if (className) {
                  // Store className if set
                  dataPriv.set(this, "__className__", className);
                }

                // If the element has a class name or if we're passed `false`,
                // then remove the whole classname (if there was one, the above saved it).
                // Otherwise bring back whatever was previously saved (if anything),
                // falling back to the empty string if nothing was stored.
                if (this.setAttribute) {
                  this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
                }
              }
            });
          },
          hasClass: function hasClass(selector) {
            var className,
              elem,
              i = 0;
            className = " " + selector + " ";
            while (elem = this[i++]) {
              if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                return true;
              }
            }
            return false;
          }
        });
        var rreturn = /\r/g;
        _jQuery2.fn.extend({
          val: function val(value) {
            var hooks,
              ret,
              valueIsFunction,
              elem = this[0];
            if (!arguments.length) {
              if (elem) {
                hooks = _jQuery2.valHooks[elem.type] || _jQuery2.valHooks[elem.nodeName.toLowerCase()];
                if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                  return ret;
                }
                ret = elem.value;

                // Handle most common string cases
                if (typeof ret === "string") {
                  return ret.replace(rreturn, "");
                }

                // Handle cases where value is null/undef or number
                return ret == null ? "" : ret;
              }
              return;
            }
            valueIsFunction = isFunction(value);
            return this.each(function (i) {
              var val;
              if (this.nodeType !== 1) {
                return;
              }
              if (valueIsFunction) {
                val = value.call(this, i, _jQuery2(this).val());
              } else {
                val = value;
              }

              // Treat null/undefined as ""; convert numbers to string
              if (val == null) {
                val = "";
              } else if (typeof val === "number") {
                val += "";
              } else if (Array.isArray(val)) {
                val = _jQuery2.map(val, function (value) {
                  return value == null ? "" : value + "";
                });
              }
              hooks = _jQuery2.valHooks[this.type] || _jQuery2.valHooks[this.nodeName.toLowerCase()];

              // If set returns undefined, fall back to normal setting
              if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                this.value = val;
              }
            });
          }
        });
        _jQuery2.extend({
          valHooks: {
            option: {
              get: function get(elem) {
                var val = _jQuery2.find.attr(elem, "value");
                return val != null ? val :
                // Support: IE <=10 - 11 only
                // option.text throws exceptions (trac-14686, trac-14858)
                // Strip and collapse whitespace
                // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                stripAndCollapse(_jQuery2.text(elem));
              }
            },
            select: {
              get: function get(elem) {
                var value,
                  option,
                  i,
                  options = elem.options,
                  index = elem.selectedIndex,
                  one = elem.type === "select-one",
                  values = one ? null : [],
                  max = one ? index + 1 : options.length;
                if (index < 0) {
                  i = max;
                } else {
                  i = one ? index : 0;
                }

                // Loop through all the selected options
                for (; i < max; i++) {
                  option = options[i];

                  // Support: IE <=9 only
                  // IE8-9 doesn't update selected after form reset (trac-2551)
                  if ((option.selected || i === index) &&
                  // Don't return options that are disabled or in a disabled optgroup
                  !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                    // Get the specific value for the option
                    value = _jQuery2(option).val();

                    // We don't need an array for one selects
                    if (one) {
                      return value;
                    }

                    // Multi-Selects return an array
                    values.push(value);
                  }
                }
                return values;
              },
              set: function set(elem, value) {
                var optionSet,
                  option,
                  options = elem.options,
                  values = _jQuery2.makeArray(value),
                  i = options.length;
                while (i--) {
                  option = options[i];

                  /* eslint-disable no-cond-assign */

                  if (option.selected = _jQuery2.inArray(_jQuery2.valHooks.option.get(option), values) > -1) {
                    optionSet = true;
                  }

                  /* eslint-enable no-cond-assign */
                }

                // Force browsers to behave consistently when non-matching value is set
                if (!optionSet) {
                  elem.selectedIndex = -1;
                }
                return values;
              }
            }
          }
        });

        // Radios and checkboxes getter/setter
        _jQuery2.each(["radio", "checkbox"], function () {
          _jQuery2.valHooks[this] = {
            set: function set(elem, value) {
              if (Array.isArray(value)) {
                return elem.checked = _jQuery2.inArray(_jQuery2(elem).val(), value) > -1;
              }
            }
          };
          if (!support.checkOn) {
            _jQuery2.valHooks[this].get = function (elem) {
              return elem.getAttribute("value") === null ? "on" : elem.value;
            };
          }
        });

        // Return jQuery for attributes-only inclusion
        var location = window.location;
        var nonce = {
          guid: Date.now()
        };
        var rquery = /\?/;

        // Cross-browser xml parsing
        _jQuery2.parseXML = function (data) {
          var xml, parserErrorElem;
          if (!data || typeof data !== "string") {
            return null;
          }

          // Support: IE 9 - 11 only
          // IE throws on parseFromString with invalid input.
          try {
            xml = new window.DOMParser().parseFromString(data, "text/xml");
          } catch (e) {}
          parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
          if (!xml || parserErrorElem) {
            _jQuery2.error("Invalid XML: " + (parserErrorElem ? _jQuery2.map(parserErrorElem.childNodes, function (el) {
              return el.textContent;
            }).join("\n") : data));
          }
          return xml;
        };
        var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
          stopPropagationCallback = function stopPropagationCallback(e) {
            e.stopPropagation();
          };
        _jQuery2.extend(_jQuery2.event, {
          trigger: function trigger(event, data, elem, onlyHandlers) {
            var i,
              cur,
              tmp,
              bubbleType,
              ontype,
              handle,
              special,
              lastElement,
              eventPath = [elem || document],
              type = hasOwn.call(event, "type") ? event.type : event,
              namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document;

            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) {
              return;
            }

            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + _jQuery2.event.triggered)) {
              return;
            }
            if (type.indexOf(".") > -1) {
              // Namespaced trigger; create a regexp to match event type in handle()
              namespaces = type.split(".");
              type = namespaces.shift();
              namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;

            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[_jQuery2.expando] ? event : new _jQuery2.Event(type, _typeof(event) === "object" && event);

            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) {
              event.target = elem;
            }

            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ? [event] : _jQuery2.makeArray(data, [event]);

            // Allow special events to draw outside the lines
            special = _jQuery2.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
              return;
            }

            // Determine event propagation path in advance, per W3C events spec (trac-9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
              bubbleType = special.delegateType || type;
              if (!rfocusMorph.test(bubbleType + type)) {
                cur = cur.parentNode;
              }
              for (; cur; cur = cur.parentNode) {
                eventPath.push(cur);
                tmp = cur;
              }

              // Only add window if we got to document (e.g., not plain obj or detached DOM)
              if (tmp === (elem.ownerDocument || document)) {
                eventPath.push(tmp.defaultView || tmp.parentWindow || window);
              }
            }

            // Fire handlers on the event path
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
              lastElement = cur;
              event.type = i > 1 ? bubbleType : special.bindType || type;

              // jQuery handler
              handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");
              if (handle) {
                handle.apply(cur, data);
              }

              // Native handler
              handle = ontype && cur[ontype];
              if (handle && handle.apply && acceptData(cur)) {
                event.result = handle.apply(cur, data);
                if (event.result === false) {
                  event.preventDefault();
                }
              }
            }
            event.type = type;

            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {
              if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                // Call a native DOM method on the target with the same name as the event.
                // Don't do default actions on window, that's where global variables be (trac-6170)
                if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                  // Don't re-trigger an onFOO event when we call its FOO() method
                  tmp = elem[ontype];
                  if (tmp) {
                    elem[ontype] = null;
                  }

                  // Prevent re-triggering of the same event, since we already bubbled it above
                  _jQuery2.event.triggered = type;
                  if (event.isPropagationStopped()) {
                    lastElement.addEventListener(type, stopPropagationCallback);
                  }
                  elem[type]();
                  if (event.isPropagationStopped()) {
                    lastElement.removeEventListener(type, stopPropagationCallback);
                  }
                  _jQuery2.event.triggered = undefined;
                  if (tmp) {
                    elem[ontype] = tmp;
                  }
                }
              }
            }
            return event.result;
          },
          // Piggyback on a donor event to simulate a different one
          // Used only for `focus(in | out)` events
          simulate: function simulate(type, elem, event) {
            var e = _jQuery2.extend(new _jQuery2.Event(), event, {
              type: type,
              isSimulated: true
            });
            _jQuery2.event.trigger(e, null, elem);
          }
        });
        _jQuery2.fn.extend({
          trigger: function trigger(type, data) {
            return this.each(function () {
              _jQuery2.event.trigger(type, data, this);
            });
          },
          triggerHandler: function triggerHandler(type, data) {
            var elem = this[0];
            if (elem) {
              return _jQuery2.event.trigger(type, data, elem, true);
            }
          }
        });
        var rbracket = /\[\]$/,
          rCRLF = /\r?\n/g,
          rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
          rsubmittable = /^(?:input|select|textarea|keygen)/i;
        function buildParams(prefix, obj, traditional, add) {
          var name;
          if (Array.isArray(obj)) {
            // Serialize array item.
            _jQuery2.each(obj, function (i, v) {
              if (traditional || rbracket.test(prefix)) {
                // Treat each array item as a scalar.
                add(prefix, v);
              } else {
                // Item is non-scalar (array or object), encode its numeric index.
                buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
              }
            });
          } else if (!traditional && toType(obj) === "object") {
            // Serialize object item.
            for (name in obj) {
              buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
          } else {
            // Serialize scalar item.
            add(prefix, obj);
          }
        }

        // Serialize an array of form elements or a set of
        // key/values into a query string
        _jQuery2.param = function (a, traditional) {
          var prefix,
            s = [],
            add = function add(key, valueOrFunction) {
              // If value is a function, invoke it and use its return value
              var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
              s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
            };
          if (a == null) {
            return "";
          }

          // If an array was passed in, assume that it is an array of form elements.
          if (Array.isArray(a) || a.jquery && !_jQuery2.isPlainObject(a)) {
            // Serialize the form elements
            _jQuery2.each(a, function () {
              add(this.name, this.value);
            });
          } else {
            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for (prefix in a) {
              buildParams(prefix, a[prefix], traditional, add);
            }
          }

          // Return the resulting serialization
          return s.join("&");
        };
        _jQuery2.fn.extend({
          serialize: function serialize() {
            return _jQuery2.param(this.serializeArray());
          },
          serializeArray: function serializeArray() {
            return this.map(function () {
              // Can add propHook for "elements" to filter or add form elements
              var elements = _jQuery2.prop(this, "elements");
              return elements ? _jQuery2.makeArray(elements) : this;
            }).filter(function () {
              var type = this.type;

              // Use .is( ":disabled" ) so that fieldset[disabled] works
              return this.name && !_jQuery2(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function (_i, elem) {
              var val = _jQuery2(this).val();
              if (val == null) {
                return null;
              }
              if (Array.isArray(val)) {
                return _jQuery2.map(val, function (val) {
                  return {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                  };
                });
              }
              return {
                name: elem.name,
                value: val.replace(rCRLF, "\r\n")
              };
            }).get();
          }
        });
        var r20 = /%20/g,
          rhash = /#.*$/,
          rantiCache = /([?&])_=[^&]*/,
          rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
          // trac-7653, trac-8125, trac-8152: local protocol detection
          rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
          rnoContent = /^(?:GET|HEAD)$/,
          rprotocol = /^\/\//,
          /* Prefilters
           * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
           * 2) These are called:
           *    - BEFORE asking for a transport
           *    - AFTER param serialization (s.data is a string if s.processData is true)
           * 3) key is the dataType
           * 4) the catchall symbol "*" can be used
           * 5) execution will start with transport dataType and THEN continue down to "*" if needed
           */
          prefilters = {},
          /* Transports bindings
           * 1) key is the dataType
           * 2) the catchall symbol "*" can be used
           * 3) selection will start with transport dataType and THEN go to "*" if needed
           */
          transports = {},
          // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
          allTypes = "*/".concat("*"),
          // Anchor tag for parsing the document origin
          originAnchor = document.createElement("a");
        originAnchor.href = location.href;

        // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
        function addToPrefiltersOrTransports(structure) {
          // dataTypeExpression is optional and defaults to "*"
          return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
              func = dataTypeExpression;
              dataTypeExpression = "*";
            }
            var dataType,
              i = 0,
              dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
              // For each dataType in the dataTypeExpression
              while (dataType = dataTypes[i++]) {
                // Prepend if requested
                if (dataType[0] === "+") {
                  dataType = dataType.slice(1) || "*";
                  (structure[dataType] = structure[dataType] || []).unshift(func);

                  // Otherwise append
                } else {
                  (structure[dataType] = structure[dataType] || []).push(func);
                }
              }
            }
          };
        }

        // Base inspection function for prefilters and transports
        function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
          var inspected = {},
            seekingTransport = structure === transports;
          function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            _jQuery2.each(structure[dataType] || [], function (_, prefilterOrFactory) {
              var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
              if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                options.dataTypes.unshift(dataTypeOrTransport);
                inspect(dataTypeOrTransport);
                return false;
              } else if (seekingTransport) {
                return !(selected = dataTypeOrTransport);
              }
            });
            return selected;
          }
          return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
        }

        // A special extend for ajax options
        // that takes "flat" options (not to be deep extended)
        // Fixes trac-9887
        function ajaxExtend(target, src) {
          var key,
            deep,
            flatOptions = _jQuery2.ajaxSettings.flatOptions || {};
          for (key in src) {
            if (src[key] !== undefined) {
              (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
          }
          if (deep) {
            _jQuery2.extend(true, target, deep);
          }
          return target;
        }

        /* Handles responses to an ajax request:
         * - finds the right dataType (mediates between content-type and expected dataType)
         * - returns the corresponding response
         */
        function ajaxHandleResponses(s, jqXHR, responses) {
          var ct,
            type,
            finalDataType,
            firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes;

          // Remove auto dataType and get content-type in the process
          while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
              ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
          }

          // Check if we're dealing with a known content-type
          if (ct) {
            for (type in contents) {
              if (contents[type] && contents[type].test(ct)) {
                dataTypes.unshift(type);
                break;
              }
            }
          }

          // Check to see if we have a response for the expected dataType
          if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
          } else {
            // Try convertible dataTypes
            for (type in responses) {
              if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                finalDataType = type;
                break;
              }
              if (!firstDataType) {
                firstDataType = type;
              }
            }

            // Or just use first one
            finalDataType = finalDataType || firstDataType;
          }

          // If we found a dataType
          // We add the dataType to the list if needed
          // and return the corresponding response
          if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
              dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
          }
        }

        /* Chain conversions given the request and the original response
         * Also sets the responseXXX fields on the jqXHR instance
         */
        function ajaxConvert(s, response, jqXHR, isSuccess) {
          var conv2,
            current,
            conv,
            tmp,
            prev,
            converters = {},
            // Work with a copy of dataTypes in case we need to modify it for conversion
            dataTypes = s.dataTypes.slice();

          // Create converters map with lowercased keys
          if (dataTypes[1]) {
            for (conv in s.converters) {
              converters[conv.toLowerCase()] = s.converters[conv];
            }
          }
          current = dataTypes.shift();

          // Convert to each sequential dataType
          while (current) {
            if (s.responseFields[current]) {
              jqXHR[s.responseFields[current]] = response;
            }

            // Apply the dataFilter if provided
            if (!prev && isSuccess && s.dataFilter) {
              response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
              // There's only work to do if current dataType is non-auto
              if (current === "*") {
                current = prev;

                // Convert response if prev dataType is non-auto and differs from current
              } else if (prev !== "*" && prev !== current) {
                // Seek a direct converter
                conv = converters[prev + " " + current] || converters["* " + current];

                // If none found, seek a pair
                if (!conv) {
                  for (conv2 in converters) {
                    // If conv2 outputs current
                    tmp = conv2.split(" ");
                    if (tmp[1] === current) {
                      // If prev can be converted to accepted input
                      conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                      if (conv) {
                        // Condense equivalence converters
                        if (conv === true) {
                          conv = converters[conv2];

                          // Otherwise, insert the intermediate dataType
                        } else if (converters[conv2] !== true) {
                          current = tmp[0];
                          dataTypes.unshift(tmp[1]);
                        }
                        break;
                      }
                    }
                  }
                }

                // Apply converter (if not an equivalence)
                if (conv !== true) {
                  // Unless errors are allowed to bubble, catch and return them
                  if (conv && s.throws) {
                    response = conv(response);
                  } else {
                    try {
                      response = conv(response);
                    } catch (e) {
                      return {
                        state: "parsererror",
                        error: conv ? e : "No conversion from " + prev + " to " + current
                      };
                    }
                  }
                }
              }
            }
          }
          return {
            state: "success",
            data: response
          };
        }
        _jQuery2.extend({
          // Counter for holding the number of active queries
          active: 0,
          // Last-Modified header cache for next request
          lastModified: {},
          etag: {},
          ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */

            accepts: {
              "*": allTypes,
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript"
            },
            contents: {
              xml: /\bxml\b/,
              html: /\bhtml/,
              json: /\bjson\b/
            },
            responseFields: {
              xml: "responseXML",
              text: "responseText",
              json: "responseJSON"
            },
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
              // Convert anything to text
              "* text": String,
              // Text to html (true = no transformation)
              "text html": true,
              // Evaluate text as a json expression
              "text json": JSON.parse,
              // Parse text as xml
              "text xml": _jQuery2.parseXML
            },
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
              url: true,
              context: true
            }
          },
          // Creates a full fledged settings object into target
          // with both ajaxSettings and settings fields.
          // If target is omitted, writes into ajaxSettings.
          ajaxSetup: function ajaxSetup(target, settings) {
            return settings ?
            // Building a settings object
            ajaxExtend(ajaxExtend(target, _jQuery2.ajaxSettings), settings) :
            // Extending ajaxSettings
            ajaxExtend(_jQuery2.ajaxSettings, target);
          },
          ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
          ajaxTransport: addToPrefiltersOrTransports(transports),
          // Main method
          ajax: function ajax(url, options) {
            // If url is an object, simulate pre-1.5 signature
            if (_typeof(url) === "object") {
              options = url;
              url = undefined;
            }

            // Force options to be an object
            options = options || {};
            var transport,
              // URL without anti-cache param
              cacheURL,
              // Response headers
              responseHeadersString,
              responseHeaders,
              // timeout handle
              timeoutTimer,
              // Url cleanup var
              urlAnchor,
              // Request state (becomes false upon send and true upon completion)
              completed,
              // To know if global events are to be dispatched
              fireGlobals,
              // Loop variable
              i,
              // uncached part of the url
              uncached,
              // Create the final options object
              s = _jQuery2.ajaxSetup({}, options),
              // Callbacks context
              callbackContext = s.context || s,
              // Context for global events is callbackContext if it is a DOM node or jQuery collection
              globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? _jQuery2(callbackContext) : _jQuery2.event,
              // Deferreds
              deferred = _jQuery2.Deferred(),
              completeDeferred = _jQuery2.Callbacks("once memory"),
              // Status-dependent callbacks
              _statusCode = s.statusCode || {},
              // Headers (they are sent all at once)
              requestHeaders = {},
              requestHeadersNames = {},
              // Default abort message
              strAbort = "canceled",
              // Fake xhr
              jqXHR = {
                readyState: 0,
                // Builds headers hashtable if needed
                getResponseHeader: function getResponseHeader(key) {
                  var match;
                  if (completed) {
                    if (!responseHeaders) {
                      responseHeaders = {};
                      while (match = rheaders.exec(responseHeadersString)) {
                        responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                      }
                    }
                    match = responseHeaders[key.toLowerCase() + " "];
                  }
                  return match == null ? null : match.join(", ");
                },
                // Raw string
                getAllResponseHeaders: function getAllResponseHeaders() {
                  return completed ? responseHeadersString : null;
                },
                // Caches the header
                setRequestHeader: function setRequestHeader(name, value) {
                  if (completed == null) {
                    name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                    requestHeaders[name] = value;
                  }
                  return this;
                },
                // Overrides response content-type header
                overrideMimeType: function overrideMimeType(type) {
                  if (completed == null) {
                    s.mimeType = type;
                  }
                  return this;
                },
                // Status-dependent callbacks
                statusCode: function statusCode(map) {
                  var code;
                  if (map) {
                    if (completed) {
                      // Execute the appropriate callbacks
                      jqXHR.always(map[jqXHR.status]);
                    } else {
                      // Lazy-add the new callbacks in a way that preserves old ones
                      for (code in map) {
                        _statusCode[code] = [_statusCode[code], map[code]];
                      }
                    }
                  }
                  return this;
                },
                // Cancel the request
                abort: function abort(statusText) {
                  var finalText = statusText || strAbort;
                  if (transport) {
                    transport.abort(finalText);
                  }
                  done(0, finalText);
                  return this;
                }
              };

            // Attach deferreds
            deferred.promise(jqXHR);

            // Add protocol if not provided (prefilters might expect it)
            // Handle falsy url in the settings object (trac-10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

            // Alias method option to type as per ticket trac-12004
            s.type = options.method || options.type || s.method || s.type;

            // Extract dataTypes list
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

            // A cross-domain request is in order when the origin doesn't match the current origin.
            if (s.crossDomain == null) {
              urlAnchor = document.createElement("a");

              // Support: IE <=8 - 11, Edge 12 - 15
              // IE throws exception on accessing the href property if url is malformed,
              // e.g. http://example.com:80x/
              try {
                urlAnchor.href = s.url;

                // Support: IE <=8 - 11 only
                // Anchor's host property isn't correctly set when s.url is relative
                urlAnchor.href = urlAnchor.href;
                s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
              } catch (e) {
                // If there is an error parsing the URL, assume it is crossDomain,
                // it can be rejected by the transport if it is invalid
                s.crossDomain = true;
              }
            }

            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") {
              s.data = _jQuery2.param(s.data, s.traditional);
            }

            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

            // If request was aborted inside a prefilter, stop there
            if (completed) {
              return jqXHR;
            }

            // We can fire global events as of now if asked to
            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
            fireGlobals = _jQuery2.event && s.global;

            // Watch for a new set of requests
            if (fireGlobals && _jQuery2.active++ === 0) {
              _jQuery2.event.trigger("ajaxStart");
            }

            // Uppercase the type
            s.type = s.type.toUpperCase();

            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);

            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            // Remove hash to simplify url manipulation
            cacheURL = s.url.replace(rhash, "");

            // More options handling for requests with no content
            if (!s.hasContent) {
              // Remember the hash so we can put it back
              uncached = s.url.slice(cacheURL.length);

              // If data is available and should be processed, append data to url
              if (s.data && (s.processData || typeof s.data === "string")) {
                cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

                // trac-9682: remove data so that it's not used in an eventual retry
                delete s.data;
              }

              // Add or update anti-cache param if needed
              if (s.cache === false) {
                cacheURL = cacheURL.replace(rantiCache, "$1");
                uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
              }

              // Put hash and anti-cache on the URL that will be requested (gh-1732)
              s.url = cacheURL + uncached;

              // Change '%20' to '+' if this is encoded form body content (gh-2658)
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
              s.data = s.data.replace(r20, "+");
            }

            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
              if (_jQuery2.lastModified[cacheURL]) {
                jqXHR.setRequestHeader("If-Modified-Since", _jQuery2.lastModified[cacheURL]);
              }
              if (_jQuery2.etag[cacheURL]) {
                jqXHR.setRequestHeader("If-None-Match", _jQuery2.etag[cacheURL]);
              }
            }

            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
              jqXHR.setRequestHeader("Content-Type", s.contentType);
            }

            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

            // Check for headers option
            for (i in s.headers) {
              jqXHR.setRequestHeader(i, s.headers[i]);
            }

            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
              // Abort if not done already and return
              return jqXHR.abort();
            }

            // Aborting is no longer a cancellation
            strAbort = "abort";

            // Install callbacks on deferreds
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);

            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

            // If no transport, we auto-abort
            if (!transport) {
              done(-1, "No Transport");
            } else {
              jqXHR.readyState = 1;

              // Send global event
              if (fireGlobals) {
                globalEventContext.trigger("ajaxSend", [jqXHR, s]);
              }

              // If request was aborted inside ajaxSend, stop there
              if (completed) {
                return jqXHR;
              }

              // Timeout
              if (s.async && s.timeout > 0) {
                timeoutTimer = window.setTimeout(function () {
                  jqXHR.abort("timeout");
                }, s.timeout);
              }
              try {
                completed = false;
                transport.send(requestHeaders, done);
              } catch (e) {
                // Rethrow post-completion exceptions
                if (completed) {
                  throw e;
                }

                // Propagate others as results
                done(-1, e);
              }
            }

            // Callback for when everything is done
            function done(status, nativeStatusText, responses, headers) {
              var isSuccess,
                success,
                error,
                response,
                modified,
                statusText = nativeStatusText;

              // Ignore repeat invocations
              if (completed) {
                return;
              }
              completed = true;

              // Clear timeout if it exists
              if (timeoutTimer) {
                window.clearTimeout(timeoutTimer);
              }

              // Dereference transport for early garbage collection
              // (no matter how long the jqXHR object will be used)
              transport = undefined;

              // Cache response headers
              responseHeadersString = headers || "";

              // Set readyState
              jqXHR.readyState = status > 0 ? 4 : 0;

              // Determine if successful
              isSuccess = status >= 200 && status < 300 || status === 304;

              // Get response data
              if (responses) {
                response = ajaxHandleResponses(s, jqXHR, responses);
              }

              // Use a noop converter for missing script but not if jsonp
              if (!isSuccess && _jQuery2.inArray("script", s.dataTypes) > -1 && _jQuery2.inArray("json", s.dataTypes) < 0) {
                s.converters["text script"] = function () {};
              }

              // Convert no matter what (that way responseXXX fields are always set)
              response = ajaxConvert(s, response, jqXHR, isSuccess);

              // If successful, handle type chaining
              if (isSuccess) {
                // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                if (s.ifModified) {
                  modified = jqXHR.getResponseHeader("Last-Modified");
                  if (modified) {
                    _jQuery2.lastModified[cacheURL] = modified;
                  }
                  modified = jqXHR.getResponseHeader("etag");
                  if (modified) {
                    _jQuery2.etag[cacheURL] = modified;
                  }
                }

                // if no content
                if (status === 204 || s.type === "HEAD") {
                  statusText = "nocontent";

                  // if not modified
                } else if (status === 304) {
                  statusText = "notmodified";

                  // If we have data, let's convert it
                } else {
                  statusText = response.state;
                  success = response.data;
                  error = response.error;
                  isSuccess = !error;
                }
              } else {
                // Extract error from statusText and normalize for non-aborts
                error = statusText;
                if (status || !statusText) {
                  statusText = "error";
                  if (status < 0) {
                    status = 0;
                  }
                }
              }

              // Set data for the fake xhr object
              jqXHR.status = status;
              jqXHR.statusText = (nativeStatusText || statusText) + "";

              // Success/Error
              if (isSuccess) {
                deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
              } else {
                deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
              }

              // Status-dependent callbacks
              jqXHR.statusCode(_statusCode);
              _statusCode = undefined;
              if (fireGlobals) {
                globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
              }

              // Complete
              completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
              if (fireGlobals) {
                globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

                // Handle the global AJAX counter
                if (! --_jQuery2.active) {
                  _jQuery2.event.trigger("ajaxStop");
                }
              }
            }
            return jqXHR;
          },
          getJSON: function getJSON(url, data, callback) {
            return _jQuery2.get(url, data, callback, "json");
          },
          getScript: function getScript(url, callback) {
            return _jQuery2.get(url, undefined, callback, "script");
          }
        });
        _jQuery2.each(["get", "post"], function (_i, method) {
          _jQuery2[method] = function (url, data, callback, type) {
            // Shift arguments if data argument was omitted
            if (isFunction(data)) {
              type = type || callback;
              callback = data;
              data = undefined;
            }

            // The url can be an options object (which then must have .url)
            return _jQuery2.ajax(_jQuery2.extend({
              url: url,
              type: method,
              dataType: type,
              data: data,
              success: callback
            }, _jQuery2.isPlainObject(url) && url));
          };
        });
        _jQuery2.ajaxPrefilter(function (s) {
          var i;
          for (i in s.headers) {
            if (i.toLowerCase() === "content-type") {
              s.contentType = s.headers[i] || "";
            }
          }
        });
        _jQuery2._evalUrl = function (url, options, doc) {
          return _jQuery2.ajax({
            url: url,
            // Make this explicit, since user can override this through ajaxSetup (trac-11264)
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            // Only evaluate the response if it is successful (gh-4126)
            // dataFilter is not invoked for failure responses, so using it instead
            // of the default converter is kludgy but it works.
            converters: {
              "text script": function text_script() {}
            },
            dataFilter: function dataFilter(response) {
              _jQuery2.globalEval(response, options, doc);
            }
          });
        };
        _jQuery2.fn.extend({
          wrapAll: function wrapAll(html) {
            var wrap;
            if (this[0]) {
              if (isFunction(html)) {
                html = html.call(this[0]);
              }

              // The elements to wrap the target around
              wrap = _jQuery2(html, this[0].ownerDocument).eq(0).clone(true);
              if (this[0].parentNode) {
                wrap.insertBefore(this[0]);
              }
              wrap.map(function () {
                var elem = this;
                while (elem.firstElementChild) {
                  elem = elem.firstElementChild;
                }
                return elem;
              }).append(this);
            }
            return this;
          },
          wrapInner: function wrapInner(html) {
            if (isFunction(html)) {
              return this.each(function (i) {
                _jQuery2(this).wrapInner(html.call(this, i));
              });
            }
            return this.each(function () {
              var self = _jQuery2(this),
                contents = self.contents();
              if (contents.length) {
                contents.wrapAll(html);
              } else {
                self.append(html);
              }
            });
          },
          wrap: function wrap(html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function (i) {
              _jQuery2(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
          },
          unwrap: function unwrap(selector) {
            this.parent(selector).not("body").each(function () {
              _jQuery2(this).replaceWith(this.childNodes);
            });
            return this;
          }
        });
        _jQuery2.expr.pseudos.hidden = function (elem) {
          return !_jQuery2.expr.pseudos.visible(elem);
        };
        _jQuery2.expr.pseudos.visible = function (elem) {
          return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
        };
        _jQuery2.ajaxSettings.xhr = function () {
          try {
            return new window.XMLHttpRequest();
          } catch (e) {}
        };
        var xhrSuccessStatus = {
            // File protocol always yields status code 0, assume 200
            0: 200,
            // Support: IE <=9 only
            // trac-1450: sometimes IE returns 1223 when it should be 204
            1223: 204
          },
          xhrSupported = _jQuery2.ajaxSettings.xhr();
        support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
        support.ajax = xhrSupported = !!xhrSupported;
        _jQuery2.ajaxTransport(function (options) {
          var _callback, errorCallback;

          // Cross domain only allowed if supported through XMLHttpRequest
          if (support.cors || xhrSupported && !options.crossDomain) {
            return {
              send: function send(headers, complete) {
                var i,
                  xhr = options.xhr();
                xhr.open(options.type, options.url, options.async, options.username, options.password);

                // Apply custom fields if provided
                if (options.xhrFields) {
                  for (i in options.xhrFields) {
                    xhr[i] = options.xhrFields[i];
                  }
                }

                // Override mime type if needed
                if (options.mimeType && xhr.overrideMimeType) {
                  xhr.overrideMimeType(options.mimeType);
                }

                // X-Requested-With header
                // For cross-domain requests, seeing as conditions for a preflight are
                // akin to a jigsaw puzzle, we simply never set it to be sure.
                // (it can always be set on a per-request basis or even using ajaxSetup)
                // For same-domain requests, won't change header if already provided.
                if (!options.crossDomain && !headers["X-Requested-With"]) {
                  headers["X-Requested-With"] = "XMLHttpRequest";
                }

                // Set headers
                for (i in headers) {
                  xhr.setRequestHeader(i, headers[i]);
                }

                // Callback
                _callback = function callback(type) {
                  return function () {
                    if (_callback) {
                      _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                      if (type === "abort") {
                        xhr.abort();
                      } else if (type === "error") {
                        // Support: IE <=9 only
                        // On a manual native abort, IE9 throws
                        // errors on any property access that is not readyState
                        if (typeof xhr.status !== "number") {
                          complete(0, "error");
                        } else {
                          complete(
                          // File: protocol always yields status 0; see trac-8605, trac-14207
                          xhr.status, xhr.statusText);
                        }
                      } else {
                        complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,
                        // Support: IE <=9 only
                        // IE9 has no XHR2 but throws on binary (trac-11426)
                        // For XHR2 non-text, let the caller handle it (gh-2498)
                        (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                          binary: xhr.response
                        } : {
                          text: xhr.responseText
                        }, xhr.getAllResponseHeaders());
                      }
                    }
                  };
                };

                // Listen to events
                xhr.onload = _callback();
                errorCallback = xhr.onerror = xhr.ontimeout = _callback("error");

                // Support: IE 9 only
                // Use onreadystatechange to replace onabort
                // to handle uncaught aborts
                if (xhr.onabort !== undefined) {
                  xhr.onabort = errorCallback;
                } else {
                  xhr.onreadystatechange = function () {
                    // Check readyState before timeout as it changes
                    if (xhr.readyState === 4) {
                      // Allow onerror to be called first,
                      // but that will not handle a native abort
                      // Also, save errorCallback to a variable
                      // as xhr.onerror cannot be accessed
                      window.setTimeout(function () {
                        if (_callback) {
                          errorCallback();
                        }
                      });
                    }
                  };
                }

                // Create the abort callback
                _callback = _callback("abort");
                try {
                  // Do send the request (this may raise an exception)
                  xhr.send(options.hasContent && options.data || null);
                } catch (e) {
                  // trac-14683: Only rethrow if this hasn't been notified as an error yet
                  if (_callback) {
                    throw e;
                  }
                }
              },
              abort: function abort() {
                if (_callback) {
                  _callback();
                }
              }
            };
          }
        });

        // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
        _jQuery2.ajaxPrefilter(function (s) {
          if (s.crossDomain) {
            s.contents.script = false;
          }
        });

        // Install script dataType
        _jQuery2.ajaxSetup({
          accepts: {
            script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
          },
          contents: {
            script: /\b(?:java|ecma)script\b/
          },
          converters: {
            "text script": function text_script(text) {
              _jQuery2.globalEval(text);
              return text;
            }
          }
        });

        // Handle cache's special case and crossDomain
        _jQuery2.ajaxPrefilter("script", function (s) {
          if (s.cache === undefined) {
            s.cache = false;
          }
          if (s.crossDomain) {
            s.type = "GET";
          }
        });

        // Bind script tag hack transport
        _jQuery2.ajaxTransport("script", function (s) {
          // This transport only deals with cross domain or forced-by-attrs requests
          if (s.crossDomain || s.scriptAttrs) {
            var script, _callback2;
            return {
              send: function send(_, complete) {
                script = _jQuery2("<script>").attr(s.scriptAttrs || {}).prop({
                  charset: s.scriptCharset,
                  src: s.url
                }).on("load error", _callback2 = function callback(evt) {
                  script.remove();
                  _callback2 = null;
                  if (evt) {
                    complete(evt.type === "error" ? 404 : 200, evt.type);
                  }
                });

                // Use native DOM manipulation to avoid our domManip AJAX trickery
                document.head.appendChild(script[0]);
              },
              abort: function abort() {
                if (_callback2) {
                  _callback2();
                }
              }
            };
          }
        });
        var oldCallbacks = [],
          rjsonp = /(=)\?(?=&|$)|\?\?/;

        // Default jsonp settings
        _jQuery2.ajaxSetup({
          jsonp: "callback",
          jsonpCallback: function jsonpCallback() {
            var callback = oldCallbacks.pop() || _jQuery2.expando + "_" + nonce.guid++;
            this[callback] = true;
            return callback;
          }
        });

        // Detect, normalize options and install callbacks for jsonp requests
        _jQuery2.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
          var callbackName,
            overwritten,
            responseContainer,
            jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

          // Handle iff the expected data type is "jsonp" or we have a parameter to set
          if (jsonProp || s.dataTypes[0] === "jsonp") {
            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

            // Insert callback into url or form data
            if (jsonProp) {
              s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
              s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }

            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function () {
              if (!responseContainer) {
                _jQuery2.error(callbackName + " was not called");
              }
              return responseContainer[0];
            };

            // Force json dataType
            s.dataTypes[0] = "json";

            // Install callback
            overwritten = window[callbackName];
            window[callbackName] = function () {
              responseContainer = arguments;
            };

            // Clean-up function (fires after converters)
            jqXHR.always(function () {
              // If previous value didn't exist - remove it
              if (overwritten === undefined) {
                _jQuery2(window).removeProp(callbackName);

                // Otherwise restore preexisting value
              } else {
                window[callbackName] = overwritten;
              }

              // Save back as free
              if (s[callbackName]) {
                // Make sure that re-using the options doesn't screw things around
                s.jsonpCallback = originalSettings.jsonpCallback;

                // Save the callback name for future use
                oldCallbacks.push(callbackName);
              }

              // Call if it was a function and we have a response
              if (responseContainer && isFunction(overwritten)) {
                overwritten(responseContainer[0]);
              }
              responseContainer = overwritten = undefined;
            });

            // Delegate to script
            return "script";
          }
        });

        // Support: Safari 8 only
        // In Safari 8 documents created via document.implementation.createHTMLDocument
        // collapse sibling forms: the second one becomes a child of the first one.
        // Because of that, this security measure has to be disabled in Safari 8.
        // https://bugs.webkit.org/show_bug.cgi?id=137337
        support.createHTMLDocument = function () {
          var body = document.implementation.createHTMLDocument("").body;
          body.innerHTML = "<form></form><form></form>";
          return body.childNodes.length === 2;
        }();

        // Argument "data" should be string of html
        // context (optional): If specified, the fragment will be created in this context,
        // defaults to document
        // keepScripts (optional): If true, will include scripts passed in the html string
        _jQuery2.parseHTML = function (data, context, keepScripts) {
          if (typeof data !== "string") {
            return [];
          }
          if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
          }
          var base, parsed, scripts;
          if (!context) {
            // Stop scripts or inline event handlers from being executed immediately
            // by using document.implementation
            if (support.createHTMLDocument) {
              context = document.implementation.createHTMLDocument("");

              // Set the base href for the created document
              // so any parsed elements with URLs
              // are based on the document's URL (gh-2965)
              base = context.createElement("base");
              base.href = document.location.href;
              context.head.appendChild(base);
            } else {
              context = document;
            }
          }
          parsed = rsingleTag.exec(data);
          scripts = !keepScripts && [];

          // Single tag
          if (parsed) {
            return [context.createElement(parsed[1])];
          }
          parsed = buildFragment([data], context, scripts);
          if (scripts && scripts.length) {
            _jQuery2(scripts).remove();
          }
          return _jQuery2.merge([], parsed.childNodes);
        };

        /**
         * Load a url into a page
         */
        _jQuery2.fn.load = function (url, params, callback) {
          var selector,
            type,
            response,
            self = this,
            off = url.indexOf(" ");
          if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
          }

          // If it's a function
          if (isFunction(params)) {
            // We assume that it's the callback
            callback = params;
            params = undefined;

            // Otherwise, build a param string
          } else if (params && _typeof(params) === "object") {
            type = "POST";
          }

          // If we have elements to modify, make the request
          if (self.length > 0) {
            _jQuery2.ajax({
              url: url,
              // If "type" variable is undefined, then "GET" method will be used.
              // Make value of this field explicit since
              // user can override it through ajaxSetup method
              type: type || "GET",
              dataType: "html",
              data: params
            }).done(function (responseText) {
              // Save response for use in complete callback
              response = arguments;
              self.html(selector ?
              // If a selector was specified, locate the right elements in a dummy div
              // Exclude scripts to avoid IE 'Permission Denied' errors
              _jQuery2("<div>").append(_jQuery2.parseHTML(responseText)).find(selector) :
              // Otherwise use the full result
              responseText);

              // If the request succeeds, this function gets "data", "status", "jqXHR"
              // but they are ignored because response was set above.
              // If it fails, this function gets "jqXHR", "status", "error"
            }).always(callback && function (jqXHR, status) {
              self.each(function () {
                callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
              });
            });
          }
          return this;
        };
        _jQuery2.expr.pseudos.animated = function (elem) {
          return _jQuery2.grep(_jQuery2.timers, function (fn) {
            return elem === fn.elem;
          }).length;
        };
        _jQuery2.offset = {
          setOffset: function setOffset(elem, options, i) {
            var curPosition,
              curLeft,
              curCSSTop,
              curTop,
              curOffset,
              curCSSLeft,
              calculatePosition,
              position = _jQuery2.css(elem, "position"),
              curElem = _jQuery2(elem),
              props = {};

            // Set position first, in-case top/left are set even on static elem
            if (position === "static") {
              elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = _jQuery2.css(elem, "top");
            curCSSLeft = _jQuery2.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

            // Need to be able to calculate position if either
            // top or left is auto and position is either absolute or fixed
            if (calculatePosition) {
              curPosition = curElem.position();
              curTop = curPosition.top;
              curLeft = curPosition.left;
            } else {
              curTop = parseFloat(curCSSTop) || 0;
              curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options)) {
              // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
              options = options.call(elem, i, _jQuery2.extend({}, curOffset));
            }
            if (options.top != null) {
              props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
              props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
              options.using.call(elem, props);
            } else {
              curElem.css(props);
            }
          }
        };
        _jQuery2.fn.extend({
          // offset() relates an element's border box to the document origin
          offset: function offset(options) {
            // Preserve chaining for setter
            if (arguments.length) {
              return options === undefined ? this : this.each(function (i) {
                _jQuery2.offset.setOffset(this, options, i);
              });
            }
            var rect,
              win,
              elem = this[0];
            if (!elem) {
              return;
            }

            // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
            // Support: IE <=11 only
            // Running getBoundingClientRect on a
            // disconnected node in IE throws an error
            if (!elem.getClientRects().length) {
              return {
                top: 0,
                left: 0
              };
            }

            // Get document-relative position by adding viewport scroll to viewport-relative gBCR
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
              top: rect.top + win.pageYOffset,
              left: rect.left + win.pageXOffset
            };
          },
          // position() relates an element's margin box to its offset parent's padding box
          // This corresponds to the behavior of CSS absolute positioning
          position: function position() {
            if (!this[0]) {
              return;
            }
            var offsetParent,
              offset,
              doc,
              elem = this[0],
              parentOffset = {
                top: 0,
                left: 0
              };

            // position:fixed elements are offset from the viewport, which itself always has zero offset
            if (_jQuery2.css(elem, "position") === "fixed") {
              // Assume position:fixed implies availability of getBoundingClientRect
              offset = elem.getBoundingClientRect();
            } else {
              offset = this.offset();

              // Account for the *real* offset parent, which can be the document or its root element
              // when a statically positioned element is identified
              doc = elem.ownerDocument;
              offsetParent = elem.offsetParent || doc.documentElement;
              while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && _jQuery2.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.parentNode;
              }
              if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                // Incorporate borders into its offset, since they are outside its content origin
                parentOffset = _jQuery2(offsetParent).offset();
                parentOffset.top += _jQuery2.css(offsetParent, "borderTopWidth", true);
                parentOffset.left += _jQuery2.css(offsetParent, "borderLeftWidth", true);
              }
            }

            // Subtract parent offsets and element margins
            return {
              top: offset.top - parentOffset.top - _jQuery2.css(elem, "marginTop", true),
              left: offset.left - parentOffset.left - _jQuery2.css(elem, "marginLeft", true)
            };
          },
          // This method will return documentElement in the following cases:
          // 1) For the element inside the iframe without offsetParent, this method will return
          //    documentElement of the parent window
          // 2) For the hidden or detached element
          // 3) For body or html element, i.e. in case of the html node - it will return itself
          //
          // but those exceptions were never presented as a real life use-cases
          // and might be considered as more preferable results.
          //
          // This logic, however, is not guaranteed and can change at any point in the future
          offsetParent: function offsetParent() {
            return this.map(function () {
              var offsetParent = this.offsetParent;
              while (offsetParent && _jQuery2.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.offsetParent;
              }
              return offsetParent || documentElement;
            });
          }
        });

        // Create scrollLeft and scrollTop methods
        _jQuery2.each({
          scrollLeft: "pageXOffset",
          scrollTop: "pageYOffset"
        }, function (method, prop) {
          var top = "pageYOffset" === prop;
          _jQuery2.fn[method] = function (val) {
            return _access(this, function (elem, method, val) {
              // Coalesce documents and windows
              var win;
              if (isWindow(elem)) {
                win = elem;
              } else if (elem.nodeType === 9) {
                win = elem.defaultView;
              }
              if (val === undefined) {
                return win ? win[prop] : elem[method];
              }
              if (win) {
                win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
              } else {
                elem[method] = val;
              }
            }, method, val, arguments.length);
          };
        });

        // Support: Safari <=7 - 9.1, Chrome <=37 - 49
        // Add the top/left cssHooks using jQuery.fn.position
        // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
        // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
        // getComputedStyle returns percent when specified for top/left/bottom/right;
        // rather than make the css module depend on the offset module, just check for it here
        _jQuery2.each(["top", "left"], function (_i, prop) {
          _jQuery2.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
            if (computed) {
              computed = curCSS(elem, prop);

              // If curCSS returns percentage, fallback to offset
              return rnumnonpx.test(computed) ? _jQuery2(elem).position()[prop] + "px" : computed;
            }
          });
        });

        // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
        _jQuery2.each({
          Height: "height",
          Width: "width"
        }, function (name, type) {
          _jQuery2.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
          }, function (defaultExtra, funcName) {
            // Margin is only for outerHeight, outerWidth
            _jQuery2.fn[funcName] = function (margin, value) {
              var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
              return _access(this, function (elem, type, value) {
                var doc;
                if (isWindow(elem)) {
                  // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                  return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                }

                // Get document width or height
                if (elem.nodeType === 9) {
                  doc = elem.documentElement;

                  // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                  // whichever is greatest
                  return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                }
                return value === undefined ?
                // Get width or height on the element, requesting but not forcing parseFloat
                _jQuery2.css(elem, type, extra) :
                // Set width or height on the element
                _jQuery2.style(elem, type, value, extra);
              }, type, chainable ? margin : undefined, chainable);
            };
          });
        });
        _jQuery2.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {
          _jQuery2.fn[type] = function (fn) {
            return this.on(type, fn);
          };
        });
        _jQuery2.fn.extend({
          bind: function bind(types, data, fn) {
            return this.on(types, null, data, fn);
          },
          unbind: function unbind(types, fn) {
            return this.off(types, null, fn);
          },
          delegate: function delegate(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
          },
          undelegate: function undelegate(selector, types, fn) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
          },
          hover: function hover(fnOver, fnOut) {
            return this.on("mouseenter", fnOver).on("mouseleave", fnOut || fnOver);
          }
        });
        _jQuery2.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {
          // Handle event binding
          _jQuery2.fn[name] = function (data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
          };
        });

        // Support: Android <=4.0 only
        // Make sure we trim BOM and NBSP
        // Require that the "whitespace run" starts from a non-whitespace
        // to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
        var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

        // Bind a function to a context, optionally partially applying any
        // arguments.
        // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
        // However, it is not slated for removal any time soon
        _jQuery2.proxy = function (fn, context) {
          var tmp, args, proxy;
          if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
          }

          // Quick check to determine if target is callable, in the spec
          // this throws a TypeError, but we will just return undefined.
          if (!isFunction(fn)) {
            return undefined;
          }

          // Simulated bind
          args = _slice.call(arguments, 2);
          proxy = function proxy() {
            return fn.apply(context || this, args.concat(_slice.call(arguments)));
          };

          // Set the guid of unique handler to the same of original handler, so it can be removed
          proxy.guid = fn.guid = fn.guid || _jQuery2.guid++;
          return proxy;
        };
        _jQuery2.holdReady = function (hold) {
          if (hold) {
            _jQuery2.readyWait++;
          } else {
            _jQuery2.ready(true);
          }
        };
        _jQuery2.isArray = Array.isArray;
        _jQuery2.parseJSON = JSON.parse;
        _jQuery2.nodeName = nodeName;
        _jQuery2.isFunction = isFunction;
        _jQuery2.isWindow = isWindow;
        _jQuery2.camelCase = camelCase;
        _jQuery2.type = toType;
        _jQuery2.now = Date.now;
        _jQuery2.isNumeric = function (obj) {
          // As of jQuery 3.0, isNumeric is limited to
          // strings and numbers (primitives or objects)
          // that can be coerced to finite numbers (gh-2662)
          var type = _jQuery2.type(obj);
          return (type === "number" || type === "string") &&
          // parseFloat NaNs numeric-cast false positives ("")
          // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
          // subtraction forces infinities to NaN
          !isNaN(obj - parseFloat(obj));
        };
        _jQuery2.trim = function (text) {
          return text == null ? "" : (text + "").replace(rtrim, "$1");
        };
        var
          // Map over jQuery in case of overwrite
          _jQuery = window.jQuery,
          // Map over the $ in case of overwrite
          _$ = window.$;
        _jQuery2.noConflict = function (deep) {
          if (window.$ === _jQuery2) {
            window.$ = _$;
          }
          if (deep && window.jQuery === _jQuery2) {
            window.jQuery = _jQuery;
          }
          return _jQuery2;
        };

        // Expose jQuery and $ identifiers, even in AMD
        // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
        // and CommonJS for browser emulators (trac-13566)
        if (typeof noGlobal === "undefined") {
          window.jQuery = window.$ = _jQuery2;
        }
        return _jQuery2;
      });
    })(jquery);
    return jquery.exports;
  }

  (function (module) {
    // Following the UMD template https://github.com/umdjs/umd/blob/master/templates/returnExportsGlobal.js
    (function (root, factory) {
      if (module.exports) {
        // Node / Browserify
        //isomorphic issue
        var jQuery = typeof window != 'undefined' ? window.jQuery : undefined;
        if (!jQuery) {
          jQuery = requireJquery();
          if (!jQuery.fn) jQuery.fn = {};
        }
        var moment = typeof window != 'undefined' && typeof window.moment != 'undefined' ? window.moment : momentExports;
        module.exports = factory(moment, jQuery);
      } else {
        // Browser globals
        root.daterangepicker = factory(root.moment, root.jQuery);
      }
    })(commonjsGlobal, function (moment, $) {
      var DateRangePicker = function DateRangePicker(element, options, cb) {
        //default settings for options
        this.parentEl = 'body';
        this.element = $(element);
        this.startDate = moment().startOf('day');
        this.endDate = moment().endOf('day');
        this.minDate = false;
        this.maxDate = false;
        this.maxSpan = false;
        this.autoApply = false;
        this.singleDatePicker = false;
        this.showDropdowns = false;
        this.minYear = moment().subtract(100, 'year').format('YYYY');
        this.maxYear = moment().add(100, 'year').format('YYYY');
        this.showWeekNumbers = false;
        this.showISOWeekNumbers = false;
        this.showCustomRangeLabel = true;
        this.timePicker = false;
        this.timePicker24Hour = false;
        this.timePickerIncrement = 1;
        this.timePickerSeconds = false;
        this.linkedCalendars = true;
        this.autoUpdateInput = true;
        this.alwaysShowCalendars = false;
        this.ranges = {};
        this.opens = 'right';
        if (this.element.hasClass('pull-right')) this.opens = 'left';
        this.drops = 'down';
        if (this.element.hasClass('dropup')) this.drops = 'up';
        this.buttonClasses = 'btn btn-sm';
        this.applyButtonClasses = 'btn-primary';
        this.cancelButtonClasses = 'btn-default';
        this.locale = {
          direction: 'ltr',
          format: moment.localeData().longDateFormat('L'),
          separator: ' - ',
          applyLabel: 'Apply',
          cancelLabel: 'Cancel',
          weekLabel: 'W',
          customRangeLabel: 'Custom Range',
          daysOfWeek: moment.weekdaysMin(),
          monthNames: moment.monthsShort(),
          firstDay: moment.localeData().firstDayOfWeek()
        };
        this.callback = function () {};

        //some state information
        this.isShowing = false;
        this.leftCalendar = {};
        this.rightCalendar = {};

        //custom options from user
        if (_typeof(options) !== 'object' || options === null) options = {};

        //allow setting options with data attributes
        //data-api options will be overwritten with custom javascript options
        options = $.extend(this.element.data(), options);

        //html template for the picker UI
        if (typeof options.template !== 'string' && !(options.template instanceof $)) options.template = '<div class="daterangepicker">' + '<div class="ranges"></div>' + '<div class="drp-calendar left">' + '<div class="calendar-table"></div>' + '<div class="calendar-time"></div>' + '</div>' + '<div class="drp-calendar right">' + '<div class="calendar-table"></div>' + '<div class="calendar-time"></div>' + '</div>' + '<div class="drp-buttons">' + '<span class="drp-selected"></span>' + '<button class="cancelBtn" type="button"></button>' + '<button class="applyBtn" disabled="disabled" type="button"></button> ' + '</div>' + '</div>';
        this.parentEl = options.parentEl && $(options.parentEl).length ? $(options.parentEl) : $(this.parentEl);
        this.container = $(options.template).appendTo(this.parentEl);

        //
        // handle all the possible options overriding defaults
        //

        if (_typeof(options.locale) === 'object') {
          if (typeof options.locale.direction === 'string') this.locale.direction = options.locale.direction;
          if (typeof options.locale.format === 'string') this.locale.format = options.locale.format;
          if (typeof options.locale.separator === 'string') this.locale.separator = options.locale.separator;
          if (_typeof(options.locale.daysOfWeek) === 'object') this.locale.daysOfWeek = options.locale.daysOfWeek.slice();
          if (_typeof(options.locale.monthNames) === 'object') this.locale.monthNames = options.locale.monthNames.slice();
          if (typeof options.locale.firstDay === 'number') this.locale.firstDay = options.locale.firstDay;
          if (typeof options.locale.applyLabel === 'string') this.locale.applyLabel = options.locale.applyLabel;
          if (typeof options.locale.cancelLabel === 'string') this.locale.cancelLabel = options.locale.cancelLabel;
          if (typeof options.locale.weekLabel === 'string') this.locale.weekLabel = options.locale.weekLabel;
          if (typeof options.locale.customRangeLabel === 'string') {
            //Support unicode chars in the custom range name.
            var elem = document.createElement('textarea');
            elem.innerHTML = options.locale.customRangeLabel;
            var rangeHtml = elem.value;
            this.locale.customRangeLabel = rangeHtml;
          }
        }
        this.container.addClass(this.locale.direction);
        if (typeof options.startDate === 'string') this.startDate = moment(options.startDate, this.locale.format);
        if (typeof options.endDate === 'string') this.endDate = moment(options.endDate, this.locale.format);
        if (typeof options.minDate === 'string') this.minDate = moment(options.minDate, this.locale.format);
        if (typeof options.maxDate === 'string') this.maxDate = moment(options.maxDate, this.locale.format);
        if (_typeof(options.startDate) === 'object') this.startDate = moment(options.startDate);
        if (_typeof(options.endDate) === 'object') this.endDate = moment(options.endDate);
        if (_typeof(options.minDate) === 'object') this.minDate = moment(options.minDate);
        if (_typeof(options.maxDate) === 'object') this.maxDate = moment(options.maxDate);

        // sanity check for bad options
        if (this.minDate && this.startDate.isBefore(this.minDate)) this.startDate = this.minDate.clone();

        // sanity check for bad options
        if (this.maxDate && this.endDate.isAfter(this.maxDate)) this.endDate = this.maxDate.clone();
        if (typeof options.applyButtonClasses === 'string') this.applyButtonClasses = options.applyButtonClasses;
        if (typeof options.applyClass === 'string')
          //backwards compat
          this.applyButtonClasses = options.applyClass;
        if (typeof options.cancelButtonClasses === 'string') this.cancelButtonClasses = options.cancelButtonClasses;
        if (typeof options.cancelClass === 'string')
          //backwards compat
          this.cancelButtonClasses = options.cancelClass;
        if (_typeof(options.maxSpan) === 'object') this.maxSpan = options.maxSpan;
        if (_typeof(options.dateLimit) === 'object')
          //backwards compat
          this.maxSpan = options.dateLimit;
        if (typeof options.opens === 'string') this.opens = options.opens;
        if (typeof options.drops === 'string') this.drops = options.drops;
        if (typeof options.showWeekNumbers === 'boolean') this.showWeekNumbers = options.showWeekNumbers;
        if (typeof options.showISOWeekNumbers === 'boolean') this.showISOWeekNumbers = options.showISOWeekNumbers;
        if (typeof options.buttonClasses === 'string') this.buttonClasses = options.buttonClasses;
        if (_typeof(options.buttonClasses) === 'object') this.buttonClasses = options.buttonClasses.join(' ');
        if (typeof options.showDropdowns === 'boolean') this.showDropdowns = options.showDropdowns;
        if (typeof options.minYear === 'number') this.minYear = options.minYear;
        if (typeof options.maxYear === 'number') this.maxYear = options.maxYear;
        if (typeof options.showCustomRangeLabel === 'boolean') this.showCustomRangeLabel = options.showCustomRangeLabel;
        if (typeof options.singleDatePicker === 'boolean') {
          this.singleDatePicker = options.singleDatePicker;
          if (this.singleDatePicker) this.endDate = this.startDate.clone();
        }
        if (typeof options.timePicker === 'boolean') this.timePicker = options.timePicker;
        if (typeof options.timePickerSeconds === 'boolean') this.timePickerSeconds = options.timePickerSeconds;
        if (typeof options.timePickerIncrement === 'number') this.timePickerIncrement = options.timePickerIncrement;
        if (typeof options.timePicker24Hour === 'boolean') this.timePicker24Hour = options.timePicker24Hour;
        if (typeof options.autoApply === 'boolean') this.autoApply = options.autoApply;
        if (typeof options.autoUpdateInput === 'boolean') this.autoUpdateInput = options.autoUpdateInput;
        if (typeof options.linkedCalendars === 'boolean') this.linkedCalendars = options.linkedCalendars;
        if (typeof options.isInvalidDate === 'function') this.isInvalidDate = options.isInvalidDate;
        if (typeof options.isCustomDate === 'function') this.isCustomDate = options.isCustomDate;
        if (typeof options.alwaysShowCalendars === 'boolean') this.alwaysShowCalendars = options.alwaysShowCalendars;

        // update day names order to firstDay
        if (this.locale.firstDay != 0) {
          var iterator = this.locale.firstDay;
          while (iterator > 0) {
            this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift());
            iterator--;
          }
        }
        var start, end, range;

        //if no start/end dates set, check if an input element contains initial values
        if (typeof options.startDate === 'undefined' && typeof options.endDate === 'undefined') {
          if ($(this.element).is(':text')) {
            var val = $(this.element).val(),
              split = val.split(this.locale.separator);
            start = end = null;
            if (split.length == 2) {
              start = moment(split[0], this.locale.format);
              end = moment(split[1], this.locale.format);
            } else if (this.singleDatePicker && val !== "") {
              start = moment(val, this.locale.format);
              end = moment(val, this.locale.format);
            }
            if (start !== null && end !== null) {
              this.setStartDate(start);
              this.setEndDate(end);
            }
          }
        }
        if (_typeof(options.ranges) === 'object') {
          for (range in options.ranges) {
            if (typeof options.ranges[range][0] === 'string') start = moment(options.ranges[range][0], this.locale.format);else start = moment(options.ranges[range][0]);
            if (typeof options.ranges[range][1] === 'string') end = moment(options.ranges[range][1], this.locale.format);else end = moment(options.ranges[range][1]);

            // If the start or end date exceed those allowed by the minDate or maxSpan
            // options, shorten the range to the allowable period.
            if (this.minDate && start.isBefore(this.minDate)) start = this.minDate.clone();
            var maxDate = this.maxDate;
            if (this.maxSpan && maxDate && start.clone().add(this.maxSpan).isAfter(maxDate)) maxDate = start.clone().add(this.maxSpan);
            if (maxDate && end.isAfter(maxDate)) end = maxDate.clone();

            // If the end of the range is before the minimum or the start of the range is
            // after the maximum, don't display this range option at all.
            if (this.minDate && end.isBefore(this.minDate, this.timepicker ? 'minute' : 'day') || maxDate && start.isAfter(maxDate, this.timepicker ? 'minute' : 'day')) continue;

            //Support unicode chars in the range names.
            var elem = document.createElement('textarea');
            elem.innerHTML = range;
            var rangeHtml = elem.value;
            this.ranges[rangeHtml] = [start, end];
          }
          var list = '<ul>';
          for (range in this.ranges) {
            list += '<li data-range-key="' + range + '">' + range + '</li>';
          }
          if (this.showCustomRangeLabel) {
            list += '<li data-range-key="' + this.locale.customRangeLabel + '">' + this.locale.customRangeLabel + '</li>';
          }
          list += '</ul>';
          this.container.find('.ranges').prepend(list);
        }
        if (typeof cb === 'function') {
          this.callback = cb;
        }
        if (!this.timePicker) {
          this.startDate = this.startDate.startOf('day');
          this.endDate = this.endDate.endOf('day');
          this.container.find('.calendar-time').hide();
        }

        //can't be used together for now
        if (this.timePicker && this.autoApply) this.autoApply = false;
        if (this.autoApply) {
          this.container.addClass('auto-apply');
        }
        if (_typeof(options.ranges) === 'object') this.container.addClass('show-ranges');
        if (this.singleDatePicker) {
          this.container.addClass('single');
          this.container.find('.drp-calendar.left').addClass('single');
          this.container.find('.drp-calendar.left').show();
          this.container.find('.drp-calendar.right').hide();
          if (!this.timePicker && this.autoApply) {
            this.container.addClass('auto-apply');
          }
        }
        if (typeof options.ranges === 'undefined' && !this.singleDatePicker || this.alwaysShowCalendars) {
          this.container.addClass('show-calendar');
        }
        this.container.addClass('opens' + this.opens);

        //apply CSS classes and labels to buttons
        this.container.find('.applyBtn, .cancelBtn').addClass(this.buttonClasses);
        if (this.applyButtonClasses.length) this.container.find('.applyBtn').addClass(this.applyButtonClasses);
        if (this.cancelButtonClasses.length) this.container.find('.cancelBtn').addClass(this.cancelButtonClasses);
        this.container.find('.applyBtn').html(this.locale.applyLabel);
        this.container.find('.cancelBtn').html(this.locale.cancelLabel);

        //
        // event listeners
        //

        this.container.find('.drp-calendar').on('click.daterangepicker', '.prev', $.proxy(this.clickPrev, this)).on('click.daterangepicker', '.next', $.proxy(this.clickNext, this)).on('mousedown.daterangepicker', 'td.available', $.proxy(this.clickDate, this)).on('mouseenter.daterangepicker', 'td.available', $.proxy(this.hoverDate, this)).on('change.daterangepicker', 'select.yearselect', $.proxy(this.monthOrYearChanged, this)).on('change.daterangepicker', 'select.monthselect', $.proxy(this.monthOrYearChanged, this)).on('change.daterangepicker', 'select.hourselect,select.minuteselect,select.secondselect,select.ampmselect', $.proxy(this.timeChanged, this));
        this.container.find('.ranges').on('click.daterangepicker', 'li', $.proxy(this.clickRange, this));
        this.container.find('.drp-buttons').on('click.daterangepicker', 'button.applyBtn', $.proxy(this.clickApply, this)).on('click.daterangepicker', 'button.cancelBtn', $.proxy(this.clickCancel, this));
        if (this.element.is('input') || this.element.is('button')) {
          this.element.on({
            'click.daterangepicker': $.proxy(this.show, this),
            'focus.daterangepicker': $.proxy(this.show, this),
            'keyup.daterangepicker': $.proxy(this.elementChanged, this),
            'keydown.daterangepicker': $.proxy(this.keydown, this) //IE 11 compatibility
          });
        } else {
          this.element.on('click.daterangepicker', $.proxy(this.toggle, this));
          this.element.on('keydown.daterangepicker', $.proxy(this.toggle, this));
        }

        //
        // if attached to a text input, set the initial value
        //

        this.updateElement();
      };
      DateRangePicker.prototype = {
        constructor: DateRangePicker,
        setStartDate: function setStartDate(startDate) {
          if (typeof startDate === 'string') this.startDate = moment(startDate, this.locale.format);
          if (_typeof(startDate) === 'object') this.startDate = moment(startDate);
          if (!this.timePicker) this.startDate = this.startDate.startOf('day');
          if (this.timePicker && this.timePickerIncrement) this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
          if (this.minDate && this.startDate.isBefore(this.minDate)) {
            this.startDate = this.minDate.clone();
            if (this.timePicker && this.timePickerIncrement) this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
          }
          if (this.maxDate && this.startDate.isAfter(this.maxDate)) {
            this.startDate = this.maxDate.clone();
            if (this.timePicker && this.timePickerIncrement) this.startDate.minute(Math.floor(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
          }
          if (!this.isShowing) this.updateElement();
          this.updateMonthsInView();
        },
        setEndDate: function setEndDate(endDate) {
          if (typeof endDate === 'string') this.endDate = moment(endDate, this.locale.format);
          if (_typeof(endDate) === 'object') this.endDate = moment(endDate);
          if (!this.timePicker) this.endDate = this.endDate.endOf('day');
          if (this.timePicker && this.timePickerIncrement) this.endDate.minute(Math.round(this.endDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
          if (this.endDate.isBefore(this.startDate)) this.endDate = this.startDate.clone();
          if (this.maxDate && this.endDate.isAfter(this.maxDate)) this.endDate = this.maxDate.clone();
          if (this.maxSpan && this.startDate.clone().add(this.maxSpan).isBefore(this.endDate)) this.endDate = this.startDate.clone().add(this.maxSpan);
          this.previousRightTime = this.endDate.clone();
          this.container.find('.drp-selected').html(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
          if (!this.isShowing) this.updateElement();
          this.updateMonthsInView();
        },
        isInvalidDate: function isInvalidDate() {
          return false;
        },
        isCustomDate: function isCustomDate() {
          return false;
        },
        updateView: function updateView() {
          if (this.timePicker) {
            this.renderTimePicker('left');
            this.renderTimePicker('right');
            if (!this.endDate) {
              this.container.find('.right .calendar-time select').prop('disabled', true).addClass('disabled');
            } else {
              this.container.find('.right .calendar-time select').prop('disabled', false).removeClass('disabled');
            }
          }
          if (this.endDate) this.container.find('.drp-selected').html(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
          this.updateMonthsInView();
          this.updateCalendars();
          this.updateFormInputs();
        },
        updateMonthsInView: function updateMonthsInView() {
          if (this.endDate) {
            //if both dates are visible already, do nothing
            if (!this.singleDatePicker && this.leftCalendar.month && this.rightCalendar.month && (this.startDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.startDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM')) && (this.endDate.format('YYYY-MM') == this.leftCalendar.month.format('YYYY-MM') || this.endDate.format('YYYY-MM') == this.rightCalendar.month.format('YYYY-MM'))) {
              return;
            }
            this.leftCalendar.month = this.startDate.clone().date(2);
            if (!this.linkedCalendars && (this.endDate.month() != this.startDate.month() || this.endDate.year() != this.startDate.year())) {
              this.rightCalendar.month = this.endDate.clone().date(2);
            } else {
              this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
            }
          } else {
            if (this.leftCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM') && this.rightCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM')) {
              this.leftCalendar.month = this.startDate.clone().date(2);
              this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
            }
          }
          if (this.maxDate && this.linkedCalendars && !this.singleDatePicker && this.rightCalendar.month > this.maxDate) {
            this.rightCalendar.month = this.maxDate.clone().date(2);
            this.leftCalendar.month = this.maxDate.clone().date(2).subtract(1, 'month');
          }
        },
        updateCalendars: function updateCalendars() {
          if (this.timePicker) {
            var hour, minute, second;
            if (this.endDate) {
              hour = parseInt(this.container.find('.left .hourselect').val(), 10);
              minute = parseInt(this.container.find('.left .minuteselect').val(), 10);
              if (isNaN(minute)) {
                minute = parseInt(this.container.find('.left .minuteselect option:last').val(), 10);
              }
              second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;
              if (!this.timePicker24Hour) {
                var ampm = this.container.find('.left .ampmselect').val();
                if (ampm === 'PM' && hour < 12) hour += 12;
                if (ampm === 'AM' && hour === 12) hour = 0;
              }
            } else {
              hour = parseInt(this.container.find('.right .hourselect').val(), 10);
              minute = parseInt(this.container.find('.right .minuteselect').val(), 10);
              if (isNaN(minute)) {
                minute = parseInt(this.container.find('.right .minuteselect option:last').val(), 10);
              }
              second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;
              if (!this.timePicker24Hour) {
                var ampm = this.container.find('.right .ampmselect').val();
                if (ampm === 'PM' && hour < 12) hour += 12;
                if (ampm === 'AM' && hour === 12) hour = 0;
              }
            }
            this.leftCalendar.month.hour(hour).minute(minute).second(second);
            this.rightCalendar.month.hour(hour).minute(minute).second(second);
          }
          this.renderCalendar('left');
          this.renderCalendar('right');

          //highlight any predefined range matching the current start and end dates
          this.container.find('.ranges li').removeClass('active');
          if (this.endDate == null) return;
          this.calculateChosenLabel();
        },
        renderCalendar: function renderCalendar(side) {
          //
          // Build the matrix of dates that will populate the calendar
          //

          var calendar = side == 'left' ? this.leftCalendar : this.rightCalendar;
          var month = calendar.month.month();
          var year = calendar.month.year();
          var hour = calendar.month.hour();
          var minute = calendar.month.minute();
          var second = calendar.month.second();
          var daysInMonth = moment([year, month]).daysInMonth();
          var firstDay = moment([year, month, 1]);
          var lastDay = moment([year, month, daysInMonth]);
          var lastMonth = moment(firstDay).subtract(1, 'month').month();
          var lastYear = moment(firstDay).subtract(1, 'month').year();
          var daysInLastMonth = moment([lastYear, lastMonth]).daysInMonth();
          var dayOfWeek = firstDay.day();

          //initialize a 6 rows x 7 columns array for the calendar
          var calendar = [];
          calendar.firstDay = firstDay;
          calendar.lastDay = lastDay;
          for (var i = 0; i < 6; i++) {
            calendar[i] = [];
          }

          //populate the calendar with date objects
          var startDay = daysInLastMonth - dayOfWeek + this.locale.firstDay + 1;
          if (startDay > daysInLastMonth) startDay -= 7;
          if (dayOfWeek == this.locale.firstDay) startDay = daysInLastMonth - 6;
          var curDate = moment([lastYear, lastMonth, startDay, 12, minute, second]);
          var col, row;
          for (var i = 0, col = 0, row = 0; i < 42; i++, col++, curDate = moment(curDate).add(24, 'hour')) {
            if (i > 0 && col % 7 === 0) {
              col = 0;
              row++;
            }
            calendar[row][col] = curDate.clone().hour(hour).minute(minute).second(second);
            curDate.hour(12);
            if (this.minDate && calendar[row][col].format('YYYY-MM-DD') == this.minDate.format('YYYY-MM-DD') && calendar[row][col].isBefore(this.minDate) && side == 'left') {
              calendar[row][col] = this.minDate.clone();
            }
            if (this.maxDate && calendar[row][col].format('YYYY-MM-DD') == this.maxDate.format('YYYY-MM-DD') && calendar[row][col].isAfter(this.maxDate) && side == 'right') {
              calendar[row][col] = this.maxDate.clone();
            }
          }

          //make the calendar object available to hoverDate/clickDate
          if (side == 'left') {
            this.leftCalendar.calendar = calendar;
          } else {
            this.rightCalendar.calendar = calendar;
          }

          //
          // Display the calendar
          //

          var minDate = side == 'left' ? this.minDate : this.startDate;
          var maxDate = this.maxDate;
          side == 'left' ? this.startDate : this.endDate;
          this.locale.direction == 'ltr' ? {
            left: 'chevron-left',
            right: 'chevron-right'
          } : {
            left: 'chevron-right',
            right: 'chevron-left'
          };
          var html = '<table class="table-condensed">';
          html += '<thead>';
          html += '<tr>';

          // add empty cell for week number
          if (this.showWeekNumbers || this.showISOWeekNumbers) html += '<th></th>';
          if ((!minDate || minDate.isBefore(calendar.firstDay)) && (!this.linkedCalendars || side == 'left')) {
            html += '<th class="prev available"><span></span></th>';
          } else {
            html += '<th></th>';
          }
          var dateHtml = this.locale.monthNames[calendar[1][1].month()] + calendar[1][1].format(" YYYY");
          if (this.showDropdowns) {
            var currentMonth = calendar[1][1].month();
            var currentYear = calendar[1][1].year();
            var maxYear = maxDate && maxDate.year() || this.maxYear;
            var minYear = minDate && minDate.year() || this.minYear;
            var inMinYear = currentYear == minYear;
            var inMaxYear = currentYear == maxYear;
            var monthHtml = '<select class="monthselect">';
            for (var m = 0; m < 12; m++) {
              if ((!inMinYear || minDate && m >= minDate.month()) && (!inMaxYear || maxDate && m <= maxDate.month())) {
                monthHtml += "<option value='" + m + "'" + (m === currentMonth ? " selected='selected'" : "") + ">" + this.locale.monthNames[m] + "</option>";
              } else {
                monthHtml += "<option value='" + m + "'" + (m === currentMonth ? " selected='selected'" : "") + " disabled='disabled'>" + this.locale.monthNames[m] + "</option>";
              }
            }
            monthHtml += "</select>";
            var yearHtml = '<select class="yearselect">';
            for (var y = minYear; y <= maxYear; y++) {
              yearHtml += '<option value="' + y + '"' + (y === currentYear ? ' selected="selected"' : '') + '>' + y + '</option>';
            }
            yearHtml += '</select>';
            dateHtml = monthHtml + yearHtml;
          }
          html += '<th colspan="5" class="month">' + dateHtml + '</th>';
          if ((!maxDate || maxDate.isAfter(calendar.lastDay)) && (!this.linkedCalendars || side == 'right' || this.singleDatePicker)) {
            html += '<th class="next available"><span></span></th>';
          } else {
            html += '<th></th>';
          }
          html += '</tr>';
          html += '<tr>';

          // add week number label
          if (this.showWeekNumbers || this.showISOWeekNumbers) html += '<th class="week">' + this.locale.weekLabel + '</th>';
          $.each(this.locale.daysOfWeek, function (index, dayOfWeek) {
            html += '<th>' + dayOfWeek + '</th>';
          });
          html += '</tr>';
          html += '</thead>';
          html += '<tbody>';

          //adjust maxDate to reflect the maxSpan setting in order to
          //grey out end dates beyond the maxSpan
          if (this.endDate == null && this.maxSpan) {
            var maxLimit = this.startDate.clone().add(this.maxSpan).endOf('day');
            if (!maxDate || maxLimit.isBefore(maxDate)) {
              maxDate = maxLimit;
            }
          }
          for (var row = 0; row < 6; row++) {
            html += '<tr>';

            // add week number
            if (this.showWeekNumbers) html += '<td class="week">' + calendar[row][0].week() + '</td>';else if (this.showISOWeekNumbers) html += '<td class="week">' + calendar[row][0].isoWeek() + '</td>';
            for (var col = 0; col < 7; col++) {
              var classes = [];

              //highlight today's date
              if (calendar[row][col].isSame(new Date(), "day")) classes.push('today');

              //highlight weekends
              if (calendar[row][col].isoWeekday() > 5) classes.push('weekend');

              //grey out the dates in other months displayed at beginning and end of this calendar
              if (calendar[row][col].month() != calendar[1][1].month()) classes.push('off', 'ends');

              //don't allow selection of dates before the minimum date
              if (this.minDate && calendar[row][col].isBefore(this.minDate, 'day')) classes.push('off', 'disabled');

              //don't allow selection of dates after the maximum date
              if (maxDate && calendar[row][col].isAfter(maxDate, 'day')) classes.push('off', 'disabled');

              //don't allow selection of date if a custom function decides it's invalid
              if (this.isInvalidDate(calendar[row][col])) classes.push('off', 'disabled');

              //highlight the currently selected start date
              if (calendar[row][col].format('YYYY-MM-DD') == this.startDate.format('YYYY-MM-DD')) classes.push('active', 'start-date');

              //highlight the currently selected end date
              if (this.endDate != null && calendar[row][col].format('YYYY-MM-DD') == this.endDate.format('YYYY-MM-DD')) classes.push('active', 'end-date');

              //highlight dates in-between the selected dates
              if (this.endDate != null && calendar[row][col] > this.startDate && calendar[row][col] < this.endDate) classes.push('in-range');

              //apply custom classes for this date
              var isCustom = this.isCustomDate(calendar[row][col]);
              if (isCustom !== false) {
                if (typeof isCustom === 'string') classes.push(isCustom);else Array.prototype.push.apply(classes, isCustom);
              }
              var cname = '',
                disabled = false;
              for (var i = 0; i < classes.length; i++) {
                cname += classes[i] + ' ';
                if (classes[i] == 'disabled') disabled = true;
              }
              if (!disabled) cname += 'available';
              html += '<td class="' + cname.replace(/^\s+|\s+$/g, '') + '" data-title="' + 'r' + row + 'c' + col + '">' + calendar[row][col].date() + '</td>';
            }
            html += '</tr>';
          }
          html += '</tbody>';
          html += '</table>';
          this.container.find('.drp-calendar.' + side + ' .calendar-table').html(html);
        },
        renderTimePicker: function renderTimePicker(side) {
          // Don't bother updating the time picker if it's currently disabled
          // because an end date hasn't been clicked yet
          if (side == 'right' && !this.endDate) return;
          var html,
            selected,
            minDate,
            maxDate = this.maxDate;
          if (this.maxSpan && (!this.maxDate || this.startDate.clone().add(this.maxSpan).isBefore(this.maxDate))) maxDate = this.startDate.clone().add(this.maxSpan);
          if (side == 'left') {
            selected = this.startDate.clone();
            minDate = this.minDate;
          } else if (side == 'right') {
            selected = this.endDate.clone();
            minDate = this.startDate;

            //Preserve the time already selected
            var timeSelector = this.container.find('.drp-calendar.right .calendar-time');
            if (timeSelector.html() != '') {
              selected.hour(!isNaN(selected.hour()) ? selected.hour() : timeSelector.find('.hourselect option:selected').val());
              selected.minute(!isNaN(selected.minute()) ? selected.minute() : timeSelector.find('.minuteselect option:selected').val());
              selected.second(!isNaN(selected.second()) ? selected.second() : timeSelector.find('.secondselect option:selected').val());
              if (!this.timePicker24Hour) {
                var ampm = timeSelector.find('.ampmselect option:selected').val();
                if (ampm === 'PM' && selected.hour() < 12) selected.hour(selected.hour() + 12);
                if (ampm === 'AM' && selected.hour() === 12) selected.hour(0);
              }
            }
            if (selected.isBefore(this.startDate)) selected = this.startDate.clone();
            if (maxDate && selected.isAfter(maxDate)) selected = maxDate.clone();
          }

          //
          // hours
          //

          html = '<select class="hourselect">';
          var start = this.timePicker24Hour ? 0 : 1;
          var end = this.timePicker24Hour ? 23 : 12;
          for (var i = start; i <= end; i++) {
            var i_in_24 = i;
            if (!this.timePicker24Hour) i_in_24 = selected.hour() >= 12 ? i == 12 ? 12 : i + 12 : i == 12 ? 0 : i;
            var time = selected.clone().hour(i_in_24);
            var disabled = false;
            if (minDate && time.minute(59).isBefore(minDate)) disabled = true;
            if (maxDate && time.minute(0).isAfter(maxDate)) disabled = true;
            if (i_in_24 == selected.hour() && !disabled) {
              html += '<option value="' + i + '" selected="selected">' + i + '</option>';
            } else if (disabled) {
              html += '<option value="' + i + '" disabled="disabled" class="disabled">' + i + '</option>';
            } else {
              html += '<option value="' + i + '">' + i + '</option>';
            }
          }
          html += '</select> ';

          //
          // minutes
          //

          html += ': <select class="minuteselect">';
          for (var i = 0; i < 60; i += this.timePickerIncrement) {
            var padded = i < 10 ? '0' + i : i;
            var time = selected.clone().minute(i);
            var disabled = false;
            if (minDate && time.second(59).isBefore(minDate)) disabled = true;
            if (maxDate && time.second(0).isAfter(maxDate)) disabled = true;
            if (selected.minute() == i && !disabled) {
              html += '<option value="' + i + '" selected="selected">' + padded + '</option>';
            } else if (disabled) {
              html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + '</option>';
            } else {
              html += '<option value="' + i + '">' + padded + '</option>';
            }
          }
          html += '</select> ';

          //
          // seconds
          //

          if (this.timePickerSeconds) {
            html += ': <select class="secondselect">';
            for (var i = 0; i < 60; i++) {
              var padded = i < 10 ? '0' + i : i;
              var time = selected.clone().second(i);
              var disabled = false;
              if (minDate && time.isBefore(minDate)) disabled = true;
              if (maxDate && time.isAfter(maxDate)) disabled = true;
              if (selected.second() == i && !disabled) {
                html += '<option value="' + i + '" selected="selected">' + padded + '</option>';
              } else if (disabled) {
                html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + '</option>';
              } else {
                html += '<option value="' + i + '">' + padded + '</option>';
              }
            }
            html += '</select> ';
          }

          //
          // AM/PM
          //

          if (!this.timePicker24Hour) {
            html += '<select class="ampmselect">';
            var am_html = '';
            var pm_html = '';
            if (minDate && selected.clone().hour(12).minute(0).second(0).isBefore(minDate)) am_html = ' disabled="disabled" class="disabled"';
            if (maxDate && selected.clone().hour(0).minute(0).second(0).isAfter(maxDate)) pm_html = ' disabled="disabled" class="disabled"';
            if (selected.hour() >= 12) {
              html += '<option value="AM"' + am_html + '>AM</option><option value="PM" selected="selected"' + pm_html + '>PM</option>';
            } else {
              html += '<option value="AM" selected="selected"' + am_html + '>AM</option><option value="PM"' + pm_html + '>PM</option>';
            }
            html += '</select>';
          }
          this.container.find('.drp-calendar.' + side + ' .calendar-time').html(html);
        },
        updateFormInputs: function updateFormInputs() {
          if (this.singleDatePicker || this.endDate && (this.startDate.isBefore(this.endDate) || this.startDate.isSame(this.endDate))) {
            this.container.find('button.applyBtn').prop('disabled', false);
          } else {
            this.container.find('button.applyBtn').prop('disabled', true);
          }
        },
        move: function move() {
          var parentOffset = {
              top: 0,
              left: 0
            },
            containerTop,
            drops = this.drops;
          var parentRightEdge = $(window).width();
          if (!this.parentEl.is('body')) {
            parentOffset = {
              top: this.parentEl.offset().top - this.parentEl.scrollTop(),
              left: this.parentEl.offset().left - this.parentEl.scrollLeft()
            };
            parentRightEdge = this.parentEl[0].clientWidth + this.parentEl.offset().left;
          }
          switch (drops) {
            case 'auto':
              containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top;
              if (containerTop + this.container.outerHeight() >= this.parentEl[0].scrollHeight) {
                containerTop = this.element.offset().top - this.container.outerHeight() - parentOffset.top;
                drops = 'up';
              }
              break;
            case 'up':
              containerTop = this.element.offset().top - this.container.outerHeight() - parentOffset.top;
              break;
            default:
              containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top;
              break;
          }

          // Force the container to it's actual width
          this.container.css({
            top: 0,
            left: 0,
            right: 'auto'
          });
          var containerWidth = this.container.outerWidth();
          this.container.toggleClass('drop-up', drops == 'up');
          if (this.opens == 'left') {
            var containerRight = parentRightEdge - this.element.offset().left - this.element.outerWidth();
            if (containerWidth + containerRight > $(window).width()) {
              this.container.css({
                top: containerTop,
                right: 'auto',
                left: 9
              });
            } else {
              this.container.css({
                top: containerTop,
                right: containerRight,
                left: 'auto'
              });
            }
          } else if (this.opens == 'center') {
            var containerLeft = this.element.offset().left - parentOffset.left + this.element.outerWidth() / 2 - containerWidth / 2;
            if (containerLeft < 0) {
              this.container.css({
                top: containerTop,
                right: 'auto',
                left: 9
              });
            } else if (containerLeft + containerWidth > $(window).width()) {
              this.container.css({
                top: containerTop,
                left: 'auto',
                right: 0
              });
            } else {
              this.container.css({
                top: containerTop,
                left: containerLeft,
                right: 'auto'
              });
            }
          } else {
            var containerLeft = this.element.offset().left - parentOffset.left;
            if (containerLeft + containerWidth > $(window).width()) {
              this.container.css({
                top: containerTop,
                left: 'auto',
                right: 0
              });
            } else {
              this.container.css({
                top: containerTop,
                left: containerLeft,
                right: 'auto'
              });
            }
          }
        },
        show: function show(e) {
          if (this.isShowing) return;

          // Create a click proxy that is private to this instance of datepicker, for unbinding
          this._outsideClickProxy = $.proxy(function (e) {
            this.outsideClick(e);
          }, this);

          // Bind global datepicker mousedown for hiding and
          $(document).on('mousedown.daterangepicker', this._outsideClickProxy)
          // also support mobile devices
          .on('touchend.daterangepicker', this._outsideClickProxy)
          // also explicitly play nice with Bootstrap dropdowns, which stopPropagation when clicking them
          .on('click.daterangepicker', '[data-toggle=dropdown]', this._outsideClickProxy)
          // and also close when focus changes to outside the picker (eg. tabbing between controls)
          .on('focusin.daterangepicker', this._outsideClickProxy);

          // Reposition the picker if the window is resized while it's open
          $(window).on('resize.daterangepicker', $.proxy(function (e) {
            this.move(e);
          }, this));
          this.oldStartDate = this.startDate.clone();
          this.oldEndDate = this.endDate.clone();
          this.previousRightTime = this.endDate.clone();
          this.updateView();
          this.container.show();
          this.move();
          this.element.trigger('show.daterangepicker', this);
          this.isShowing = true;
        },
        hide: function hide(e) {
          if (!this.isShowing) return;

          //incomplete date selection, revert to last values
          if (!this.endDate) {
            this.startDate = this.oldStartDate.clone();
            this.endDate = this.oldEndDate.clone();
          }

          //if a new date range was selected, invoke the user callback function
          if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate)) this.callback(this.startDate.clone(), this.endDate.clone(), this.chosenLabel);

          //if picker is attached to a text input, update it
          this.updateElement();
          $(document).off('.daterangepicker');
          $(window).off('.daterangepicker');
          this.container.hide();
          this.element.trigger('hide.daterangepicker', this);
          this.isShowing = false;
        },
        toggle: function toggle(e) {
          if (this.isShowing) {
            this.hide();
          } else {
            this.show();
          }
        },
        outsideClick: function outsideClick(e) {
          var target = $(e.target);
          // if the page is clicked anywhere except within the daterangerpicker/button
          // itself then call this.hide()
          if (
          // ie modal dialog fix
          e.type == "focusin" || target.closest(this.element).length || target.closest(this.container).length || target.closest('.calendar-table').length) return;
          this.hide();
          this.element.trigger('outsideClick.daterangepicker', this);
        },
        showCalendars: function showCalendars() {
          this.container.addClass('show-calendar');
          this.move();
          this.element.trigger('showCalendar.daterangepicker', this);
        },
        hideCalendars: function hideCalendars() {
          this.container.removeClass('show-calendar');
          this.element.trigger('hideCalendar.daterangepicker', this);
        },
        clickRange: function clickRange(e) {
          var label = e.target.getAttribute('data-range-key');
          this.chosenLabel = label;
          if (label == this.locale.customRangeLabel) {
            this.showCalendars();
          } else {
            var dates = this.ranges[label];
            this.startDate = dates[0];
            this.endDate = dates[1];
            if (!this.timePicker) {
              this.startDate.startOf('day');
              this.endDate.endOf('day');
            }
            if (!this.alwaysShowCalendars) this.hideCalendars();
            this.clickApply();
          }
        },
        clickPrev: function clickPrev(e) {
          var cal = $(e.target).parents('.drp-calendar');
          if (cal.hasClass('left')) {
            this.leftCalendar.month.subtract(1, 'month');
            if (this.linkedCalendars) this.rightCalendar.month.subtract(1, 'month');
          } else {
            this.rightCalendar.month.subtract(1, 'month');
          }
          this.updateCalendars();
        },
        clickNext: function clickNext(e) {
          var cal = $(e.target).parents('.drp-calendar');
          if (cal.hasClass('left')) {
            this.leftCalendar.month.add(1, 'month');
          } else {
            this.rightCalendar.month.add(1, 'month');
            if (this.linkedCalendars) this.leftCalendar.month.add(1, 'month');
          }
          this.updateCalendars();
        },
        hoverDate: function hoverDate(e) {
          //ignore dates that can't be selected
          if (!$(e.target).hasClass('available')) return;
          var title = $(e.target).attr('data-title');
          var row = title.substr(1, 1);
          var col = title.substr(3, 1);
          var cal = $(e.target).parents('.drp-calendar');
          var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];

          //highlight the dates between the start date and the date being hovered as a potential end date
          var leftCalendar = this.leftCalendar;
          var rightCalendar = this.rightCalendar;
          var startDate = this.startDate;
          if (!this.endDate) {
            this.container.find('.drp-calendar tbody td').each(function (index, el) {
              //skip week numbers, only look at dates
              if ($(el).hasClass('week')) return;
              var title = $(el).attr('data-title');
              var row = title.substr(1, 1);
              var col = title.substr(3, 1);
              var cal = $(el).parents('.drp-calendar');
              var dt = cal.hasClass('left') ? leftCalendar.calendar[row][col] : rightCalendar.calendar[row][col];
              if (dt.isAfter(startDate) && dt.isBefore(date) || dt.isSame(date, 'day')) {
                $(el).addClass('in-range');
              } else {
                $(el).removeClass('in-range');
              }
            });
          }
        },
        clickDate: function clickDate(e) {
          if (!$(e.target).hasClass('available')) return;
          var title = $(e.target).attr('data-title');
          var row = title.substr(1, 1);
          var col = title.substr(3, 1);
          var cal = $(e.target).parents('.drp-calendar');
          var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];

          //
          // this function needs to do a few things:
          // * alternate between selecting a start and end date for the range,
          // * if the time picker is enabled, apply the hour/minute/second from the select boxes to the clicked date
          // * if autoapply is enabled, and an end date was chosen, apply the selection
          // * if single date picker mode, and time picker isn't enabled, apply the selection immediately
          // * if one of the inputs above the calendars was focused, cancel that manual input
          //

          if (this.endDate || date.isBefore(this.startDate, 'day')) {
            //picking start
            if (this.timePicker) {
              var hour = parseInt(this.container.find('.left .hourselect').val(), 10);
              if (!this.timePicker24Hour) {
                var ampm = this.container.find('.left .ampmselect').val();
                if (ampm === 'PM' && hour < 12) hour += 12;
                if (ampm === 'AM' && hour === 12) hour = 0;
              }
              var minute = parseInt(this.container.find('.left .minuteselect').val(), 10);
              if (isNaN(minute)) {
                minute = parseInt(this.container.find('.left .minuteselect option:last').val(), 10);
              }
              var second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;
              date = date.clone().hour(hour).minute(minute).second(second);
            }
            this.endDate = null;
            this.setStartDate(date.clone());
          } else if (!this.endDate && date.isBefore(this.startDate)) {
            //special case: clicking the same date for start/end,
            //but the time of the end date is before the start date
            this.setEndDate(this.startDate.clone());
          } else {
            // picking end
            if (this.timePicker) {
              var hour = parseInt(this.container.find('.right .hourselect').val(), 10);
              if (!this.timePicker24Hour) {
                var ampm = this.container.find('.right .ampmselect').val();
                if (ampm === 'PM' && hour < 12) hour += 12;
                if (ampm === 'AM' && hour === 12) hour = 0;
              }
              var minute = parseInt(this.container.find('.right .minuteselect').val(), 10);
              if (isNaN(minute)) {
                minute = parseInt(this.container.find('.right .minuteselect option:last').val(), 10);
              }
              var second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;
              date = date.clone().hour(hour).minute(minute).second(second);
            }
            this.setEndDate(date.clone());
            if (this.autoApply) {
              this.calculateChosenLabel();
              this.clickApply();
            }
          }
          if (this.singleDatePicker) {
            this.setEndDate(this.startDate);
            if (!this.timePicker && this.autoApply) this.clickApply();
          }
          this.updateView();

          //This is to cancel the blur event handler if the mouse was in one of the inputs
          e.stopPropagation();
        },
        calculateChosenLabel: function calculateChosenLabel() {
          var customRange = true;
          var i = 0;
          for (var range in this.ranges) {
            if (this.timePicker) {
              var format = this.timePickerSeconds ? "YYYY-MM-DD HH:mm:ss" : "YYYY-MM-DD HH:mm";
              //ignore times when comparing dates if time picker seconds is not enabled
              if (this.startDate.format(format) == this.ranges[range][0].format(format) && this.endDate.format(format) == this.ranges[range][1].format(format)) {
                customRange = false;
                this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').attr('data-range-key');
                break;
              }
            } else {
              //ignore times when comparing dates if time picker is not enabled
              if (this.startDate.format('YYYY-MM-DD') == this.ranges[range][0].format('YYYY-MM-DD') && this.endDate.format('YYYY-MM-DD') == this.ranges[range][1].format('YYYY-MM-DD')) {
                customRange = false;
                this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').attr('data-range-key');
                break;
              }
            }
            i++;
          }
          if (customRange) {
            if (this.showCustomRangeLabel) {
              this.chosenLabel = this.container.find('.ranges li:last').addClass('active').attr('data-range-key');
            } else {
              this.chosenLabel = null;
            }
            this.showCalendars();
          }
        },
        clickApply: function clickApply(e) {
          this.hide();
          this.element.trigger('apply.daterangepicker', this);
        },
        clickCancel: function clickCancel(e) {
          this.startDate = this.oldStartDate;
          this.endDate = this.oldEndDate;
          this.hide();
          this.element.trigger('cancel.daterangepicker', this);
        },
        monthOrYearChanged: function monthOrYearChanged(e) {
          var isLeft = $(e.target).closest('.drp-calendar').hasClass('left'),
            leftOrRight = isLeft ? 'left' : 'right',
            cal = this.container.find('.drp-calendar.' + leftOrRight);

          // Month must be Number for new moment versions
          var month = parseInt(cal.find('.monthselect').val(), 10);
          var year = cal.find('.yearselect').val();
          if (!isLeft) {
            if (year < this.startDate.year() || year == this.startDate.year() && month < this.startDate.month()) {
              month = this.startDate.month();
              year = this.startDate.year();
            }
          }
          if (this.minDate) {
            if (year < this.minDate.year() || year == this.minDate.year() && month < this.minDate.month()) {
              month = this.minDate.month();
              year = this.minDate.year();
            }
          }
          if (this.maxDate) {
            if (year > this.maxDate.year() || year == this.maxDate.year() && month > this.maxDate.month()) {
              month = this.maxDate.month();
              year = this.maxDate.year();
            }
          }
          if (isLeft) {
            this.leftCalendar.month.month(month).year(year);
            if (this.linkedCalendars) this.rightCalendar.month = this.leftCalendar.month.clone().add(1, 'month');
          } else {
            this.rightCalendar.month.month(month).year(year);
            if (this.linkedCalendars) this.leftCalendar.month = this.rightCalendar.month.clone().subtract(1, 'month');
          }
          this.updateCalendars();
        },
        timeChanged: function timeChanged(e) {
          var cal = $(e.target).closest('.drp-calendar'),
            isLeft = cal.hasClass('left');
          var hour = parseInt(cal.find('.hourselect').val(), 10);
          var minute = parseInt(cal.find('.minuteselect').val(), 10);
          if (isNaN(minute)) {
            minute = parseInt(cal.find('.minuteselect option:last').val(), 10);
          }
          var second = this.timePickerSeconds ? parseInt(cal.find('.secondselect').val(), 10) : 0;
          if (!this.timePicker24Hour) {
            var ampm = cal.find('.ampmselect').val();
            if (ampm === 'PM' && hour < 12) hour += 12;
            if (ampm === 'AM' && hour === 12) hour = 0;
          }
          if (isLeft) {
            var start = this.startDate.clone();
            start.hour(hour);
            start.minute(minute);
            start.second(second);
            this.setStartDate(start);
            if (this.singleDatePicker) {
              this.endDate = this.startDate.clone();
            } else if (this.endDate && this.endDate.format('YYYY-MM-DD') == start.format('YYYY-MM-DD') && this.endDate.isBefore(start)) {
              this.setEndDate(start.clone());
            }
          } else if (this.endDate) {
            var end = this.endDate.clone();
            end.hour(hour);
            end.minute(minute);
            end.second(second);
            this.setEndDate(end);
          }

          //update the calendars so all clickable dates reflect the new time component
          this.updateCalendars();

          //update the form inputs above the calendars with the new time
          this.updateFormInputs();

          //re-render the time pickers because changing one selection can affect what's enabled in another
          this.renderTimePicker('left');
          this.renderTimePicker('right');
        },
        elementChanged: function elementChanged() {
          if (!this.element.is('input')) return;
          if (!this.element.val().length) return;
          var dateString = this.element.val().split(this.locale.separator),
            start = null,
            end = null;
          if (dateString.length === 2) {
            start = moment(dateString[0], this.locale.format);
            end = moment(dateString[1], this.locale.format);
          }
          if (this.singleDatePicker || start === null || end === null) {
            start = moment(this.element.val(), this.locale.format);
            end = start;
          }
          if (!start.isValid() || !end.isValid()) return;
          this.setStartDate(start);
          this.setEndDate(end);
          this.updateView();
        },
        keydown: function keydown(e) {
          //hide on tab or enter
          if (e.keyCode === 9 || e.keyCode === 13) {
            this.hide();
          }

          //hide on esc and prevent propagation
          if (e.keyCode === 27) {
            e.preventDefault();
            e.stopPropagation();
            this.hide();
          }
        },
        updateElement: function updateElement() {
          if (this.element.is('input') && this.autoUpdateInput) {
            var newValue = this.startDate.format(this.locale.format);
            if (!this.singleDatePicker) {
              newValue += this.locale.separator + this.endDate.format(this.locale.format);
            }
            if (newValue !== this.element.val()) {
              this.element.val(newValue).trigger('change');
            }
          }
        },
        remove: function remove() {
          this.container.remove();
          this.element.off('.daterangepicker');
          this.element.removeData();
        }
      };
      $.fn.daterangepicker = function (options, callback) {
        var implementOptions = $.extend(true, {}, $.fn.daterangepicker.defaultOptions, options);
        this.each(function () {
          var el = $(this);
          if (el.data('daterangepicker')) el.data('daterangepicker').remove();
          el.data('daterangepicker', new DateRangePicker(el, implementOptions, callback));
        });
        return this;
      };
      return DateRangePicker;
    });
  })(daterangepicker);

  var ComponentDateRangeFilter = function () {
    var today = moment();
    function setDateRange(optionElem, startDate, endDate) {
      var componentWrapperElem = optionElem.closest('.filter-daterange');
      componentWrapperElem.find('.filter-daterange__startdate').val(startDate.format('YYYY-MM-DD'));
      componentWrapperElem.find('.filter-daterange__enddate').val(endDate.format('YYYY-MM-DD'));
      componentWrapperElem.find('.js__fdaterange-input').val("".concat(startDate.format('MM-DD-YYYY'), " to ").concat(endDate.format('MM-DD-YYYY'))).trigger('change');
      componentWrapperElem.removeClass('open');
    }
    var optionCustomRangeClickHandler = function optionCustomRangeClickHandler(optionElem) {
      var componentWrapperElem = optionElem.closest('.filter-daterange');
      setDateRangeLabel(optionElem, "Custom range");
      var rangeInput = componentWrapperElem.find('.js__filter-daterange__custom');
      rangeInput.daterangepicker({
        startDate: moment().subtract(2, 'weeks'),
        endDate: today,
        opens: 'left',
        "autoApply": true,
        "locale": {
          "format": "MM/DD/YYYY",
          "separator": " - ",
          "applyLabel": "Apply",
          "cancelLabel": "Cancel",
          "fromLabel": "From",
          "toLabel": "To",
          "customRangeLabel": "Custom",
          "weekLabel": "W",
          "daysOfWeek": ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
          "monthNames": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
          "firstDay": 0
        },
        autoUpdateInput: false,
        linkedCalendars: false,
        alwaysShowCalendars: true
      }, function (start, end) {
        setDateRange(optionElem, start, end);
      }).trigger('click');
      return;
    };
    var rangeInputClickHandler = function rangeInputClickHandler(input) {
      var componentWrapperElem = input.closest('.filter-daterange');
      componentWrapperElem.addClass('open');
    };
    var arrowClickHandler = function arrowClickHandler(elem) {
      var componentWrapperElem = elem.closest('.filter-daterange');
      componentWrapperElem.removeClass('open');
    };
    var setDateRangeLabel = function setDateRangeLabel(optionElem, text) {
      optionElem.closest('.filter-daterange').find('.js__filter-daterange').text(text);
    };
    var optionClickHandler = function optionClickHandler(optionElem) {
      var option = optionElem.data('value');
      var startDate, endDate;
      switch (option) {
        case 'last_30_day':
          startDate = moment().subtract(30, 'days');
          endDate = today;
          setDateRangeLabel(optionElem, "Last 30 days");
          break;
        case 'last_year':
          startDate = moment().subtract(1, 'year');
          endDate = today;
          setDateRangeLabel(optionElem, "Last year");
          break;
        case 'month_to_date':
          startDate = moment().startOf('month');
          endDate = today;
          setDateRangeLabel(optionElem, "Month-to-date");
          break;
        case 'year_to_date':
          startDate = moment().startOf('year');
          endDate = today;
          setDateRangeLabel(optionElem, "Year-to-date");
          break;
      }
      setDateRange(optionElem, startDate, endDate);
    };
    var init = function init(componentWrapperElem) {
      var optionItems = componentWrapperElem.find('.js__fdaterange-list-item');
      var optionCustomRange = componentWrapperElem.find('.js__fdaterange-custom-range');
      var rangeInput = componentWrapperElem.find('.js__fdaterange-input');
      var arrow = componentWrapperElem.find('.js__fdaterange-arrow');
      optionItems.on('click', function (e) {
        optionClickHandler($(this));
      });
      optionCustomRange.on('click', function (e) {
        optionCustomRangeClickHandler($(this));
      });
      rangeInput.on('click', function (e) {
        rangeInputClickHandler($(this));
      });
      arrow.on('click', function (e) {
        arrowClickHandler($(this));
      });
      $(document).on('click', function (event) {
        if (!$(event.target).closest('.filter-daterange').length && !$(event.target).closest('.daterangepicker').length) {
          componentWrapperElem.removeClass('open');
        }
      });
    };
    return {
      init: init
    };
  }();

  var AddonTooltips = function () {
    var init = function init(elemSelector) {
      $(elemSelector);
      //Data

      tippy(elemSelector, {
        arrow: true,
        allowHTML: true,
        followCursor: true
      });
    };
    return {
      init: init
    };
  }();

  var ProfileEditForm = /*#__PURE__*/_createClass(function ProfileEditForm() {
    var _this = this;
    _classCallCheck(this, ProfileEditForm);
    _defineProperty(this, "switchChangePasswordPeriodSelect", function (selectStatus) {
      var periodSelect = $('.js__profile-form-passperiod .js__select2');
      periodSelect.select2('destroy');
      var options = {
        theme: "bootstrap-5",
        width: $(_this).data('width') ? $(_this).data('width') : $(_this).hasClass('w-100') ? '100%' : 'style',
        placeholder: $(_this).data('placeholder'),
        minimumResultsForSearch: Infinity
      };
      if (selectStatus) {
        $('.js__profile-form-passperiod').removeClass('disabled');
        periodSelect.prop('disabled', false);
      } else {
        $('.js__profile-form-passperiod').addClass('disabled');
        periodSelect.prop('disabled', false);
        options = _objectSpread2(_objectSpread2({}, options), {}, {
          disabled: true
        });
      }
      periodSelect.select2(options);
    });
    _defineProperty(this, "rebuildStateSelect", function (value) {
      var stateSelect = $('.js__profile-form-state .js__select2');
      var zipPostalInput = $('#zip_code');
      if (value) {
        var zipMask = "99999[-9999]";
        var postalMask = "A9A 9A9";
        zipPostalInput.inputmask("remove");
        stateSelect.select2('destroy');
        stateSelect.html('');
        var options = [];
        if (value == 'US') {
          options = statesGlobal;
          zipPostalInput.inputmask({
            mask: zipMask,
            placeholder: "_"
          });
        }
        if (value == 'CA') {
          options = provincesGlobal;
          zipPostalInput.inputmask({
            mask: postalMask,
            placeholder: "_"
          });
        }
        stateSelect.select2(_defineProperty(_defineProperty({
          theme: "bootstrap-5",
          width: $(_this).data('width') ? $(_this).data('width') : $(_this).hasClass('w-100') ? '100%' : 'style',
          placeholder: $(_this).data('placeholder'),
          minimumResultsForSearch: Infinity
        }, "placeholder", "Select"), "data", options));
      }
    });
    _defineProperty(this, "submitForms", function (e) {
      e.preventDefault();
      var profileForm = $('.js--profile-action');
      var passwordForm = $('.js--updatepass-action');

      // Profile
      var profileFormData = _this.getProfileFormData(profileForm);
      // console.log(ComponentFormWrapper.validate($('.js__profile-form')));
      if (ComponentFormWrapper.validate($('.js__profile-form'))) {
        _this.sendForm(profileForm, profileFormData);
      } else {
        new Toast$1({
          position: ".header .justify-content-end",
          text: 'Please input validate info',
          type: 'error',
          class: 'page-toast'
        });
      }

      // Password
      var _this$getPasswordForm = _this.getPasswordFormData(passwordForm),
        passwordFormData = _this$getPasswordForm.passwordFormData,
        hasValue = _this$getPasswordForm.hasValue;
      if (hasValue) {
        _this.sendForm(passwordForm, passwordFormData);
      }
    });
    _defineProperty(this, "getProfileFormData", function (formElem) {
      var formData = new FormData();
      var phoneInputItiInstance = formElem.find("#phone").data("iti");
      var phoneMobileInputItiInstance = formElem.find("#mobilenumber").data("iti");
      formData.append("first_name", formElem.find("#first_name").val());
      formData.append("last_name", formElem.find("#last_name").val());
      formData.append("employee_id", formElem.find("#employee_id").val());
      formData.append("job_title", formElem.find("#profileJobTitle").val());
      formData.append("phone_number", phoneInputItiInstance.getNumber());
      formData.append("mobile_phone", phoneMobileInputItiInstance.getNumber());
      formData.append("office_name", formElem.find("#office_name").val());
      formData.append("legal_entity_name", formElem.find("#legal_entity_name").val());
      formData.append("address_line_1", formElem.find("#address_line_1").val());
      formData.append("address_line_2", formElem.find("#address_line_2").val());
      formData.append("city", formElem.find("#city").val());
      formData.append("country_a2code", formElem.find("#country").val());
      formData.append("district", formElem.find("#district").val());
      formData.append("zip_code", formElem.find("#zip_code").val());
      formData.append("profile_passperiod_enable", formElem.find("#profile_passperiod-input").is(':checked'));
      formData.append("pass_period", formElem.find("#passPeriod").val());
      formData.append("exclude_notifications_from_header", formElem.find("#deleteNotification").val());
      return formData;
    });
    _defineProperty(this, "getPasswordFormData", function (formElem) {
      var formData = new FormData();
      var current_password = formElem.find("#current_password").val();
      var password = formElem.find("#current_password").val();
      var password_confirm = formElem.find("#current_password").val();
      var hasValue = current_password || password || password_confirm;
      formData.append("id", formElem.find("#user_id").val());
      formData.append("current_password", current_password);
      formData.append("password", password);
      formData.append("password_confirm", password_confirm);
      return {
        formData: formData,
        hasValue: hasValue
      };
    });
    _defineProperty(this, "sendForm", function (formElem, formData) {
      var formUrl = formElem.data('action');
      $.ajax({
        url: SITEURL + formUrl,
        type: "POST",
        headers: {
          "X-CSRF-TOKEN": getCSRFToken()
        },
        data: formData,
        processData: false,
        contentType: false,
        dataType: "json",
        success: function success(data) {
          console.log(data);
          ComponentFormWrapper.showErrors($('.js__profile-form'), data);
          new Toast$1({
            position: ".header .justify-content-end",
            text: 'Personal Profile updated!',
            type: 'successful',
            class: 'page-toast'
          });
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.error("Error:", textStatus, errorThrown);
          ComponentFormWrapper.showErrors($('.js__profile-form'), jqXHR.responseJSON.messages);
          new Toast$1({
            position: ".header .justify-content-end",
            text: 'Please input validate info',
            type: 'error',
            class: 'page-toast'
          });
        }
      });
    });
    var thisWrapper = this;
    $('.js__profile-form-country .js__select2').on('change', function (e) {
      var value = $(this).val();
      thisWrapper.rebuildStateSelect(value);
    });
    $('#profile_passperiod-input').on('change', function (e) {
      var value = $(this).is(':checked');
      thisWrapper.switchChangePasswordPeriodSelect(value);
    });
    $('.js__profile-form').on('submit', function (e) {
      thisWrapper.submitForms(e);
    });
    $('#jsProfileSendAllForms').on('click', function (e) {
      thisWrapper.submitForms(e);
    });
    $('#zip_code').inputmask({
      mask: "99999[-9999]",
      placeholder: "_"
    });
  });

  var JobTitleIntegration = /*#__PURE__*/_createClass(function JobTitleIntegration() {
    _classCallCheck(this, JobTitleIntegration);
    // Handle showing delete modal with correct job title
    $(document).on('click', '.delete-job-title', function () {
      var jobTitle = $(this).data('job-title');
      var id = $(this).data('id'); // Assuming the job title ID is passed via `data-id`
      $('#jobTitleName').text(jobTitle); // Display job title in modal
      $('#jobTitleName').data('id', id); // Store the ID in the modal for reference
      $('#deleteJobTitle').modal('show'); // Show the delete confirmation modal
    });

    // Handle deletion confirmation
    $('#confirmDelete').click(function () {
      var id = $('#jobTitleName').data('id'); // Get the job title ID from the modal
      var jobTitleName = $('#jobTitleName').text();

      // Make AJAX request to delete the job title
      $.ajax({
        url: SITEURL + "job-title/delete/".concat(id),
        // Your backend URL for deleting job titles
        type: "POST",
        headers: {
          "X-CSRF-TOKEN": getCSRFToken()
        },
        dataType: "json",
        success: function success(response) {
          // If the deletion was successful, remove the job title from the list
          $('#job-list-item-' + id).remove();

          // Also remove the job title from the select dropdown
          $('#jobTitleSelect_1 option:contains("' + jobTitleName + '")').remove();

          // Close the modal
          $('#deleteJobTitle').modal('hide');

          // Show success toast
          new Toast$1({
            position: ".offcanvas-end.show .offcanvas-header",
            text: response.message || 'Job title deleted successfully.',
            type: 'successful'
          });
        },
        error: function error(xhr) {
          // Extract the error message from the API response
          var errorMessage = xhr.responseJSON && xhr.responseJSON.messages ? xhr.responseJSON.messages.error : 'Failed to delete job title. Please try again.';

          // Show the error toast
          new Toast$1({
            position: ".offcanvas-end.show .offcanvas-header",
            text: errorMessage,
            type: 'error'
          });
        }
      });
    });

    // Handle the Add to List button click
    $('#addToList').click(function (e) {
      e.preventDefault(); // Prevent form submission

      var jobTitle = $('#jobTitleInput').val(); // Get job title input

      if (jobTitle === '') {
        new Toast$1({
          position: ".offcanvas-end.show .offcanvas-header",
          text: 'Please enter a job title.',
          type: 'error'
        });
        return;
      }
      var formData = new FormData();
      formData.append("job_title", jobTitle);

      // Make AJAX request to add the job title
      $.ajax({
        url: SITEURL + 'job-title/add',
        // Backend URL for adding job titles
        headers: {
          "X-CSRF-TOKEN": getCSRFToken()
        },
        type: "POST",
        data: formData,
        dataType: "json",
        processData: false,
        contentType: false,
        success: function success(response) {
          // Clear the input field
          $('#jobTitleInput').val('');

          // Append the new job title to the list dynamically
          $('#jobTitleList').append("\n                        <tr id=\"job-list-item-".concat(response.id, "\">\n                                <td> ").concat(response.job_title, "</td>\n                                <td class=\"text-end\">\n                                    unassigned\n                                        <button class=\"ms-2 delete-job-title\" type=\"button\" data-bs-target=\"#deleteJobTitle\" data-bs-toggle=\"modal\" \n                                            data-job-title=\"").concat(response.job_title, "\" \n                                            data-id=\"").concat(response.id, "\">\n                                            <svg class=\"icon icon-delete\">\n                                                <use href=\"/assets/themes/default/icon/icons/icons.svg#delete\" />\n                                            </svg>\n                                        </button>\n                                </td>\n                            </tr>\n                    "));

          // Append the new job title to the select dropdown
          var option = "<option value=\"".concat(response.job_title, "\">").concat(response.job_title, "</option>");
          $('#jobTitleSelect_1').append(option);

          // Add this class to all select "Job Title"
          $('.js__select-to-custom-add-job-title .js__select2').append(option).trigger('change');
          $('.js__select-to-custom-add-job-title .js__select2').val(response.job_title).trigger('change');

          // Show the success toast with a message from the API
          new Toast$1({
            position: ".offcanvas-end.show .offcanvas-header",
            text: response.message || 'Job title added successfully.',
            type: 'successful'
          });
        },
        error: function error(xhr) {
          // Extract the error message from the API response
          var errorMessage = xhr.responseJSON && xhr.responseJSON.messages ? xhr.responseJSON.messages.error : 'Failed to add job title. Please try again.';

          // Show the error toast
          new Toast$1({
            position: ".offcanvas-end.show .offcanvas-header",
            text: errorMessage,
            type: 'error'
          });
        }
      });
    });

    // Trigger add to list when pressing Enter in the job title input field
    $('#jobTitleInput').on('keydown', function (e) {
      if (e.key === 'Enter') {
        e.preventDefault(); // Prevent default form submission
        $('#addToList').click(); // Trigger the add to list function
      }
    });
  });

  function inputNumber() {
    var numberInputs = document.querySelectorAll(".js-input-number");
    if (!numberInputs.length) return;
    numberInputs.forEach(function (input) {
      input.addEventListener("input", function () {
        this.value = this.value.replace(/[^0-9]/g, "");
      });
    });
  }
  function cardInputMask() {
    var cardInputs = document.querySelectorAll(".js-card-input");
    cardInputs.forEach(function (input) {
      var form = input.closest("form");
      var numberPattern = /^\d{0,16}$/g;
      var numberSeparator = "    ";
      var numberInputOldValue;
      var numberInputOldCursor;
      var mask = function mask(value, limit, separator) {
        var output = [];
        for (var i = 0; i < value.length; i++) {
          if (i !== 0 && i % limit === 0) {
            output.push(separator);
          }
          output.push(value[i]);
        }
        return output.join("");
      };
      var unmask = function unmask(value) {
        return value.replace(/[^\d]/g, "");
      };
      var checkSeparator = function checkSeparator(position, interval) {
        return Math.floor(position / (interval + 1));
      };
      var numberInputKeyDownHandler = function numberInputKeyDownHandler(e) {
        var el = e.target;
        numberInputOldValue = el.value;
        numberInputOldCursor = el.selectionEnd;
      };
      var showActiveCard = function showActiveCard(value) {
        var cardType = "";
        var cardTypePatterns = {
          visa: /^4/,
          mastercard: /^5/,
          amex: /^3[47]/,
          undefined: /(^1|^2|^7|^8|^9|^0)/
        };
        for (var cardTypePattern in cardTypePatterns) {
          if (cardTypePatterns[cardTypePattern].test(value)) {
            cardType = cardTypePattern;
            break;
          }
        }
        var cardTypeInput = form.querySelector(".js-card-type-input");
        if (cardTypeInput) cardTypeInput.value = cardType || "undefined";
        var activeCardType = form.querySelector(".input-card-type__item.active");
        var newActiveCardType = form.querySelector(".input-card-type__item--".concat(cardType));
        if (activeCardType) activeCardType.classList.remove("active");
        if (newActiveCardType) newActiveCardType.classList.add("active");
      };
      var numberInputInputHandler = function numberInputInputHandler(e) {
        var el = e.target;
        var newValue = unmask(el.value);
        var newCursorPosition;
        if (newValue.match(numberPattern)) {
          newValue = mask(newValue, 4, numberSeparator);
          newCursorPosition = numberInputOldCursor - checkSeparator(numberInputOldCursor, 4) + checkSeparator(numberInputOldCursor + (newValue.length - numberInputOldValue.length), 4) + (unmask(newValue).length - unmask(numberInputOldValue).length) + (numberSeparator.length - 1);
          el.value = newValue !== "" ? newValue : "";
        } else {
          el.value = numberInputOldValue;
          newCursorPosition = numberInputOldCursor;
        }
        el.setSelectionRange(newCursorPosition, newCursorPosition);
        showActiveCard(el.value);
      };
      input.addEventListener("keydown", numberInputKeyDownHandler);
      input.addEventListener("input", numberInputInputHandler);
    });
  }

  var OverviewIntegration = /*#__PURE__*/function () {
    function OverviewIntegration() {
      _classCallCheck(this, OverviewIntegration);
      var classWrapper = this;
      $("#overviewDateRange").on('change', function () {
        var start_date = $("#overviewDateRange_start").val();
        var end_date = $("#overviewDateRange_end").val();
        var url = $("#overviewWidgets").data('url');
        $.ajax({
          url: url,
          headers: {
            'X-CSRF-TOKEN': getCSRFToken()
          },
          method: 'POST',
          data: {
            start_date: start_date,
            end_date: end_date
          },
          success: function success(response) {
            $("#overviewWidgets").replaceWith(response.widgets);
          },
          error: function error(_error) {
            console.log(_error);
          }
        });
      });
      classWrapper.updateTabCounters();
      $(document).on('DOMSubtreeModified', '#OverviewResentCasesTabContent', function () {
        classWrapper.updateTabCounters();
      });
    }
    return _createClass(OverviewIntegration, [{
      key: "updateTabCounters",
      value: function updateTabCounters() {
        $('#OverviewResentCasesTabContent .tab-pane').each(function () {
          var $tabPane = $(this);
          var itemCount = $tabPane.find('span.new-item').length;
          var targetId = '#' + $tabPane.attr('id');
          var $tabButton = $('.nav-link[data-bs-target="' + targetId + '"]');
          $tabButton.find('.counter').remove();
          if (itemCount > 0) {
            $tabButton.append('<span class="counter">' + itemCount + '</span>');
          }
        });
      }
    }]);
  }();

  $(document).ready(function () {
    console.log("jQuery is working!");
    $('.js-additional-btn.show-pass').on('click', function (e) {
      console.log('click kk');
      e.preventDefault();
      $(this).toggleClass('showed');
      var input = $(this).closest('.form-field__input-wrap').find('.js-field-input');
      if (input.attr("type") === 'password') {
        input.attr("type", "text");
      } else {
        input.attr("type", "password");
      }
    });
    $(document).on('click', '[data-bs-toggle="offcanvas"]', function () {
      var targetCanvasId = $(this).attr('data-bs-target');
      var returnTarget = $(this).attr('data-bs-return');
      var $canvas = $(targetCanvasId);
      var $backButton = $canvas.find('.offcanvas-title button');
      if ($backButton.length > 0 && returnTarget) {
        if (returnTarget === 'close') {
          $backButton.attr('data-bs-target', '');
          $backButton.attr('aria-controls', '');
          $backButton.removeAttr('data-bs-toggle');
        } else if (returnTarget.startsWith('#')) {
          $backButton.attr('data-bs-target', returnTarget);
          $backButton.attr('aria-controls', returnTarget.replace('#', ''));
          $backButton.attr('data-bs-toggle', 'offcanvas');
          $backButton.removeAttr('aria-label');
          $backButton.removeAttr('data-bs-dismiss');
        }
      }
    });

    // select all checkbox
    $('#select-all').click(function (event) {
      if (this.checked) {
        // Iterate each checkbox
        $('.user').each(function () {
          this.checked = true;
        });
      } else {
        $('.user').each(function () {
          this.checked = false;
        });
      }
    });
    $('.js-field-input[name="password"]').on('input', function (e) {
      //console.log('test password')
      checkValidationPasswordRules(this);
    });
    function checkValidationPasswordRules(input) {
      var form = $(input).closest('.js-form');
      if (!form || !input) return;
      var value = $(input).val();
      var lengthCheck = value.length >= 8;
      var uppercaseCheck = /[A-Z]/.test(value);
      var numberCheck = /\d/.test(value);
      var rulesList = form.find(".js-validation-item");
      var showValidationList = function showValidationList() {
        $('.js__password-recommendation').addClass('d-none');
        $('.js__password-validation_list').removeClass('d-none');
      };
      var hideValidationList = function hideValidationList() {
        $('.js__password-validation_list').addClass('d-none');
        $('.js__password-recommendation').removeClass('d-none');
      };
      if (value) {
        showValidationList();
      } else {
        hideValidationList();
      }
      if (rulesList.length) {
        rulesList.each(function () {
          var validationType = $(this).data("validation");
          var isValid = false;
          switch (validationType) {
            case 'length':
              isValid = lengthCheck;
              break;
            case 'uppercase':
              isValid = uppercaseCheck;
              break;
            case 'number':
              isValid = numberCheck;
              break;
          }
          $(this).toggleClass("valid", isValid);
        });
      }
    }
    ComponentSecurityCode.init();
    ComponentTextInput.init($('.form-field'));
    ComponentTermsCheckbox.init();
    ComponentDropdownSelect2.init($('.component__dropdown2'));
    ComponentItiDropdown.init($('.component__itidropdown'));
    ComponentAutocomplete.init($('.component__autocomplete'));
    ComponentDateRangeFilter.init($('.filter-daterange'));
    AddonTooltips.init('.jsAddon__tooltip');
    inputNumber(); // init inputs only with numbers
    cardInputMask(); // init mask for card inputs

    //landing
    var headerNavigationTrigger = document.querySelector(".js-header-menu-trigger");
    if (headerNavigationTrigger) {
      new HeaderNavigation(headerNavigationTrigger);
    }
    var isHomePage = document.querySelector(".js-index-page");
    if (isHomePage) {
      new HeaderLinksScroll(isHomePage);
    }
    var feedbackTrigger = document.querySelector(".js-feedback-trigger");
    if (feedbackTrigger) {
      new FeedbackTarget(feedbackTrigger);
    }
    var accordionWrap = document.querySelector(".js-faq-section-accordion");
    if (accordionWrap) {
      new FAQAccordion(accordionWrap);
    }
    var feedbackForm = document.querySelector(".js-feedback-section-form");
    if (feedbackForm) {
      new FeedbackForm(feedbackForm);
    }
    var fixedHeader = document.querySelector(".landing-header.js-fixed-header");
    if (fixedHeader) {
      new Header();
    }
    var swiperEl = document.querySelector(".swiper");
    if (swiperEl) {
      new Swiper(".swiper", {
        modules: [Navigation],
        navigation: {
          nextEl: ".swiper-button-next",
          prevEl: ".swiper-button-prev"
        },
        slidesPerView: 1
      });
    }
    // end lending

    // Cases page
    var CasesTabContent = document.querySelector("#CasesTabContent");
    if (CasesTabContent) {
      new CasesIntegration();
      updateTotalResults();
    }

    // Transactions page
    var transactionsPage = document.querySelector("#transactionsPage");
    if (transactionsPage) {
      new TransactionsIntegration();
      updateTotalResults();
    }

    // User Management page
    var userManagementPage = document.querySelector("#userManagementPage");
    if (userManagementPage) {
      new UserManagementIntegration();
      updateTotalResults();
    }

    // Profile form
    var profileForm = $('.js__profile-form');
    if (profileForm.length) {
      new ProfileEditForm();
    }
    var editUserDetail = $('.edit-user-details__offcanvas');
    if (editUserDetail.length) {
      new EditUserOffcanvas();
    }

    // Edit Job Title
    var editJobTitle = document.querySelector("#EditJobTitle");
    if (editJobTitle) {
      new JobTitleIntegration();
    }
    var overViewResentCases = document.querySelector("#OverviewResentCasesTabContent");
    if (overViewResentCases) {
      new OverviewIntegration();
    }
  });
  window.addEventListener("load", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var searchContainers, tooltipTriggerList, medicalSection, medicalchronologyInstance, uploadInputs, zoomControl, content, updateZoom;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          // search filters init
          searchContainers = document.querySelectorAll(".js-search-filter");
          searchContainers && searchContainers.forEach(function (container) {
            return new SearchFilter(container);
          });
          tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
          _toConsumableArray(tooltipTriggerList).map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
          }); // medcial chronology form
          // upload file
          medicalSection = document.querySelector(".js-medical-chronology-request-section");
          if (medicalSection) {
            medicalchronologyInstance = new MedicalChronologyForm(medicalSection);
          }
          uploadInputs = document.querySelectorAll(".js-upload-file-input");
          if (uploadInputs && uploadInputs.length) {
            uploadInputs.forEach(function (input) {
              return new uploadFileField(input, medicalchronologyInstance);
            });
          }
          zoomControl = document.querySelector("#zoom");
          content = document.querySelector("#myiframe");
          if (zoomControl) {
            updateZoom = function updateZoom() {
              content.style = "--zoom-level: ".concat(zoomControl.value);
            };
            zoomControl.addEventListener("change", updateZoom);
          }

          /* let today = new Date();
           let dd = today.getDate();
           let mm = today.getMonth()+1;
           let yyyy = today.getFullYear();
           if(dd<10){
               dd='0'+dd
           }
           if(mm<10){
               mm='0'+mm
           }
            today = yyyy+'-'+mm+'-'+dd;
           document.getElementById("medical_chronology_request_plaintiff_date_of_incident").setAttribute("max", today);
           document.getElementById("medical_chronology_request_plaintiff_date_of_birth").setAttribute("max", today);*/
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));

})();
